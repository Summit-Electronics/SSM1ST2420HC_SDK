
1_AXIS_F091_Knikker_Demo_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e44  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006f00  08006f00  00016f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe0  08006fe0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006fe0  08006fe0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fe0  08006fe0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031a0  20000070  08007058  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003210  08007058  00023210  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098ea  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a90  00000000  00000000  00029982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002b418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002bca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d408  00000000  00000000  0002c460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a727  00000000  00000000  00049868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaaca  00000000  00000000  00053f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fea59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002248  00000000  00000000  000feaac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006ee8 	.word	0x08006ee8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08006ee8 	.word	0x08006ee8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f000 ff2b 	bl	800125c <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fe7b 	bl	800110c <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 ff1d 	bl	800125c <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ff13 	bl	800125c <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fea3 	bl	8001190 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fe99 	bl	8001190 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_d2uiz>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	2200      	movs	r2, #0
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <__aeabi_d2uiz+0x38>)
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	f7ff ffef 	bl	8000458 <__aeabi_dcmpge>
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <__aeabi_d2uiz+0x1c>
 800047e:	0020      	movs	r0, r4
 8000480:	0029      	movs	r1, r5
 8000482:	f001 fd6b 	bl	8001f5c <__aeabi_d2iz>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <__aeabi_d2uiz+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	0020      	movs	r0, r4
 800048e:	0029      	movs	r1, r5
 8000490:	f001 f9b4 	bl	80017fc <__aeabi_dsub>
 8000494:	f001 fd62 	bl	8001f5c <__aeabi_d2iz>
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	061b      	lsls	r3, r3, #24
 800049c:	469c      	mov	ip, r3
 800049e:	4460      	add	r0, ip
 80004a0:	e7f1      	b.n	8000486 <__aeabi_d2uiz+0x1a>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	41e00000 	.word	0x41e00000

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	000d      	movs	r5, r1
 80004b2:	0004      	movs	r4, r0
 80004b4:	b5c0      	push	{r6, r7, lr}
 80004b6:	001f      	movs	r7, r3
 80004b8:	0011      	movs	r1, r2
 80004ba:	0328      	lsls	r0, r5, #12
 80004bc:	0f62      	lsrs	r2, r4, #29
 80004be:	0a40      	lsrs	r0, r0, #9
 80004c0:	4310      	orrs	r0, r2
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0d52      	lsrs	r2, r2, #21
 80004c6:	00e3      	lsls	r3, r4, #3
 80004c8:	033c      	lsls	r4, r7, #12
 80004ca:	4691      	mov	r9, r2
 80004cc:	0a64      	lsrs	r4, r4, #9
 80004ce:	0ffa      	lsrs	r2, r7, #31
 80004d0:	0f4f      	lsrs	r7, r1, #29
 80004d2:	006e      	lsls	r6, r5, #1
 80004d4:	4327      	orrs	r7, r4
 80004d6:	4692      	mov	sl, r2
 80004d8:	46b8      	mov	r8, r7
 80004da:	0d76      	lsrs	r6, r6, #21
 80004dc:	0fed      	lsrs	r5, r5, #31
 80004de:	00c9      	lsls	r1, r1, #3
 80004e0:	4295      	cmp	r5, r2
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x3e>
 80004e4:	e099      	b.n	800061a <__aeabi_dadd+0x172>
 80004e6:	464c      	mov	r4, r9
 80004e8:	1b34      	subs	r4, r6, r4
 80004ea:	46a4      	mov	ip, r4
 80004ec:	2c00      	cmp	r4, #0
 80004ee:	dc00      	bgt.n	80004f2 <__aeabi_dadd+0x4a>
 80004f0:	e07c      	b.n	80005ec <__aeabi_dadd+0x144>
 80004f2:	464a      	mov	r2, r9
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b8      	b.n	800066c <__aeabi_dadd+0x1c4>
 80004fa:	4ac5      	ldr	r2, [pc, #788]	; (8000810 <__aeabi_dadd+0x368>)
 80004fc:	4296      	cmp	r6, r2
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x5a>
 8000500:	e11c      	b.n	800073c <__aeabi_dadd+0x294>
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	003c      	movs	r4, r7
 8000506:	0412      	lsls	r2, r2, #16
 8000508:	4314      	orrs	r4, r2
 800050a:	46a0      	mov	r8, r4
 800050c:	4662      	mov	r2, ip
 800050e:	2a38      	cmp	r2, #56	; 0x38
 8000510:	dd00      	ble.n	8000514 <__aeabi_dadd+0x6c>
 8000512:	e161      	b.n	80007d8 <__aeabi_dadd+0x330>
 8000514:	2a1f      	cmp	r2, #31
 8000516:	dd00      	ble.n	800051a <__aeabi_dadd+0x72>
 8000518:	e1cc      	b.n	80008b4 <__aeabi_dadd+0x40c>
 800051a:	4664      	mov	r4, ip
 800051c:	2220      	movs	r2, #32
 800051e:	1b12      	subs	r2, r2, r4
 8000520:	4644      	mov	r4, r8
 8000522:	4094      	lsls	r4, r2
 8000524:	000f      	movs	r7, r1
 8000526:	46a1      	mov	r9, r4
 8000528:	4664      	mov	r4, ip
 800052a:	4091      	lsls	r1, r2
 800052c:	40e7      	lsrs	r7, r4
 800052e:	464c      	mov	r4, r9
 8000530:	1e4a      	subs	r2, r1, #1
 8000532:	4191      	sbcs	r1, r2
 8000534:	433c      	orrs	r4, r7
 8000536:	4642      	mov	r2, r8
 8000538:	4321      	orrs	r1, r4
 800053a:	4664      	mov	r4, ip
 800053c:	40e2      	lsrs	r2, r4
 800053e:	1a80      	subs	r0, r0, r2
 8000540:	1a5c      	subs	r4, r3, r1
 8000542:	42a3      	cmp	r3, r4
 8000544:	419b      	sbcs	r3, r3
 8000546:	425f      	negs	r7, r3
 8000548:	1bc7      	subs	r7, r0, r7
 800054a:	023b      	lsls	r3, r7, #8
 800054c:	d400      	bmi.n	8000550 <__aeabi_dadd+0xa8>
 800054e:	e0d0      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000550:	027f      	lsls	r7, r7, #9
 8000552:	0a7f      	lsrs	r7, r7, #9
 8000554:	2f00      	cmp	r7, #0
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0xb2>
 8000558:	e0ff      	b.n	800075a <__aeabi_dadd+0x2b2>
 800055a:	0038      	movs	r0, r7
 800055c:	f001 fd8a 	bl	8002074 <__clzsi2>
 8000560:	0001      	movs	r1, r0
 8000562:	3908      	subs	r1, #8
 8000564:	2320      	movs	r3, #32
 8000566:	0022      	movs	r2, r4
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	408f      	lsls	r7, r1
 800056c:	40da      	lsrs	r2, r3
 800056e:	408c      	lsls	r4, r1
 8000570:	4317      	orrs	r7, r2
 8000572:	42b1      	cmp	r1, r6
 8000574:	da00      	bge.n	8000578 <__aeabi_dadd+0xd0>
 8000576:	e0ff      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000578:	1b89      	subs	r1, r1, r6
 800057a:	1c4b      	adds	r3, r1, #1
 800057c:	2b1f      	cmp	r3, #31
 800057e:	dd00      	ble.n	8000582 <__aeabi_dadd+0xda>
 8000580:	e0a8      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000582:	2220      	movs	r2, #32
 8000584:	0039      	movs	r1, r7
 8000586:	1ad2      	subs	r2, r2, r3
 8000588:	0020      	movs	r0, r4
 800058a:	4094      	lsls	r4, r2
 800058c:	4091      	lsls	r1, r2
 800058e:	40d8      	lsrs	r0, r3
 8000590:	1e62      	subs	r2, r4, #1
 8000592:	4194      	sbcs	r4, r2
 8000594:	40df      	lsrs	r7, r3
 8000596:	2600      	movs	r6, #0
 8000598:	4301      	orrs	r1, r0
 800059a:	430c      	orrs	r4, r1
 800059c:	0763      	lsls	r3, r4, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	4023      	ands	r3, r4
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d23      	adds	r3, r4, #4
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	41a4      	sbcs	r4, r4
 80005ae:	4264      	negs	r4, r4
 80005b0:	193f      	adds	r7, r7, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	023b      	lsls	r3, r7, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e09e      	b.n	80006f8 <__aeabi_dadd+0x250>
 80005ba:	4b95      	ldr	r3, [pc, #596]	; (8000810 <__aeabi_dadd+0x368>)
 80005bc:	3601      	adds	r6, #1
 80005be:	429e      	cmp	r6, r3
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0b7      	b.n	8000734 <__aeabi_dadd+0x28c>
 80005c4:	4a93      	ldr	r2, [pc, #588]	; (8000814 <__aeabi_dadd+0x36c>)
 80005c6:	08e4      	lsrs	r4, r4, #3
 80005c8:	4017      	ands	r7, r2
 80005ca:	077b      	lsls	r3, r7, #29
 80005cc:	0571      	lsls	r1, r6, #21
 80005ce:	027f      	lsls	r7, r7, #9
 80005d0:	4323      	orrs	r3, r4
 80005d2:	0b3f      	lsrs	r7, r7, #12
 80005d4:	0d4a      	lsrs	r2, r1, #21
 80005d6:	0512      	lsls	r2, r2, #20
 80005d8:	433a      	orrs	r2, r7
 80005da:	07ed      	lsls	r5, r5, #31
 80005dc:	432a      	orrs	r2, r5
 80005de:	0018      	movs	r0, r3
 80005e0:	0011      	movs	r1, r2
 80005e2:	bce0      	pop	{r5, r6, r7}
 80005e4:	46ba      	mov	sl, r7
 80005e6:	46b1      	mov	r9, r6
 80005e8:	46a8      	mov	r8, r5
 80005ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ec:	2c00      	cmp	r4, #0
 80005ee:	d04b      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 80005f0:	464c      	mov	r4, r9
 80005f2:	1ba4      	subs	r4, r4, r6
 80005f4:	46a4      	mov	ip, r4
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d000      	beq.n	80005fc <__aeabi_dadd+0x154>
 80005fa:	e123      	b.n	8000844 <__aeabi_dadd+0x39c>
 80005fc:	0004      	movs	r4, r0
 80005fe:	431c      	orrs	r4, r3
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x15c>
 8000602:	e1af      	b.n	8000964 <__aeabi_dadd+0x4bc>
 8000604:	4662      	mov	r2, ip
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e215      	b.n	8000a3a <__aeabi_dadd+0x592>
 800060e:	4d80      	ldr	r5, [pc, #512]	; (8000810 <__aeabi_dadd+0x368>)
 8000610:	45ac      	cmp	ip, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e1c8      	b.n	80009a8 <__aeabi_dadd+0x500>
 8000616:	46a4      	mov	ip, r4
 8000618:	e11b      	b.n	8000852 <__aeabi_dadd+0x3aa>
 800061a:	464a      	mov	r2, r9
 800061c:	1ab2      	subs	r2, r6, r2
 800061e:	4694      	mov	ip, r2
 8000620:	2a00      	cmp	r2, #0
 8000622:	dc00      	bgt.n	8000626 <__aeabi_dadd+0x17e>
 8000624:	e0ac      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000626:	464a      	mov	r2, r9
 8000628:	2a00      	cmp	r2, #0
 800062a:	d043      	beq.n	80006b4 <__aeabi_dadd+0x20c>
 800062c:	4a78      	ldr	r2, [pc, #480]	; (8000810 <__aeabi_dadd+0x368>)
 800062e:	4296      	cmp	r6, r2
 8000630:	d100      	bne.n	8000634 <__aeabi_dadd+0x18c>
 8000632:	e1af      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	003c      	movs	r4, r7
 8000638:	0412      	lsls	r2, r2, #16
 800063a:	4314      	orrs	r4, r2
 800063c:	46a0      	mov	r8, r4
 800063e:	4662      	mov	r2, ip
 8000640:	2a38      	cmp	r2, #56	; 0x38
 8000642:	dc67      	bgt.n	8000714 <__aeabi_dadd+0x26c>
 8000644:	2a1f      	cmp	r2, #31
 8000646:	dc00      	bgt.n	800064a <__aeabi_dadd+0x1a2>
 8000648:	e15f      	b.n	800090a <__aeabi_dadd+0x462>
 800064a:	4647      	mov	r7, r8
 800064c:	3a20      	subs	r2, #32
 800064e:	40d7      	lsrs	r7, r2
 8000650:	4662      	mov	r2, ip
 8000652:	2a20      	cmp	r2, #32
 8000654:	d005      	beq.n	8000662 <__aeabi_dadd+0x1ba>
 8000656:	4664      	mov	r4, ip
 8000658:	2240      	movs	r2, #64	; 0x40
 800065a:	1b12      	subs	r2, r2, r4
 800065c:	4644      	mov	r4, r8
 800065e:	4094      	lsls	r4, r2
 8000660:	4321      	orrs	r1, r4
 8000662:	1e4a      	subs	r2, r1, #1
 8000664:	4191      	sbcs	r1, r2
 8000666:	000c      	movs	r4, r1
 8000668:	433c      	orrs	r4, r7
 800066a:	e057      	b.n	800071c <__aeabi_dadd+0x274>
 800066c:	003a      	movs	r2, r7
 800066e:	430a      	orrs	r2, r1
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x1cc>
 8000672:	e105      	b.n	8000880 <__aeabi_dadd+0x3d8>
 8000674:	0022      	movs	r2, r4
 8000676:	3a01      	subs	r2, #1
 8000678:	2c01      	cmp	r4, #1
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x1d6>
 800067c:	e182      	b.n	8000984 <__aeabi_dadd+0x4dc>
 800067e:	4c64      	ldr	r4, [pc, #400]	; (8000810 <__aeabi_dadd+0x368>)
 8000680:	45a4      	cmp	ip, r4
 8000682:	d05b      	beq.n	800073c <__aeabi_dadd+0x294>
 8000684:	4694      	mov	ip, r2
 8000686:	e741      	b.n	800050c <__aeabi_dadd+0x64>
 8000688:	4c63      	ldr	r4, [pc, #396]	; (8000818 <__aeabi_dadd+0x370>)
 800068a:	1c77      	adds	r7, r6, #1
 800068c:	4227      	tst	r7, r4
 800068e:	d000      	beq.n	8000692 <__aeabi_dadd+0x1ea>
 8000690:	e0c4      	b.n	800081c <__aeabi_dadd+0x374>
 8000692:	0004      	movs	r4, r0
 8000694:	431c      	orrs	r4, r3
 8000696:	2e00      	cmp	r6, #0
 8000698:	d000      	beq.n	800069c <__aeabi_dadd+0x1f4>
 800069a:	e169      	b.n	8000970 <__aeabi_dadd+0x4c8>
 800069c:	2c00      	cmp	r4, #0
 800069e:	d100      	bne.n	80006a2 <__aeabi_dadd+0x1fa>
 80006a0:	e1bf      	b.n	8000a22 <__aeabi_dadd+0x57a>
 80006a2:	4644      	mov	r4, r8
 80006a4:	430c      	orrs	r4, r1
 80006a6:	d000      	beq.n	80006aa <__aeabi_dadd+0x202>
 80006a8:	e1d0      	b.n	8000a4c <__aeabi_dadd+0x5a4>
 80006aa:	0742      	lsls	r2, r0, #29
 80006ac:	08db      	lsrs	r3, r3, #3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	08c0      	lsrs	r0, r0, #3
 80006b2:	e029      	b.n	8000708 <__aeabi_dadd+0x260>
 80006b4:	003a      	movs	r2, r7
 80006b6:	430a      	orrs	r2, r1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x214>
 80006ba:	e170      	b.n	800099e <__aeabi_dadd+0x4f6>
 80006bc:	4662      	mov	r2, ip
 80006be:	4664      	mov	r4, ip
 80006c0:	3a01      	subs	r2, #1
 80006c2:	2c01      	cmp	r4, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x220>
 80006c6:	e0e0      	b.n	800088a <__aeabi_dadd+0x3e2>
 80006c8:	4c51      	ldr	r4, [pc, #324]	; (8000810 <__aeabi_dadd+0x368>)
 80006ca:	45a4      	cmp	ip, r4
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e161      	b.n	8000994 <__aeabi_dadd+0x4ec>
 80006d0:	4694      	mov	ip, r2
 80006d2:	e7b4      	b.n	800063e <__aeabi_dadd+0x196>
 80006d4:	003a      	movs	r2, r7
 80006d6:	391f      	subs	r1, #31
 80006d8:	40ca      	lsrs	r2, r1
 80006da:	0011      	movs	r1, r2
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d003      	beq.n	80006e8 <__aeabi_dadd+0x240>
 80006e0:	2240      	movs	r2, #64	; 0x40
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	409f      	lsls	r7, r3
 80006e6:	433c      	orrs	r4, r7
 80006e8:	1e63      	subs	r3, r4, #1
 80006ea:	419c      	sbcs	r4, r3
 80006ec:	2700      	movs	r7, #0
 80006ee:	2600      	movs	r6, #0
 80006f0:	430c      	orrs	r4, r1
 80006f2:	0763      	lsls	r3, r4, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x250>
 80006f6:	e753      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006f8:	46b4      	mov	ip, r6
 80006fa:	08e4      	lsrs	r4, r4, #3
 80006fc:	077b      	lsls	r3, r7, #29
 80006fe:	4323      	orrs	r3, r4
 8000700:	08f8      	lsrs	r0, r7, #3
 8000702:	4a43      	ldr	r2, [pc, #268]	; (8000810 <__aeabi_dadd+0x368>)
 8000704:	4594      	cmp	ip, r2
 8000706:	d01d      	beq.n	8000744 <__aeabi_dadd+0x29c>
 8000708:	4662      	mov	r2, ip
 800070a:	0307      	lsls	r7, r0, #12
 800070c:	0552      	lsls	r2, r2, #21
 800070e:	0b3f      	lsrs	r7, r7, #12
 8000710:	0d52      	lsrs	r2, r2, #21
 8000712:	e760      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000714:	4644      	mov	r4, r8
 8000716:	430c      	orrs	r4, r1
 8000718:	1e62      	subs	r2, r4, #1
 800071a:	4194      	sbcs	r4, r2
 800071c:	18e4      	adds	r4, r4, r3
 800071e:	429c      	cmp	r4, r3
 8000720:	419b      	sbcs	r3, r3
 8000722:	425f      	negs	r7, r3
 8000724:	183f      	adds	r7, r7, r0
 8000726:	023b      	lsls	r3, r7, #8
 8000728:	d5e3      	bpl.n	80006f2 <__aeabi_dadd+0x24a>
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <__aeabi_dadd+0x368>)
 800072c:	3601      	adds	r6, #1
 800072e:	429e      	cmp	r6, r3
 8000730:	d000      	beq.n	8000734 <__aeabi_dadd+0x28c>
 8000732:	e0b5      	b.n	80008a0 <__aeabi_dadd+0x3f8>
 8000734:	0032      	movs	r2, r6
 8000736:	2700      	movs	r7, #0
 8000738:	2300      	movs	r3, #0
 800073a:	e74c      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800073c:	0742      	lsls	r2, r0, #29
 800073e:	08db      	lsrs	r3, r3, #3
 8000740:	4313      	orrs	r3, r2
 8000742:	08c0      	lsrs	r0, r0, #3
 8000744:	001a      	movs	r2, r3
 8000746:	4302      	orrs	r2, r0
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x2a4>
 800074a:	e1e1      	b.n	8000b10 <__aeabi_dadd+0x668>
 800074c:	2780      	movs	r7, #128	; 0x80
 800074e:	033f      	lsls	r7, r7, #12
 8000750:	4307      	orrs	r7, r0
 8000752:	033f      	lsls	r7, r7, #12
 8000754:	4a2e      	ldr	r2, [pc, #184]	; (8000810 <__aeabi_dadd+0x368>)
 8000756:	0b3f      	lsrs	r7, r7, #12
 8000758:	e73d      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800075a:	0020      	movs	r0, r4
 800075c:	f001 fc8a 	bl	8002074 <__clzsi2>
 8000760:	0001      	movs	r1, r0
 8000762:	3118      	adds	r1, #24
 8000764:	291f      	cmp	r1, #31
 8000766:	dc00      	bgt.n	800076a <__aeabi_dadd+0x2c2>
 8000768:	e6fc      	b.n	8000564 <__aeabi_dadd+0xbc>
 800076a:	3808      	subs	r0, #8
 800076c:	4084      	lsls	r4, r0
 800076e:	0027      	movs	r7, r4
 8000770:	2400      	movs	r4, #0
 8000772:	42b1      	cmp	r1, r6
 8000774:	db00      	blt.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e6ff      	b.n	8000578 <__aeabi_dadd+0xd0>
 8000778:	4a26      	ldr	r2, [pc, #152]	; (8000814 <__aeabi_dadd+0x36c>)
 800077a:	1a76      	subs	r6, r6, r1
 800077c:	4017      	ands	r7, r2
 800077e:	e70d      	b.n	800059c <__aeabi_dadd+0xf4>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d02f      	beq.n	80007e4 <__aeabi_dadd+0x33c>
 8000784:	464a      	mov	r2, r9
 8000786:	1b92      	subs	r2, r2, r6
 8000788:	4694      	mov	ip, r2
 800078a:	2e00      	cmp	r6, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_dadd+0x2e8>
 800078e:	e0ad      	b.n	80008ec <__aeabi_dadd+0x444>
 8000790:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <__aeabi_dadd+0x368>)
 8000792:	4591      	cmp	r9, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x2f0>
 8000796:	e10f      	b.n	80009b8 <__aeabi_dadd+0x510>
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0412      	lsls	r2, r2, #16
 800079c:	4310      	orrs	r0, r2
 800079e:	4662      	mov	r2, ip
 80007a0:	2a38      	cmp	r2, #56	; 0x38
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_dadd+0x2fe>
 80007a4:	e10f      	b.n	80009c6 <__aeabi_dadd+0x51e>
 80007a6:	2a1f      	cmp	r2, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x304>
 80007aa:	e180      	b.n	8000aae <__aeabi_dadd+0x606>
 80007ac:	4664      	mov	r4, ip
 80007ae:	2220      	movs	r2, #32
 80007b0:	001e      	movs	r6, r3
 80007b2:	1b12      	subs	r2, r2, r4
 80007b4:	4667      	mov	r7, ip
 80007b6:	0004      	movs	r4, r0
 80007b8:	4093      	lsls	r3, r2
 80007ba:	4094      	lsls	r4, r2
 80007bc:	40fe      	lsrs	r6, r7
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	4193      	sbcs	r3, r2
 80007c2:	40f8      	lsrs	r0, r7
 80007c4:	4334      	orrs	r4, r6
 80007c6:	431c      	orrs	r4, r3
 80007c8:	4480      	add	r8, r0
 80007ca:	1864      	adds	r4, r4, r1
 80007cc:	428c      	cmp	r4, r1
 80007ce:	41bf      	sbcs	r7, r7
 80007d0:	427f      	negs	r7, r7
 80007d2:	464e      	mov	r6, r9
 80007d4:	4447      	add	r7, r8
 80007d6:	e7a6      	b.n	8000726 <__aeabi_dadd+0x27e>
 80007d8:	4642      	mov	r2, r8
 80007da:	430a      	orrs	r2, r1
 80007dc:	0011      	movs	r1, r2
 80007de:	1e4a      	subs	r2, r1, #1
 80007e0:	4191      	sbcs	r1, r2
 80007e2:	e6ad      	b.n	8000540 <__aeabi_dadd+0x98>
 80007e4:	4c0c      	ldr	r4, [pc, #48]	; (8000818 <__aeabi_dadd+0x370>)
 80007e6:	1c72      	adds	r2, r6, #1
 80007e8:	4222      	tst	r2, r4
 80007ea:	d000      	beq.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a1      	b.n	8000932 <__aeabi_dadd+0x48a>
 80007ee:	0002      	movs	r2, r0
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0fa      	b.n	80009ee <__aeabi_dadd+0x546>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e145      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 80007fe:	003a      	movs	r2, r7
 8000800:	430a      	orrs	r2, r1
 8000802:	d000      	beq.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e146      	b.n	8000a94 <__aeabi_dadd+0x5ec>
 8000806:	0742      	lsls	r2, r0, #29
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	4313      	orrs	r3, r2
 800080c:	08c0      	lsrs	r0, r0, #3
 800080e:	e77b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000810:	000007ff 	.word	0x000007ff
 8000814:	ff7fffff 	.word	0xff7fffff
 8000818:	000007fe 	.word	0x000007fe
 800081c:	4647      	mov	r7, r8
 800081e:	1a5c      	subs	r4, r3, r1
 8000820:	1bc2      	subs	r2, r0, r7
 8000822:	42a3      	cmp	r3, r4
 8000824:	41bf      	sbcs	r7, r7
 8000826:	427f      	negs	r7, r7
 8000828:	46b9      	mov	r9, r7
 800082a:	0017      	movs	r7, r2
 800082c:	464a      	mov	r2, r9
 800082e:	1abf      	subs	r7, r7, r2
 8000830:	023a      	lsls	r2, r7, #8
 8000832:	d500      	bpl.n	8000836 <__aeabi_dadd+0x38e>
 8000834:	e08d      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000836:	0023      	movs	r3, r4
 8000838:	433b      	orrs	r3, r7
 800083a:	d000      	beq.n	800083e <__aeabi_dadd+0x396>
 800083c:	e68a      	b.n	8000554 <__aeabi_dadd+0xac>
 800083e:	2000      	movs	r0, #0
 8000840:	2500      	movs	r5, #0
 8000842:	e761      	b.n	8000708 <__aeabi_dadd+0x260>
 8000844:	4cb4      	ldr	r4, [pc, #720]	; (8000b18 <__aeabi_dadd+0x670>)
 8000846:	45a1      	cmp	r9, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e0ad      	b.n	80009a8 <__aeabi_dadd+0x500>
 800084c:	2480      	movs	r4, #128	; 0x80
 800084e:	0424      	lsls	r4, r4, #16
 8000850:	4320      	orrs	r0, r4
 8000852:	4664      	mov	r4, ip
 8000854:	2c38      	cmp	r4, #56	; 0x38
 8000856:	dc3d      	bgt.n	80008d4 <__aeabi_dadd+0x42c>
 8000858:	4662      	mov	r2, ip
 800085a:	2c1f      	cmp	r4, #31
 800085c:	dd00      	ble.n	8000860 <__aeabi_dadd+0x3b8>
 800085e:	e0b7      	b.n	80009d0 <__aeabi_dadd+0x528>
 8000860:	2520      	movs	r5, #32
 8000862:	001e      	movs	r6, r3
 8000864:	1b2d      	subs	r5, r5, r4
 8000866:	0004      	movs	r4, r0
 8000868:	40ab      	lsls	r3, r5
 800086a:	40ac      	lsls	r4, r5
 800086c:	40d6      	lsrs	r6, r2
 800086e:	40d0      	lsrs	r0, r2
 8000870:	4642      	mov	r2, r8
 8000872:	1e5d      	subs	r5, r3, #1
 8000874:	41ab      	sbcs	r3, r5
 8000876:	4334      	orrs	r4, r6
 8000878:	1a12      	subs	r2, r2, r0
 800087a:	4690      	mov	r8, r2
 800087c:	4323      	orrs	r3, r4
 800087e:	e02c      	b.n	80008da <__aeabi_dadd+0x432>
 8000880:	0742      	lsls	r2, r0, #29
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4313      	orrs	r3, r2
 8000886:	08c0      	lsrs	r0, r0, #3
 8000888:	e73b      	b.n	8000702 <__aeabi_dadd+0x25a>
 800088a:	185c      	adds	r4, r3, r1
 800088c:	429c      	cmp	r4, r3
 800088e:	419b      	sbcs	r3, r3
 8000890:	4440      	add	r0, r8
 8000892:	425b      	negs	r3, r3
 8000894:	18c7      	adds	r7, r0, r3
 8000896:	2601      	movs	r6, #1
 8000898:	023b      	lsls	r3, r7, #8
 800089a:	d400      	bmi.n	800089e <__aeabi_dadd+0x3f6>
 800089c:	e729      	b.n	80006f2 <__aeabi_dadd+0x24a>
 800089e:	2602      	movs	r6, #2
 80008a0:	4a9e      	ldr	r2, [pc, #632]	; (8000b1c <__aeabi_dadd+0x674>)
 80008a2:	0863      	lsrs	r3, r4, #1
 80008a4:	4017      	ands	r7, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	4014      	ands	r4, r2
 80008aa:	431c      	orrs	r4, r3
 80008ac:	07fb      	lsls	r3, r7, #31
 80008ae:	431c      	orrs	r4, r3
 80008b0:	087f      	lsrs	r7, r7, #1
 80008b2:	e673      	b.n	800059c <__aeabi_dadd+0xf4>
 80008b4:	4644      	mov	r4, r8
 80008b6:	3a20      	subs	r2, #32
 80008b8:	40d4      	lsrs	r4, r2
 80008ba:	4662      	mov	r2, ip
 80008bc:	2a20      	cmp	r2, #32
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x424>
 80008c0:	4667      	mov	r7, ip
 80008c2:	2240      	movs	r2, #64	; 0x40
 80008c4:	1bd2      	subs	r2, r2, r7
 80008c6:	4647      	mov	r7, r8
 80008c8:	4097      	lsls	r7, r2
 80008ca:	4339      	orrs	r1, r7
 80008cc:	1e4a      	subs	r2, r1, #1
 80008ce:	4191      	sbcs	r1, r2
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e635      	b.n	8000540 <__aeabi_dadd+0x98>
 80008d4:	4303      	orrs	r3, r0
 80008d6:	1e58      	subs	r0, r3, #1
 80008d8:	4183      	sbcs	r3, r0
 80008da:	1acc      	subs	r4, r1, r3
 80008dc:	42a1      	cmp	r1, r4
 80008de:	41bf      	sbcs	r7, r7
 80008e0:	4643      	mov	r3, r8
 80008e2:	427f      	negs	r7, r7
 80008e4:	4655      	mov	r5, sl
 80008e6:	464e      	mov	r6, r9
 80008e8:	1bdf      	subs	r7, r3, r7
 80008ea:	e62e      	b.n	800054a <__aeabi_dadd+0xa2>
 80008ec:	0002      	movs	r2, r0
 80008ee:	431a      	orrs	r2, r3
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x44c>
 80008f2:	e0bd      	b.n	8000a70 <__aeabi_dadd+0x5c8>
 80008f4:	4662      	mov	r2, ip
 80008f6:	4664      	mov	r4, ip
 80008f8:	3a01      	subs	r2, #1
 80008fa:	2c01      	cmp	r4, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x458>
 80008fe:	e0e5      	b.n	8000acc <__aeabi_dadd+0x624>
 8000900:	4c85      	ldr	r4, [pc, #532]	; (8000b18 <__aeabi_dadd+0x670>)
 8000902:	45a4      	cmp	ip, r4
 8000904:	d058      	beq.n	80009b8 <__aeabi_dadd+0x510>
 8000906:	4694      	mov	ip, r2
 8000908:	e749      	b.n	800079e <__aeabi_dadd+0x2f6>
 800090a:	4664      	mov	r4, ip
 800090c:	2220      	movs	r2, #32
 800090e:	1b12      	subs	r2, r2, r4
 8000910:	4644      	mov	r4, r8
 8000912:	4094      	lsls	r4, r2
 8000914:	000f      	movs	r7, r1
 8000916:	46a1      	mov	r9, r4
 8000918:	4664      	mov	r4, ip
 800091a:	4091      	lsls	r1, r2
 800091c:	40e7      	lsrs	r7, r4
 800091e:	464c      	mov	r4, r9
 8000920:	1e4a      	subs	r2, r1, #1
 8000922:	4191      	sbcs	r1, r2
 8000924:	433c      	orrs	r4, r7
 8000926:	4642      	mov	r2, r8
 8000928:	430c      	orrs	r4, r1
 800092a:	4661      	mov	r1, ip
 800092c:	40ca      	lsrs	r2, r1
 800092e:	1880      	adds	r0, r0, r2
 8000930:	e6f4      	b.n	800071c <__aeabi_dadd+0x274>
 8000932:	4c79      	ldr	r4, [pc, #484]	; (8000b18 <__aeabi_dadd+0x670>)
 8000934:	42a2      	cmp	r2, r4
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x492>
 8000938:	e6fd      	b.n	8000736 <__aeabi_dadd+0x28e>
 800093a:	1859      	adds	r1, r3, r1
 800093c:	4299      	cmp	r1, r3
 800093e:	419b      	sbcs	r3, r3
 8000940:	4440      	add	r0, r8
 8000942:	425f      	negs	r7, r3
 8000944:	19c7      	adds	r7, r0, r7
 8000946:	07fc      	lsls	r4, r7, #31
 8000948:	0849      	lsrs	r1, r1, #1
 800094a:	0016      	movs	r6, r2
 800094c:	430c      	orrs	r4, r1
 800094e:	087f      	lsrs	r7, r7, #1
 8000950:	e6cf      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000952:	1acc      	subs	r4, r1, r3
 8000954:	42a1      	cmp	r1, r4
 8000956:	41bf      	sbcs	r7, r7
 8000958:	4643      	mov	r3, r8
 800095a:	427f      	negs	r7, r7
 800095c:	1a18      	subs	r0, r3, r0
 800095e:	4655      	mov	r5, sl
 8000960:	1bc7      	subs	r7, r0, r7
 8000962:	e5f7      	b.n	8000554 <__aeabi_dadd+0xac>
 8000964:	08c9      	lsrs	r1, r1, #3
 8000966:	077b      	lsls	r3, r7, #29
 8000968:	4655      	mov	r5, sl
 800096a:	430b      	orrs	r3, r1
 800096c:	08f8      	lsrs	r0, r7, #3
 800096e:	e6c8      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000970:	2c00      	cmp	r4, #0
 8000972:	d000      	beq.n	8000976 <__aeabi_dadd+0x4ce>
 8000974:	e081      	b.n	8000a7a <__aeabi_dadd+0x5d2>
 8000976:	4643      	mov	r3, r8
 8000978:	430b      	orrs	r3, r1
 800097a:	d115      	bne.n	80009a8 <__aeabi_dadd+0x500>
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	2500      	movs	r5, #0
 8000980:	0300      	lsls	r0, r0, #12
 8000982:	e6e3      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000984:	1a5c      	subs	r4, r3, r1
 8000986:	42a3      	cmp	r3, r4
 8000988:	419b      	sbcs	r3, r3
 800098a:	1bc7      	subs	r7, r0, r7
 800098c:	425b      	negs	r3, r3
 800098e:	2601      	movs	r6, #1
 8000990:	1aff      	subs	r7, r7, r3
 8000992:	e5da      	b.n	800054a <__aeabi_dadd+0xa2>
 8000994:	0742      	lsls	r2, r0, #29
 8000996:	08db      	lsrs	r3, r3, #3
 8000998:	4313      	orrs	r3, r2
 800099a:	08c0      	lsrs	r0, r0, #3
 800099c:	e6d2      	b.n	8000744 <__aeabi_dadd+0x29c>
 800099e:	0742      	lsls	r2, r0, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	08c0      	lsrs	r0, r0, #3
 80009a6:	e6ac      	b.n	8000702 <__aeabi_dadd+0x25a>
 80009a8:	4643      	mov	r3, r8
 80009aa:	4642      	mov	r2, r8
 80009ac:	08c9      	lsrs	r1, r1, #3
 80009ae:	075b      	lsls	r3, r3, #29
 80009b0:	4655      	mov	r5, sl
 80009b2:	430b      	orrs	r3, r1
 80009b4:	08d0      	lsrs	r0, r2, #3
 80009b6:	e6c5      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009b8:	4643      	mov	r3, r8
 80009ba:	4642      	mov	r2, r8
 80009bc:	075b      	lsls	r3, r3, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	430b      	orrs	r3, r1
 80009c2:	08d0      	lsrs	r0, r2, #3
 80009c4:	e6be      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009c6:	4303      	orrs	r3, r0
 80009c8:	001c      	movs	r4, r3
 80009ca:	1e63      	subs	r3, r4, #1
 80009cc:	419c      	sbcs	r4, r3
 80009ce:	e6fc      	b.n	80007ca <__aeabi_dadd+0x322>
 80009d0:	0002      	movs	r2, r0
 80009d2:	3c20      	subs	r4, #32
 80009d4:	40e2      	lsrs	r2, r4
 80009d6:	0014      	movs	r4, r2
 80009d8:	4662      	mov	r2, ip
 80009da:	2a20      	cmp	r2, #32
 80009dc:	d003      	beq.n	80009e6 <__aeabi_dadd+0x53e>
 80009de:	2540      	movs	r5, #64	; 0x40
 80009e0:	1aad      	subs	r5, r5, r2
 80009e2:	40a8      	lsls	r0, r5
 80009e4:	4303      	orrs	r3, r0
 80009e6:	1e58      	subs	r0, r3, #1
 80009e8:	4183      	sbcs	r3, r0
 80009ea:	4323      	orrs	r3, r4
 80009ec:	e775      	b.n	80008da <__aeabi_dadd+0x432>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d0e2      	beq.n	80009b8 <__aeabi_dadd+0x510>
 80009f2:	003a      	movs	r2, r7
 80009f4:	430a      	orrs	r2, r1
 80009f6:	d0cd      	beq.n	8000994 <__aeabi_dadd+0x4ec>
 80009f8:	0742      	lsls	r2, r0, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	0312      	lsls	r2, r2, #12
 8000a04:	4210      	tst	r0, r2
 8000a06:	d006      	beq.n	8000a16 <__aeabi_dadd+0x56e>
 8000a08:	08fc      	lsrs	r4, r7, #3
 8000a0a:	4214      	tst	r4, r2
 8000a0c:	d103      	bne.n	8000a16 <__aeabi_dadd+0x56e>
 8000a0e:	0020      	movs	r0, r4
 8000a10:	08cb      	lsrs	r3, r1, #3
 8000a12:	077a      	lsls	r2, r7, #29
 8000a14:	4313      	orrs	r3, r2
 8000a16:	0f5a      	lsrs	r2, r3, #29
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	0752      	lsls	r2, r2, #29
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	e690      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a22:	4643      	mov	r3, r8
 8000a24:	430b      	orrs	r3, r1
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x582>
 8000a28:	e709      	b.n	800083e <__aeabi_dadd+0x396>
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	08c9      	lsrs	r1, r1, #3
 8000a30:	075b      	lsls	r3, r3, #29
 8000a32:	4655      	mov	r5, sl
 8000a34:	430b      	orrs	r3, r1
 8000a36:	08d0      	lsrs	r0, r2, #3
 8000a38:	e666      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a3a:	1acc      	subs	r4, r1, r3
 8000a3c:	42a1      	cmp	r1, r4
 8000a3e:	4189      	sbcs	r1, r1
 8000a40:	1a3f      	subs	r7, r7, r0
 8000a42:	4249      	negs	r1, r1
 8000a44:	4655      	mov	r5, sl
 8000a46:	2601      	movs	r6, #1
 8000a48:	1a7f      	subs	r7, r7, r1
 8000a4a:	e57e      	b.n	800054a <__aeabi_dadd+0xa2>
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	1a5c      	subs	r4, r3, r1
 8000a50:	1a87      	subs	r7, r0, r2
 8000a52:	42a3      	cmp	r3, r4
 8000a54:	4192      	sbcs	r2, r2
 8000a56:	4252      	negs	r2, r2
 8000a58:	1abf      	subs	r7, r7, r2
 8000a5a:	023a      	lsls	r2, r7, #8
 8000a5c:	d53d      	bpl.n	8000ada <__aeabi_dadd+0x632>
 8000a5e:	1acc      	subs	r4, r1, r3
 8000a60:	42a1      	cmp	r1, r4
 8000a62:	4189      	sbcs	r1, r1
 8000a64:	4643      	mov	r3, r8
 8000a66:	4249      	negs	r1, r1
 8000a68:	1a1f      	subs	r7, r3, r0
 8000a6a:	4655      	mov	r5, sl
 8000a6c:	1a7f      	subs	r7, r7, r1
 8000a6e:	e595      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a70:	077b      	lsls	r3, r7, #29
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	430b      	orrs	r3, r1
 8000a76:	08f8      	lsrs	r0, r7, #3
 8000a78:	e643      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000a7a:	4644      	mov	r4, r8
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	d130      	bne.n	8000ae4 <__aeabi_dadd+0x63c>
 8000a82:	0742      	lsls	r2, r0, #29
 8000a84:	4313      	orrs	r3, r2
 8000a86:	08c0      	lsrs	r0, r0, #3
 8000a88:	e65c      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a8a:	077b      	lsls	r3, r7, #29
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	08f8      	lsrs	r0, r7, #3
 8000a92:	e639      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a94:	185c      	adds	r4, r3, r1
 8000a96:	429c      	cmp	r4, r3
 8000a98:	419b      	sbcs	r3, r3
 8000a9a:	4440      	add	r0, r8
 8000a9c:	425b      	negs	r3, r3
 8000a9e:	18c7      	adds	r7, r0, r3
 8000aa0:	023b      	lsls	r3, r7, #8
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dadd+0x5fe>
 8000aa4:	e625      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <__aeabi_dadd+0x674>)
 8000aa8:	2601      	movs	r6, #1
 8000aaa:	401f      	ands	r7, r3
 8000aac:	e621      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aae:	0004      	movs	r4, r0
 8000ab0:	3a20      	subs	r2, #32
 8000ab2:	40d4      	lsrs	r4, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	2a20      	cmp	r2, #32
 8000ab8:	d004      	beq.n	8000ac4 <__aeabi_dadd+0x61c>
 8000aba:	2240      	movs	r2, #64	; 0x40
 8000abc:	4666      	mov	r6, ip
 8000abe:	1b92      	subs	r2, r2, r6
 8000ac0:	4090      	lsls	r0, r2
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	4193      	sbcs	r3, r2
 8000ac8:	431c      	orrs	r4, r3
 8000aca:	e67e      	b.n	80007ca <__aeabi_dadd+0x322>
 8000acc:	185c      	adds	r4, r3, r1
 8000ace:	428c      	cmp	r4, r1
 8000ad0:	4189      	sbcs	r1, r1
 8000ad2:	4440      	add	r0, r8
 8000ad4:	4249      	negs	r1, r1
 8000ad6:	1847      	adds	r7, r0, r1
 8000ad8:	e6dd      	b.n	8000896 <__aeabi_dadd+0x3ee>
 8000ada:	0023      	movs	r3, r4
 8000adc:	433b      	orrs	r3, r7
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x63a>
 8000ae0:	e6ad      	b.n	800083e <__aeabi_dadd+0x396>
 8000ae2:	e606      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000ae4:	0744      	lsls	r4, r0, #29
 8000ae6:	4323      	orrs	r3, r4
 8000ae8:	2480      	movs	r4, #128	; 0x80
 8000aea:	08c0      	lsrs	r0, r0, #3
 8000aec:	0324      	lsls	r4, r4, #12
 8000aee:	4220      	tst	r0, r4
 8000af0:	d008      	beq.n	8000b04 <__aeabi_dadd+0x65c>
 8000af2:	4642      	mov	r2, r8
 8000af4:	08d6      	lsrs	r6, r2, #3
 8000af6:	4226      	tst	r6, r4
 8000af8:	d104      	bne.n	8000b04 <__aeabi_dadd+0x65c>
 8000afa:	4655      	mov	r5, sl
 8000afc:	0030      	movs	r0, r6
 8000afe:	08cb      	lsrs	r3, r1, #3
 8000b00:	0751      	lsls	r1, r2, #29
 8000b02:	430b      	orrs	r3, r1
 8000b04:	0f5a      	lsrs	r2, r3, #29
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	0752      	lsls	r2, r2, #29
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	e619      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000b10:	2300      	movs	r3, #0
 8000b12:	4a01      	ldr	r2, [pc, #4]	; (8000b18 <__aeabi_dadd+0x670>)
 8000b14:	001f      	movs	r7, r3
 8000b16:	e55e      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000b18:	000007ff 	.word	0x000007ff
 8000b1c:	ff7fffff 	.word	0xff7fffff

08000b20 <__aeabi_ddiv>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	4657      	mov	r7, sl
 8000b24:	464e      	mov	r6, r9
 8000b26:	4645      	mov	r5, r8
 8000b28:	46de      	mov	lr, fp
 8000b2a:	b5e0      	push	{r5, r6, r7, lr}
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	0005      	movs	r5, r0
 8000b30:	030c      	lsls	r4, r1, #12
 8000b32:	0048      	lsls	r0, r1, #1
 8000b34:	4692      	mov	sl, r2
 8000b36:	001f      	movs	r7, r3
 8000b38:	b085      	sub	sp, #20
 8000b3a:	0b24      	lsrs	r4, r4, #12
 8000b3c:	0d40      	lsrs	r0, r0, #21
 8000b3e:	0fce      	lsrs	r6, r1, #31
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_ddiv+0x26>
 8000b44:	e156      	b.n	8000df4 <__aeabi_ddiv+0x2d4>
 8000b46:	4bd4      	ldr	r3, [pc, #848]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_ddiv+0x2e>
 8000b4c:	e172      	b.n	8000e34 <__aeabi_ddiv+0x314>
 8000b4e:	0f6b      	lsrs	r3, r5, #29
 8000b50:	00e4      	lsls	r4, r4, #3
 8000b52:	431c      	orrs	r4, r3
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	041b      	lsls	r3, r3, #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	4bcf      	ldr	r3, [pc, #828]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b5e:	00ed      	lsls	r5, r5, #3
 8000b60:	469b      	mov	fp, r3
 8000b62:	2300      	movs	r3, #0
 8000b64:	4699      	mov	r9, r3
 8000b66:	4483      	add	fp, r0
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	033c      	lsls	r4, r7, #12
 8000b6c:	007b      	lsls	r3, r7, #1
 8000b6e:	4650      	mov	r0, sl
 8000b70:	0b24      	lsrs	r4, r4, #12
 8000b72:	0d5b      	lsrs	r3, r3, #21
 8000b74:	0fff      	lsrs	r7, r7, #31
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_ddiv+0x5c>
 8000b7a:	e11f      	b.n	8000dbc <__aeabi_ddiv+0x29c>
 8000b7c:	4ac6      	ldr	r2, [pc, #792]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d100      	bne.n	8000b84 <__aeabi_ddiv+0x64>
 8000b82:	e162      	b.n	8000e4a <__aeabi_ddiv+0x32a>
 8000b84:	49c5      	ldr	r1, [pc, #788]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b86:	0f42      	lsrs	r2, r0, #29
 8000b88:	468c      	mov	ip, r1
 8000b8a:	00e4      	lsls	r4, r4, #3
 8000b8c:	4659      	mov	r1, fp
 8000b8e:	4314      	orrs	r4, r2
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	4463      	add	r3, ip
 8000b94:	0412      	lsls	r2, r2, #16
 8000b96:	1acb      	subs	r3, r1, r3
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	469b      	mov	fp, r3
 8000b9c:	00c2      	lsls	r2, r0, #3
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	407b      	eors	r3, r7
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d827      	bhi.n	8000bfc <__aeabi_ddiv+0xdc>
 8000bac:	49bc      	ldr	r1, [pc, #752]	; (8000ea0 <__aeabi_ddiv+0x380>)
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	58cb      	ldr	r3, [r1, r3]
 8000bb2:	469f      	mov	pc, r3
 8000bb4:	46b2      	mov	sl, r6
 8000bb6:	9b00      	ldr	r3, [sp, #0]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d016      	beq.n	8000bea <__aeabi_ddiv+0xca>
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_ddiv+0xa2>
 8000bc0:	e28e      	b.n	80010e0 <__aeabi_ddiv+0x5c0>
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000bc6:	e0d9      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2400      	movs	r4, #0
 8000bcc:	2500      	movs	r5, #0
 8000bce:	4652      	mov	r2, sl
 8000bd0:	051b      	lsls	r3, r3, #20
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	07d2      	lsls	r2, r2, #31
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	0028      	movs	r0, r5
 8000bda:	0019      	movs	r1, r3
 8000bdc:	b005      	add	sp, #20
 8000bde:	bcf0      	pop	{r4, r5, r6, r7}
 8000be0:	46bb      	mov	fp, r7
 8000be2:	46b2      	mov	sl, r6
 8000be4:	46a9      	mov	r9, r5
 8000be6:	46a0      	mov	r8, r4
 8000be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bea:	2400      	movs	r4, #0
 8000bec:	2500      	movs	r5, #0
 8000bee:	4baa      	ldr	r3, [pc, #680]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000bf0:	e7ed      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000bf2:	46ba      	mov	sl, r7
 8000bf4:	46a0      	mov	r8, r4
 8000bf6:	0015      	movs	r5, r2
 8000bf8:	9000      	str	r0, [sp, #0]
 8000bfa:	e7dc      	b.n	8000bb6 <__aeabi_ddiv+0x96>
 8000bfc:	4544      	cmp	r4, r8
 8000bfe:	d200      	bcs.n	8000c02 <__aeabi_ddiv+0xe2>
 8000c00:	e1c7      	b.n	8000f92 <__aeabi_ddiv+0x472>
 8000c02:	d100      	bne.n	8000c06 <__aeabi_ddiv+0xe6>
 8000c04:	e1c2      	b.n	8000f8c <__aeabi_ddiv+0x46c>
 8000c06:	2301      	movs	r3, #1
 8000c08:	425b      	negs	r3, r3
 8000c0a:	469c      	mov	ip, r3
 8000c0c:	002e      	movs	r6, r5
 8000c0e:	4640      	mov	r0, r8
 8000c10:	2500      	movs	r5, #0
 8000c12:	44e3      	add	fp, ip
 8000c14:	0223      	lsls	r3, r4, #8
 8000c16:	0e14      	lsrs	r4, r2, #24
 8000c18:	431c      	orrs	r4, r3
 8000c1a:	0c1b      	lsrs	r3, r3, #16
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	0423      	lsls	r3, r4, #16
 8000c20:	0c1f      	lsrs	r7, r3, #16
 8000c22:	0212      	lsls	r2, r2, #8
 8000c24:	4649      	mov	r1, r9
 8000c26:	9200      	str	r2, [sp, #0]
 8000c28:	9701      	str	r7, [sp, #4]
 8000c2a:	f7ff faf1 	bl	8000210 <__aeabi_uidivmod>
 8000c2e:	0002      	movs	r2, r0
 8000c30:	437a      	muls	r2, r7
 8000c32:	040b      	lsls	r3, r1, #16
 8000c34:	0c31      	lsrs	r1, r6, #16
 8000c36:	4680      	mov	r8, r0
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	d907      	bls.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	425b      	negs	r3, r3
 8000c42:	469c      	mov	ip, r3
 8000c44:	1909      	adds	r1, r1, r4
 8000c46:	44e0      	add	r8, ip
 8000c48:	428c      	cmp	r4, r1
 8000c4a:	d800      	bhi.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c4c:	e207      	b.n	800105e <__aeabi_ddiv+0x53e>
 8000c4e:	1a88      	subs	r0, r1, r2
 8000c50:	4649      	mov	r1, r9
 8000c52:	f7ff fadd 	bl	8000210 <__aeabi_uidivmod>
 8000c56:	0409      	lsls	r1, r1, #16
 8000c58:	468c      	mov	ip, r1
 8000c5a:	0431      	lsls	r1, r6, #16
 8000c5c:	4666      	mov	r6, ip
 8000c5e:	9a01      	ldr	r2, [sp, #4]
 8000c60:	0c09      	lsrs	r1, r1, #16
 8000c62:	4342      	muls	r2, r0
 8000c64:	0003      	movs	r3, r0
 8000c66:	4331      	orrs	r1, r6
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d904      	bls.n	8000c76 <__aeabi_ddiv+0x156>
 8000c6c:	1909      	adds	r1, r1, r4
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	428c      	cmp	r4, r1
 8000c72:	d800      	bhi.n	8000c76 <__aeabi_ddiv+0x156>
 8000c74:	e1ed      	b.n	8001052 <__aeabi_ddiv+0x532>
 8000c76:	1a88      	subs	r0, r1, r2
 8000c78:	4642      	mov	r2, r8
 8000c7a:	0412      	lsls	r2, r2, #16
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	4690      	mov	r8, r2
 8000c80:	4641      	mov	r1, r8
 8000c82:	9b00      	ldr	r3, [sp, #0]
 8000c84:	040e      	lsls	r6, r1, #16
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	001f      	movs	r7, r3
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	9b00      	ldr	r3, [sp, #0]
 8000c8e:	0c36      	lsrs	r6, r6, #16
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	0c19      	lsrs	r1, r3, #16
 8000c94:	000b      	movs	r3, r1
 8000c96:	4373      	muls	r3, r6
 8000c98:	0c12      	lsrs	r2, r2, #16
 8000c9a:	437e      	muls	r6, r7
 8000c9c:	9103      	str	r1, [sp, #12]
 8000c9e:	4351      	muls	r1, r2
 8000ca0:	437a      	muls	r2, r7
 8000ca2:	0c1f      	lsrs	r7, r3, #16
 8000ca4:	46bc      	mov	ip, r7
 8000ca6:	1876      	adds	r6, r6, r1
 8000ca8:	4466      	add	r6, ip
 8000caa:	42b1      	cmp	r1, r6
 8000cac:	d903      	bls.n	8000cb6 <__aeabi_ddiv+0x196>
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4462      	add	r2, ip
 8000cb6:	0c31      	lsrs	r1, r6, #16
 8000cb8:	188a      	adds	r2, r1, r2
 8000cba:	0431      	lsls	r1, r6, #16
 8000cbc:	041e      	lsls	r6, r3, #16
 8000cbe:	0c36      	lsrs	r6, r6, #16
 8000cc0:	198e      	adds	r6, r1, r6
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	d302      	bcc.n	8000ccc <__aeabi_ddiv+0x1ac>
 8000cc6:	d112      	bne.n	8000cee <__aeabi_ddiv+0x1ce>
 8000cc8:	42b5      	cmp	r5, r6
 8000cca:	d210      	bcs.n	8000cee <__aeabi_ddiv+0x1ce>
 8000ccc:	4643      	mov	r3, r8
 8000cce:	1e59      	subs	r1, r3, #1
 8000cd0:	9b00      	ldr	r3, [sp, #0]
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	4465      	add	r5, ip
 8000cd6:	001f      	movs	r7, r3
 8000cd8:	429d      	cmp	r5, r3
 8000cda:	419b      	sbcs	r3, r3
 8000cdc:	425b      	negs	r3, r3
 8000cde:	191b      	adds	r3, r3, r4
 8000ce0:	18c0      	adds	r0, r0, r3
 8000ce2:	4284      	cmp	r4, r0
 8000ce4:	d200      	bcs.n	8000ce8 <__aeabi_ddiv+0x1c8>
 8000ce6:	e1a0      	b.n	800102a <__aeabi_ddiv+0x50a>
 8000ce8:	d100      	bne.n	8000cec <__aeabi_ddiv+0x1cc>
 8000cea:	e19b      	b.n	8001024 <__aeabi_ddiv+0x504>
 8000cec:	4688      	mov	r8, r1
 8000cee:	1bae      	subs	r6, r5, r6
 8000cf0:	42b5      	cmp	r5, r6
 8000cf2:	41ad      	sbcs	r5, r5
 8000cf4:	1a80      	subs	r0, r0, r2
 8000cf6:	426d      	negs	r5, r5
 8000cf8:	1b40      	subs	r0, r0, r5
 8000cfa:	4284      	cmp	r4, r0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_ddiv+0x1e0>
 8000cfe:	e1d5      	b.n	80010ac <__aeabi_ddiv+0x58c>
 8000d00:	4649      	mov	r1, r9
 8000d02:	f7ff fa85 	bl	8000210 <__aeabi_uidivmod>
 8000d06:	9a01      	ldr	r2, [sp, #4]
 8000d08:	040b      	lsls	r3, r1, #16
 8000d0a:	4342      	muls	r2, r0
 8000d0c:	0c31      	lsrs	r1, r6, #16
 8000d0e:	0005      	movs	r5, r0
 8000d10:	4319      	orrs	r1, r3
 8000d12:	428a      	cmp	r2, r1
 8000d14:	d900      	bls.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000d16:	e16c      	b.n	8000ff2 <__aeabi_ddiv+0x4d2>
 8000d18:	1a88      	subs	r0, r1, r2
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	f7ff fa78 	bl	8000210 <__aeabi_uidivmod>
 8000d20:	9a01      	ldr	r2, [sp, #4]
 8000d22:	0436      	lsls	r6, r6, #16
 8000d24:	4342      	muls	r2, r0
 8000d26:	0409      	lsls	r1, r1, #16
 8000d28:	0c36      	lsrs	r6, r6, #16
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	430e      	orrs	r6, r1
 8000d2e:	42b2      	cmp	r2, r6
 8000d30:	d900      	bls.n	8000d34 <__aeabi_ddiv+0x214>
 8000d32:	e153      	b.n	8000fdc <__aeabi_ddiv+0x4bc>
 8000d34:	9803      	ldr	r0, [sp, #12]
 8000d36:	1ab6      	subs	r6, r6, r2
 8000d38:	0002      	movs	r2, r0
 8000d3a:	042d      	lsls	r5, r5, #16
 8000d3c:	431d      	orrs	r5, r3
 8000d3e:	9f02      	ldr	r7, [sp, #8]
 8000d40:	042b      	lsls	r3, r5, #16
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	435a      	muls	r2, r3
 8000d46:	437b      	muls	r3, r7
 8000d48:	469c      	mov	ip, r3
 8000d4a:	0c29      	lsrs	r1, r5, #16
 8000d4c:	4348      	muls	r0, r1
 8000d4e:	0c13      	lsrs	r3, r2, #16
 8000d50:	4484      	add	ip, r0
 8000d52:	4463      	add	r3, ip
 8000d54:	4379      	muls	r1, r7
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d903      	bls.n	8000d62 <__aeabi_ddiv+0x242>
 8000d5a:	2080      	movs	r0, #128	; 0x80
 8000d5c:	0240      	lsls	r0, r0, #9
 8000d5e:	4684      	mov	ip, r0
 8000d60:	4461      	add	r1, ip
 8000d62:	0c18      	lsrs	r0, r3, #16
 8000d64:	0412      	lsls	r2, r2, #16
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	0c12      	lsrs	r2, r2, #16
 8000d6a:	1841      	adds	r1, r0, r1
 8000d6c:	189b      	adds	r3, r3, r2
 8000d6e:	428e      	cmp	r6, r1
 8000d70:	d200      	bcs.n	8000d74 <__aeabi_ddiv+0x254>
 8000d72:	e0ff      	b.n	8000f74 <__aeabi_ddiv+0x454>
 8000d74:	d100      	bne.n	8000d78 <__aeabi_ddiv+0x258>
 8000d76:	e0fa      	b.n	8000f6e <__aeabi_ddiv+0x44e>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	431d      	orrs	r5, r3
 8000d7c:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <__aeabi_ddiv+0x384>)
 8000d7e:	445a      	add	r2, fp
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_ddiv+0x266>
 8000d84:	e0aa      	b.n	8000edc <__aeabi_ddiv+0x3bc>
 8000d86:	076b      	lsls	r3, r5, #29
 8000d88:	d000      	beq.n	8000d8c <__aeabi_ddiv+0x26c>
 8000d8a:	e13d      	b.n	8001008 <__aeabi_ddiv+0x4e8>
 8000d8c:	08ed      	lsrs	r5, r5, #3
 8000d8e:	4643      	mov	r3, r8
 8000d90:	01db      	lsls	r3, r3, #7
 8000d92:	d506      	bpl.n	8000da2 <__aeabi_ddiv+0x282>
 8000d94:	4642      	mov	r2, r8
 8000d96:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <__aeabi_ddiv+0x388>)
 8000d98:	401a      	ands	r2, r3
 8000d9a:	4690      	mov	r8, r2
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	00d2      	lsls	r2, r2, #3
 8000da0:	445a      	add	r2, fp
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <__aeabi_ddiv+0x38c>)
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dd00      	ble.n	8000daa <__aeabi_ddiv+0x28a>
 8000da8:	e71f      	b.n	8000bea <__aeabi_ddiv+0xca>
 8000daa:	4643      	mov	r3, r8
 8000dac:	075b      	lsls	r3, r3, #29
 8000dae:	431d      	orrs	r5, r3
 8000db0:	4643      	mov	r3, r8
 8000db2:	0552      	lsls	r2, r2, #21
 8000db4:	025c      	lsls	r4, r3, #9
 8000db6:	0b24      	lsrs	r4, r4, #12
 8000db8:	0d53      	lsrs	r3, r2, #21
 8000dba:	e708      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	4322      	orrs	r2, r4
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_ddiv+0x2a4>
 8000dc2:	e07b      	b.n	8000ebc <__aeabi_ddiv+0x39c>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0x2aa>
 8000dc8:	e0fa      	b.n	8000fc0 <__aeabi_ddiv+0x4a0>
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f001 f952 	bl	8002074 <__clzsi2>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	3a0b      	subs	r2, #11
 8000dd4:	231d      	movs	r3, #29
 8000dd6:	0001      	movs	r1, r0
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	4652      	mov	r2, sl
 8000ddc:	3908      	subs	r1, #8
 8000dde:	40da      	lsrs	r2, r3
 8000de0:	408c      	lsls	r4, r1
 8000de2:	4314      	orrs	r4, r2
 8000de4:	4652      	mov	r2, sl
 8000de6:	408a      	lsls	r2, r1
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <__aeabi_ddiv+0x390>)
 8000dea:	4458      	add	r0, fp
 8000dec:	469b      	mov	fp, r3
 8000dee:	4483      	add	fp, r0
 8000df0:	2000      	movs	r0, #0
 8000df2:	e6d5      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000df4:	464b      	mov	r3, r9
 8000df6:	4323      	orrs	r3, r4
 8000df8:	4698      	mov	r8, r3
 8000dfa:	d044      	beq.n	8000e86 <__aeabi_ddiv+0x366>
 8000dfc:	2c00      	cmp	r4, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x2e2>
 8000e00:	e0ce      	b.n	8000fa0 <__aeabi_ddiv+0x480>
 8000e02:	0020      	movs	r0, r4
 8000e04:	f001 f936 	bl	8002074 <__clzsi2>
 8000e08:	0001      	movs	r1, r0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	390b      	subs	r1, #11
 8000e0e:	231d      	movs	r3, #29
 8000e10:	1a5b      	subs	r3, r3, r1
 8000e12:	4649      	mov	r1, r9
 8000e14:	0010      	movs	r0, r2
 8000e16:	40d9      	lsrs	r1, r3
 8000e18:	3808      	subs	r0, #8
 8000e1a:	4084      	lsls	r4, r0
 8000e1c:	000b      	movs	r3, r1
 8000e1e:	464d      	mov	r5, r9
 8000e20:	4323      	orrs	r3, r4
 8000e22:	4698      	mov	r8, r3
 8000e24:	4085      	lsls	r5, r0
 8000e26:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <__aeabi_ddiv+0x394>)
 8000e28:	1a83      	subs	r3, r0, r2
 8000e2a:	469b      	mov	fp, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4699      	mov	r9, r3
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	e69a      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e34:	464b      	mov	r3, r9
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d11d      	bne.n	8000e78 <__aeabi_ddiv+0x358>
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	4699      	mov	r9, r3
 8000e40:	3b06      	subs	r3, #6
 8000e42:	2500      	movs	r5, #0
 8000e44:	4683      	mov	fp, r0
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	e68f      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e4a:	4652      	mov	r2, sl
 8000e4c:	4322      	orrs	r2, r4
 8000e4e:	d109      	bne.n	8000e64 <__aeabi_ddiv+0x344>
 8000e50:	2302      	movs	r3, #2
 8000e52:	4649      	mov	r1, r9
 8000e54:	4319      	orrs	r1, r3
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e58:	4689      	mov	r9, r1
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	2400      	movs	r4, #0
 8000e5e:	2002      	movs	r0, #2
 8000e60:	44e3      	add	fp, ip
 8000e62:	e69d      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e64:	2303      	movs	r3, #3
 8000e66:	464a      	mov	r2, r9
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e6c:	4691      	mov	r9, r2
 8000e6e:	469c      	mov	ip, r3
 8000e70:	4652      	mov	r2, sl
 8000e72:	2003      	movs	r0, #3
 8000e74:	44e3      	add	fp, ip
 8000e76:	e693      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e78:	230c      	movs	r3, #12
 8000e7a:	4699      	mov	r9, r3
 8000e7c:	3b09      	subs	r3, #9
 8000e7e:	46a0      	mov	r8, r4
 8000e80:	4683      	mov	fp, r0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	e671      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e86:	2304      	movs	r3, #4
 8000e88:	4699      	mov	r9, r3
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	2500      	movs	r5, #0
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	e669      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	000007ff 	.word	0x000007ff
 8000e9c:	fffffc01 	.word	0xfffffc01
 8000ea0:	08006f20 	.word	0x08006f20
 8000ea4:	000003ff 	.word	0x000003ff
 8000ea8:	feffffff 	.word	0xfeffffff
 8000eac:	000007fe 	.word	0x000007fe
 8000eb0:	000003f3 	.word	0x000003f3
 8000eb4:	fffffc0d 	.word	0xfffffc0d
 8000eb8:	fffff801 	.word	0xfffff801
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4319      	orrs	r1, r3
 8000ec2:	4689      	mov	r9, r1
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	e66a      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2480      	movs	r4, #128	; 0x80
 8000ece:	469a      	mov	sl, r3
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	4b8a      	ldr	r3, [pc, #552]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000ed4:	0324      	lsls	r4, r4, #12
 8000ed6:	e67a      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000ed8:	2501      	movs	r5, #1
 8000eda:	426d      	negs	r5, r5
 8000edc:	2301      	movs	r3, #1
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	2b38      	cmp	r3, #56	; 0x38
 8000ee2:	dd00      	ble.n	8000ee6 <__aeabi_ddiv+0x3c6>
 8000ee4:	e670      	b.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000ee6:	2b1f      	cmp	r3, #31
 8000ee8:	dc00      	bgt.n	8000eec <__aeabi_ddiv+0x3cc>
 8000eea:	e0bf      	b.n	800106c <__aeabi_ddiv+0x54c>
 8000eec:	211f      	movs	r1, #31
 8000eee:	4249      	negs	r1, r1
 8000ef0:	1a8a      	subs	r2, r1, r2
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	40d1      	lsrs	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	2b20      	cmp	r3, #32
 8000efa:	d004      	beq.n	8000f06 <__aeabi_ddiv+0x3e6>
 8000efc:	4641      	mov	r1, r8
 8000efe:	4b80      	ldr	r3, [pc, #512]	; (8001100 <__aeabi_ddiv+0x5e0>)
 8000f00:	445b      	add	r3, fp
 8000f02:	4099      	lsls	r1, r3
 8000f04:	430d      	orrs	r5, r1
 8000f06:	1e6b      	subs	r3, r5, #1
 8000f08:	419d      	sbcs	r5, r3
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	432a      	orrs	r2, r5
 8000f0e:	001d      	movs	r5, r3
 8000f10:	2400      	movs	r4, #0
 8000f12:	4015      	ands	r5, r2
 8000f14:	4213      	tst	r3, r2
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x3fa>
 8000f18:	e0d4      	b.n	80010c4 <__aeabi_ddiv+0x5a4>
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4011      	ands	r1, r2
 8000f20:	2904      	cmp	r1, #4
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x406>
 8000f24:	e0cb      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f26:	1d11      	adds	r1, r2, #4
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	4192      	sbcs	r2, r2
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	189b      	adds	r3, r3, r2
 8000f30:	000a      	movs	r2, r1
 8000f32:	0219      	lsls	r1, r3, #8
 8000f34:	d400      	bmi.n	8000f38 <__aeabi_ddiv+0x418>
 8000f36:	e0c2      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	e646      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	4641      	mov	r1, r8
 8000f44:	031b      	lsls	r3, r3, #12
 8000f46:	4219      	tst	r1, r3
 8000f48:	d008      	beq.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4a:	421c      	tst	r4, r3
 8000f4c:	d106      	bne.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	0324      	lsls	r4, r4, #12
 8000f52:	46ba      	mov	sl, r7
 8000f54:	0015      	movs	r5, r2
 8000f56:	4b69      	ldr	r3, [pc, #420]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f58:	0b24      	lsrs	r4, r4, #12
 8000f5a:	e638      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f5c:	2480      	movs	r4, #128	; 0x80
 8000f5e:	4643      	mov	r3, r8
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	431c      	orrs	r4, r3
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	46b2      	mov	sl, r6
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f6a:	0b24      	lsrs	r4, r4, #12
 8000f6c:	e62f      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x454>
 8000f72:	e703      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000f74:	19a6      	adds	r6, r4, r6
 8000f76:	1e68      	subs	r0, r5, #1
 8000f78:	42a6      	cmp	r6, r4
 8000f7a:	d200      	bcs.n	8000f7e <__aeabi_ddiv+0x45e>
 8000f7c:	e08d      	b.n	800109a <__aeabi_ddiv+0x57a>
 8000f7e:	428e      	cmp	r6, r1
 8000f80:	d200      	bcs.n	8000f84 <__aeabi_ddiv+0x464>
 8000f82:	e0a3      	b.n	80010cc <__aeabi_ddiv+0x5ac>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x468>
 8000f86:	e0b3      	b.n	80010f0 <__aeabi_ddiv+0x5d0>
 8000f88:	0005      	movs	r5, r0
 8000f8a:	e6f5      	b.n	8000d78 <__aeabi_ddiv+0x258>
 8000f8c:	42aa      	cmp	r2, r5
 8000f8e:	d900      	bls.n	8000f92 <__aeabi_ddiv+0x472>
 8000f90:	e639      	b.n	8000c06 <__aeabi_ddiv+0xe6>
 8000f92:	4643      	mov	r3, r8
 8000f94:	07de      	lsls	r6, r3, #31
 8000f96:	0858      	lsrs	r0, r3, #1
 8000f98:	086b      	lsrs	r3, r5, #1
 8000f9a:	431e      	orrs	r6, r3
 8000f9c:	07ed      	lsls	r5, r5, #31
 8000f9e:	e639      	b.n	8000c14 <__aeabi_ddiv+0xf4>
 8000fa0:	4648      	mov	r0, r9
 8000fa2:	f001 f867 	bl	8002074 <__clzsi2>
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	0002      	movs	r2, r0
 8000faa:	3115      	adds	r1, #21
 8000fac:	3220      	adds	r2, #32
 8000fae:	291c      	cmp	r1, #28
 8000fb0:	dc00      	bgt.n	8000fb4 <__aeabi_ddiv+0x494>
 8000fb2:	e72c      	b.n	8000e0e <__aeabi_ddiv+0x2ee>
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	3808      	subs	r0, #8
 8000fb8:	4083      	lsls	r3, r0
 8000fba:	2500      	movs	r5, #0
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	e732      	b.n	8000e26 <__aeabi_ddiv+0x306>
 8000fc0:	f001 f858 	bl	8002074 <__clzsi2>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	3215      	adds	r2, #21
 8000fca:	3020      	adds	r0, #32
 8000fcc:	2a1c      	cmp	r2, #28
 8000fce:	dc00      	bgt.n	8000fd2 <__aeabi_ddiv+0x4b2>
 8000fd0:	e700      	b.n	8000dd4 <__aeabi_ddiv+0x2b4>
 8000fd2:	4654      	mov	r4, sl
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	e705      	b.n	8000de8 <__aeabi_ddiv+0x2c8>
 8000fdc:	1936      	adds	r6, r6, r4
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	42b4      	cmp	r4, r6
 8000fe2:	d900      	bls.n	8000fe6 <__aeabi_ddiv+0x4c6>
 8000fe4:	e6a6      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fe6:	42b2      	cmp	r2, r6
 8000fe8:	d800      	bhi.n	8000fec <__aeabi_ddiv+0x4cc>
 8000fea:	e6a3      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fec:	1e83      	subs	r3, r0, #2
 8000fee:	1936      	adds	r6, r6, r4
 8000ff0:	e6a0      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000ff2:	1909      	adds	r1, r1, r4
 8000ff4:	3d01      	subs	r5, #1
 8000ff6:	428c      	cmp	r4, r1
 8000ff8:	d900      	bls.n	8000ffc <__aeabi_ddiv+0x4dc>
 8000ffa:	e68d      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000ffc:	428a      	cmp	r2, r1
 8000ffe:	d800      	bhi.n	8001002 <__aeabi_ddiv+0x4e2>
 8001000:	e68a      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001002:	1e85      	subs	r5, r0, #2
 8001004:	1909      	adds	r1, r1, r4
 8001006:	e687      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001008:	230f      	movs	r3, #15
 800100a:	402b      	ands	r3, r5
 800100c:	2b04      	cmp	r3, #4
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x4f2>
 8001010:	e6bc      	b.n	8000d8c <__aeabi_ddiv+0x26c>
 8001012:	2305      	movs	r3, #5
 8001014:	425b      	negs	r3, r3
 8001016:	42ab      	cmp	r3, r5
 8001018:	419b      	sbcs	r3, r3
 800101a:	3504      	adds	r5, #4
 800101c:	425b      	negs	r3, r3
 800101e:	08ed      	lsrs	r5, r5, #3
 8001020:	4498      	add	r8, r3
 8001022:	e6b4      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 8001024:	42af      	cmp	r7, r5
 8001026:	d900      	bls.n	800102a <__aeabi_ddiv+0x50a>
 8001028:	e660      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 800102a:	4282      	cmp	r2, r0
 800102c:	d804      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 800102e:	d000      	beq.n	8001032 <__aeabi_ddiv+0x512>
 8001030:	e65c      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001032:	42ae      	cmp	r6, r5
 8001034:	d800      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 8001036:	e659      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001038:	2302      	movs	r3, #2
 800103a:	425b      	negs	r3, r3
 800103c:	469c      	mov	ip, r3
 800103e:	9b00      	ldr	r3, [sp, #0]
 8001040:	44e0      	add	r8, ip
 8001042:	469c      	mov	ip, r3
 8001044:	4465      	add	r5, ip
 8001046:	429d      	cmp	r5, r3
 8001048:	419b      	sbcs	r3, r3
 800104a:	425b      	negs	r3, r3
 800104c:	191b      	adds	r3, r3, r4
 800104e:	18c0      	adds	r0, r0, r3
 8001050:	e64d      	b.n	8000cee <__aeabi_ddiv+0x1ce>
 8001052:	428a      	cmp	r2, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x538>
 8001056:	e60e      	b.n	8000c76 <__aeabi_ddiv+0x156>
 8001058:	1e83      	subs	r3, r0, #2
 800105a:	1909      	adds	r1, r1, r4
 800105c:	e60b      	b.n	8000c76 <__aeabi_ddiv+0x156>
 800105e:	428a      	cmp	r2, r1
 8001060:	d800      	bhi.n	8001064 <__aeabi_ddiv+0x544>
 8001062:	e5f4      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 8001064:	1e83      	subs	r3, r0, #2
 8001066:	4698      	mov	r8, r3
 8001068:	1909      	adds	r1, r1, r4
 800106a:	e5f0      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 800106c:	4925      	ldr	r1, [pc, #148]	; (8001104 <__aeabi_ddiv+0x5e4>)
 800106e:	0028      	movs	r0, r5
 8001070:	4459      	add	r1, fp
 8001072:	408d      	lsls	r5, r1
 8001074:	4642      	mov	r2, r8
 8001076:	408a      	lsls	r2, r1
 8001078:	1e69      	subs	r1, r5, #1
 800107a:	418d      	sbcs	r5, r1
 800107c:	4641      	mov	r1, r8
 800107e:	40d8      	lsrs	r0, r3
 8001080:	40d9      	lsrs	r1, r3
 8001082:	4302      	orrs	r2, r0
 8001084:	432a      	orrs	r2, r5
 8001086:	000b      	movs	r3, r1
 8001088:	0751      	lsls	r1, r2, #29
 800108a:	d100      	bne.n	800108e <__aeabi_ddiv+0x56e>
 800108c:	e751      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800108e:	210f      	movs	r1, #15
 8001090:	4011      	ands	r1, r2
 8001092:	2904      	cmp	r1, #4
 8001094:	d000      	beq.n	8001098 <__aeabi_ddiv+0x578>
 8001096:	e746      	b.n	8000f26 <__aeabi_ddiv+0x406>
 8001098:	e74b      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800109a:	0005      	movs	r5, r0
 800109c:	428e      	cmp	r6, r1
 800109e:	d000      	beq.n	80010a2 <__aeabi_ddiv+0x582>
 80010a0:	e66a      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010a2:	9a00      	ldr	r2, [sp, #0]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d000      	beq.n	80010aa <__aeabi_ddiv+0x58a>
 80010a8:	e666      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010aa:	e667      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <__aeabi_ddiv+0x5e8>)
 80010ae:	445a      	add	r2, fp
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	dc00      	bgt.n	80010b6 <__aeabi_ddiv+0x596>
 80010b4:	e710      	b.n	8000ed8 <__aeabi_ddiv+0x3b8>
 80010b6:	2301      	movs	r3, #1
 80010b8:	2500      	movs	r5, #0
 80010ba:	4498      	add	r8, r3
 80010bc:	e667      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 80010be:	075d      	lsls	r5, r3, #29
 80010c0:	025b      	lsls	r3, r3, #9
 80010c2:	0b1c      	lsrs	r4, r3, #12
 80010c4:	08d2      	lsrs	r2, r2, #3
 80010c6:	2300      	movs	r3, #0
 80010c8:	4315      	orrs	r5, r2
 80010ca:	e580      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010cc:	9800      	ldr	r0, [sp, #0]
 80010ce:	3d02      	subs	r5, #2
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	4282      	cmp	r2, r0
 80010d4:	41bf      	sbcs	r7, r7
 80010d6:	427f      	negs	r7, r7
 80010d8:	193c      	adds	r4, r7, r4
 80010da:	1936      	adds	r6, r6, r4
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	e7dd      	b.n	800109c <__aeabi_ddiv+0x57c>
 80010e0:	2480      	movs	r4, #128	; 0x80
 80010e2:	4643      	mov	r3, r8
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	431c      	orrs	r4, r3
 80010e8:	0324      	lsls	r4, r4, #12
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__aeabi_ddiv+0x5dc>)
 80010ec:	0b24      	lsrs	r4, r4, #12
 80010ee:	e56e      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010f0:	9a00      	ldr	r2, [sp, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ea      	bcc.n	80010cc <__aeabi_ddiv+0x5ac>
 80010f6:	0005      	movs	r5, r0
 80010f8:	e7d3      	b.n	80010a2 <__aeabi_ddiv+0x582>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	0000043e 	.word	0x0000043e
 8001104:	0000041e 	.word	0x0000041e
 8001108:	000003ff 	.word	0x000003ff

0800110c <__eqdf2>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464e      	mov	r6, r9
 8001110:	4645      	mov	r5, r8
 8001112:	46de      	mov	lr, fp
 8001114:	4657      	mov	r7, sl
 8001116:	4690      	mov	r8, r2
 8001118:	b5e0      	push	{r5, r6, r7, lr}
 800111a:	0017      	movs	r7, r2
 800111c:	031a      	lsls	r2, r3, #12
 800111e:	0b12      	lsrs	r2, r2, #12
 8001120:	0005      	movs	r5, r0
 8001122:	4684      	mov	ip, r0
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <__eqdf2+0x80>)
 8001126:	030e      	lsls	r6, r1, #12
 8001128:	004c      	lsls	r4, r1, #1
 800112a:	4691      	mov	r9, r2
 800112c:	005a      	lsls	r2, r3, #1
 800112e:	0fdb      	lsrs	r3, r3, #31
 8001130:	469b      	mov	fp, r3
 8001132:	0b36      	lsrs	r6, r6, #12
 8001134:	0d64      	lsrs	r4, r4, #21
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	0d52      	lsrs	r2, r2, #21
 800113a:	4284      	cmp	r4, r0
 800113c:	d019      	beq.n	8001172 <__eqdf2+0x66>
 800113e:	4282      	cmp	r2, r0
 8001140:	d010      	beq.n	8001164 <__eqdf2+0x58>
 8001142:	2001      	movs	r0, #1
 8001144:	4294      	cmp	r4, r2
 8001146:	d10e      	bne.n	8001166 <__eqdf2+0x5a>
 8001148:	454e      	cmp	r6, r9
 800114a:	d10c      	bne.n	8001166 <__eqdf2+0x5a>
 800114c:	2001      	movs	r0, #1
 800114e:	45c4      	cmp	ip, r8
 8001150:	d109      	bne.n	8001166 <__eqdf2+0x5a>
 8001152:	4559      	cmp	r1, fp
 8001154:	d017      	beq.n	8001186 <__eqdf2+0x7a>
 8001156:	2c00      	cmp	r4, #0
 8001158:	d105      	bne.n	8001166 <__eqdf2+0x5a>
 800115a:	0030      	movs	r0, r6
 800115c:	4328      	orrs	r0, r5
 800115e:	1e43      	subs	r3, r0, #1
 8001160:	4198      	sbcs	r0, r3
 8001162:	e000      	b.n	8001166 <__eqdf2+0x5a>
 8001164:	2001      	movs	r0, #1
 8001166:	bcf0      	pop	{r4, r5, r6, r7}
 8001168:	46bb      	mov	fp, r7
 800116a:	46b2      	mov	sl, r6
 800116c:	46a9      	mov	r9, r5
 800116e:	46a0      	mov	r8, r4
 8001170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001172:	0033      	movs	r3, r6
 8001174:	2001      	movs	r0, #1
 8001176:	432b      	orrs	r3, r5
 8001178:	d1f5      	bne.n	8001166 <__eqdf2+0x5a>
 800117a:	42a2      	cmp	r2, r4
 800117c:	d1f3      	bne.n	8001166 <__eqdf2+0x5a>
 800117e:	464b      	mov	r3, r9
 8001180:	433b      	orrs	r3, r7
 8001182:	d1f0      	bne.n	8001166 <__eqdf2+0x5a>
 8001184:	e7e2      	b.n	800114c <__eqdf2+0x40>
 8001186:	2000      	movs	r0, #0
 8001188:	e7ed      	b.n	8001166 <__eqdf2+0x5a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff

08001190 <__gedf2>:
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	4647      	mov	r7, r8
 8001194:	46ce      	mov	lr, r9
 8001196:	0004      	movs	r4, r0
 8001198:	0018      	movs	r0, r3
 800119a:	0016      	movs	r6, r2
 800119c:	031b      	lsls	r3, r3, #12
 800119e:	0b1b      	lsrs	r3, r3, #12
 80011a0:	4d2d      	ldr	r5, [pc, #180]	; (8001258 <__gedf2+0xc8>)
 80011a2:	004a      	lsls	r2, r1, #1
 80011a4:	4699      	mov	r9, r3
 80011a6:	b580      	push	{r7, lr}
 80011a8:	0043      	lsls	r3, r0, #1
 80011aa:	030f      	lsls	r7, r1, #12
 80011ac:	46a4      	mov	ip, r4
 80011ae:	46b0      	mov	r8, r6
 80011b0:	0b3f      	lsrs	r7, r7, #12
 80011b2:	0d52      	lsrs	r2, r2, #21
 80011b4:	0fc9      	lsrs	r1, r1, #31
 80011b6:	0d5b      	lsrs	r3, r3, #21
 80011b8:	0fc0      	lsrs	r0, r0, #31
 80011ba:	42aa      	cmp	r2, r5
 80011bc:	d021      	beq.n	8001202 <__gedf2+0x72>
 80011be:	42ab      	cmp	r3, r5
 80011c0:	d013      	beq.n	80011ea <__gedf2+0x5a>
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d122      	bne.n	800120c <__gedf2+0x7c>
 80011c6:	433c      	orrs	r4, r7
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <__gedf2+0x42>
 80011cc:	464d      	mov	r5, r9
 80011ce:	432e      	orrs	r6, r5
 80011d0:	d022      	beq.n	8001218 <__gedf2+0x88>
 80011d2:	2c00      	cmp	r4, #0
 80011d4:	d010      	beq.n	80011f8 <__gedf2+0x68>
 80011d6:	4281      	cmp	r1, r0
 80011d8:	d022      	beq.n	8001220 <__gedf2+0x90>
 80011da:	2002      	movs	r0, #2
 80011dc:	3901      	subs	r1, #1
 80011de:	4008      	ands	r0, r1
 80011e0:	3801      	subs	r0, #1
 80011e2:	bcc0      	pop	{r6, r7}
 80011e4:	46b9      	mov	r9, r7
 80011e6:	46b0      	mov	r8, r6
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	464d      	mov	r5, r9
 80011ec:	432e      	orrs	r6, r5
 80011ee:	d129      	bne.n	8001244 <__gedf2+0xb4>
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d1f0      	bne.n	80011d6 <__gedf2+0x46>
 80011f4:	433c      	orrs	r4, r7
 80011f6:	d1ee      	bne.n	80011d6 <__gedf2+0x46>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d1f2      	bne.n	80011e2 <__gedf2+0x52>
 80011fc:	2001      	movs	r0, #1
 80011fe:	4240      	negs	r0, r0
 8001200:	e7ef      	b.n	80011e2 <__gedf2+0x52>
 8001202:	003d      	movs	r5, r7
 8001204:	4325      	orrs	r5, r4
 8001206:	d11d      	bne.n	8001244 <__gedf2+0xb4>
 8001208:	4293      	cmp	r3, r2
 800120a:	d0ee      	beq.n	80011ea <__gedf2+0x5a>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e2      	bne.n	80011d6 <__gedf2+0x46>
 8001210:	464c      	mov	r4, r9
 8001212:	4326      	orrs	r6, r4
 8001214:	d1df      	bne.n	80011d6 <__gedf2+0x46>
 8001216:	e7e0      	b.n	80011da <__gedf2+0x4a>
 8001218:	2000      	movs	r0, #0
 800121a:	2c00      	cmp	r4, #0
 800121c:	d0e1      	beq.n	80011e2 <__gedf2+0x52>
 800121e:	e7dc      	b.n	80011da <__gedf2+0x4a>
 8001220:	429a      	cmp	r2, r3
 8001222:	dc0a      	bgt.n	800123a <__gedf2+0xaa>
 8001224:	dbe8      	blt.n	80011f8 <__gedf2+0x68>
 8001226:	454f      	cmp	r7, r9
 8001228:	d8d7      	bhi.n	80011da <__gedf2+0x4a>
 800122a:	d00e      	beq.n	800124a <__gedf2+0xba>
 800122c:	2000      	movs	r0, #0
 800122e:	454f      	cmp	r7, r9
 8001230:	d2d7      	bcs.n	80011e2 <__gedf2+0x52>
 8001232:	2900      	cmp	r1, #0
 8001234:	d0e2      	beq.n	80011fc <__gedf2+0x6c>
 8001236:	0008      	movs	r0, r1
 8001238:	e7d3      	b.n	80011e2 <__gedf2+0x52>
 800123a:	4243      	negs	r3, r0
 800123c:	4158      	adcs	r0, r3
 800123e:	0040      	lsls	r0, r0, #1
 8001240:	3801      	subs	r0, #1
 8001242:	e7ce      	b.n	80011e2 <__gedf2+0x52>
 8001244:	2002      	movs	r0, #2
 8001246:	4240      	negs	r0, r0
 8001248:	e7cb      	b.n	80011e2 <__gedf2+0x52>
 800124a:	45c4      	cmp	ip, r8
 800124c:	d8c5      	bhi.n	80011da <__gedf2+0x4a>
 800124e:	2000      	movs	r0, #0
 8001250:	45c4      	cmp	ip, r8
 8001252:	d2c6      	bcs.n	80011e2 <__gedf2+0x52>
 8001254:	e7ed      	b.n	8001232 <__gedf2+0xa2>
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	000007ff 	.word	0x000007ff

0800125c <__ledf2>:
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	4647      	mov	r7, r8
 8001260:	46ce      	mov	lr, r9
 8001262:	0004      	movs	r4, r0
 8001264:	0018      	movs	r0, r3
 8001266:	0016      	movs	r6, r2
 8001268:	031b      	lsls	r3, r3, #12
 800126a:	0b1b      	lsrs	r3, r3, #12
 800126c:	4d2c      	ldr	r5, [pc, #176]	; (8001320 <__ledf2+0xc4>)
 800126e:	004a      	lsls	r2, r1, #1
 8001270:	4699      	mov	r9, r3
 8001272:	b580      	push	{r7, lr}
 8001274:	0043      	lsls	r3, r0, #1
 8001276:	030f      	lsls	r7, r1, #12
 8001278:	46a4      	mov	ip, r4
 800127a:	46b0      	mov	r8, r6
 800127c:	0b3f      	lsrs	r7, r7, #12
 800127e:	0d52      	lsrs	r2, r2, #21
 8001280:	0fc9      	lsrs	r1, r1, #31
 8001282:	0d5b      	lsrs	r3, r3, #21
 8001284:	0fc0      	lsrs	r0, r0, #31
 8001286:	42aa      	cmp	r2, r5
 8001288:	d00d      	beq.n	80012a6 <__ledf2+0x4a>
 800128a:	42ab      	cmp	r3, r5
 800128c:	d010      	beq.n	80012b0 <__ledf2+0x54>
 800128e:	2a00      	cmp	r2, #0
 8001290:	d127      	bne.n	80012e2 <__ledf2+0x86>
 8001292:	433c      	orrs	r4, r7
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <__ledf2+0x60>
 8001298:	464d      	mov	r5, r9
 800129a:	432e      	orrs	r6, r5
 800129c:	d10e      	bne.n	80012bc <__ledf2+0x60>
 800129e:	2000      	movs	r0, #0
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d015      	beq.n	80012d0 <__ledf2+0x74>
 80012a4:	e00e      	b.n	80012c4 <__ledf2+0x68>
 80012a6:	003d      	movs	r5, r7
 80012a8:	4325      	orrs	r5, r4
 80012aa:	d110      	bne.n	80012ce <__ledf2+0x72>
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d118      	bne.n	80012e2 <__ledf2+0x86>
 80012b0:	464d      	mov	r5, r9
 80012b2:	432e      	orrs	r6, r5
 80012b4:	d10b      	bne.n	80012ce <__ledf2+0x72>
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d102      	bne.n	80012c0 <__ledf2+0x64>
 80012ba:	433c      	orrs	r4, r7
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d00b      	beq.n	80012d8 <__ledf2+0x7c>
 80012c0:	4281      	cmp	r1, r0
 80012c2:	d014      	beq.n	80012ee <__ledf2+0x92>
 80012c4:	2002      	movs	r0, #2
 80012c6:	3901      	subs	r1, #1
 80012c8:	4008      	ands	r0, r1
 80012ca:	3801      	subs	r0, #1
 80012cc:	e000      	b.n	80012d0 <__ledf2+0x74>
 80012ce:	2002      	movs	r0, #2
 80012d0:	bcc0      	pop	{r6, r7}
 80012d2:	46b9      	mov	r9, r7
 80012d4:	46b0      	mov	r8, r6
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f9      	bne.n	80012d0 <__ledf2+0x74>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7f6      	b.n	80012d0 <__ledf2+0x74>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ec      	bne.n	80012c0 <__ledf2+0x64>
 80012e6:	464c      	mov	r4, r9
 80012e8:	4326      	orrs	r6, r4
 80012ea:	d1e9      	bne.n	80012c0 <__ledf2+0x64>
 80012ec:	e7ea      	b.n	80012c4 <__ledf2+0x68>
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dd04      	ble.n	80012fc <__ledf2+0xa0>
 80012f2:	4243      	negs	r3, r0
 80012f4:	4158      	adcs	r0, r3
 80012f6:	0040      	lsls	r0, r0, #1
 80012f8:	3801      	subs	r0, #1
 80012fa:	e7e9      	b.n	80012d0 <__ledf2+0x74>
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbeb      	blt.n	80012d8 <__ledf2+0x7c>
 8001300:	454f      	cmp	r7, r9
 8001302:	d8df      	bhi.n	80012c4 <__ledf2+0x68>
 8001304:	d006      	beq.n	8001314 <__ledf2+0xb8>
 8001306:	2000      	movs	r0, #0
 8001308:	454f      	cmp	r7, r9
 800130a:	d2e1      	bcs.n	80012d0 <__ledf2+0x74>
 800130c:	2900      	cmp	r1, #0
 800130e:	d0e5      	beq.n	80012dc <__ledf2+0x80>
 8001310:	0008      	movs	r0, r1
 8001312:	e7dd      	b.n	80012d0 <__ledf2+0x74>
 8001314:	45c4      	cmp	ip, r8
 8001316:	d8d5      	bhi.n	80012c4 <__ledf2+0x68>
 8001318:	2000      	movs	r0, #0
 800131a:	45c4      	cmp	ip, r8
 800131c:	d2d8      	bcs.n	80012d0 <__ledf2+0x74>
 800131e:	e7f5      	b.n	800130c <__ledf2+0xb0>
 8001320:	000007ff 	.word	0x000007ff

08001324 <__aeabi_dmul>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	4657      	mov	r7, sl
 8001328:	464e      	mov	r6, r9
 800132a:	4645      	mov	r5, r8
 800132c:	46de      	mov	lr, fp
 800132e:	b5e0      	push	{r5, r6, r7, lr}
 8001330:	4698      	mov	r8, r3
 8001332:	030c      	lsls	r4, r1, #12
 8001334:	004b      	lsls	r3, r1, #1
 8001336:	0006      	movs	r6, r0
 8001338:	4692      	mov	sl, r2
 800133a:	b087      	sub	sp, #28
 800133c:	0b24      	lsrs	r4, r4, #12
 800133e:	0d5b      	lsrs	r3, r3, #21
 8001340:	0fcf      	lsrs	r7, r1, #31
 8001342:	2b00      	cmp	r3, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_dmul+0x24>
 8001346:	e15c      	b.n	8001602 <__aeabi_dmul+0x2de>
 8001348:	4ad9      	ldr	r2, [pc, #868]	; (80016b0 <__aeabi_dmul+0x38c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d100      	bne.n	8001350 <__aeabi_dmul+0x2c>
 800134e:	e175      	b.n	800163c <__aeabi_dmul+0x318>
 8001350:	0f42      	lsrs	r2, r0, #29
 8001352:	00e4      	lsls	r4, r4, #3
 8001354:	4314      	orrs	r4, r2
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0412      	lsls	r2, r2, #16
 800135a:	4314      	orrs	r4, r2
 800135c:	4ad5      	ldr	r2, [pc, #852]	; (80016b4 <__aeabi_dmul+0x390>)
 800135e:	00c5      	lsls	r5, r0, #3
 8001360:	4694      	mov	ip, r2
 8001362:	4463      	add	r3, ip
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	4699      	mov	r9, r3
 800136a:	469b      	mov	fp, r3
 800136c:	4643      	mov	r3, r8
 800136e:	4642      	mov	r2, r8
 8001370:	031e      	lsls	r6, r3, #12
 8001372:	0fd2      	lsrs	r2, r2, #31
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4650      	mov	r0, sl
 8001378:	4690      	mov	r8, r2
 800137a:	0b36      	lsrs	r6, r6, #12
 800137c:	0d5b      	lsrs	r3, r3, #21
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x5e>
 8001380:	e120      	b.n	80015c4 <__aeabi_dmul+0x2a0>
 8001382:	4acb      	ldr	r2, [pc, #812]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d100      	bne.n	800138a <__aeabi_dmul+0x66>
 8001388:	e162      	b.n	8001650 <__aeabi_dmul+0x32c>
 800138a:	49ca      	ldr	r1, [pc, #808]	; (80016b4 <__aeabi_dmul+0x390>)
 800138c:	0f42      	lsrs	r2, r0, #29
 800138e:	468c      	mov	ip, r1
 8001390:	9900      	ldr	r1, [sp, #0]
 8001392:	4463      	add	r3, ip
 8001394:	00f6      	lsls	r6, r6, #3
 8001396:	468c      	mov	ip, r1
 8001398:	4316      	orrs	r6, r2
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	449c      	add	ip, r3
 800139e:	0412      	lsls	r2, r2, #16
 80013a0:	4663      	mov	r3, ip
 80013a2:	4316      	orrs	r6, r2
 80013a4:	00c2      	lsls	r2, r0, #3
 80013a6:	2000      	movs	r0, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	9900      	ldr	r1, [sp, #0]
 80013ac:	4643      	mov	r3, r8
 80013ae:	3101      	adds	r1, #1
 80013b0:	468c      	mov	ip, r1
 80013b2:	4649      	mov	r1, r9
 80013b4:	407b      	eors	r3, r7
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	290f      	cmp	r1, #15
 80013ba:	d826      	bhi.n	800140a <__aeabi_dmul+0xe6>
 80013bc:	4bbe      	ldr	r3, [pc, #760]	; (80016b8 <__aeabi_dmul+0x394>)
 80013be:	0089      	lsls	r1, r1, #2
 80013c0:	5859      	ldr	r1, [r3, r1]
 80013c2:	468f      	mov	pc, r1
 80013c4:	4643      	mov	r3, r8
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	0034      	movs	r4, r6
 80013ca:	0015      	movs	r5, r2
 80013cc:	4683      	mov	fp, r0
 80013ce:	465b      	mov	r3, fp
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d016      	beq.n	8001402 <__aeabi_dmul+0xde>
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d100      	bne.n	80013da <__aeabi_dmul+0xb6>
 80013d8:	e203      	b.n	80017e2 <__aeabi_dmul+0x4be>
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dmul+0xbc>
 80013de:	e0cd      	b.n	800157c <__aeabi_dmul+0x258>
 80013e0:	2200      	movs	r2, #0
 80013e2:	2400      	movs	r4, #0
 80013e4:	2500      	movs	r5, #0
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	0512      	lsls	r2, r2, #20
 80013ea:	4322      	orrs	r2, r4
 80013ec:	07db      	lsls	r3, r3, #31
 80013ee:	431a      	orrs	r2, r3
 80013f0:	0028      	movs	r0, r5
 80013f2:	0011      	movs	r1, r2
 80013f4:	b007      	add	sp, #28
 80013f6:	bcf0      	pop	{r4, r5, r6, r7}
 80013f8:	46bb      	mov	fp, r7
 80013fa:	46b2      	mov	sl, r6
 80013fc:	46a9      	mov	r9, r5
 80013fe:	46a0      	mov	r8, r4
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	2400      	movs	r4, #0
 8001404:	2500      	movs	r5, #0
 8001406:	4aaa      	ldr	r2, [pc, #680]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001408:	e7ed      	b.n	80013e6 <__aeabi_dmul+0xc2>
 800140a:	0c28      	lsrs	r0, r5, #16
 800140c:	042d      	lsls	r5, r5, #16
 800140e:	0c2d      	lsrs	r5, r5, #16
 8001410:	002b      	movs	r3, r5
 8001412:	0c11      	lsrs	r1, r2, #16
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	0c12      	lsrs	r2, r2, #16
 8001418:	4353      	muls	r3, r2
 800141a:	4698      	mov	r8, r3
 800141c:	0013      	movs	r3, r2
 800141e:	002f      	movs	r7, r5
 8001420:	4343      	muls	r3, r0
 8001422:	4699      	mov	r9, r3
 8001424:	434f      	muls	r7, r1
 8001426:	444f      	add	r7, r9
 8001428:	46bb      	mov	fp, r7
 800142a:	4647      	mov	r7, r8
 800142c:	000b      	movs	r3, r1
 800142e:	0c3f      	lsrs	r7, r7, #16
 8001430:	46ba      	mov	sl, r7
 8001432:	4343      	muls	r3, r0
 8001434:	44da      	add	sl, fp
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	45d1      	cmp	r9, sl
 800143a:	d904      	bls.n	8001446 <__aeabi_dmul+0x122>
 800143c:	2780      	movs	r7, #128	; 0x80
 800143e:	027f      	lsls	r7, r7, #9
 8001440:	46b9      	mov	r9, r7
 8001442:	444b      	add	r3, r9
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	4653      	mov	r3, sl
 8001448:	0c1b      	lsrs	r3, r3, #16
 800144a:	469b      	mov	fp, r3
 800144c:	4653      	mov	r3, sl
 800144e:	041f      	lsls	r7, r3, #16
 8001450:	4643      	mov	r3, r8
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	4698      	mov	r8, r3
 8001458:	003b      	movs	r3, r7
 800145a:	4443      	add	r3, r8
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	0c33      	lsrs	r3, r6, #16
 8001460:	0436      	lsls	r6, r6, #16
 8001462:	0c36      	lsrs	r6, r6, #16
 8001464:	4698      	mov	r8, r3
 8001466:	0033      	movs	r3, r6
 8001468:	4343      	muls	r3, r0
 800146a:	4699      	mov	r9, r3
 800146c:	4643      	mov	r3, r8
 800146e:	4343      	muls	r3, r0
 8001470:	002f      	movs	r7, r5
 8001472:	469a      	mov	sl, r3
 8001474:	4643      	mov	r3, r8
 8001476:	4377      	muls	r7, r6
 8001478:	435d      	muls	r5, r3
 800147a:	0c38      	lsrs	r0, r7, #16
 800147c:	444d      	add	r5, r9
 800147e:	1945      	adds	r5, r0, r5
 8001480:	45a9      	cmp	r9, r5
 8001482:	d903      	bls.n	800148c <__aeabi_dmul+0x168>
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	4699      	mov	r9, r3
 800148a:	44ca      	add	sl, r9
 800148c:	043f      	lsls	r7, r7, #16
 800148e:	0c28      	lsrs	r0, r5, #16
 8001490:	0c3f      	lsrs	r7, r7, #16
 8001492:	042d      	lsls	r5, r5, #16
 8001494:	19ed      	adds	r5, r5, r7
 8001496:	0c27      	lsrs	r7, r4, #16
 8001498:	0424      	lsls	r4, r4, #16
 800149a:	0c24      	lsrs	r4, r4, #16
 800149c:	0003      	movs	r3, r0
 800149e:	0020      	movs	r0, r4
 80014a0:	4350      	muls	r0, r2
 80014a2:	437a      	muls	r2, r7
 80014a4:	4691      	mov	r9, r2
 80014a6:	003a      	movs	r2, r7
 80014a8:	4453      	add	r3, sl
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	0c03      	lsrs	r3, r0, #16
 80014ae:	469a      	mov	sl, r3
 80014b0:	434a      	muls	r2, r1
 80014b2:	4361      	muls	r1, r4
 80014b4:	4449      	add	r1, r9
 80014b6:	4451      	add	r1, sl
 80014b8:	44ab      	add	fp, r5
 80014ba:	4589      	cmp	r9, r1
 80014bc:	d903      	bls.n	80014c6 <__aeabi_dmul+0x1a2>
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	025b      	lsls	r3, r3, #9
 80014c2:	4699      	mov	r9, r3
 80014c4:	444a      	add	r2, r9
 80014c6:	0400      	lsls	r0, r0, #16
 80014c8:	0c0b      	lsrs	r3, r1, #16
 80014ca:	0c00      	lsrs	r0, r0, #16
 80014cc:	0409      	lsls	r1, r1, #16
 80014ce:	1809      	adds	r1, r1, r0
 80014d0:	0020      	movs	r0, r4
 80014d2:	4699      	mov	r9, r3
 80014d4:	4643      	mov	r3, r8
 80014d6:	4370      	muls	r0, r6
 80014d8:	435c      	muls	r4, r3
 80014da:	437e      	muls	r6, r7
 80014dc:	435f      	muls	r7, r3
 80014de:	0c03      	lsrs	r3, r0, #16
 80014e0:	4698      	mov	r8, r3
 80014e2:	19a4      	adds	r4, r4, r6
 80014e4:	4444      	add	r4, r8
 80014e6:	444a      	add	r2, r9
 80014e8:	9703      	str	r7, [sp, #12]
 80014ea:	42a6      	cmp	r6, r4
 80014ec:	d904      	bls.n	80014f8 <__aeabi_dmul+0x1d4>
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	025b      	lsls	r3, r3, #9
 80014f2:	4698      	mov	r8, r3
 80014f4:	4447      	add	r7, r8
 80014f6:	9703      	str	r7, [sp, #12]
 80014f8:	0423      	lsls	r3, r4, #16
 80014fa:	9e02      	ldr	r6, [sp, #8]
 80014fc:	469a      	mov	sl, r3
 80014fe:	9b05      	ldr	r3, [sp, #20]
 8001500:	445e      	add	r6, fp
 8001502:	4698      	mov	r8, r3
 8001504:	42ae      	cmp	r6, r5
 8001506:	41ad      	sbcs	r5, r5
 8001508:	1876      	adds	r6, r6, r1
 800150a:	428e      	cmp	r6, r1
 800150c:	4189      	sbcs	r1, r1
 800150e:	0400      	lsls	r0, r0, #16
 8001510:	0c00      	lsrs	r0, r0, #16
 8001512:	4450      	add	r0, sl
 8001514:	4440      	add	r0, r8
 8001516:	426d      	negs	r5, r5
 8001518:	1947      	adds	r7, r0, r5
 800151a:	46b8      	mov	r8, r7
 800151c:	4693      	mov	fp, r2
 800151e:	4249      	negs	r1, r1
 8001520:	4689      	mov	r9, r1
 8001522:	44c3      	add	fp, r8
 8001524:	44d9      	add	r9, fp
 8001526:	4298      	cmp	r0, r3
 8001528:	4180      	sbcs	r0, r0
 800152a:	45a8      	cmp	r8, r5
 800152c:	41ad      	sbcs	r5, r5
 800152e:	4593      	cmp	fp, r2
 8001530:	4192      	sbcs	r2, r2
 8001532:	4589      	cmp	r9, r1
 8001534:	4189      	sbcs	r1, r1
 8001536:	426d      	negs	r5, r5
 8001538:	4240      	negs	r0, r0
 800153a:	4328      	orrs	r0, r5
 800153c:	0c24      	lsrs	r4, r4, #16
 800153e:	4252      	negs	r2, r2
 8001540:	4249      	negs	r1, r1
 8001542:	430a      	orrs	r2, r1
 8001544:	9b03      	ldr	r3, [sp, #12]
 8001546:	1900      	adds	r0, r0, r4
 8001548:	1880      	adds	r0, r0, r2
 800154a:	18c7      	adds	r7, r0, r3
 800154c:	464b      	mov	r3, r9
 800154e:	0ddc      	lsrs	r4, r3, #23
 8001550:	9b04      	ldr	r3, [sp, #16]
 8001552:	0275      	lsls	r5, r6, #9
 8001554:	431d      	orrs	r5, r3
 8001556:	1e6a      	subs	r2, r5, #1
 8001558:	4195      	sbcs	r5, r2
 800155a:	464b      	mov	r3, r9
 800155c:	0df6      	lsrs	r6, r6, #23
 800155e:	027f      	lsls	r7, r7, #9
 8001560:	4335      	orrs	r5, r6
 8001562:	025a      	lsls	r2, r3, #9
 8001564:	433c      	orrs	r4, r7
 8001566:	4315      	orrs	r5, r2
 8001568:	01fb      	lsls	r3, r7, #7
 800156a:	d400      	bmi.n	800156e <__aeabi_dmul+0x24a>
 800156c:	e11c      	b.n	80017a8 <__aeabi_dmul+0x484>
 800156e:	2101      	movs	r1, #1
 8001570:	086a      	lsrs	r2, r5, #1
 8001572:	400d      	ands	r5, r1
 8001574:	4315      	orrs	r5, r2
 8001576:	07e2      	lsls	r2, r4, #31
 8001578:	4315      	orrs	r5, r2
 800157a:	0864      	lsrs	r4, r4, #1
 800157c:	494f      	ldr	r1, [pc, #316]	; (80016bc <__aeabi_dmul+0x398>)
 800157e:	4461      	add	r1, ip
 8001580:	2900      	cmp	r1, #0
 8001582:	dc00      	bgt.n	8001586 <__aeabi_dmul+0x262>
 8001584:	e0b0      	b.n	80016e8 <__aeabi_dmul+0x3c4>
 8001586:	076b      	lsls	r3, r5, #29
 8001588:	d009      	beq.n	800159e <__aeabi_dmul+0x27a>
 800158a:	220f      	movs	r2, #15
 800158c:	402a      	ands	r2, r5
 800158e:	2a04      	cmp	r2, #4
 8001590:	d005      	beq.n	800159e <__aeabi_dmul+0x27a>
 8001592:	1d2a      	adds	r2, r5, #4
 8001594:	42aa      	cmp	r2, r5
 8001596:	41ad      	sbcs	r5, r5
 8001598:	426d      	negs	r5, r5
 800159a:	1964      	adds	r4, r4, r5
 800159c:	0015      	movs	r5, r2
 800159e:	01e3      	lsls	r3, r4, #7
 80015a0:	d504      	bpl.n	80015ac <__aeabi_dmul+0x288>
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <__aeabi_dmul+0x39c>)
 80015a6:	00c9      	lsls	r1, r1, #3
 80015a8:	4014      	ands	r4, r2
 80015aa:	4461      	add	r1, ip
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <__aeabi_dmul+0x3a0>)
 80015ae:	4291      	cmp	r1, r2
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_dmul+0x290>
 80015b2:	e726      	b.n	8001402 <__aeabi_dmul+0xde>
 80015b4:	0762      	lsls	r2, r4, #29
 80015b6:	08ed      	lsrs	r5, r5, #3
 80015b8:	0264      	lsls	r4, r4, #9
 80015ba:	0549      	lsls	r1, r1, #21
 80015bc:	4315      	orrs	r5, r2
 80015be:	0b24      	lsrs	r4, r4, #12
 80015c0:	0d4a      	lsrs	r2, r1, #21
 80015c2:	e710      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80015c4:	4652      	mov	r2, sl
 80015c6:	4332      	orrs	r2, r6
 80015c8:	d100      	bne.n	80015cc <__aeabi_dmul+0x2a8>
 80015ca:	e07f      	b.n	80016cc <__aeabi_dmul+0x3a8>
 80015cc:	2e00      	cmp	r6, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x2ae>
 80015d0:	e0dc      	b.n	800178c <__aeabi_dmul+0x468>
 80015d2:	0030      	movs	r0, r6
 80015d4:	f000 fd4e 	bl	8002074 <__clzsi2>
 80015d8:	0002      	movs	r2, r0
 80015da:	3a0b      	subs	r2, #11
 80015dc:	231d      	movs	r3, #29
 80015de:	0001      	movs	r1, r0
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	4652      	mov	r2, sl
 80015e4:	3908      	subs	r1, #8
 80015e6:	40da      	lsrs	r2, r3
 80015e8:	408e      	lsls	r6, r1
 80015ea:	4316      	orrs	r6, r2
 80015ec:	4652      	mov	r2, sl
 80015ee:	408a      	lsls	r2, r1
 80015f0:	9b00      	ldr	r3, [sp, #0]
 80015f2:	4935      	ldr	r1, [pc, #212]	; (80016c8 <__aeabi_dmul+0x3a4>)
 80015f4:	1a18      	subs	r0, r3, r0
 80015f6:	0003      	movs	r3, r0
 80015f8:	468c      	mov	ip, r1
 80015fa:	4463      	add	r3, ip
 80015fc:	2000      	movs	r0, #0
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	e6d3      	b.n	80013aa <__aeabi_dmul+0x86>
 8001602:	0025      	movs	r5, r4
 8001604:	4305      	orrs	r5, r0
 8001606:	d04a      	beq.n	800169e <__aeabi_dmul+0x37a>
 8001608:	2c00      	cmp	r4, #0
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0x2ea>
 800160c:	e0b0      	b.n	8001770 <__aeabi_dmul+0x44c>
 800160e:	0020      	movs	r0, r4
 8001610:	f000 fd30 	bl	8002074 <__clzsi2>
 8001614:	0001      	movs	r1, r0
 8001616:	0002      	movs	r2, r0
 8001618:	390b      	subs	r1, #11
 800161a:	231d      	movs	r3, #29
 800161c:	0010      	movs	r0, r2
 800161e:	1a5b      	subs	r3, r3, r1
 8001620:	0031      	movs	r1, r6
 8001622:	0035      	movs	r5, r6
 8001624:	3808      	subs	r0, #8
 8001626:	4084      	lsls	r4, r0
 8001628:	40d9      	lsrs	r1, r3
 800162a:	4085      	lsls	r5, r0
 800162c:	430c      	orrs	r4, r1
 800162e:	4826      	ldr	r0, [pc, #152]	; (80016c8 <__aeabi_dmul+0x3a4>)
 8001630:	1a83      	subs	r3, r0, r2
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2300      	movs	r3, #0
 8001636:	4699      	mov	r9, r3
 8001638:	469b      	mov	fp, r3
 800163a:	e697      	b.n	800136c <__aeabi_dmul+0x48>
 800163c:	0005      	movs	r5, r0
 800163e:	4325      	orrs	r5, r4
 8001640:	d126      	bne.n	8001690 <__aeabi_dmul+0x36c>
 8001642:	2208      	movs	r2, #8
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2302      	movs	r3, #2
 8001648:	2400      	movs	r4, #0
 800164a:	4691      	mov	r9, r2
 800164c:	469b      	mov	fp, r3
 800164e:	e68d      	b.n	800136c <__aeabi_dmul+0x48>
 8001650:	4652      	mov	r2, sl
 8001652:	9b00      	ldr	r3, [sp, #0]
 8001654:	4332      	orrs	r2, r6
 8001656:	d110      	bne.n	800167a <__aeabi_dmul+0x356>
 8001658:	4915      	ldr	r1, [pc, #84]	; (80016b0 <__aeabi_dmul+0x38c>)
 800165a:	2600      	movs	r6, #0
 800165c:	468c      	mov	ip, r1
 800165e:	4463      	add	r3, ip
 8001660:	4649      	mov	r1, r9
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2302      	movs	r3, #2
 8001666:	4319      	orrs	r1, r3
 8001668:	4689      	mov	r9, r1
 800166a:	2002      	movs	r0, #2
 800166c:	e69d      	b.n	80013aa <__aeabi_dmul+0x86>
 800166e:	465b      	mov	r3, fp
 8001670:	9701      	str	r7, [sp, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d000      	beq.n	8001678 <__aeabi_dmul+0x354>
 8001676:	e6ad      	b.n	80013d4 <__aeabi_dmul+0xb0>
 8001678:	e6c3      	b.n	8001402 <__aeabi_dmul+0xde>
 800167a:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <__aeabi_dmul+0x38c>)
 800167c:	2003      	movs	r0, #3
 800167e:	4694      	mov	ip, r2
 8001680:	4463      	add	r3, ip
 8001682:	464a      	mov	r2, r9
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2303      	movs	r3, #3
 8001688:	431a      	orrs	r2, r3
 800168a:	4691      	mov	r9, r2
 800168c:	4652      	mov	r2, sl
 800168e:	e68c      	b.n	80013aa <__aeabi_dmul+0x86>
 8001690:	220c      	movs	r2, #12
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2303      	movs	r3, #3
 8001696:	0005      	movs	r5, r0
 8001698:	4691      	mov	r9, r2
 800169a:	469b      	mov	fp, r3
 800169c:	e666      	b.n	800136c <__aeabi_dmul+0x48>
 800169e:	2304      	movs	r3, #4
 80016a0:	4699      	mov	r9, r3
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	2400      	movs	r4, #0
 80016aa:	469b      	mov	fp, r3
 80016ac:	e65e      	b.n	800136c <__aeabi_dmul+0x48>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	000007ff 	.word	0x000007ff
 80016b4:	fffffc01 	.word	0xfffffc01
 80016b8:	08006f60 	.word	0x08006f60
 80016bc:	000003ff 	.word	0x000003ff
 80016c0:	feffffff 	.word	0xfeffffff
 80016c4:	000007fe 	.word	0x000007fe
 80016c8:	fffffc0d 	.word	0xfffffc0d
 80016cc:	4649      	mov	r1, r9
 80016ce:	2301      	movs	r3, #1
 80016d0:	4319      	orrs	r1, r3
 80016d2:	4689      	mov	r9, r1
 80016d4:	2600      	movs	r6, #0
 80016d6:	2001      	movs	r0, #1
 80016d8:	e667      	b.n	80013aa <__aeabi_dmul+0x86>
 80016da:	2300      	movs	r3, #0
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	2500      	movs	r5, #0
 80016e0:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	0324      	lsls	r4, r4, #12
 80016e6:	e67e      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80016e8:	2001      	movs	r0, #1
 80016ea:	1a40      	subs	r0, r0, r1
 80016ec:	2838      	cmp	r0, #56	; 0x38
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dmul+0x3ce>
 80016f0:	e676      	b.n	80013e0 <__aeabi_dmul+0xbc>
 80016f2:	281f      	cmp	r0, #31
 80016f4:	dd5b      	ble.n	80017ae <__aeabi_dmul+0x48a>
 80016f6:	221f      	movs	r2, #31
 80016f8:	0023      	movs	r3, r4
 80016fa:	4252      	negs	r2, r2
 80016fc:	1a51      	subs	r1, r2, r1
 80016fe:	40cb      	lsrs	r3, r1
 8001700:	0019      	movs	r1, r3
 8001702:	2820      	cmp	r0, #32
 8001704:	d003      	beq.n	800170e <__aeabi_dmul+0x3ea>
 8001706:	4a3b      	ldr	r2, [pc, #236]	; (80017f4 <__aeabi_dmul+0x4d0>)
 8001708:	4462      	add	r2, ip
 800170a:	4094      	lsls	r4, r2
 800170c:	4325      	orrs	r5, r4
 800170e:	1e6a      	subs	r2, r5, #1
 8001710:	4195      	sbcs	r5, r2
 8001712:	002a      	movs	r2, r5
 8001714:	430a      	orrs	r2, r1
 8001716:	2107      	movs	r1, #7
 8001718:	000d      	movs	r5, r1
 800171a:	2400      	movs	r4, #0
 800171c:	4015      	ands	r5, r2
 800171e:	4211      	tst	r1, r2
 8001720:	d05b      	beq.n	80017da <__aeabi_dmul+0x4b6>
 8001722:	210f      	movs	r1, #15
 8001724:	2400      	movs	r4, #0
 8001726:	4011      	ands	r1, r2
 8001728:	2904      	cmp	r1, #4
 800172a:	d053      	beq.n	80017d4 <__aeabi_dmul+0x4b0>
 800172c:	1d11      	adds	r1, r2, #4
 800172e:	4291      	cmp	r1, r2
 8001730:	4192      	sbcs	r2, r2
 8001732:	4252      	negs	r2, r2
 8001734:	18a4      	adds	r4, r4, r2
 8001736:	000a      	movs	r2, r1
 8001738:	0223      	lsls	r3, r4, #8
 800173a:	d54b      	bpl.n	80017d4 <__aeabi_dmul+0x4b0>
 800173c:	2201      	movs	r2, #1
 800173e:	2400      	movs	r4, #0
 8001740:	2500      	movs	r5, #0
 8001742:	e650      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	031b      	lsls	r3, r3, #12
 8001748:	421c      	tst	r4, r3
 800174a:	d009      	beq.n	8001760 <__aeabi_dmul+0x43c>
 800174c:	421e      	tst	r6, r3
 800174e:	d107      	bne.n	8001760 <__aeabi_dmul+0x43c>
 8001750:	4333      	orrs	r3, r6
 8001752:	031c      	lsls	r4, r3, #12
 8001754:	4643      	mov	r3, r8
 8001756:	0015      	movs	r5, r2
 8001758:	0b24      	lsrs	r4, r4, #12
 800175a:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	e642      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	0312      	lsls	r2, r2, #12
 8001764:	4314      	orrs	r4, r2
 8001766:	0324      	lsls	r4, r4, #12
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800176a:	0b24      	lsrs	r4, r4, #12
 800176c:	9701      	str	r7, [sp, #4]
 800176e:	e63a      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001770:	f000 fc80 	bl	8002074 <__clzsi2>
 8001774:	0001      	movs	r1, r0
 8001776:	0002      	movs	r2, r0
 8001778:	3115      	adds	r1, #21
 800177a:	3220      	adds	r2, #32
 800177c:	291c      	cmp	r1, #28
 800177e:	dc00      	bgt.n	8001782 <__aeabi_dmul+0x45e>
 8001780:	e74b      	b.n	800161a <__aeabi_dmul+0x2f6>
 8001782:	0034      	movs	r4, r6
 8001784:	3808      	subs	r0, #8
 8001786:	2500      	movs	r5, #0
 8001788:	4084      	lsls	r4, r0
 800178a:	e750      	b.n	800162e <__aeabi_dmul+0x30a>
 800178c:	f000 fc72 	bl	8002074 <__clzsi2>
 8001790:	0003      	movs	r3, r0
 8001792:	001a      	movs	r2, r3
 8001794:	3215      	adds	r2, #21
 8001796:	3020      	adds	r0, #32
 8001798:	2a1c      	cmp	r2, #28
 800179a:	dc00      	bgt.n	800179e <__aeabi_dmul+0x47a>
 800179c:	e71e      	b.n	80015dc <__aeabi_dmul+0x2b8>
 800179e:	4656      	mov	r6, sl
 80017a0:	3b08      	subs	r3, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	409e      	lsls	r6, r3
 80017a6:	e723      	b.n	80015f0 <__aeabi_dmul+0x2cc>
 80017a8:	9b00      	ldr	r3, [sp, #0]
 80017aa:	469c      	mov	ip, r3
 80017ac:	e6e6      	b.n	800157c <__aeabi_dmul+0x258>
 80017ae:	4912      	ldr	r1, [pc, #72]	; (80017f8 <__aeabi_dmul+0x4d4>)
 80017b0:	0022      	movs	r2, r4
 80017b2:	4461      	add	r1, ip
 80017b4:	002e      	movs	r6, r5
 80017b6:	408d      	lsls	r5, r1
 80017b8:	408a      	lsls	r2, r1
 80017ba:	40c6      	lsrs	r6, r0
 80017bc:	1e69      	subs	r1, r5, #1
 80017be:	418d      	sbcs	r5, r1
 80017c0:	4332      	orrs	r2, r6
 80017c2:	432a      	orrs	r2, r5
 80017c4:	40c4      	lsrs	r4, r0
 80017c6:	0753      	lsls	r3, r2, #29
 80017c8:	d0b6      	beq.n	8001738 <__aeabi_dmul+0x414>
 80017ca:	210f      	movs	r1, #15
 80017cc:	4011      	ands	r1, r2
 80017ce:	2904      	cmp	r1, #4
 80017d0:	d1ac      	bne.n	800172c <__aeabi_dmul+0x408>
 80017d2:	e7b1      	b.n	8001738 <__aeabi_dmul+0x414>
 80017d4:	0765      	lsls	r5, r4, #29
 80017d6:	0264      	lsls	r4, r4, #9
 80017d8:	0b24      	lsrs	r4, r4, #12
 80017da:	08d2      	lsrs	r2, r2, #3
 80017dc:	4315      	orrs	r5, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	e601      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	0312      	lsls	r2, r2, #12
 80017e6:	4314      	orrs	r4, r2
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	4a01      	ldr	r2, [pc, #4]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80017ec:	0b24      	lsrs	r4, r4, #12
 80017ee:	e5fa      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	0000043e 	.word	0x0000043e
 80017f8:	0000041e 	.word	0x0000041e

080017fc <__aeabi_dsub>:
 80017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fe:	4657      	mov	r7, sl
 8001800:	464e      	mov	r6, r9
 8001802:	4645      	mov	r5, r8
 8001804:	46de      	mov	lr, fp
 8001806:	b5e0      	push	{r5, r6, r7, lr}
 8001808:	001e      	movs	r6, r3
 800180a:	0017      	movs	r7, r2
 800180c:	004a      	lsls	r2, r1, #1
 800180e:	030b      	lsls	r3, r1, #12
 8001810:	0d52      	lsrs	r2, r2, #21
 8001812:	0a5b      	lsrs	r3, r3, #9
 8001814:	4690      	mov	r8, r2
 8001816:	0f42      	lsrs	r2, r0, #29
 8001818:	431a      	orrs	r2, r3
 800181a:	0fcd      	lsrs	r5, r1, #31
 800181c:	4ccd      	ldr	r4, [pc, #820]	; (8001b54 <__aeabi_dsub+0x358>)
 800181e:	0331      	lsls	r1, r6, #12
 8001820:	00c3      	lsls	r3, r0, #3
 8001822:	4694      	mov	ip, r2
 8001824:	0070      	lsls	r0, r6, #1
 8001826:	0f7a      	lsrs	r2, r7, #29
 8001828:	0a49      	lsrs	r1, r1, #9
 800182a:	00ff      	lsls	r7, r7, #3
 800182c:	469a      	mov	sl, r3
 800182e:	46b9      	mov	r9, r7
 8001830:	0d40      	lsrs	r0, r0, #21
 8001832:	0ff6      	lsrs	r6, r6, #31
 8001834:	4311      	orrs	r1, r2
 8001836:	42a0      	cmp	r0, r4
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x40>
 800183a:	e0b1      	b.n	80019a0 <__aeabi_dsub+0x1a4>
 800183c:	2201      	movs	r2, #1
 800183e:	4056      	eors	r6, r2
 8001840:	46b3      	mov	fp, r6
 8001842:	42b5      	cmp	r5, r6
 8001844:	d100      	bne.n	8001848 <__aeabi_dsub+0x4c>
 8001846:	e088      	b.n	800195a <__aeabi_dsub+0x15e>
 8001848:	4642      	mov	r2, r8
 800184a:	1a12      	subs	r2, r2, r0
 800184c:	2a00      	cmp	r2, #0
 800184e:	dc00      	bgt.n	8001852 <__aeabi_dsub+0x56>
 8001850:	e0ae      	b.n	80019b0 <__aeabi_dsub+0x1b4>
 8001852:	2800      	cmp	r0, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x5c>
 8001856:	e0c1      	b.n	80019dc <__aeabi_dsub+0x1e0>
 8001858:	48be      	ldr	r0, [pc, #760]	; (8001b54 <__aeabi_dsub+0x358>)
 800185a:	4580      	cmp	r8, r0
 800185c:	d100      	bne.n	8001860 <__aeabi_dsub+0x64>
 800185e:	e151      	b.n	8001b04 <__aeabi_dsub+0x308>
 8001860:	2080      	movs	r0, #128	; 0x80
 8001862:	0400      	lsls	r0, r0, #16
 8001864:	4301      	orrs	r1, r0
 8001866:	2a38      	cmp	r2, #56	; 0x38
 8001868:	dd00      	ble.n	800186c <__aeabi_dsub+0x70>
 800186a:	e17b      	b.n	8001b64 <__aeabi_dsub+0x368>
 800186c:	2a1f      	cmp	r2, #31
 800186e:	dd00      	ble.n	8001872 <__aeabi_dsub+0x76>
 8001870:	e1ee      	b.n	8001c50 <__aeabi_dsub+0x454>
 8001872:	2020      	movs	r0, #32
 8001874:	003e      	movs	r6, r7
 8001876:	1a80      	subs	r0, r0, r2
 8001878:	000c      	movs	r4, r1
 800187a:	40d6      	lsrs	r6, r2
 800187c:	40d1      	lsrs	r1, r2
 800187e:	4087      	lsls	r7, r0
 8001880:	4662      	mov	r2, ip
 8001882:	4084      	lsls	r4, r0
 8001884:	1a52      	subs	r2, r2, r1
 8001886:	1e78      	subs	r0, r7, #1
 8001888:	4187      	sbcs	r7, r0
 800188a:	4694      	mov	ip, r2
 800188c:	4334      	orrs	r4, r6
 800188e:	4327      	orrs	r7, r4
 8001890:	1bdc      	subs	r4, r3, r7
 8001892:	42a3      	cmp	r3, r4
 8001894:	419b      	sbcs	r3, r3
 8001896:	4662      	mov	r2, ip
 8001898:	425b      	negs	r3, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4699      	mov	r9, r3
 800189e:	464b      	mov	r3, r9
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	d400      	bmi.n	80018a6 <__aeabi_dsub+0xaa>
 80018a4:	e118      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 80018a6:	464b      	mov	r3, r9
 80018a8:	0258      	lsls	r0, r3, #9
 80018aa:	0a43      	lsrs	r3, r0, #9
 80018ac:	4699      	mov	r9, r3
 80018ae:	464b      	mov	r3, r9
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dsub+0xba>
 80018b4:	e137      	b.n	8001b26 <__aeabi_dsub+0x32a>
 80018b6:	4648      	mov	r0, r9
 80018b8:	f000 fbdc 	bl	8002074 <__clzsi2>
 80018bc:	0001      	movs	r1, r0
 80018be:	3908      	subs	r1, #8
 80018c0:	2320      	movs	r3, #32
 80018c2:	0022      	movs	r2, r4
 80018c4:	4648      	mov	r0, r9
 80018c6:	1a5b      	subs	r3, r3, r1
 80018c8:	40da      	lsrs	r2, r3
 80018ca:	4088      	lsls	r0, r1
 80018cc:	408c      	lsls	r4, r1
 80018ce:	4643      	mov	r3, r8
 80018d0:	4310      	orrs	r0, r2
 80018d2:	4588      	cmp	r8, r1
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0xdc>
 80018d6:	e136      	b.n	8001b46 <__aeabi_dsub+0x34a>
 80018d8:	1ac9      	subs	r1, r1, r3
 80018da:	1c4b      	adds	r3, r1, #1
 80018dc:	2b1f      	cmp	r3, #31
 80018de:	dd00      	ble.n	80018e2 <__aeabi_dsub+0xe6>
 80018e0:	e0ea      	b.n	8001ab8 <__aeabi_dsub+0x2bc>
 80018e2:	2220      	movs	r2, #32
 80018e4:	0026      	movs	r6, r4
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	0001      	movs	r1, r0
 80018ea:	4094      	lsls	r4, r2
 80018ec:	40de      	lsrs	r6, r3
 80018ee:	40d8      	lsrs	r0, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	4091      	lsls	r1, r2
 80018f4:	1e62      	subs	r2, r4, #1
 80018f6:	4194      	sbcs	r4, r2
 80018f8:	4681      	mov	r9, r0
 80018fa:	4698      	mov	r8, r3
 80018fc:	4331      	orrs	r1, r6
 80018fe:	430c      	orrs	r4, r1
 8001900:	0763      	lsls	r3, r4, #29
 8001902:	d009      	beq.n	8001918 <__aeabi_dsub+0x11c>
 8001904:	230f      	movs	r3, #15
 8001906:	4023      	ands	r3, r4
 8001908:	2b04      	cmp	r3, #4
 800190a:	d005      	beq.n	8001918 <__aeabi_dsub+0x11c>
 800190c:	1d23      	adds	r3, r4, #4
 800190e:	42a3      	cmp	r3, r4
 8001910:	41a4      	sbcs	r4, r4
 8001912:	4264      	negs	r4, r4
 8001914:	44a1      	add	r9, r4
 8001916:	001c      	movs	r4, r3
 8001918:	464b      	mov	r3, r9
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	d400      	bmi.n	8001920 <__aeabi_dsub+0x124>
 800191e:	e0de      	b.n	8001ade <__aeabi_dsub+0x2e2>
 8001920:	4641      	mov	r1, r8
 8001922:	4b8c      	ldr	r3, [pc, #560]	; (8001b54 <__aeabi_dsub+0x358>)
 8001924:	3101      	adds	r1, #1
 8001926:	4299      	cmp	r1, r3
 8001928:	d100      	bne.n	800192c <__aeabi_dsub+0x130>
 800192a:	e0e7      	b.n	8001afc <__aeabi_dsub+0x300>
 800192c:	464b      	mov	r3, r9
 800192e:	488a      	ldr	r0, [pc, #552]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001930:	08e4      	lsrs	r4, r4, #3
 8001932:	4003      	ands	r3, r0
 8001934:	0018      	movs	r0, r3
 8001936:	0549      	lsls	r1, r1, #21
 8001938:	075b      	lsls	r3, r3, #29
 800193a:	0240      	lsls	r0, r0, #9
 800193c:	4323      	orrs	r3, r4
 800193e:	0d4a      	lsrs	r2, r1, #21
 8001940:	0b04      	lsrs	r4, r0, #12
 8001942:	0512      	lsls	r2, r2, #20
 8001944:	07ed      	lsls	r5, r5, #31
 8001946:	4322      	orrs	r2, r4
 8001948:	432a      	orrs	r2, r5
 800194a:	0018      	movs	r0, r3
 800194c:	0011      	movs	r1, r2
 800194e:	bcf0      	pop	{r4, r5, r6, r7}
 8001950:	46bb      	mov	fp, r7
 8001952:	46b2      	mov	sl, r6
 8001954:	46a9      	mov	r9, r5
 8001956:	46a0      	mov	r8, r4
 8001958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800195a:	4642      	mov	r2, r8
 800195c:	1a12      	subs	r2, r2, r0
 800195e:	2a00      	cmp	r2, #0
 8001960:	dd52      	ble.n	8001a08 <__aeabi_dsub+0x20c>
 8001962:	2800      	cmp	r0, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_dsub+0x16c>
 8001966:	e09c      	b.n	8001aa2 <__aeabi_dsub+0x2a6>
 8001968:	45a0      	cmp	r8, r4
 800196a:	d100      	bne.n	800196e <__aeabi_dsub+0x172>
 800196c:	e0ca      	b.n	8001b04 <__aeabi_dsub+0x308>
 800196e:	2080      	movs	r0, #128	; 0x80
 8001970:	0400      	lsls	r0, r0, #16
 8001972:	4301      	orrs	r1, r0
 8001974:	2a38      	cmp	r2, #56	; 0x38
 8001976:	dd00      	ble.n	800197a <__aeabi_dsub+0x17e>
 8001978:	e149      	b.n	8001c0e <__aeabi_dsub+0x412>
 800197a:	2a1f      	cmp	r2, #31
 800197c:	dc00      	bgt.n	8001980 <__aeabi_dsub+0x184>
 800197e:	e197      	b.n	8001cb0 <__aeabi_dsub+0x4b4>
 8001980:	0010      	movs	r0, r2
 8001982:	000e      	movs	r6, r1
 8001984:	3820      	subs	r0, #32
 8001986:	40c6      	lsrs	r6, r0
 8001988:	2a20      	cmp	r2, #32
 800198a:	d004      	beq.n	8001996 <__aeabi_dsub+0x19a>
 800198c:	2040      	movs	r0, #64	; 0x40
 800198e:	1a82      	subs	r2, r0, r2
 8001990:	4091      	lsls	r1, r2
 8001992:	430f      	orrs	r7, r1
 8001994:	46b9      	mov	r9, r7
 8001996:	464c      	mov	r4, r9
 8001998:	1e62      	subs	r2, r4, #1
 800199a:	4194      	sbcs	r4, r2
 800199c:	4334      	orrs	r4, r6
 800199e:	e13a      	b.n	8001c16 <__aeabi_dsub+0x41a>
 80019a0:	000a      	movs	r2, r1
 80019a2:	433a      	orrs	r2, r7
 80019a4:	d028      	beq.n	80019f8 <__aeabi_dsub+0x1fc>
 80019a6:	46b3      	mov	fp, r6
 80019a8:	42b5      	cmp	r5, r6
 80019aa:	d02b      	beq.n	8001a04 <__aeabi_dsub+0x208>
 80019ac:	4a6b      	ldr	r2, [pc, #428]	; (8001b5c <__aeabi_dsub+0x360>)
 80019ae:	4442      	add	r2, r8
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d05d      	beq.n	8001a70 <__aeabi_dsub+0x274>
 80019b4:	4642      	mov	r2, r8
 80019b6:	4644      	mov	r4, r8
 80019b8:	1a82      	subs	r2, r0, r2
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dsub+0x1c4>
 80019be:	e0f5      	b.n	8001bac <__aeabi_dsub+0x3b0>
 80019c0:	4665      	mov	r5, ip
 80019c2:	431d      	orrs	r5, r3
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x1cc>
 80019c6:	e19c      	b.n	8001d02 <__aeabi_dsub+0x506>
 80019c8:	1e55      	subs	r5, r2, #1
 80019ca:	2a01      	cmp	r2, #1
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x1d4>
 80019ce:	e1fb      	b.n	8001dc8 <__aeabi_dsub+0x5cc>
 80019d0:	4c60      	ldr	r4, [pc, #384]	; (8001b54 <__aeabi_dsub+0x358>)
 80019d2:	42a2      	cmp	r2, r4
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x1dc>
 80019d6:	e1bd      	b.n	8001d54 <__aeabi_dsub+0x558>
 80019d8:	002a      	movs	r2, r5
 80019da:	e0f0      	b.n	8001bbe <__aeabi_dsub+0x3c2>
 80019dc:	0008      	movs	r0, r1
 80019de:	4338      	orrs	r0, r7
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x1e8>
 80019e2:	e0c3      	b.n	8001b6c <__aeabi_dsub+0x370>
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	2a01      	cmp	r2, #1
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x1f0>
 80019ea:	e1a8      	b.n	8001d3e <__aeabi_dsub+0x542>
 80019ec:	4c59      	ldr	r4, [pc, #356]	; (8001b54 <__aeabi_dsub+0x358>)
 80019ee:	42a2      	cmp	r2, r4
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x1f8>
 80019f2:	e087      	b.n	8001b04 <__aeabi_dsub+0x308>
 80019f4:	0002      	movs	r2, r0
 80019f6:	e736      	b.n	8001866 <__aeabi_dsub+0x6a>
 80019f8:	2201      	movs	r2, #1
 80019fa:	4056      	eors	r6, r2
 80019fc:	46b3      	mov	fp, r6
 80019fe:	42b5      	cmp	r5, r6
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dsub+0x208>
 8001a02:	e721      	b.n	8001848 <__aeabi_dsub+0x4c>
 8001a04:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <__aeabi_dsub+0x360>)
 8001a06:	4442      	add	r2, r8
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x212>
 8001a0c:	e0b5      	b.n	8001b7a <__aeabi_dsub+0x37e>
 8001a0e:	4642      	mov	r2, r8
 8001a10:	4644      	mov	r4, r8
 8001a12:	1a82      	subs	r2, r0, r2
 8001a14:	2c00      	cmp	r4, #0
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x21e>
 8001a18:	e138      	b.n	8001c8c <__aeabi_dsub+0x490>
 8001a1a:	4e4e      	ldr	r6, [pc, #312]	; (8001b54 <__aeabi_dsub+0x358>)
 8001a1c:	42b0      	cmp	r0, r6
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x226>
 8001a20:	e1de      	b.n	8001de0 <__aeabi_dsub+0x5e4>
 8001a22:	2680      	movs	r6, #128	; 0x80
 8001a24:	4664      	mov	r4, ip
 8001a26:	0436      	lsls	r6, r6, #16
 8001a28:	4334      	orrs	r4, r6
 8001a2a:	46a4      	mov	ip, r4
 8001a2c:	2a38      	cmp	r2, #56	; 0x38
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dsub+0x236>
 8001a30:	e196      	b.n	8001d60 <__aeabi_dsub+0x564>
 8001a32:	2a1f      	cmp	r2, #31
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0x23c>
 8001a36:	e224      	b.n	8001e82 <__aeabi_dsub+0x686>
 8001a38:	2620      	movs	r6, #32
 8001a3a:	1ab4      	subs	r4, r6, r2
 8001a3c:	46a2      	mov	sl, r4
 8001a3e:	4664      	mov	r4, ip
 8001a40:	4656      	mov	r6, sl
 8001a42:	40b4      	lsls	r4, r6
 8001a44:	46a1      	mov	r9, r4
 8001a46:	001c      	movs	r4, r3
 8001a48:	464e      	mov	r6, r9
 8001a4a:	40d4      	lsrs	r4, r2
 8001a4c:	4326      	orrs	r6, r4
 8001a4e:	0034      	movs	r4, r6
 8001a50:	4656      	mov	r6, sl
 8001a52:	40b3      	lsls	r3, r6
 8001a54:	1e5e      	subs	r6, r3, #1
 8001a56:	41b3      	sbcs	r3, r6
 8001a58:	431c      	orrs	r4, r3
 8001a5a:	4663      	mov	r3, ip
 8001a5c:	40d3      	lsrs	r3, r2
 8001a5e:	18c9      	adds	r1, r1, r3
 8001a60:	19e4      	adds	r4, r4, r7
 8001a62:	42bc      	cmp	r4, r7
 8001a64:	41bf      	sbcs	r7, r7
 8001a66:	427f      	negs	r7, r7
 8001a68:	46b9      	mov	r9, r7
 8001a6a:	4680      	mov	r8, r0
 8001a6c:	4489      	add	r9, r1
 8001a6e:	e0d8      	b.n	8001c22 <__aeabi_dsub+0x426>
 8001a70:	4640      	mov	r0, r8
 8001a72:	4c3b      	ldr	r4, [pc, #236]	; (8001b60 <__aeabi_dsub+0x364>)
 8001a74:	3001      	adds	r0, #1
 8001a76:	4220      	tst	r0, r4
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dsub+0x280>
 8001a7a:	e0b4      	b.n	8001be6 <__aeabi_dsub+0x3ea>
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d000      	beq.n	8001a84 <__aeabi_dsub+0x288>
 8001a82:	e144      	b.n	8001d0e <__aeabi_dsub+0x512>
 8001a84:	4660      	mov	r0, ip
 8001a86:	4318      	orrs	r0, r3
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x290>
 8001a8a:	e190      	b.n	8001dae <__aeabi_dsub+0x5b2>
 8001a8c:	0008      	movs	r0, r1
 8001a8e:	4338      	orrs	r0, r7
 8001a90:	d000      	beq.n	8001a94 <__aeabi_dsub+0x298>
 8001a92:	e1aa      	b.n	8001dea <__aeabi_dsub+0x5ee>
 8001a94:	4661      	mov	r1, ip
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	0749      	lsls	r1, r1, #29
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	4661      	mov	r1, ip
 8001a9e:	08cc      	lsrs	r4, r1, #3
 8001aa0:	e027      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001aa2:	0008      	movs	r0, r1
 8001aa4:	4338      	orrs	r0, r7
 8001aa6:	d061      	beq.n	8001b6c <__aeabi_dsub+0x370>
 8001aa8:	1e50      	subs	r0, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x2b4>
 8001aae:	e139      	b.n	8001d24 <__aeabi_dsub+0x528>
 8001ab0:	42a2      	cmp	r2, r4
 8001ab2:	d027      	beq.n	8001b04 <__aeabi_dsub+0x308>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	e75d      	b.n	8001974 <__aeabi_dsub+0x178>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	391f      	subs	r1, #31
 8001abc:	40ca      	lsrs	r2, r1
 8001abe:	0011      	movs	r1, r2
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d003      	beq.n	8001acc <__aeabi_dsub+0x2d0>
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4098      	lsls	r0, r3
 8001aca:	4304      	orrs	r4, r0
 8001acc:	1e63      	subs	r3, r4, #1
 8001ace:	419c      	sbcs	r4, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	4699      	mov	r9, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	430c      	orrs	r4, r1
 8001ad8:	0763      	lsls	r3, r4, #29
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x2e2>
 8001adc:	e712      	b.n	8001904 <__aeabi_dsub+0x108>
 8001ade:	464b      	mov	r3, r9
 8001ae0:	464a      	mov	r2, r9
 8001ae2:	08e4      	lsrs	r4, r4, #3
 8001ae4:	075b      	lsls	r3, r3, #29
 8001ae6:	4323      	orrs	r3, r4
 8001ae8:	08d4      	lsrs	r4, r2, #3
 8001aea:	4642      	mov	r2, r8
 8001aec:	4919      	ldr	r1, [pc, #100]	; (8001b54 <__aeabi_dsub+0x358>)
 8001aee:	428a      	cmp	r2, r1
 8001af0:	d00e      	beq.n	8001b10 <__aeabi_dsub+0x314>
 8001af2:	0324      	lsls	r4, r4, #12
 8001af4:	0552      	lsls	r2, r2, #21
 8001af6:	0b24      	lsrs	r4, r4, #12
 8001af8:	0d52      	lsrs	r2, r2, #21
 8001afa:	e722      	b.n	8001942 <__aeabi_dsub+0x146>
 8001afc:	000a      	movs	r2, r1
 8001afe:	2400      	movs	r4, #0
 8001b00:	2300      	movs	r3, #0
 8001b02:	e71e      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	4662      	mov	r2, ip
 8001b08:	0752      	lsls	r2, r2, #29
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	4662      	mov	r2, ip
 8001b0e:	08d4      	lsrs	r4, r2, #3
 8001b10:	001a      	movs	r2, r3
 8001b12:	4322      	orrs	r2, r4
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x31c>
 8001b16:	e1fc      	b.n	8001f12 <__aeabi_dsub+0x716>
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	0312      	lsls	r2, r2, #12
 8001b1c:	4314      	orrs	r4, r2
 8001b1e:	0324      	lsls	r4, r4, #12
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <__aeabi_dsub+0x358>)
 8001b22:	0b24      	lsrs	r4, r4, #12
 8001b24:	e70d      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b26:	0020      	movs	r0, r4
 8001b28:	f000 faa4 	bl	8002074 <__clzsi2>
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	3118      	adds	r1, #24
 8001b30:	291f      	cmp	r1, #31
 8001b32:	dc00      	bgt.n	8001b36 <__aeabi_dsub+0x33a>
 8001b34:	e6c4      	b.n	80018c0 <__aeabi_dsub+0xc4>
 8001b36:	3808      	subs	r0, #8
 8001b38:	4084      	lsls	r4, r0
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	0020      	movs	r0, r4
 8001b3e:	2400      	movs	r4, #0
 8001b40:	4588      	cmp	r8, r1
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dsub+0x34a>
 8001b44:	e6c8      	b.n	80018d8 <__aeabi_dsub+0xdc>
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001b48:	1a5b      	subs	r3, r3, r1
 8001b4a:	4010      	ands	r0, r2
 8001b4c:	4698      	mov	r8, r3
 8001b4e:	4681      	mov	r9, r0
 8001b50:	e6d6      	b.n	8001900 <__aeabi_dsub+0x104>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	ff7fffff 	.word	0xff7fffff
 8001b5c:	fffff801 	.word	0xfffff801
 8001b60:	000007fe 	.word	0x000007fe
 8001b64:	430f      	orrs	r7, r1
 8001b66:	1e7a      	subs	r2, r7, #1
 8001b68:	4197      	sbcs	r7, r2
 8001b6a:	e691      	b.n	8001890 <__aeabi_dsub+0x94>
 8001b6c:	4661      	mov	r1, ip
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	0749      	lsls	r1, r1, #29
 8001b72:	430b      	orrs	r3, r1
 8001b74:	4661      	mov	r1, ip
 8001b76:	08cc      	lsrs	r4, r1, #3
 8001b78:	e7b8      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4cd3      	ldr	r4, [pc, #844]	; (8001ecc <__aeabi_dsub+0x6d0>)
 8001b7e:	3001      	adds	r0, #1
 8001b80:	4220      	tst	r0, r4
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x38a>
 8001b84:	e0a2      	b.n	8001ccc <__aeabi_dsub+0x4d0>
 8001b86:	4640      	mov	r0, r8
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d000      	beq.n	8001b8e <__aeabi_dsub+0x392>
 8001b8c:	e101      	b.n	8001d92 <__aeabi_dsub+0x596>
 8001b8e:	4660      	mov	r0, ip
 8001b90:	4318      	orrs	r0, r3
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x39a>
 8001b94:	e15e      	b.n	8001e54 <__aeabi_dsub+0x658>
 8001b96:	0008      	movs	r0, r1
 8001b98:	4338      	orrs	r0, r7
 8001b9a:	d000      	beq.n	8001b9e <__aeabi_dsub+0x3a2>
 8001b9c:	e15f      	b.n	8001e5e <__aeabi_dsub+0x662>
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	0749      	lsls	r1, r1, #29
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	4661      	mov	r1, ip
 8001ba8:	08cc      	lsrs	r4, r1, #3
 8001baa:	e7a2      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001bac:	4dc8      	ldr	r5, [pc, #800]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001bae:	42a8      	cmp	r0, r5
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x3b8>
 8001bb2:	e0cf      	b.n	8001d54 <__aeabi_dsub+0x558>
 8001bb4:	2580      	movs	r5, #128	; 0x80
 8001bb6:	4664      	mov	r4, ip
 8001bb8:	042d      	lsls	r5, r5, #16
 8001bba:	432c      	orrs	r4, r5
 8001bbc:	46a4      	mov	ip, r4
 8001bbe:	2a38      	cmp	r2, #56	; 0x38
 8001bc0:	dc56      	bgt.n	8001c70 <__aeabi_dsub+0x474>
 8001bc2:	2a1f      	cmp	r2, #31
 8001bc4:	dd00      	ble.n	8001bc8 <__aeabi_dsub+0x3cc>
 8001bc6:	e0d1      	b.n	8001d6c <__aeabi_dsub+0x570>
 8001bc8:	2520      	movs	r5, #32
 8001bca:	001e      	movs	r6, r3
 8001bcc:	1aad      	subs	r5, r5, r2
 8001bce:	4664      	mov	r4, ip
 8001bd0:	40ab      	lsls	r3, r5
 8001bd2:	40ac      	lsls	r4, r5
 8001bd4:	40d6      	lsrs	r6, r2
 8001bd6:	1e5d      	subs	r5, r3, #1
 8001bd8:	41ab      	sbcs	r3, r5
 8001bda:	4334      	orrs	r4, r6
 8001bdc:	4323      	orrs	r3, r4
 8001bde:	4664      	mov	r4, ip
 8001be0:	40d4      	lsrs	r4, r2
 8001be2:	1b09      	subs	r1, r1, r4
 8001be4:	e049      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001be6:	4660      	mov	r0, ip
 8001be8:	1bdc      	subs	r4, r3, r7
 8001bea:	1a46      	subs	r6, r0, r1
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	4240      	negs	r0, r0
 8001bf2:	4681      	mov	r9, r0
 8001bf4:	0030      	movs	r0, r6
 8001bf6:	464e      	mov	r6, r9
 8001bf8:	1b80      	subs	r0, r0, r6
 8001bfa:	4681      	mov	r9, r0
 8001bfc:	0200      	lsls	r0, r0, #8
 8001bfe:	d476      	bmi.n	8001cee <__aeabi_dsub+0x4f2>
 8001c00:	464b      	mov	r3, r9
 8001c02:	4323      	orrs	r3, r4
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dsub+0x40c>
 8001c06:	e652      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001c08:	2400      	movs	r4, #0
 8001c0a:	2500      	movs	r5, #0
 8001c0c:	e771      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001c0e:	4339      	orrs	r1, r7
 8001c10:	000c      	movs	r4, r1
 8001c12:	1e62      	subs	r2, r4, #1
 8001c14:	4194      	sbcs	r4, r2
 8001c16:	18e4      	adds	r4, r4, r3
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	419b      	sbcs	r3, r3
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	4463      	add	r3, ip
 8001c20:	4699      	mov	r9, r3
 8001c22:	464b      	mov	r3, r9
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	d400      	bmi.n	8001c2a <__aeabi_dsub+0x42e>
 8001c28:	e756      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	4ba8      	ldr	r3, [pc, #672]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c30:	44e0      	add	r8, ip
 8001c32:	4598      	cmp	r8, r3
 8001c34:	d038      	beq.n	8001ca8 <__aeabi_dsub+0x4ac>
 8001c36:	464b      	mov	r3, r9
 8001c38:	48a6      	ldr	r0, [pc, #664]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4003      	ands	r3, r0
 8001c3e:	0018      	movs	r0, r3
 8001c40:	0863      	lsrs	r3, r4, #1
 8001c42:	4014      	ands	r4, r2
 8001c44:	431c      	orrs	r4, r3
 8001c46:	07c3      	lsls	r3, r0, #31
 8001c48:	431c      	orrs	r4, r3
 8001c4a:	0843      	lsrs	r3, r0, #1
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	e657      	b.n	8001900 <__aeabi_dsub+0x104>
 8001c50:	0010      	movs	r0, r2
 8001c52:	000e      	movs	r6, r1
 8001c54:	3820      	subs	r0, #32
 8001c56:	40c6      	lsrs	r6, r0
 8001c58:	2a20      	cmp	r2, #32
 8001c5a:	d004      	beq.n	8001c66 <__aeabi_dsub+0x46a>
 8001c5c:	2040      	movs	r0, #64	; 0x40
 8001c5e:	1a82      	subs	r2, r0, r2
 8001c60:	4091      	lsls	r1, r2
 8001c62:	430f      	orrs	r7, r1
 8001c64:	46b9      	mov	r9, r7
 8001c66:	464f      	mov	r7, r9
 8001c68:	1e7a      	subs	r2, r7, #1
 8001c6a:	4197      	sbcs	r7, r2
 8001c6c:	4337      	orrs	r7, r6
 8001c6e:	e60f      	b.n	8001890 <__aeabi_dsub+0x94>
 8001c70:	4662      	mov	r2, ip
 8001c72:	431a      	orrs	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	4193      	sbcs	r3, r2
 8001c7a:	1afc      	subs	r4, r7, r3
 8001c7c:	42a7      	cmp	r7, r4
 8001c7e:	41bf      	sbcs	r7, r7
 8001c80:	427f      	negs	r7, r7
 8001c82:	1bcb      	subs	r3, r1, r7
 8001c84:	4699      	mov	r9, r3
 8001c86:	465d      	mov	r5, fp
 8001c88:	4680      	mov	r8, r0
 8001c8a:	e608      	b.n	800189e <__aeabi_dsub+0xa2>
 8001c8c:	4666      	mov	r6, ip
 8001c8e:	431e      	orrs	r6, r3
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x498>
 8001c92:	e0be      	b.n	8001e12 <__aeabi_dsub+0x616>
 8001c94:	1e56      	subs	r6, r2, #1
 8001c96:	2a01      	cmp	r2, #1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x4a0>
 8001c9a:	e109      	b.n	8001eb0 <__aeabi_dsub+0x6b4>
 8001c9c:	4c8c      	ldr	r4, [pc, #560]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c9e:	42a2      	cmp	r2, r4
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x4a8>
 8001ca2:	e119      	b.n	8001ed8 <__aeabi_dsub+0x6dc>
 8001ca4:	0032      	movs	r2, r6
 8001ca6:	e6c1      	b.n	8001a2c <__aeabi_dsub+0x230>
 8001ca8:	4642      	mov	r2, r8
 8001caa:	2400      	movs	r4, #0
 8001cac:	2300      	movs	r3, #0
 8001cae:	e648      	b.n	8001942 <__aeabi_dsub+0x146>
 8001cb0:	2020      	movs	r0, #32
 8001cb2:	000c      	movs	r4, r1
 8001cb4:	1a80      	subs	r0, r0, r2
 8001cb6:	003e      	movs	r6, r7
 8001cb8:	4087      	lsls	r7, r0
 8001cba:	4084      	lsls	r4, r0
 8001cbc:	40d6      	lsrs	r6, r2
 8001cbe:	1e78      	subs	r0, r7, #1
 8001cc0:	4187      	sbcs	r7, r0
 8001cc2:	40d1      	lsrs	r1, r2
 8001cc4:	4334      	orrs	r4, r6
 8001cc6:	433c      	orrs	r4, r7
 8001cc8:	448c      	add	ip, r1
 8001cca:	e7a4      	b.n	8001c16 <__aeabi_dsub+0x41a>
 8001ccc:	4a80      	ldr	r2, [pc, #512]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001cce:	4290      	cmp	r0, r2
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x4d8>
 8001cd2:	e0e9      	b.n	8001ea8 <__aeabi_dsub+0x6ac>
 8001cd4:	19df      	adds	r7, r3, r7
 8001cd6:	429f      	cmp	r7, r3
 8001cd8:	419b      	sbcs	r3, r3
 8001cda:	4461      	add	r1, ip
 8001cdc:	425b      	negs	r3, r3
 8001cde:	18c9      	adds	r1, r1, r3
 8001ce0:	07cc      	lsls	r4, r1, #31
 8001ce2:	087f      	lsrs	r7, r7, #1
 8001ce4:	084b      	lsrs	r3, r1, #1
 8001ce6:	4699      	mov	r9, r3
 8001ce8:	4680      	mov	r8, r0
 8001cea:	433c      	orrs	r4, r7
 8001cec:	e6f4      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001cee:	1afc      	subs	r4, r7, r3
 8001cf0:	42a7      	cmp	r7, r4
 8001cf2:	41bf      	sbcs	r7, r7
 8001cf4:	4663      	mov	r3, ip
 8001cf6:	427f      	negs	r7, r7
 8001cf8:	1ac9      	subs	r1, r1, r3
 8001cfa:	1bcb      	subs	r3, r1, r7
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	465d      	mov	r5, fp
 8001d00:	e5d5      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001d02:	08ff      	lsrs	r7, r7, #3
 8001d04:	074b      	lsls	r3, r1, #29
 8001d06:	465d      	mov	r5, fp
 8001d08:	433b      	orrs	r3, r7
 8001d0a:	08cc      	lsrs	r4, r1, #3
 8001d0c:	e6ee      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001d0e:	4662      	mov	r2, ip
 8001d10:	431a      	orrs	r2, r3
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x51a>
 8001d14:	e082      	b.n	8001e1c <__aeabi_dsub+0x620>
 8001d16:	000b      	movs	r3, r1
 8001d18:	433b      	orrs	r3, r7
 8001d1a:	d11b      	bne.n	8001d54 <__aeabi_dsub+0x558>
 8001d1c:	2480      	movs	r4, #128	; 0x80
 8001d1e:	2500      	movs	r5, #0
 8001d20:	0324      	lsls	r4, r4, #12
 8001d22:	e6f9      	b.n	8001b18 <__aeabi_dsub+0x31c>
 8001d24:	19dc      	adds	r4, r3, r7
 8001d26:	429c      	cmp	r4, r3
 8001d28:	419b      	sbcs	r3, r3
 8001d2a:	4461      	add	r1, ip
 8001d2c:	4689      	mov	r9, r1
 8001d2e:	425b      	negs	r3, r3
 8001d30:	4499      	add	r9, r3
 8001d32:	464b      	mov	r3, r9
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	d444      	bmi.n	8001dc2 <__aeabi_dsub+0x5c6>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	e6cc      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001d3e:	1bdc      	subs	r4, r3, r7
 8001d40:	4662      	mov	r2, ip
 8001d42:	42a3      	cmp	r3, r4
 8001d44:	419b      	sbcs	r3, r3
 8001d46:	1a51      	subs	r1, r2, r1
 8001d48:	425b      	negs	r3, r3
 8001d4a:	1acb      	subs	r3, r1, r3
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4698      	mov	r8, r3
 8001d52:	e5a4      	b.n	800189e <__aeabi_dsub+0xa2>
 8001d54:	08ff      	lsrs	r7, r7, #3
 8001d56:	074b      	lsls	r3, r1, #29
 8001d58:	465d      	mov	r5, fp
 8001d5a:	433b      	orrs	r3, r7
 8001d5c:	08cc      	lsrs	r4, r1, #3
 8001d5e:	e6d7      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001d60:	4662      	mov	r2, ip
 8001d62:	431a      	orrs	r2, r3
 8001d64:	0014      	movs	r4, r2
 8001d66:	1e63      	subs	r3, r4, #1
 8001d68:	419c      	sbcs	r4, r3
 8001d6a:	e679      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001d6c:	0015      	movs	r5, r2
 8001d6e:	4664      	mov	r4, ip
 8001d70:	3d20      	subs	r5, #32
 8001d72:	40ec      	lsrs	r4, r5
 8001d74:	46a0      	mov	r8, r4
 8001d76:	2a20      	cmp	r2, #32
 8001d78:	d005      	beq.n	8001d86 <__aeabi_dsub+0x58a>
 8001d7a:	2540      	movs	r5, #64	; 0x40
 8001d7c:	4664      	mov	r4, ip
 8001d7e:	1aaa      	subs	r2, r5, r2
 8001d80:	4094      	lsls	r4, r2
 8001d82:	4323      	orrs	r3, r4
 8001d84:	469a      	mov	sl, r3
 8001d86:	4654      	mov	r4, sl
 8001d88:	1e63      	subs	r3, r4, #1
 8001d8a:	419c      	sbcs	r4, r3
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	e773      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001d92:	4662      	mov	r2, ip
 8001d94:	431a      	orrs	r2, r3
 8001d96:	d023      	beq.n	8001de0 <__aeabi_dsub+0x5e4>
 8001d98:	000a      	movs	r2, r1
 8001d9a:	433a      	orrs	r2, r7
 8001d9c:	d000      	beq.n	8001da0 <__aeabi_dsub+0x5a4>
 8001d9e:	e0a0      	b.n	8001ee2 <__aeabi_dsub+0x6e6>
 8001da0:	4662      	mov	r2, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0752      	lsls	r2, r2, #29
 8001da6:	4313      	orrs	r3, r2
 8001da8:	4662      	mov	r2, ip
 8001daa:	08d4      	lsrs	r4, r2, #3
 8001dac:	e6b0      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dae:	000b      	movs	r3, r1
 8001db0:	433b      	orrs	r3, r7
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x5ba>
 8001db4:	e728      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001db6:	08ff      	lsrs	r7, r7, #3
 8001db8:	074b      	lsls	r3, r1, #29
 8001dba:	465d      	mov	r5, fp
 8001dbc:	433b      	orrs	r3, r7
 8001dbe:	08cc      	lsrs	r4, r1, #3
 8001dc0:	e697      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	e736      	b.n	8001c36 <__aeabi_dsub+0x43a>
 8001dc8:	1afc      	subs	r4, r7, r3
 8001dca:	42a7      	cmp	r7, r4
 8001dcc:	41bf      	sbcs	r7, r7
 8001dce:	4663      	mov	r3, ip
 8001dd0:	427f      	negs	r7, r7
 8001dd2:	1ac9      	subs	r1, r1, r3
 8001dd4:	1bcb      	subs	r3, r1, r7
 8001dd6:	4699      	mov	r9, r3
 8001dd8:	2301      	movs	r3, #1
 8001dda:	465d      	mov	r5, fp
 8001ddc:	4698      	mov	r8, r3
 8001dde:	e55e      	b.n	800189e <__aeabi_dsub+0xa2>
 8001de0:	074b      	lsls	r3, r1, #29
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	433b      	orrs	r3, r7
 8001de6:	08cc      	lsrs	r4, r1, #3
 8001de8:	e692      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dea:	1bdc      	subs	r4, r3, r7
 8001dec:	4660      	mov	r0, ip
 8001dee:	42a3      	cmp	r3, r4
 8001df0:	41b6      	sbcs	r6, r6
 8001df2:	1a40      	subs	r0, r0, r1
 8001df4:	4276      	negs	r6, r6
 8001df6:	1b80      	subs	r0, r0, r6
 8001df8:	4681      	mov	r9, r0
 8001dfa:	0200      	lsls	r0, r0, #8
 8001dfc:	d560      	bpl.n	8001ec0 <__aeabi_dsub+0x6c4>
 8001dfe:	1afc      	subs	r4, r7, r3
 8001e00:	42a7      	cmp	r7, r4
 8001e02:	41bf      	sbcs	r7, r7
 8001e04:	4663      	mov	r3, ip
 8001e06:	427f      	negs	r7, r7
 8001e08:	1ac9      	subs	r1, r1, r3
 8001e0a:	1bcb      	subs	r3, r1, r7
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	465d      	mov	r5, fp
 8001e10:	e576      	b.n	8001900 <__aeabi_dsub+0x104>
 8001e12:	08ff      	lsrs	r7, r7, #3
 8001e14:	074b      	lsls	r3, r1, #29
 8001e16:	433b      	orrs	r3, r7
 8001e18:	08cc      	lsrs	r4, r1, #3
 8001e1a:	e667      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001e1c:	000a      	movs	r2, r1
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	433a      	orrs	r2, r7
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x62a>
 8001e24:	e66f      	b.n	8001b06 <__aeabi_dsub+0x30a>
 8001e26:	4662      	mov	r2, ip
 8001e28:	0752      	lsls	r2, r2, #29
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	4662      	mov	r2, ip
 8001e2e:	08d4      	lsrs	r4, r2, #3
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	0312      	lsls	r2, r2, #12
 8001e34:	4214      	tst	r4, r2
 8001e36:	d007      	beq.n	8001e48 <__aeabi_dsub+0x64c>
 8001e38:	08c8      	lsrs	r0, r1, #3
 8001e3a:	4210      	tst	r0, r2
 8001e3c:	d104      	bne.n	8001e48 <__aeabi_dsub+0x64c>
 8001e3e:	465d      	mov	r5, fp
 8001e40:	0004      	movs	r4, r0
 8001e42:	08fb      	lsrs	r3, r7, #3
 8001e44:	0749      	lsls	r1, r1, #29
 8001e46:	430b      	orrs	r3, r1
 8001e48:	0f5a      	lsrs	r2, r3, #29
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	0752      	lsls	r2, r2, #29
 8001e50:	4313      	orrs	r3, r2
 8001e52:	e65d      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001e54:	074b      	lsls	r3, r1, #29
 8001e56:	08ff      	lsrs	r7, r7, #3
 8001e58:	433b      	orrs	r3, r7
 8001e5a:	08cc      	lsrs	r4, r1, #3
 8001e5c:	e649      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001e5e:	19dc      	adds	r4, r3, r7
 8001e60:	429c      	cmp	r4, r3
 8001e62:	419b      	sbcs	r3, r3
 8001e64:	4461      	add	r1, ip
 8001e66:	4689      	mov	r9, r1
 8001e68:	425b      	negs	r3, r3
 8001e6a:	4499      	add	r9, r3
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	d400      	bmi.n	8001e74 <__aeabi_dsub+0x678>
 8001e72:	e631      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e74:	464a      	mov	r2, r9
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001e78:	401a      	ands	r2, r3
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	4698      	mov	r8, r3
 8001e80:	e62a      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e82:	0016      	movs	r6, r2
 8001e84:	4664      	mov	r4, ip
 8001e86:	3e20      	subs	r6, #32
 8001e88:	40f4      	lsrs	r4, r6
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d005      	beq.n	8001e9c <__aeabi_dsub+0x6a0>
 8001e90:	2640      	movs	r6, #64	; 0x40
 8001e92:	4664      	mov	r4, ip
 8001e94:	1ab2      	subs	r2, r6, r2
 8001e96:	4094      	lsls	r4, r2
 8001e98:	4323      	orrs	r3, r4
 8001e9a:	469a      	mov	sl, r3
 8001e9c:	4654      	mov	r4, sl
 8001e9e:	1e63      	subs	r3, r4, #1
 8001ea0:	419c      	sbcs	r4, r3
 8001ea2:	4643      	mov	r3, r8
 8001ea4:	431c      	orrs	r4, r3
 8001ea6:	e5db      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	2400      	movs	r4, #0
 8001eac:	2300      	movs	r3, #0
 8001eae:	e548      	b.n	8001942 <__aeabi_dsub+0x146>
 8001eb0:	19dc      	adds	r4, r3, r7
 8001eb2:	42bc      	cmp	r4, r7
 8001eb4:	41bf      	sbcs	r7, r7
 8001eb6:	4461      	add	r1, ip
 8001eb8:	4689      	mov	r9, r1
 8001eba:	427f      	negs	r7, r7
 8001ebc:	44b9      	add	r9, r7
 8001ebe:	e738      	b.n	8001d32 <__aeabi_dsub+0x536>
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x6cc>
 8001ec6:	e69f      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001ec8:	e606      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	000007fe 	.word	0x000007fe
 8001ed0:	000007ff 	.word	0x000007ff
 8001ed4:	ff7fffff 	.word	0xff7fffff
 8001ed8:	08ff      	lsrs	r7, r7, #3
 8001eda:	074b      	lsls	r3, r1, #29
 8001edc:	433b      	orrs	r3, r7
 8001ede:	08cc      	lsrs	r4, r1, #3
 8001ee0:	e616      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	0752      	lsls	r2, r2, #29
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	4662      	mov	r2, ip
 8001eec:	08d4      	lsrs	r4, r2, #3
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0312      	lsls	r2, r2, #12
 8001ef2:	4214      	tst	r4, r2
 8001ef4:	d007      	beq.n	8001f06 <__aeabi_dsub+0x70a>
 8001ef6:	08c8      	lsrs	r0, r1, #3
 8001ef8:	4210      	tst	r0, r2
 8001efa:	d104      	bne.n	8001f06 <__aeabi_dsub+0x70a>
 8001efc:	465d      	mov	r5, fp
 8001efe:	0004      	movs	r4, r0
 8001f00:	08fb      	lsrs	r3, r7, #3
 8001f02:	0749      	lsls	r1, r1, #29
 8001f04:	430b      	orrs	r3, r1
 8001f06:	0f5a      	lsrs	r2, r3, #29
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	0752      	lsls	r2, r2, #29
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	e5fe      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001f12:	2300      	movs	r3, #0
 8001f14:	4a01      	ldr	r2, [pc, #4]	; (8001f1c <__aeabi_dsub+0x720>)
 8001f16:	001c      	movs	r4, r3
 8001f18:	e513      	b.n	8001942 <__aeabi_dsub+0x146>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000007ff 	.word	0x000007ff

08001f20 <__aeabi_dcmpun>:
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	0005      	movs	r5, r0
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <__aeabi_dcmpun+0x38>)
 8001f26:	031c      	lsls	r4, r3, #12
 8001f28:	0016      	movs	r6, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	030a      	lsls	r2, r1, #12
 8001f2e:	0049      	lsls	r1, r1, #1
 8001f30:	0b12      	lsrs	r2, r2, #12
 8001f32:	0d49      	lsrs	r1, r1, #21
 8001f34:	0b24      	lsrs	r4, r4, #12
 8001f36:	0d5b      	lsrs	r3, r3, #21
 8001f38:	4281      	cmp	r1, r0
 8001f3a:	d008      	beq.n	8001f4e <__aeabi_dcmpun+0x2e>
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <__aeabi_dcmpun+0x38>)
 8001f3e:	2000      	movs	r0, #0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d103      	bne.n	8001f4c <__aeabi_dcmpun+0x2c>
 8001f44:	0020      	movs	r0, r4
 8001f46:	4330      	orrs	r0, r6
 8001f48:	1e43      	subs	r3, r0, #1
 8001f4a:	4198      	sbcs	r0, r3
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	2001      	movs	r0, #1
 8001f50:	432a      	orrs	r2, r5
 8001f52:	d1fb      	bne.n	8001f4c <__aeabi_dcmpun+0x2c>
 8001f54:	e7f2      	b.n	8001f3c <__aeabi_dcmpun+0x1c>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff

08001f5c <__aeabi_d2iz>:
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	b530      	push	{r4, r5, lr}
 8001f60:	4c13      	ldr	r4, [pc, #76]	; (8001fb0 <__aeabi_d2iz+0x54>)
 8001f62:	0053      	lsls	r3, r2, #1
 8001f64:	0309      	lsls	r1, r1, #12
 8001f66:	0005      	movs	r5, r0
 8001f68:	0b09      	lsrs	r1, r1, #12
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	0d5b      	lsrs	r3, r3, #21
 8001f6e:	0fd2      	lsrs	r2, r2, #31
 8001f70:	42a3      	cmp	r3, r4
 8001f72:	dd04      	ble.n	8001f7e <__aeabi_d2iz+0x22>
 8001f74:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <__aeabi_d2iz+0x58>)
 8001f76:	4283      	cmp	r3, r0
 8001f78:	dd02      	ble.n	8001f80 <__aeabi_d2iz+0x24>
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <__aeabi_d2iz+0x5c>)
 8001f7c:	18d0      	adds	r0, r2, r3
 8001f7e:	bd30      	pop	{r4, r5, pc}
 8001f80:	2080      	movs	r0, #128	; 0x80
 8001f82:	0340      	lsls	r0, r0, #13
 8001f84:	4301      	orrs	r1, r0
 8001f86:	480d      	ldr	r0, [pc, #52]	; (8001fbc <__aeabi_d2iz+0x60>)
 8001f88:	1ac0      	subs	r0, r0, r3
 8001f8a:	281f      	cmp	r0, #31
 8001f8c:	dd08      	ble.n	8001fa0 <__aeabi_d2iz+0x44>
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <__aeabi_d2iz+0x64>)
 8001f90:	1ac3      	subs	r3, r0, r3
 8001f92:	40d9      	lsrs	r1, r3
 8001f94:	000b      	movs	r3, r1
 8001f96:	4258      	negs	r0, r3
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d1f0      	bne.n	8001f7e <__aeabi_d2iz+0x22>
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	e7ee      	b.n	8001f7e <__aeabi_d2iz+0x22>
 8001fa0:	4c08      	ldr	r4, [pc, #32]	; (8001fc4 <__aeabi_d2iz+0x68>)
 8001fa2:	40c5      	lsrs	r5, r0
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	4463      	add	r3, ip
 8001fa8:	4099      	lsls	r1, r3
 8001faa:	000b      	movs	r3, r1
 8001fac:	432b      	orrs	r3, r5
 8001fae:	e7f2      	b.n	8001f96 <__aeabi_d2iz+0x3a>
 8001fb0:	000003fe 	.word	0x000003fe
 8001fb4:	0000041d 	.word	0x0000041d
 8001fb8:	7fffffff 	.word	0x7fffffff
 8001fbc:	00000433 	.word	0x00000433
 8001fc0:	00000413 	.word	0x00000413
 8001fc4:	fffffbed 	.word	0xfffffbed

08001fc8 <__aeabi_i2d>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d016      	beq.n	8001ffc <__aeabi_i2d+0x34>
 8001fce:	17c3      	asrs	r3, r0, #31
 8001fd0:	18c5      	adds	r5, r0, r3
 8001fd2:	405d      	eors	r5, r3
 8001fd4:	0fc4      	lsrs	r4, r0, #31
 8001fd6:	0028      	movs	r0, r5
 8001fd8:	f000 f84c 	bl	8002074 <__clzsi2>
 8001fdc:	4a11      	ldr	r2, [pc, #68]	; (8002024 <__aeabi_i2d+0x5c>)
 8001fde:	1a12      	subs	r2, r2, r0
 8001fe0:	280a      	cmp	r0, #10
 8001fe2:	dc16      	bgt.n	8002012 <__aeabi_i2d+0x4a>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	002e      	movs	r6, r5
 8001fe8:	3315      	adds	r3, #21
 8001fea:	409e      	lsls	r6, r3
 8001fec:	230b      	movs	r3, #11
 8001fee:	1a18      	subs	r0, r3, r0
 8001ff0:	40c5      	lsrs	r5, r0
 8001ff2:	0552      	lsls	r2, r2, #21
 8001ff4:	032d      	lsls	r5, r5, #12
 8001ff6:	0b2d      	lsrs	r5, r5, #12
 8001ff8:	0d53      	lsrs	r3, r2, #21
 8001ffa:	e003      	b.n	8002004 <__aeabi_i2d+0x3c>
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2300      	movs	r3, #0
 8002000:	2500      	movs	r5, #0
 8002002:	2600      	movs	r6, #0
 8002004:	051b      	lsls	r3, r3, #20
 8002006:	432b      	orrs	r3, r5
 8002008:	07e4      	lsls	r4, r4, #31
 800200a:	4323      	orrs	r3, r4
 800200c:	0030      	movs	r0, r6
 800200e:	0019      	movs	r1, r3
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	380b      	subs	r0, #11
 8002014:	4085      	lsls	r5, r0
 8002016:	0552      	lsls	r2, r2, #21
 8002018:	032d      	lsls	r5, r5, #12
 800201a:	2600      	movs	r6, #0
 800201c:	0b2d      	lsrs	r5, r5, #12
 800201e:	0d53      	lsrs	r3, r2, #21
 8002020:	e7f0      	b.n	8002004 <__aeabi_i2d+0x3c>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	0000041e 	.word	0x0000041e

08002028 <__aeabi_ui2d>:
 8002028:	b510      	push	{r4, lr}
 800202a:	1e04      	subs	r4, r0, #0
 800202c:	d010      	beq.n	8002050 <__aeabi_ui2d+0x28>
 800202e:	f000 f821 	bl	8002074 <__clzsi2>
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <__aeabi_ui2d+0x48>)
 8002034:	1a1b      	subs	r3, r3, r0
 8002036:	280a      	cmp	r0, #10
 8002038:	dc11      	bgt.n	800205e <__aeabi_ui2d+0x36>
 800203a:	220b      	movs	r2, #11
 800203c:	0021      	movs	r1, r4
 800203e:	1a12      	subs	r2, r2, r0
 8002040:	40d1      	lsrs	r1, r2
 8002042:	3015      	adds	r0, #21
 8002044:	030a      	lsls	r2, r1, #12
 8002046:	055b      	lsls	r3, r3, #21
 8002048:	4084      	lsls	r4, r0
 800204a:	0b12      	lsrs	r2, r2, #12
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	e001      	b.n	8002054 <__aeabi_ui2d+0x2c>
 8002050:	2300      	movs	r3, #0
 8002052:	2200      	movs	r2, #0
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	4313      	orrs	r3, r2
 8002058:	0020      	movs	r0, r4
 800205a:	0019      	movs	r1, r3
 800205c:	bd10      	pop	{r4, pc}
 800205e:	0022      	movs	r2, r4
 8002060:	380b      	subs	r0, #11
 8002062:	4082      	lsls	r2, r0
 8002064:	055b      	lsls	r3, r3, #21
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	2400      	movs	r4, #0
 800206a:	0b12      	lsrs	r2, r2, #12
 800206c:	0d5b      	lsrs	r3, r3, #21
 800206e:	e7f1      	b.n	8002054 <__aeabi_ui2d+0x2c>
 8002070:	0000041e 	.word	0x0000041e

08002074 <__clzsi2>:
 8002074:	211c      	movs	r1, #28
 8002076:	2301      	movs	r3, #1
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	4298      	cmp	r0, r3
 800207c:	d301      	bcc.n	8002082 <__clzsi2+0xe>
 800207e:	0c00      	lsrs	r0, r0, #16
 8002080:	3910      	subs	r1, #16
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	4298      	cmp	r0, r3
 8002086:	d301      	bcc.n	800208c <__clzsi2+0x18>
 8002088:	0a00      	lsrs	r0, r0, #8
 800208a:	3908      	subs	r1, #8
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	4298      	cmp	r0, r3
 8002090:	d301      	bcc.n	8002096 <__clzsi2+0x22>
 8002092:	0900      	lsrs	r0, r0, #4
 8002094:	3904      	subs	r1, #4
 8002096:	a202      	add	r2, pc, #8	; (adr r2, 80020a0 <__clzsi2+0x2c>)
 8002098:	5c10      	ldrb	r0, [r2, r0]
 800209a:	1840      	adds	r0, r0, r1
 800209c:	4770      	bx	lr
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	02020304 	.word	0x02020304
 80020a4:	01010101 	.word	0x01010101
	...

080020b0 <TMC5160_Basic_Init>:
int SG2_trigger = 0;
int Driver_error = 0;
int Reset_error = 0;

void TMC5160_Basic_Init(CurrentConfig *Current)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	 I_RUN, Max run current = 20 = ~2.0A
	 I_HOLD, Max Hold current = 20 = ~2.0A
	*/


	uint32_t IHOLD_IRUN = 0x00070000; // standard IHOLD DELAY value
 80020b8:	23e0      	movs	r3, #224	; 0xe0
 80020ba:	02db      	lsls	r3, r3, #11
 80020bc:	60fb      	str	r3, [r7, #12]
	//uint32_t GSTAT_VALUE = 0x00000000; //default value for GSTAT

	if(Current->IHOLD > 20) // set upper current limit ~2.0A
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b14      	cmp	r3, #20
 80020c4:	d902      	bls.n	80020cc <TMC5160_Basic_Init+0x1c>
	{
		Current->IHOLD = 20;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2214      	movs	r2, #20
 80020ca:	605a      	str	r2, [r3, #4]
	}

	if(Current->IRUN > 20) // set upper current limit ~2.0A
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b14      	cmp	r3, #20
 80020d2:	d902      	bls.n	80020da <TMC5160_Basic_Init+0x2a>
	{
		Current->IRUN = 20;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2214      	movs	r2, #20
 80020d8:	601a      	str	r2, [r3, #0]
	}

	IHOLD_IRUN += Current->IHOLD + (Current->IRUN <<8);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	18d3      	adds	r3, r2, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	18d3      	adds	r3, r2, r3
 80020ea:	60fb      	str	r3, [r7, #12]

	TMC5160_SPIWrite(0x00, 0x00000008, 1); // writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 80020ec:	2201      	movs	r2, #1
 80020ee:	2108      	movs	r1, #8
 80020f0:	2000      	movs	r0, #0
 80020f2:	f000 fb7f 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x00, 0x00000000, 0); // writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	2000      	movs	r0, #0
 80020fc:	f000 fb7a 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x01, 0x00000006, 1); // write 1 to clear GSTAT (clear GSTAT register)
 8002100:	2201      	movs	r2, #1
 8002102:	2106      	movs	r1, #6
 8002104:	2001      	movs	r0, #1
 8002106:	f000 fb75 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x01, 0x00000000, 0); // read GSTAT (should be all 0)
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	2001      	movs	r0, #1
 8002110:	f000 fb70 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x35, 0x00000040, 1); //0x35(RAMP_STAT)
 8002114:	2201      	movs	r2, #1
 8002116:	2140      	movs	r1, #64	; 0x40
 8002118:	2035      	movs	r0, #53	; 0x35
 800211a:	f000 fb6b 	bl	80027f4 <TMC5160_SPIWrite>
	{
		TMC5160_SPIWrite(0x01, 0x00000001, 1); // write 1 bit to GSTAT to clear all error flags
		// TODO: is clearing the flags enough? or poweqr cycle needed?
	}*/

	TMC5160_SPIWrite(0x03, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 1 = 0x03(SLAVECONF)
 800211e:	2201      	movs	r2, #1
 8002120:	2100      	movs	r1, #0
 8002122:	2003      	movs	r0, #3
 8002124:	f000 fb66 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x05, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 2 = 0x05(X_COMPARE)
 8002128:	2201      	movs	r2, #1
 800212a:	2100      	movs	r1, #0
 800212c:	2005      	movs	r0, #5
 800212e:	f000 fb61 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x06, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 3 = 0x06(OTP_PROG)
 8002132:	2201      	movs	r2, #1
 8002134:	2100      	movs	r1, #0
 8002136:	2006      	movs	r0, #6
 8002138:	f000 fb5c 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x08, 0x0000000F, 1); // writing value 0x0000000F = 15 = 0.0 to address 4 = 0x08(FACTORY_CONF)
 800213c:	2201      	movs	r2, #1
 800213e:	210f      	movs	r1, #15
 8002140:	2008      	movs	r0, #8
 8002142:	f000 fb57 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x09, 0x00010606, 1); // writing value 0x00010606 = 67078 = 0.0 to address 5 = 0x09(SHORT_CONF)
 8002146:	4b53      	ldr	r3, [pc, #332]	; (8002294 <TMC5160_Basic_Init+0x1e4>)
 8002148:	2201      	movs	r2, #1
 800214a:	0019      	movs	r1, r3
 800214c:	2009      	movs	r0, #9
 800214e:	f000 fb51 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x0A, 0x00080400, 1); // writing value 0x00080400 = 525312 = 0.0 to address 6 = 0x0A(DRV_CONF)
 8002152:	4b51      	ldr	r3, [pc, #324]	; (8002298 <TMC5160_Basic_Init+0x1e8>)
 8002154:	2201      	movs	r2, #1
 8002156:	0019      	movs	r1, r3
 8002158:	200a      	movs	r0, #10
 800215a:	f000 fb4b 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x0B, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 7 = 0x0B(GLOBAL_SCALER)
 800215e:	2201      	movs	r2, #1
 8002160:	2100      	movs	r1, #0
 8002162:	200b      	movs	r0, #11
 8002164:	f000 fb46 	bl	80027f4 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x10, IHOLD_IRUN, 1); // writing value 0x00070A03 = 461315 = 0.0 to address 8 = 0x10(IHOLD_IRUN)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	0019      	movs	r1, r3
 800216e:	2010      	movs	r0, #16
 8002170:	f000 fb40 	bl	80027f4 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x11, 0x0000000A, 1); // writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 8002174:	2201      	movs	r2, #1
 8002176:	210a      	movs	r1, #10
 8002178:	2011      	movs	r0, #17
 800217a:	f000 fb3b 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x13, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 800217e:	2201      	movs	r2, #1
 8002180:	2100      	movs	r1, #0
 8002182:	2013      	movs	r0, #19
 8002184:	f000 fb36 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x14, 0x00000000, 1); // writing value 0x00000010 = 16 = 0.0 to address 11 = 0x14(TCOOLTHRS)
 8002188:	2201      	movs	r2, #1
 800218a:	2100      	movs	r1, #0
 800218c:	2014      	movs	r0, #20
 800218e:	f000 fb31 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x15, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 12 = 0x15(THIGH)
 8002192:	2201      	movs	r2, #1
 8002194:	2100      	movs	r1, #0
 8002196:	2015      	movs	r0, #21
 8002198:	f000 fb2c 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2C, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 23 = 0x2C(TZEROWAIT)
 800219c:	2201      	movs	r2, #1
 800219e:	2100      	movs	r1, #0
 80021a0:	202c      	movs	r0, #44	; 0x2c
 80021a2:	f000 fb27 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x33, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 25 = 0x33(VDCMIN)
 80021a6:	2201      	movs	r2, #1
 80021a8:	2100      	movs	r1, #0
 80021aa:	2033      	movs	r0, #51	; 0x33
 80021ac:	f000 fb22 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x34, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 26 = 0x34(SW_MODE)
 80021b0:	2201      	movs	r2, #1
 80021b2:	2100      	movs	r1, #0
 80021b4:	2034      	movs	r0, #52	; 0x34
 80021b6:	f000 fb1d 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x38, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 27 = 0x38(ENCMODE)
 80021ba:	2201      	movs	r2, #1
 80021bc:	2100      	movs	r1, #0
 80021be:	2038      	movs	r0, #56	; 0x38
 80021c0:	f000 fb18 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x39, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 28 = 0x39(X_ENC)
 80021c4:	2201      	movs	r2, #1
 80021c6:	2100      	movs	r1, #0
 80021c8:	2039      	movs	r0, #57	; 0x39
 80021ca:	f000 fb13 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x3A, 0x00010000, 1); // writing value 0x00010000 = 65536 = 0.0 to address 29 = 0x3A(ENC_CONST)
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	025b      	lsls	r3, r3, #9
 80021d2:	2201      	movs	r2, #1
 80021d4:	0019      	movs	r1, r3
 80021d6:	203a      	movs	r0, #58	; 0x3a
 80021d8:	f000 fb0c 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x3D, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 30 = 0x3D(ENC_DEVIATION)
 80021dc:	2201      	movs	r2, #1
 80021de:	2100      	movs	r1, #0
 80021e0:	203d      	movs	r0, #61	; 0x3d
 80021e2:	f000 fb07 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x60, 0xAAAAB554, 1); // writing value 0xAAAAB554 = 0 = 0.0 to address 31 = 0x60(MSLUT[0])
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <TMC5160_Basic_Init+0x1ec>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	0019      	movs	r1, r3
 80021ec:	2060      	movs	r0, #96	; 0x60
 80021ee:	f000 fb01 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x61, 0x4A9554AA, 1); // writing value 0x4A9554AA = 1251300522 = 0.0 to address 32 = 0x61(MSLUT[1])
 80021f2:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <TMC5160_Basic_Init+0x1f0>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	0019      	movs	r1, r3
 80021f8:	2061      	movs	r0, #97	; 0x61
 80021fa:	f000 fafb 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x62, 0x24492929, 1); // writing value 0x24492929 = 608774441 = 0.0 to address 33 = 0x62(MSLUT[2])
 80021fe:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <TMC5160_Basic_Init+0x1f4>)
 8002200:	2201      	movs	r2, #1
 8002202:	0019      	movs	r1, r3
 8002204:	2062      	movs	r0, #98	; 0x62
 8002206:	f000 faf5 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x63, 0x10104222, 1); // writing value 0x10104222 = 269500962 = 0.0 to address 34 = 0x63(MSLUT[3])
 800220a:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <TMC5160_Basic_Init+0x1f8>)
 800220c:	2201      	movs	r2, #1
 800220e:	0019      	movs	r1, r3
 8002210:	2063      	movs	r0, #99	; 0x63
 8002212:	f000 faef 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x64, 0xFBFFFFFF, 1); // writing value 0xFBFFFFFF = 0 = 0.0 to address 35 = 0x64(MSLUT[4])
 8002216:	4b25      	ldr	r3, [pc, #148]	; (80022ac <TMC5160_Basic_Init+0x1fc>)
 8002218:	2201      	movs	r2, #1
 800221a:	0019      	movs	r1, r3
 800221c:	2064      	movs	r0, #100	; 0x64
 800221e:	f000 fae9 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x65, 0xB5BB777D, 1); // writing value 0xB5BB777D = 0 = 0.0 to address 36 = 0x65(MSLUT[5])
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <TMC5160_Basic_Init+0x200>)
 8002224:	2201      	movs	r2, #1
 8002226:	0019      	movs	r1, r3
 8002228:	2065      	movs	r0, #101	; 0x65
 800222a:	f000 fae3 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x66, 0x49295556, 1); // writing value 0x49295556 = 1227445590 = 0.0 to address 37 = 0x66(MSLUT[6])
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <TMC5160_Basic_Init+0x204>)
 8002230:	2201      	movs	r2, #1
 8002232:	0019      	movs	r1, r3
 8002234:	2066      	movs	r0, #102	; 0x66
 8002236:	f000 fadd 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x67, 0x00404222, 1); // writing value 0x00404222 = 4211234 = 0.0 to address 38 = 0x67(MSLUT[7])
 800223a:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <TMC5160_Basic_Init+0x208>)
 800223c:	2201      	movs	r2, #1
 800223e:	0019      	movs	r1, r3
 8002240:	2067      	movs	r0, #103	; 0x67
 8002242:	f000 fad7 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x68, 0xFFFF8056, 1); // writing value 0xFFFF8056 = 0 = 0.0 to address 39 = 0x68(MSLUTSEL)
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <TMC5160_Basic_Init+0x20c>)
 8002248:	2201      	movs	r2, #1
 800224a:	0019      	movs	r1, r3
 800224c:	2068      	movs	r0, #104	; 0x68
 800224e:	f000 fad1 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x69, 0x00F70000, 1); // writing value 0x00F70000 = 16187392 = 0.0 to address 40 = 0x69(MSLUTSTART)
 8002252:	23f7      	movs	r3, #247	; 0xf7
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	2201      	movs	r2, #1
 8002258:	0019      	movs	r1, r3
 800225a:	2069      	movs	r0, #105	; 0x69
 800225c:	f000 faca 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6C, 0x00410153, 1); // writing value 0x00410153 = 4260099 = 0.0 to address 41 = 0x6C(CHOPCONF)
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <TMC5160_Basic_Init+0x210>)
 8002262:	2201      	movs	r2, #1
 8002264:	0019      	movs	r1, r3
 8002266:	206c      	movs	r0, #108	; 0x6c
 8002268:	f000 fac4 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6D, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 42 = 0x6D(COOLCONF)
 800226c:	2201      	movs	r2, #1
 800226e:	2100      	movs	r1, #0
 8002270:	206d      	movs	r0, #109	; 0x6d
 8002272:	f000 fabf 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6E, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 43 = 0x6E(DCCTRL)
 8002276:	2201      	movs	r2, #1
 8002278:	2100      	movs	r1, #0
 800227a:	206e      	movs	r0, #110	; 0x6e
 800227c:	f000 faba 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x70, 0xC40C001E, 1); // writing value 0xC40C001E = 0 = 0.0 to address 44 = 0x70(PWMCONF)
 8002280:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <TMC5160_Basic_Init+0x214>)
 8002282:	2201      	movs	r2, #1
 8002284:	0019      	movs	r1, r3
 8002286:	2070      	movs	r0, #112	; 0x70
 8002288:	f000 fab4 	bl	80027f4 <TMC5160_SPIWrite>

}
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b004      	add	sp, #16
 8002292:	bd80      	pop	{r7, pc}
 8002294:	00010606 	.word	0x00010606
 8002298:	00080400 	.word	0x00080400
 800229c:	aaaab554 	.word	0xaaaab554
 80022a0:	4a9554aa 	.word	0x4a9554aa
 80022a4:	24492929 	.word	0x24492929
 80022a8:	10104222 	.word	0x10104222
 80022ac:	fbffffff 	.word	0xfbffffff
 80022b0:	b5bb777d 	.word	0xb5bb777d
 80022b4:	49295556 	.word	0x49295556
 80022b8:	00404222 	.word	0x00404222
 80022bc:	ffff8056 	.word	0xffff8056
 80022c0:	00410153 	.word	0x00410153
 80022c4:	c40c001e 	.word	0xc40c001e

080022c8 <TMC5160_Init_Stallguard>:

	//TODO: finilize
}

void TMC5160_Init_Stallguard(int reset)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	if(reset == 0)//basic stall setup
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10f      	bne.n	80022f6 <TMC5160_Init_Stallguard+0x2e>
	{
		uint32_t SGT = 1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
		uint32_t COOLCONF = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]

		COOLCONF += (SGT <<16);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	18d3      	adds	r3, r2, r3
 80022e6:	60bb      	str	r3, [r7, #8]

		//TODO: test COOLCONF register write to match register value

		//TMC5160_SPIWrite(0x6D, COOLCONF, 1); //0x6D(COOLCONF) //Stallguard Threshold
		TMC5160_SPIWrite(0x6D, 0x00010000, 1); //0x6D(COOLCONF) //Stallguard Threshold
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	025b      	lsls	r3, r3, #9
 80022ec:	2201      	movs	r2, #1
 80022ee:	0019      	movs	r1, r3
 80022f0:	206d      	movs	r0, #109	; 0x6d
 80022f2:	f000 fa7f 	bl	80027f4 <TMC5160_SPIWrite>
	}

	if(reset == 1)//perform reset of stall, to allow movement again
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d104      	bne.n	8002306 <TMC5160_Init_Stallguard+0x3e>
	{
		TMC5160_SPIWrite(0x35, 0x00000040, 1); //0x35(RAMP_STAT)
 80022fc:	2201      	movs	r2, #1
 80022fe:	2140      	movs	r1, #64	; 0x40
 8002300:	2035      	movs	r0, #53	; 0x35
 8002302:	f000 fa77 	bl	80027f4 <TMC5160_SPIWrite>
	// Apply load and monitor SG_RESULT
	// If SG_RESULT reaches 0 before "stall event" , increase SGT value (+63 highest) , if 0 is not reached lower SGT value (-64 lowest)

	// Sudden motor stops can cause for a stall event.
	// In this case , increase TCOOLTHRS to increase the duration before stallguard is activated
}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	b004      	add	sp, #16
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <TMC5160_Monitor_Stallguard>:

int TMC5160_Monitor_Stallguard(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
	uint32_t DRV_STATUS;
	int Stall_Flag = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]

	TMC5160_SPIWrite(0x6F, 0x00000000, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	206f      	movs	r0, #111	; 0x6f
 8002320:	f000 fa68 	bl	80027f4 <TMC5160_SPIWrite>
	DRV_STATUS = TMC5160_SPIWrite(0x6F, 0x00000000, 0); //Read (DRV_STATUS)
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	206f      	movs	r0, #111	; 0x6f
 800232a:	f000 fa63 	bl	80027f4 <TMC5160_SPIWrite>
 800232e:	0003      	movs	r3, r0
 8002330:	60fb      	str	r3, [r7, #12]
	//T_STEP[x] = TMC5160_SPIWrite(0x12, 0x00000000, 0); // 0x12(TSTEP)

	Stall_Flag = (DRV_STATUS & (1 << 24)); //bit 24 of DRV_STATUS is Stallguard flag
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	045b      	lsls	r3, r3, #17
 8002338:	4013      	ands	r3, r2
 800233a:	607b      	str	r3, [r7, #4]
	Stall_Flag = (Stall_Flag >> 24); // bitshift stall flag is 0 or 1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	161b      	asrs	r3, r3, #24
 8002340:	607b      	str	r3, [r7, #4]

	if(Stall_Flag != 0) //stall detected -> stop motor
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <TMC5160_Monitor_Stallguard+0x3c>
	{
		TMC5160_Stop();
 8002348:	f000 f94c 	bl	80025e4 <TMC5160_Stop>
	}

	for(int y = 32; y > 10; y--) //clear other data
 800234c:	2320      	movs	r3, #32
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	e00b      	b.n	800236a <TMC5160_Monitor_Stallguard+0x5a>
	{
		DRV_STATUS &= ~(1 << y);
 8002352:	2201      	movs	r2, #1
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	409a      	lsls	r2, r3
 8002358:	0013      	movs	r3, r2
 800235a:	43db      	mvns	r3, r3
 800235c:	001a      	movs	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
	for(int y = 32; y > 10; y--) //clear other data
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	3b01      	subs	r3, #1
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b0a      	cmp	r3, #10
 800236e:	dcf0      	bgt.n	8002352 <TMC5160_Monitor_Stallguard+0x42>
	}

	SG_RESULTS[x] = DRV_STATUS; // see SG_RESULTS in explorer for tuning stallguard (SG_RESULT 0 = stall detected)
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <TMC5160_Monitor_Stallguard+0x94>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <TMC5160_Monitor_Stallguard+0x98>)
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	50d1      	str	r1, [r2, r3]
	x++;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <TMC5160_Monitor_Stallguard+0x94>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <TMC5160_Monitor_Stallguard+0x94>)
 8002384:	601a      	str	r2, [r3, #0]

	if(x >= 1000) // stop stallguard demo or it will overflow
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <TMC5160_Monitor_Stallguard+0x94>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	23fa      	movs	r3, #250	; 0xfa
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	429a      	cmp	r2, r3
 8002390:	db02      	blt.n	8002398 <TMC5160_Monitor_Stallguard+0x88>
	{
		x = 0;
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <TMC5160_Monitor_Stallguard+0x94>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
		//uncomment for stallguard demo
	    //HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,1); // LOW = ON
	    //TMC5160_Stop();
	}

	return Stall_Flag;
 8002398:	687b      	ldr	r3, [r7, #4]
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	20001030 	.word	0x20001030
 80023a8:	20000090 	.word	0x20000090

080023ac <TMC5160_Basic_Rotate>:

void TMC5160_Basic_Rotate(uint8_t Mode, RampConfig *Ramp) // 0 = Velocity Mode + , 1 = Velocity Mode -
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	0002      	movs	r2, r0
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	701a      	strb	r2, [r3, #0]
	//Velocity mode , using VMAX and AMAX

	TMC5160_SPIWrite(0x11, 	0x0000000A, 1); 	// writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 80023ba:	2201      	movs	r2, #1
 80023bc:	210a      	movs	r1, #10
 80023be:	2011      	movs	r0, #17
 80023c0:	f000 fa18 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x13, 	0x000001F4, 1); 	// writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 80023c4:	23fa      	movs	r3, #250	; 0xfa
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2201      	movs	r2, #1
 80023ca:	0019      	movs	r1, r3
 80023cc:	2013      	movs	r0, #19
 80023ce:	f000 fa11 	bl	80027f4 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x23, Ramp->VSTART, 1); 	// = 1000 = 0.0 to address 15 = 0x23(VSTART)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2201      	movs	r2, #1
 80023d8:	0019      	movs	r1, r3
 80023da:	2023      	movs	r0, #35	; 0x23
 80023dc:	f000 fa0a 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x26, Ramp->AMAX, 1); 		// = 12800 = 0.0 to address 18 = 0x26(AMAX)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	0019      	movs	r1, r3
 80023e8:	2026      	movs	r0, #38	; 0x26
 80023ea:	f000 fa03 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x27, Ramp->VMAX, 1); 		// = 51200 = 0.0 to address 19 = 0x27(VMAX)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2201      	movs	r2, #1
 80023f4:	0019      	movs	r1, r3
 80023f6:	2027      	movs	r0, #39	; 0x27
 80023f8:	f000 f9fc 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2B, Ramp->VSTOP, 1); 	// = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2201      	movs	r2, #1
 8002402:	0019      	movs	r1, r3
 8002404:	202b      	movs	r0, #43	; 0x2b
 8002406:	f000 f9f5 	bl	80027f4 <TMC5160_SPIWrite>

	if(Mode == 0)
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d105      	bne.n	800241e <TMC5160_Basic_Rotate+0x72>
	{
		TMC5160_SPIWrite(0x20, 	0x00000001, 1); 		// writing value 0x00000001 = 0 = 0.0 to address 13 = 0x20(RAMPMODE)VM +
 8002412:	2201      	movs	r2, #1
 8002414:	2101      	movs	r1, #1
 8002416:	2020      	movs	r0, #32
 8002418:	f000 f9ec 	bl	80027f4 <TMC5160_SPIWrite>

	else if(Mode == 1)
	{
		TMC5160_SPIWrite(0x20, 	0x00000002, 1); 		// writing value 0x00000002 = 0 = 0.0 to address 13 = 0x20(RAMPMODE) VM -
	}
}
 800241c:	e008      	b.n	8002430 <TMC5160_Basic_Rotate+0x84>
	else if(Mode == 1)
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d104      	bne.n	8002430 <TMC5160_Basic_Rotate+0x84>
		TMC5160_SPIWrite(0x20, 	0x00000002, 1); 		// writing value 0x00000002 = 0 = 0.0 to address 13 = 0x20(RAMPMODE) VM -
 8002426:	2201      	movs	r2, #1
 8002428:	2102      	movs	r1, #2
 800242a:	2020      	movs	r0, #32
 800242c:	f000 f9e2 	bl	80027f4 <TMC5160_SPIWrite>
}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}

08002438 <TMC5160_Rotate_To>:


void TMC5160_Rotate_To(uint32_t Position, RampConfig *Ramp)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
	uint32_t Target_Angle = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
	uint32_t AMS_Angle = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
	uint32_t ENC_Angle = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
	uint32_t TMC_Angle = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]

	TMC5160_SPIWrite(0x11, 	0x0000000A, 1); 	// writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 8002452:	2201      	movs	r2, #1
 8002454:	210a      	movs	r1, #10
 8002456:	2011      	movs	r0, #17
 8002458:	f000 f9cc 	bl	80027f4 <TMC5160_SPIWrite>
	//TMC5160_SPIWrite(0x00, 	0x00000008, 1); 	// writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
	TMC5160_SPIWrite(0x13, 	0x000001F4, 1); 	// writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 800245c:	23fa      	movs	r3, #250	; 0xfa
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2201      	movs	r2, #1
 8002462:	0019      	movs	r1, r3
 8002464:	2013      	movs	r0, #19
 8002466:	f000 f9c5 	bl	80027f4 <TMC5160_SPIWrite>

	// setup for profile
	TMC5160_SPIWrite(0x23, Ramp->VSTART, 1); 	// = 1000 = 0.0 to address 15 = 0x23(VSTART)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	0019      	movs	r1, r3
 8002472:	2023      	movs	r0, #35	; 0x23
 8002474:	f000 f9be 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x24, Ramp->A1, 1); 		// = 5600 = 0.0 to address 16 = 0x24(A1)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	0019      	movs	r1, r3
 8002480:	2024      	movs	r0, #36	; 0x24
 8002482:	f000 f9b7 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x25, Ramp->V1, 1); 		// = 12800 = 0.0 to address 17 = 0x25(V1)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2201      	movs	r2, #1
 800248c:	0019      	movs	r1, r3
 800248e:	2025      	movs	r0, #37	; 0x25
 8002490:	f000 f9b0 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x26, Ramp->AMAX, 1); 		// = 12800 = 0.0 to address 18 = 0x26(AMAX)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	0019      	movs	r1, r3
 800249c:	2026      	movs	r0, #38	; 0x26
 800249e:	f000 f9a9 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x27, Ramp->VMAX, 1); 		// = 51200 = 0.0 to address 19 = 0x27(VMAX)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2201      	movs	r2, #1
 80024a8:	0019      	movs	r1, r3
 80024aa:	2027      	movs	r0, #39	; 0x27
 80024ac:	f000 f9a2 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x28, Ramp->DMAX, 1); 		// = 700 = 0.0 to address 20 = 0x28(DMAX)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	2201      	movs	r2, #1
 80024b6:	0019      	movs	r1, r3
 80024b8:	2028      	movs	r0, #40	; 0x28
 80024ba:	f000 f99b 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2A, Ramp->D1, 1); 		// = 1400 = 0.0 to address 21 = 0x2A(D1)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2201      	movs	r2, #1
 80024c4:	0019      	movs	r1, r3
 80024c6:	202a      	movs	r0, #42	; 0x2a
 80024c8:	f000 f994 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2B, Ramp->VSTOP, 1); 	// = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	2201      	movs	r2, #1
 80024d2:	0019      	movs	r1, r3
 80024d4:	202b      	movs	r0, #43	; 0x2b
 80024d6:	f000 f98d 	bl	80027f4 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x20, 	0x00000000, 1); 	// writing value 0x00000000 = 0 = 0.0 to address 13 = 0x20(RAMPMODE) MTP
 80024da:	2201      	movs	r2, #1
 80024dc:	2100      	movs	r1, #0
 80024de:	2020      	movs	r0, #32
 80024e0:	f000 f988 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2D, Position, 1); 		// writing value to address 24 = 0x2D(XTARGET)  1 lap
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	0019      	movs	r1, r3
 80024ea:	202d      	movs	r0, #45	; 0x2d
 80024ec:	f000 f982 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x21,	0x00000000, 0);		// READ position register
 80024f0:	2200      	movs	r2, #0
 80024f2:	2100      	movs	r1, #0
 80024f4:	2021      	movs	r0, #33	; 0x21
 80024f6:	f000 f97d 	bl	80027f4 <TMC5160_SPIWrite>

	/*Convert to Angle so we can compare to Hall Sensor*/

	if((int)Position < 0)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	da02      	bge.n	8002506 <TMC5160_Rotate_To+0xce>
	{
		Position = Position * (-1); 			// make positive for easier math
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	425b      	negs	r3, r3
 8002504:	607b      	str	r3, [r7, #4]
	}

	if(Position == 0) 							// to fix the first reading when target position = 0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <TMC5160_Rotate_To+0xe0>
	{
		AMS_Angle = 1;
 800250c:	2301      	movs	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
		ENC_Angle = 1;
 8002510:	2301      	movs	r3, #1
 8002512:	60bb      	str	r3, [r7, #8]
		TMC_Angle = 1;
 8002514:	2301      	movs	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
	}

    Target_Angle = ((Position / 256) * 1.8);	//convert target position to angle
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	0018      	movs	r0, r3
 800251e:	f7ff fd83 	bl	8002028 <__aeabi_ui2d>
 8002522:	4a15      	ldr	r2, [pc, #84]	; (8002578 <TMC5160_Rotate_To+0x140>)
 8002524:	4b15      	ldr	r3, [pc, #84]	; (800257c <TMC5160_Rotate_To+0x144>)
 8002526:	f7fe fefd 	bl	8001324 <__aeabi_dmul>
 800252a:	0002      	movs	r2, r0
 800252c:	000b      	movs	r3, r1
 800252e:	0010      	movs	r0, r2
 8002530:	0019      	movs	r1, r3
 8002532:	f7fd ff9b 	bl	800046c <__aeabi_d2uiz>
 8002536:	0003      	movs	r3, r0
 8002538:	613b      	str	r3, [r7, #16]

	// enter loop to check if position is reached
	while(TMC_Angle != Target_Angle) //&& AMS_Angle != Target_Angle && ENC_Angle != Target_Angle
 800253a:	e013      	b.n	8002564 <TMC5160_Rotate_To+0x12c>
	{
		TMC_Angle = TMC_Get_Position();
 800253c:	f000 f824 	bl	8002588 <TMC_Get_Position>
 8002540:	0003      	movs	r3, r0
 8002542:	617b      	str	r3, [r7, #20]

		if(AMS_ENB == 1)// Hall sensor is enabled
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <TMC5160_Rotate_To+0x148>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d103      	bne.n	8002554 <TMC5160_Rotate_To+0x11c>
		{
			AMS_Angle = AMS5055_Get_Position();
 800254c:	f000 fa70 	bl	8002a30 <AMS5055_Get_Position>
 8002550:	0003      	movs	r3, r0
 8002552:	60fb      	str	r3, [r7, #12]
		}

		if(ENC_ENB == 1)// Encoder is enabled
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <TMC5160_Rotate_To+0x14c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d103      	bne.n	8002564 <TMC5160_Rotate_To+0x12c>
		{
			ENC_Angle = ENC_Get_Position();
 800255c:	f000 fb9e 	bl	8002c9c <ENC_Get_Position>
 8002560:	0003      	movs	r3, r0
 8002562:	60bb      	str	r3, [r7, #8]
	while(TMC_Angle != Target_Angle) //&& AMS_Angle != Target_Angle && ENC_Angle != Target_Angle
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	429a      	cmp	r2, r3
 800256a:	d1e7      	bne.n	800253c <TMC5160_Rotate_To+0x104>
		}
	}
 }
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b006      	add	sp, #24
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	cccccccd 	.word	0xcccccccd
 800257c:	3ffccccc 	.word	0x3ffccccc
 8002580:	200031d4 	.word	0x200031d4
 8002584:	200031d8 	.word	0x200031d8

08002588 <TMC_Get_Position>:

uint16_t TMC_Get_Position()
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
	uint32_t AngleT = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]

	AngleT = TMC5160_SPIWrite(0x21, 0x00000000, 0); //read step counter from TMC5160
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2021      	movs	r0, #33	; 0x21
 8002598:	f000 f92c 	bl	80027f4 <TMC5160_SPIWrite>
 800259c:	0003      	movs	r3, r0
 800259e:	607b      	str	r3, [r7, #4]


	if((int)AngleT < 0)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	da02      	bge.n	80025ac <TMC_Get_Position+0x24>
	{
		AngleT = AngleT * (-1); // make positive for easier math
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	425b      	negs	r3, r3
 80025aa:	607b      	str	r3, [r7, #4]
	}

	AngleT = ((AngleT / 256)* 1.8);//convert target position to angle
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7ff fd39 	bl	8002028 <__aeabi_ui2d>
 80025b6:	4a09      	ldr	r2, [pc, #36]	; (80025dc <TMC_Get_Position+0x54>)
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <TMC_Get_Position+0x58>)
 80025ba:	f7fe feb3 	bl	8001324 <__aeabi_dmul>
 80025be:	0002      	movs	r2, r0
 80025c0:	000b      	movs	r3, r1
 80025c2:	0010      	movs	r0, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	f7fd ff51 	bl	800046c <__aeabi_d2uiz>
 80025ca:	0003      	movs	r3, r0
 80025cc:	607b      	str	r3, [r7, #4]

	return AngleT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	b29b      	uxth	r3, r3
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b002      	add	sp, #8
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	cccccccd 	.word	0xcccccccd
 80025e0:	3ffccccc 	.word	0x3ffccccc

080025e4 <TMC5160_Stop>:

void TMC5160_Stop(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	TMC5160_SPIWrite(0x27,0x00000000, 1); //set VMAX to 0
 80025e8:	2201      	movs	r2, #1
 80025ea:	2100      	movs	r1, #0
 80025ec:	2027      	movs	r0, #39	; 0x27
 80025ee:	f000 f901 	bl	80027f4 <TMC5160_SPIWrite>
}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <Drive_Enable>:

void Drive_Enable(int state)
{
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	uint32_t DRV_STATUS;
	uint32_t IOIN;
	uint16_t SG_RESULT = 0;
 8002600:	2312      	movs	r3, #18
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	2200      	movs	r2, #0
 8002606:	801a      	strh	r2, [r3, #0]
	uint16_t CS_ACTUAL = 0;
 8002608:	2310      	movs	r3, #16
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2200      	movs	r2, #0
 800260e:	801a      	strh	r2, [r3, #0]
	int DRV_ENN = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

	if(state == 1) // Enable driver
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d14d      	bne.n	80026b6 <Drive_Enable+0xbe>
	{
		HAL_GPIO_WritePin(GPIOA, DRV_ENN_Pin, 0); // LOW = ON
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	0059      	lsls	r1, r3, #1
 800261e:	2390      	movs	r3, #144	; 0x90
 8002620:	05db      	lsls	r3, r3, #23
 8002622:	2200      	movs	r2, #0
 8002624:	0018      	movs	r0, r3
 8002626:	f002 fc34 	bl	8004e92 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800262a:	200a      	movs	r0, #10
 800262c:	f001 f9a6 	bl	800397c <HAL_Delay>

		TMC5160_SPIWrite(0x04, 0x00000000, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	2004      	movs	r0, #4
 8002636:	f000 f8dd 	bl	80027f4 <TMC5160_SPIWrite>
		IOIN = TMC5160_SPIWrite(0x04, 0x00000000, 0); //Read (IOIN)
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	2004      	movs	r0, #4
 8002640:	f000 f8d8 	bl	80027f4 <TMC5160_SPIWrite>
 8002644:	0003      	movs	r3, r0
 8002646:	60fb      	str	r3, [r7, #12]

		if(IOIN & (1 << 4))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2210      	movs	r2, #16
 800264c:	4013      	ands	r3, r2
 800264e:	d002      	beq.n	8002656 <Drive_Enable+0x5e>
		{
			DRV_ENN = 1;
 8002650:	2301      	movs	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	e001      	b.n	800265a <Drive_Enable+0x62>
		}

		else
		{
			DRV_ENN = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
		}

		if(DRV_ENN == 0) //if DRV_ENN == 0 power stage is on
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d125      	bne.n	80026ac <Drive_Enable+0xb4>
		{
			TMC5160_SPIWrite(0x6F, 0x00000000, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	206f      	movs	r0, #111	; 0x6f
 8002666:	f000 f8c5 	bl	80027f4 <TMC5160_SPIWrite>
			DRV_STATUS = TMC5160_SPIWrite(0x6F, 0x00000000, 0); //Read (DRV_STATUS)
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	206f      	movs	r0, #111	; 0x6f
 8002670:	f000 f8c0 	bl	80027f4 <TMC5160_SPIWrite>
 8002674:	0003      	movs	r3, r0
 8002676:	60bb      	str	r3, [r7, #8]

			SG_RESULT = TMC5160_Check_SG_Result(DRV_STATUS);
 8002678:	2312      	movs	r3, #18
 800267a:	18fc      	adds	r4, r7, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 f82b 	bl	80026da <TMC5160_Check_SG_Result>
 8002684:	0003      	movs	r3, r0
 8002686:	8023      	strh	r3, [r4, #0]
			CS_ACTUAL = TMC5160_Check_CS_Actual(DRV_STATUS);
 8002688:	2510      	movs	r5, #16
 800268a:	197c      	adds	r4, r7, r5
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	0018      	movs	r0, r3
 8002690:	f000 f869 	bl	8002766 <TMC5160_Check_CS_Actual>
 8002694:	0003      	movs	r3, r0
 8002696:	8023      	strh	r3, [r4, #0]

			if(CS_ACTUAL == 0)
 8002698:	197b      	adds	r3, r7, r5
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <Drive_Enable+0xbe>
			{
				Drive_Enable(0); // power down and reset
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff ffa9 	bl	80025f8 <Drive_Enable>
				HAL_NVIC_SystemReset();
 80026a6:	f002 fa4e 	bl	8004b46 <HAL_NVIC_SystemReset>
 80026aa:	e004      	b.n	80026b6 <Drive_Enable+0xbe>
			}
		}

		else
		{
			Drive_Enable(0); // power down and reset
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7ff ffa3 	bl	80025f8 <Drive_Enable>
			HAL_NVIC_SystemReset();
 80026b2:	f002 fa48 	bl	8004b46 <HAL_NVIC_SystemReset>
		}
	}

	if(state == 0) // disable drive
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <Drive_Enable+0xda>
	{
		HAL_GPIO_WritePin(GPIOA, DRV_ENN_Pin, 1); // HIGH = OFF
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	0059      	lsls	r1, r3, #1
 80026c0:	2390      	movs	r3, #144	; 0x90
 80026c2:	05db      	lsls	r3, r3, #23
 80026c4:	2201      	movs	r2, #1
 80026c6:	0018      	movs	r0, r3
 80026c8:	f002 fbe3 	bl	8004e92 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80026cc:	200a      	movs	r0, #10
 80026ce:	f001 f955 	bl	800397c <HAL_Delay>
	}
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b006      	add	sp, #24
 80026d8:	bdb0      	pop	{r4, r5, r7, pc}

080026da <TMC5160_Check_SG_Result>:

uint16_t TMC5160_Check_SG_Result(uint32_t DRV_STATUS_Register)
{
 80026da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026dc:	b087      	sub	sp, #28
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
	uint16_t SG_RESULT = 0;
 80026e2:	2316      	movs	r3, #22
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2200      	movs	r2, #0
 80026e8:	801a      	strh	r2, [r3, #0]
	int x,y = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]

	//check for SG_Result
	for(x = 0; x <10; x++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	e02e      	b.n	8002752 <TMC5160_Check_SG_Result+0x78>
	{
		if(DRV_STATUS_Register & (1 << x))
 80026f4:	2201      	movs	r2, #1
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	409a      	lsls	r2, r3
 80026fa:	0013      	movs	r3, r2
 80026fc:	001a      	movs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4013      	ands	r3, r2
 8002702:	d020      	beq.n	8002746 <TMC5160_Check_SG_Result+0x6c>
		{
			SG_RESULT += (pow(2,y));
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff fc5f 	bl	8001fc8 <__aeabi_i2d>
 800270a:	0002      	movs	r2, r0
 800270c:	000b      	movs	r3, r1
 800270e:	2000      	movs	r0, #0
 8002710:	2180      	movs	r1, #128	; 0x80
 8002712:	05c9      	lsls	r1, r1, #23
 8002714:	f003 fd0a 	bl	800612c <pow>
 8002718:	0004      	movs	r4, r0
 800271a:	000d      	movs	r5, r1
 800271c:	2616      	movs	r6, #22
 800271e:	19bb      	adds	r3, r7, r6
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	0018      	movs	r0, r3
 8002724:	f7ff fc50 	bl	8001fc8 <__aeabi_i2d>
 8002728:	0002      	movs	r2, r0
 800272a:	000b      	movs	r3, r1
 800272c:	0020      	movs	r0, r4
 800272e:	0029      	movs	r1, r5
 8002730:	f7fd feba 	bl	80004a8 <__aeabi_dadd>
 8002734:	0002      	movs	r2, r0
 8002736:	000b      	movs	r3, r1
 8002738:	19bc      	adds	r4, r7, r6
 800273a:	0010      	movs	r0, r2
 800273c:	0019      	movs	r1, r3
 800273e:	f7fd fe95 	bl	800046c <__aeabi_d2uiz>
 8002742:	0003      	movs	r3, r0
 8002744:	8023      	strh	r3, [r4, #0]
		}

		y++;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3301      	adds	r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
	for(x = 0; x <10; x++)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	3301      	adds	r3, #1
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b09      	cmp	r3, #9
 8002756:	ddcd      	ble.n	80026f4 <TMC5160_Check_SG_Result+0x1a>
	}

	return SG_RESULT;
 8002758:	2316      	movs	r3, #22
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	881b      	ldrh	r3, [r3, #0]
}
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b007      	add	sp, #28
 8002764:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002766 <TMC5160_Check_CS_Actual>:

uint16_t TMC5160_Check_CS_Actual(uint32_t DRV_STATUS_Register)
{
 8002766:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002768:	b087      	sub	sp, #28
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
	uint16_t CS_ACTUAL = 0;
 800276e:	2316      	movs	r3, #22
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	2200      	movs	r2, #0
 8002774:	801a      	strh	r2, [r3, #0]
	int x,y = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]

	//check for CS_actual
	for(x = 16; x <21; x++)
 800277a:	2310      	movs	r3, #16
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	e02e      	b.n	80027de <TMC5160_Check_CS_Actual+0x78>
	{
		if(DRV_STATUS_Register & (1 << x))
 8002780:	2201      	movs	r2, #1
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	409a      	lsls	r2, r3
 8002786:	0013      	movs	r3, r2
 8002788:	001a      	movs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4013      	ands	r3, r2
 800278e:	d020      	beq.n	80027d2 <TMC5160_Check_CS_Actual+0x6c>
		{
			CS_ACTUAL += (pow(2,y));
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f7ff fc19 	bl	8001fc8 <__aeabi_i2d>
 8002796:	0002      	movs	r2, r0
 8002798:	000b      	movs	r3, r1
 800279a:	2000      	movs	r0, #0
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	05c9      	lsls	r1, r1, #23
 80027a0:	f003 fcc4 	bl	800612c <pow>
 80027a4:	0004      	movs	r4, r0
 80027a6:	000d      	movs	r5, r1
 80027a8:	2616      	movs	r6, #22
 80027aa:	19bb      	adds	r3, r7, r6
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f7ff fc0a 	bl	8001fc8 <__aeabi_i2d>
 80027b4:	0002      	movs	r2, r0
 80027b6:	000b      	movs	r3, r1
 80027b8:	0020      	movs	r0, r4
 80027ba:	0029      	movs	r1, r5
 80027bc:	f7fd fe74 	bl	80004a8 <__aeabi_dadd>
 80027c0:	0002      	movs	r2, r0
 80027c2:	000b      	movs	r3, r1
 80027c4:	19bc      	adds	r4, r7, r6
 80027c6:	0010      	movs	r0, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	f7fd fe4f 	bl	800046c <__aeabi_d2uiz>
 80027ce:	0003      	movs	r3, r0
 80027d0:	8023      	strh	r3, [r4, #0]
		}

		y++;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3301      	adds	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
	for(x = 16; x <21; x++)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	3301      	adds	r3, #1
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b14      	cmp	r3, #20
 80027e2:	ddcd      	ble.n	8002780 <TMC5160_Check_CS_Actual+0x1a>
	}

	return CS_ACTUAL;
 80027e4:	2316      	movs	r3, #22
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	881b      	ldrh	r3, [r3, #0]
}
 80027ea:	0018      	movs	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b007      	add	sp, #28
 80027f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080027f4 <TMC5160_SPIWrite>:


uint32_t TMC5160_SPIWrite(uint8_t Address, uint32_t Value, int Action)  // 1 = write 0 = read
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b08d      	sub	sp, #52	; 0x34
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	240f      	movs	r4, #15
 8002800:	193b      	adds	r3, r7, r4
 8002802:	1c02      	adds	r2, r0, #0
 8002804:	701a      	strb	r2, [r3, #0]

	uint8_t SPI2TxData[5];  //TX data array SPI2
	uint8_t SPI2RxData[5];  //RX data array SPI2
	uint32_t SPI2Rx = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,0); // set TMC CS low
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	015b      	lsls	r3, r3, #5
 800280e:	4843      	ldr	r0, [pc, #268]	; (800291c <TMC5160_SPIWrite+0x128>)
 8002810:	2200      	movs	r2, #0
 8002812:	0019      	movs	r1, r3
 8002814:	f002 fb3d 	bl	8004e92 <HAL_GPIO_WritePin>

	  if (Action == 1) //Write
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <TMC5160_SPIWrite+0x3a>
	  {
		SPI2TxData[0] = Address + 0x80;
 800281e:	193b      	adds	r3, r7, r4
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	3b80      	subs	r3, #128	; 0x80
 8002824:	b2da      	uxtb	r2, r3
 8002826:	231c      	movs	r3, #28
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	e005      	b.n	800283a <TMC5160_SPIWrite+0x46>
	  }

	  else //Read
	  {
		SPI2TxData[0] = Address;
 800282e:	231c      	movs	r3, #28
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	220f      	movs	r2, #15
 8002834:	18ba      	adds	r2, r7, r2
 8002836:	7812      	ldrb	r2, [r2, #0]
 8002838:	701a      	strb	r2, [r3, #0]
	  }

	  SPI2TxData[1] = Value >> 24;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	0e1b      	lsrs	r3, r3, #24
 800283e:	b2da      	uxtb	r2, r3
 8002840:	211c      	movs	r1, #28
 8002842:	187b      	adds	r3, r7, r1
 8002844:	705a      	strb	r2, [r3, #1]
	  SPI2TxData[2] = Value >> 16;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	b2da      	uxtb	r2, r3
 800284c:	187b      	adds	r3, r7, r1
 800284e:	709a      	strb	r2, [r3, #2]
	  SPI2TxData[3] = Value >> 8;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	b2da      	uxtb	r2, r3
 8002856:	187b      	adds	r3, r7, r1
 8002858:	70da      	strb	r2, [r3, #3]
	  SPI2TxData[4] = Value;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	187b      	adds	r3, r7, r1
 8002860:	711a      	strb	r2, [r3, #4]

	  HAL_SPI_TransmitReceive(&hspi2, SPI2TxData, SPI2RxData, 0x05, 100);
 8002862:	2414      	movs	r4, #20
 8002864:	193a      	adds	r2, r7, r4
 8002866:	1879      	adds	r1, r7, r1
 8002868:	482d      	ldr	r0, [pc, #180]	; (8002920 <TMC5160_SPIWrite+0x12c>)
 800286a:	2364      	movs	r3, #100	; 0x64
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	2305      	movs	r3, #5
 8002870:	f003 f8e2 	bl	8005a38 <HAL_SPI_TransmitReceive>

	  SPI2Rx += (SPI2RxData[1] << 24);
 8002874:	193b      	adds	r3, r7, r4
 8002876:	785b      	ldrb	r3, [r3, #1]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	001a      	movs	r2, r3
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	189b      	adds	r3, r3, r2
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[2] << 16);
 8002882:	193b      	adds	r3, r7, r4
 8002884:	789b      	ldrb	r3, [r3, #2]
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	001a      	movs	r2, r3
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	189b      	adds	r3, r3, r2
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[3] << 8);
 8002890:	193b      	adds	r3, r7, r4
 8002892:	78db      	ldrb	r3, [r3, #3]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	001a      	movs	r2, r3
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	189b      	adds	r3, r3, r2
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[4] << 0);
 800289e:	193b      	adds	r3, r7, r4
 80028a0:	791b      	ldrb	r3, [r3, #4]
 80028a2:	001a      	movs	r2, r3
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,1); // set TMC CS high
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	015b      	lsls	r3, r3, #5
 80028ae:	481b      	ldr	r0, [pc, #108]	; (800291c <TMC5160_SPIWrite+0x128>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	0019      	movs	r1, r3
 80028b4:	f002 faed 	bl	8004e92 <HAL_GPIO_WritePin>

	  if(Driver_error == 0)
 80028b8:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <TMC5160_SPIWrite+0x130>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d128      	bne.n	8002912 <TMC5160_SPIWrite+0x11e>
	  {
		// check SPI error frame for issues:
		if (SPI2RxData[0] & (1 << 3)) // standstill
 80028c0:	193b      	adds	r3, r7, r4
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	001a      	movs	r2, r3
 80028c6:	2308      	movs	r3, #8
 80028c8:	4013      	ands	r3, r2
 80028ca:	d002      	beq.n	80028d2 <TMC5160_SPIWrite+0xde>
		{
			Standstill = 1; // no action needed
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <TMC5160_SPIWrite+0x134>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
		}

		if (SPI2RxData[0] & (1 << 2)) // SG2 trigger
 80028d2:	2314      	movs	r3, #20
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	001a      	movs	r2, r3
 80028da:	2304      	movs	r3, #4
 80028dc:	4013      	ands	r3, r2
 80028de:	d002      	beq.n	80028e6 <TMC5160_SPIWrite+0xf2>
		{
			SG2_trigger = 1; // no action needed
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <TMC5160_SPIWrite+0x138>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
		}

		if (SPI2RxData[0] & (1 << 1)) //Driver error
 80028e6:	2314      	movs	r3, #20
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	001a      	movs	r2, r3
 80028ee:	2302      	movs	r3, #2
 80028f0:	4013      	ands	r3, r2
 80028f2:	d004      	beq.n	80028fe <TMC5160_SPIWrite+0x10a>
		{
			Driver_error = 1; // possible action needed
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <TMC5160_SPIWrite+0x130>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
			TMC5160_Fault_monitor(); //check the critical error
 80028fa:	f000 f81b 	bl	8002934 <TMC5160_Fault_monitor>
		}

		if (SPI2RxData[0] & (1 << 0)) //Reset Flag
 80028fe:	2314      	movs	r3, #20
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	001a      	movs	r2, r3
 8002906:	2301      	movs	r3, #1
 8002908:	4013      	ands	r3, r2
 800290a:	d002      	beq.n	8002912 <TMC5160_SPIWrite+0x11e>
		{
			Reset_error = 1; // no action needed
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <TMC5160_SPIWrite+0x13c>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]
		}
	  }

	  return SPI2Rx;
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b00b      	add	sp, #44	; 0x2c
 800291a:	bd90      	pop	{r4, r7, pc}
 800291c:	48000400 	.word	0x48000400
 8002920:	20001110 	.word	0x20001110
 8002924:	2000103c 	.word	0x2000103c
 8002928:	20001034 	.word	0x20001034
 800292c:	20001038 	.word	0x20001038
 8002930:	20001040 	.word	0x20001040

08002934 <TMC5160_Fault_monitor>:

void TMC5160_Fault_monitor(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
	uint32_t DRV_STATUS;
	int Critical_error = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]

	TMC5160_SPIWrite(0x6F, 0x00000000, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	206f      	movs	r0, #111	; 0x6f
 8002944:	f7ff ff56 	bl	80027f4 <TMC5160_SPIWrite>
	DRV_STATUS = TMC5160_SPIWrite(0x6F, 0x00000000, 0); //Read (DRV_STATUS)
 8002948:	2200      	movs	r2, #0
 800294a:	2100      	movs	r1, #0
 800294c:	206f      	movs	r0, #111	; 0x6f
 800294e:	f7ff ff51 	bl	80027f4 <TMC5160_SPIWrite>
 8002952:	0003      	movs	r3, r0
 8002954:	603b      	str	r3, [r7, #0]

	TMC5160_SPIWrite(0x01, 0x00000006, 1); // write 1 to clear GSTAT (clear GSTAT register)
 8002956:	2201      	movs	r2, #1
 8002958:	2106      	movs	r1, #6
 800295a:	2001      	movs	r0, #1
 800295c:	f7ff ff4a 	bl	80027f4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x01, 0x00000000, 0); // read GSTAT (should be all 0)
 8002960:	2200      	movs	r2, #0
 8002962:	2100      	movs	r1, #0
 8002964:	2001      	movs	r0, #1
 8002966:	f7ff ff45 	bl	80027f4 <TMC5160_SPIWrite>
	// check if critical error
	//bits 31 t/m 25  , 13 en 12

	//DRV_STATUS & (1 << 31) || DRV_STATUS & (1 << 30) || DRV_STATUS & (1 << 29) ||

	if(DRV_STATUS & (1 << 28) || DRV_STATUS & (1 << 27) || DRV_STATUS & (1 << 26) || DRV_STATUS & (1 << 25) || DRV_STATUS & (1 << 13) || DRV_STATUS & (1 << 12))
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	055b      	lsls	r3, r3, #21
 8002970:	4013      	ands	r3, r2
 8002972:	d118      	bne.n	80029a6 <TMC5160_Fault_monitor+0x72>
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	051b      	lsls	r3, r3, #20
 800297a:	4013      	ands	r3, r2
 800297c:	d113      	bne.n	80029a6 <TMC5160_Fault_monitor+0x72>
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	04db      	lsls	r3, r3, #19
 8002984:	4013      	ands	r3, r2
 8002986:	d10e      	bne.n	80029a6 <TMC5160_Fault_monitor+0x72>
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	049b      	lsls	r3, r3, #18
 800298e:	4013      	ands	r3, r2
 8002990:	d109      	bne.n	80029a6 <TMC5160_Fault_monitor+0x72>
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	019b      	lsls	r3, r3, #6
 8002998:	4013      	ands	r3, r2
 800299a:	d104      	bne.n	80029a6 <TMC5160_Fault_monitor+0x72>
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	015b      	lsls	r3, r3, #5
 80029a2:	4013      	ands	r3, r2
 80029a4:	d001      	beq.n	80029aa <TMC5160_Fault_monitor+0x76>
	{
		Critical_error = 1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	607b      	str	r3, [r7, #4]
	}

	if (Critical_error == 1) {
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d133      	bne.n	8002a18 <TMC5160_Fault_monitor+0xe4>

		//signal error occured (only on 1_axis_demo code)
		HAL_GPIO_WritePin(GPIOB, EXT_OUT_2_Pin, 0);
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <TMC5160_Fault_monitor+0xf4>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	2120      	movs	r1, #32
 80029b6:	0018      	movs	r0, r3
 80029b8:	f002 fa6b 	bl	8004e92 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 80029bc:	2396      	movs	r3, #150	; 0x96
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 ffdb 	bl	800397c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, EXT_OUT_2_Pin, 1);
 80029c6:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <TMC5160_Fault_monitor+0xf4>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	2120      	movs	r1, #32
 80029cc:	0018      	movs	r0, r3
 80029ce:	f002 fa60 	bl	8004e92 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 80029d2:	2396      	movs	r3, #150	; 0x96
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 ffd0 	bl	800397c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, EXT_OUT_2_Pin, 0);
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <TMC5160_Fault_monitor+0xf4>)
 80029de:	2200      	movs	r2, #0
 80029e0:	2120      	movs	r1, #32
 80029e2:	0018      	movs	r0, r3
 80029e4:	f002 fa55 	bl	8004e92 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 80029e8:	2396      	movs	r3, #150	; 0x96
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 ffc5 	bl	800397c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, EXT_OUT_2_Pin, 1);
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <TMC5160_Fault_monitor+0xf4>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	2120      	movs	r1, #32
 80029f8:	0018      	movs	r0, r3
 80029fa:	f002 fa4a 	bl	8004e92 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 80029fe:	2396      	movs	r3, #150	; 0x96
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 ffba 	bl	800397c <HAL_Delay>

		TMC5160_Stop();
 8002a08:	f7ff fdec 	bl	80025e4 <TMC5160_Stop>
		Drive_Enable(0);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7ff fdf3 	bl	80025f8 <Drive_Enable>

		HAL_NVIC_SystemReset(); // risky should not be in final code
 8002a12:	f002 f898 	bl	8004b46 <HAL_NVIC_SystemReset>

	else
	{
		Driver_error = 0;
	}
}
 8002a16:	e002      	b.n	8002a1e <TMC5160_Fault_monitor+0xea>
		Driver_error = 0;
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <TMC5160_Fault_monitor+0xf8>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b002      	add	sp, #8
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	48000400 	.word	0x48000400
 8002a2c:	2000103c 	.word	0x2000103c

08002a30 <AMS5055_Get_Position>:
{
	AMSoffset = AMS5055_Get_Position();  // Angle read when standstill is offset
}

uint16_t AMS5055_Get_Position(void)
{
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
	uint16_t Angle = 0;
 8002a36:	230e      	movs	r3, #14
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	801a      	strh	r2, [r3, #0]
	int AlarmLo = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
	int AlarmHi = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]

	AMS5055_SPIWriteInt(ANGULAR_DATA,1);
 8002a46:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <AMS5055_Get_Position+0x108>)
 8002a48:	2101      	movs	r1, #1
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 f8b8 	bl	8002bc0 <AMS5055_SPIWriteInt>

	while(AMS_Ready != 1) //wacht op INT
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <AMS5055_Get_Position+0x10c>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d1fb      	bne.n	8002a52 <AMS5055_Get_Position+0x22>
	{
	}

	Angle = AMS5055_SPIWriteInt(NOP,1);
 8002a5a:	250e      	movs	r5, #14
 8002a5c:	197c      	adds	r4, r7, r5
 8002a5e:	2101      	movs	r1, #1
 8002a60:	2000      	movs	r0, #0
 8002a62:	f000 f8ad 	bl	8002bc0 <AMS5055_SPIWriteInt>
 8002a66:	0003      	movs	r3, r0
 8002a68:	8023      	strh	r3, [r4, #0]

	AlarmHi = (Angle >> 12) & 0x01; // AlamHi = b14
 8002a6a:	0029      	movs	r1, r5
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	0b1b      	lsrs	r3, r3, #12
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	001a      	movs	r2, r3
 8002a76:	2301      	movs	r3, #1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	607b      	str	r3, [r7, #4]
	AlarmLo = (Angle >> 13) & 0x01; // AlarmLo = b15
 8002a7c:	187b      	adds	r3, r7, r1
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	0b5b      	lsrs	r3, r3, #13
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	001a      	movs	r2, r3
 8002a86:	2301      	movs	r3, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
		//magnetic field too strong , lower AGC ?
	}

	// remove first 2 and last 2 bits

	Angle &= ~(1 << 14);
 8002a8c:	000c      	movs	r4, r1
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	193a      	adds	r2, r7, r4
 8002a92:	8812      	ldrh	r2, [r2, #0]
 8002a94:	492a      	ldr	r1, [pc, #168]	; (8002b40 <AMS5055_Get_Position+0x110>)
 8002a96:	400a      	ands	r2, r1
 8002a98:	801a      	strh	r2, [r3, #0]
	Angle &= ~(1 << 15);
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	193a      	adds	r2, r7, r4
 8002a9e:	8812      	ldrh	r2, [r2, #0]
 8002aa0:	0452      	lsls	r2, r2, #17
 8002aa2:	0c52      	lsrs	r2, r2, #17
 8002aa4:	801a      	strh	r2, [r3, #0]
	Angle = (Angle >> 2);
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	193a      	adds	r2, r7, r4
 8002aaa:	8812      	ldrh	r2, [r2, #0]
 8002aac:	0892      	lsrs	r2, r2, #2
 8002aae:	801a      	strh	r2, [r3, #0]

	Angle = ((Angle * 360) / 4095); //12 bit resolution
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	881a      	ldrh	r2, [r3, #0]
 8002ab4:	0013      	movs	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	189b      	adds	r3, r3, r2
 8002aba:	011a      	lsls	r2, r3, #4
 8002abc:	1ad2      	subs	r2, r2, r3
 8002abe:	00d3      	lsls	r3, r2, #3
 8002ac0:	001a      	movs	r2, r3
 8002ac2:	0013      	movs	r3, r2
 8002ac4:	491f      	ldr	r1, [pc, #124]	; (8002b44 <AMS5055_Get_Position+0x114>)
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f7fd fba6 	bl	8000218 <__divsi3>
 8002acc:	0003      	movs	r3, r0
 8002ace:	001a      	movs	r2, r3
 8002ad0:	193b      	adds	r3, r7, r4
 8002ad2:	801a      	strh	r2, [r3, #0]

	Angle = Angle - AMSoffset;  // AMS is not calibrated, so angle needs to be fixed
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <AMS5055_Get_Position+0x118>)
 8002ad6:	881a      	ldrh	r2, [r3, #0]
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	1939      	adds	r1, r7, r4
 8002adc:	8809      	ldrh	r1, [r1, #0]
 8002ade:	1a8a      	subs	r2, r1, r2
 8002ae0:	801a      	strh	r2, [r3, #0]
	if((int)Angle <= 0)
 8002ae2:	193b      	adds	r3, r7, r4
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <AMS5055_Get_Position+0xc6>
	{
		Angle = Angle + 360;
 8002aea:	193b      	adds	r3, r7, r4
 8002aec:	193a      	adds	r2, r7, r4
 8002aee:	8812      	ldrh	r2, [r2, #0]
 8002af0:	3269      	adds	r2, #105	; 0x69
 8002af2:	32ff      	adds	r2, #255	; 0xff
 8002af4:	801a      	strh	r2, [r3, #0]
	}

	Angles[Ax] = Angle;
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <AMS5055_Get_Position+0x11c>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <AMS5055_Get_Position+0x120>)
 8002afc:	0052      	lsls	r2, r2, #1
 8002afe:	210e      	movs	r1, #14
 8002b00:	1879      	adds	r1, r7, r1
 8002b02:	8809      	ldrh	r1, [r1, #0]
 8002b04:	52d1      	strh	r1, [r2, r3]

	if (Ax >= 4100)
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <AMS5055_Get_Position+0x11c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <AMS5055_Get_Position+0x124>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	dd03      	ble.n	8002b18 <AMS5055_Get_Position+0xe8>
	{
		Ax = 0;
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <AMS5055_Get_Position+0x11c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e007      	b.n	8002b28 <AMS5055_Get_Position+0xf8>
	}

	else
	{
		Ax++;
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <AMS5055_Get_Position+0x11c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <AMS5055_Get_Position+0x11c>)
 8002b20:	601a      	str	r2, [r3, #0]
		AMS_Ready = 0;
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <AMS5055_Get_Position+0x10c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
	}

	//return Angles[Ax-1];
	return Angle;
 8002b28:	230e      	movs	r3, #14
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	881b      	ldrh	r3, [r3, #0]
}
 8002b2e:	0018      	movs	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b004      	add	sp, #16
 8002b34:	bdb0      	pop	{r4, r5, r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	00003fff 	.word	0x00003fff
 8002b3c:	200031d0 	.word	0x200031d0
 8002b40:	ffffbfff 	.word	0xffffbfff
 8002b44:	00000fff 	.word	0x00000fff
 8002b48:	2000008c 	.word	0x2000008c
 8002b4c:	200031cc 	.word	0x200031cc
 8002b50:	200011c4 	.word	0x200011c4
 8002b54:	00001003 	.word	0x00001003

08002b58 <AMSParity>:

uint8_t AMSParity(uint16_t value)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	0002      	movs	r2, r0
 8002b60:	1dbb      	adds	r3, r7, #6
 8002b62:	801a      	strh	r2, [r3, #0]
	uint8_t cnt = 0;
 8002b64:	230f      	movs	r3, #15
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8002b6c:	230e      	movs	r3, #14
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	e015      	b.n	8002ba2 <AMSParity+0x4a>
	{
		if (value & 0x1)
 8002b76:	1dbb      	adds	r3, r7, #6
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d005      	beq.n	8002b8c <AMSParity+0x34>
		{
			cnt++;
 8002b80:	210f      	movs	r1, #15
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	187b      	adds	r3, r7, r1
 8002b88:	3201      	adds	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
		}

		value >>= 1;
 8002b8c:	1dbb      	adds	r3, r7, #6
 8002b8e:	1dba      	adds	r2, r7, #6
 8002b90:	8812      	ldrh	r2, [r2, #0]
 8002b92:	0852      	lsrs	r2, r2, #1
 8002b94:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 16; i++)
 8002b96:	210e      	movs	r1, #14
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	3201      	adds	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	230e      	movs	r3, #14
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d9e4      	bls.n	8002b76 <AMSParity+0x1e>
	}
	return cnt & 0x1;
 8002bac:	230f      	movs	r3, #15
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	b2db      	uxtb	r3, r3
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b004      	add	sp, #16
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <AMS5055_SPIWriteInt>:

uint16_t AMS5055_SPIWriteInt(uint16_t Address, int Action)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	1dbb      	adds	r3, r7, #6
 8002bcc:	801a      	strh	r2, [r3, #0]
	*/

	uint8_t SPI1TxData[2];	//TX data array SPI1
	uint8_t SPI1RxData[2];	//RX data array SPI1

	uint16_t SPI1Rx = 0;
 8002bce:	2314      	movs	r3, #20
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	801a      	strh	r2, [r3, #0]
	uint16_t SPI1Tx = 0;
 8002bd6:	2416      	movs	r4, #22
 8002bd8:	193b      	adds	r3, r7, r4
 8002bda:	2200      	movs	r2, #0
 8002bdc:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low
 8002bde:	2390      	movs	r3, #144	; 0x90
 8002be0:	05db      	lsls	r3, r3, #23
 8002be2:	2200      	movs	r2, #0
 8002be4:	2110      	movs	r1, #16
 8002be6:	0018      	movs	r0, r3
 8002be8:	f002 f953 	bl	8004e92 <HAL_GPIO_WritePin>


	  SPI1Tx = (Address << 1);
 8002bec:	0021      	movs	r1, r4
 8002bee:	187a      	adds	r2, r7, r1
 8002bf0:	1dbb      	adds	r3, r7, #6
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	18db      	adds	r3, r3, r3
 8002bf6:	8013      	strh	r3, [r2, #0]

	  if (Action == 1) //READ
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d105      	bne.n	8002c0a <AMS5055_SPIWriteInt+0x4a>
	  {
		  SPI1Tx = SPI1Tx | 0x8000;
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	187a      	adds	r2, r7, r1
 8002c02:	8812      	ldrh	r2, [r2, #0]
 8002c04:	4923      	ldr	r1, [pc, #140]	; (8002c94 <AMS5055_SPIWriteInt+0xd4>)
 8002c06:	430a      	orrs	r2, r1
 8002c08:	801a      	strh	r2, [r3, #0]
	  }

	  SPI1Tx = SPI1Tx | AMSParity(SPI1Tx);
 8002c0a:	2416      	movs	r4, #22
 8002c0c:	193b      	adds	r3, r7, r4
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff ffa1 	bl	8002b58 <AMSParity>
 8002c16:	0003      	movs	r3, r0
 8002c18:	b299      	uxth	r1, r3
 8002c1a:	193b      	adds	r3, r7, r4
 8002c1c:	193a      	adds	r2, r7, r4
 8002c1e:	8812      	ldrh	r2, [r2, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	801a      	strh	r2, [r3, #0]

	 // HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low

	  SPI1TxData[0] = SPI1Tx >> 8;
 8002c24:	0021      	movs	r1, r4
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	2010      	movs	r0, #16
 8002c32:	183b      	adds	r3, r7, r0
 8002c34:	701a      	strb	r2, [r3, #0]
	  SPI1TxData[1] = SPI1Tx;
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	183b      	adds	r3, r7, r0
 8002c3e:	705a      	strb	r2, [r3, #1]

	  HAL_SPI_TransmitReceive(&hspi1, SPI1TxData, SPI1RxData, 0x02, 100);
 8002c40:	240c      	movs	r4, #12
 8002c42:	193a      	adds	r2, r7, r4
 8002c44:	1839      	adds	r1, r7, r0
 8002c46:	4814      	ldr	r0, [pc, #80]	; (8002c98 <AMS5055_SPIWriteInt+0xd8>)
 8002c48:	2364      	movs	r3, #100	; 0x64
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	f002 fef3 	bl	8005a38 <HAL_SPI_TransmitReceive>
	//HAL_SPI_TransmitReceive(&hspi1, SPI1Tx, SPI1Rx, 0x02, 100);

	  //HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high

	  SPI1Rx += (SPI1RxData[0] << 8);	//<< 8
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	b299      	uxth	r1, r3
 8002c5c:	2014      	movs	r0, #20
 8002c5e:	183b      	adds	r3, r7, r0
 8002c60:	183a      	adds	r2, r7, r0
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	188a      	adds	r2, r1, r2
 8002c66:	801a      	strh	r2, [r3, #0]
	  SPI1Rx += (SPI1RxData[1] << 0);	//<< 0
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	785b      	ldrb	r3, [r3, #1]
 8002c6c:	b299      	uxth	r1, r3
 8002c6e:	183b      	adds	r3, r7, r0
 8002c70:	0004      	movs	r4, r0
 8002c72:	183a      	adds	r2, r7, r0
 8002c74:	8812      	ldrh	r2, [r2, #0]
 8002c76:	188a      	adds	r2, r1, r2
 8002c78:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high
 8002c7a:	2390      	movs	r3, #144	; 0x90
 8002c7c:	05db      	lsls	r3, r3, #23
 8002c7e:	2201      	movs	r2, #1
 8002c80:	2110      	movs	r1, #16
 8002c82:	0018      	movs	r0, r3
 8002c84:	f002 f905 	bl	8004e92 <HAL_GPIO_WritePin>

	  return SPI1Rx;
 8002c88:	193b      	adds	r3, r7, r4
 8002c8a:	881b      	ldrh	r3, [r3, #0]
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b007      	add	sp, #28
 8002c92:	bd90      	pop	{r4, r7, pc}
 8002c94:	ffff8000 	.word	0xffff8000
 8002c98:	200010ac 	.word	0x200010ac

08002c9c <ENC_Get_Position>:

uint16_t ENC_Get_Position(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
	uint32_t Enc_Position = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2039      	movs	r0, #57	; 0x39
 8002ca8:	f7ff fda4 	bl	80027f4 <TMC5160_SPIWrite>
 8002cac:	0003      	movs	r3, r0
 8002cae:	607b      	str	r3, [r7, #4]

	if((int)Enc_Position <= 0)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	dc02      	bgt.n	8002cbc <ENC_Get_Position+0x20>
	{
		Enc_Position = Enc_Position * (-1);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	425b      	negs	r3, r3
 8002cba:	607b      	str	r3, [r7, #4]
	}

	Enc_Position = ((Enc_Position / 256)* 1.8);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff f9b1 	bl	8002028 <__aeabi_ui2d>
 8002cc6:	4a09      	ldr	r2, [pc, #36]	; (8002cec <ENC_Get_Position+0x50>)
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <ENC_Get_Position+0x54>)
 8002cca:	f7fe fb2b 	bl	8001324 <__aeabi_dmul>
 8002cce:	0002      	movs	r2, r0
 8002cd0:	000b      	movs	r3, r1
 8002cd2:	0010      	movs	r0, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	f7fd fbc9 	bl	800046c <__aeabi_d2uiz>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	607b      	str	r3, [r7, #4]

	return Enc_Position;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	b29b      	uxth	r3, r3
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b002      	add	sp, #8
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	cccccccd 	.word	0xcccccccd
 8002cf0:	3ffccccc 	.word	0x3ffccccc

08002cf4 <Read_IN>:
	 HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,0);
	}
}

int Read_IN(int port)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	int val = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]

	if(port == 1)//Read IN1 (5 to 24V = 1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d106      	bne.n	8002d14 <Read_IN+0x20>
	{
		val = HAL_GPIO_ReadPin(GPIOB, REFL_UC_Pin);
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <Read_IN+0x40>)
 8002d08:	2140      	movs	r1, #64	; 0x40
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f002 f8a4 	bl	8004e58 <HAL_GPIO_ReadPin>
 8002d10:	0003      	movs	r3, r0
 8002d12:	60fb      	str	r3, [r7, #12]
	}

	if(port == 2)//Read IN1 (5 to 24V = 1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d106      	bne.n	8002d28 <Read_IN+0x34>
	{
		val = HAL_GPIO_ReadPin(GPIOB, REFR_UC_Pin);
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <Read_IN+0x40>)
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f002 f89a 	bl	8004e58 <HAL_GPIO_ReadPin>
 8002d24:	0003      	movs	r3, r0
 8002d26:	60fb      	str	r3, [r7, #12]

	}

	return val;
 8002d28:	68fb      	ldr	r3, [r7, #12]
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b004      	add	sp, #16
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	48000400 	.word	0x48000400

08002d38 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint16_t open_pos = 0;
uint16_t closed_pos = 0;

/*  CAN RECEIVE INTERRUPT */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CANRxHeader, CANRxData);
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002d42:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	2100      	movs	r1, #0
 8002d48:	f001 fac0 	bl	80042cc <HAL_CAN_GetRxMessage>

	if (CANRxData[0] == 0x01)
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d102      	bne.n	8002d5a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Datacheck = 1;
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
	}
}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b002      	add	sp, #8
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	20001198 	.word	0x20001198
 8002d68:	20001174 	.word	0x20001174
 8002d6c:	200011a0 	.word	0x200011a0

08002d70 <HAL_GPIO_EXTI_Callback>:

/* AMS INTERRUPT */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	0002      	movs	r2, r0
 8002d78:	1dbb      	adds	r3, r7, #6
 8002d7a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == AMS_INT_Pin && AMS_Ready == 0)
 8002d7c:	1dbb      	adds	r3, r7, #6
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d106      	bne.n	8002d92 <HAL_GPIO_EXTI_Callback+0x22>
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <HAL_GPIO_EXTI_Callback+0x22>
	{
		AMS_Ready = 1;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
	}
}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b002      	add	sp, #8
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	200031d0 	.word	0x200031d0

08002da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8002da4:	f000 fd86 	bl	80038b4 <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_Delay(2000); //delay to allow crystal to wake up.
 8002da8:	23fa      	movs	r3, #250	; 0xfa
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 fde5 	bl	800397c <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002db2:	f000 f9ad 	bl	8003110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002db6:	f000 fb33 	bl	8003420 <MX_GPIO_Init>
  MX_ADC_Init();
 8002dba:	f000 f9ed 	bl	8003198 <MX_ADC_Init>
  MX_CAN_Init();
 8002dbe:	f000 fa47 	bl	8003250 <MX_CAN_Init>
  MX_SPI1_Init();
 8002dc2:	f000 fab1 	bl	8003328 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002dc6:	f000 faed 	bl	80033a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,1); // make sure raspi waits
 8002dca:	4bc1      	ldr	r3, [pc, #772]	; (80030d0 <main+0x330>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	2120      	movs	r1, #32
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f002 f85e 	bl	8004e92 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002dd6:	2064      	movs	r0, #100	; 0x64
 8002dd8:	f000 fdd0 	bl	800397c <HAL_Delay>

  TMC5160_Stop();
 8002ddc:	f7ff fc02 	bl	80025e4 <TMC5160_Stop>
  Drive_Enable(0);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7ff fc09 	bl	80025f8 <Drive_Enable>

  HAL_Delay(2500);			//startup delay, so motor does not spin on debug
 8002de6:	4bbb      	ldr	r3, [pc, #748]	; (80030d4 <main+0x334>)
 8002de8:	0018      	movs	r0, r3
 8002dea:	f000 fdc7 	bl	800397c <HAL_Delay>

  Ramp1.VSTART 	= 10;		//Motor Start speed
 8002dee:	4bba      	ldr	r3, [pc, #744]	; (80030d8 <main+0x338>)
 8002df0:	220a      	movs	r2, #10
 8002df2:	601a      	str	r2, [r3, #0]
  Ramp1.A1 		= 1000;		//Motor Accelaration from Vstart to speed V1
 8002df4:	4bb8      	ldr	r3, [pc, #736]	; (80030d8 <main+0x338>)
 8002df6:	22fa      	movs	r2, #250	; 0xfa
 8002df8:	0092      	lsls	r2, r2, #2
 8002dfa:	605a      	str	r2, [r3, #4]
  Ramp1.V1 		= 10000;	//Motor Speed limit V1
 8002dfc:	4bb6      	ldr	r3, [pc, #728]	; (80030d8 <main+0x338>)
 8002dfe:	4ab7      	ldr	r2, [pc, #732]	; (80030dc <main+0x33c>)
 8002e00:	609a      	str	r2, [r3, #8]
  Ramp1.AMAX 	= 51200;	//Motor Accelaration from speed V1 to speed Vmax
 8002e02:	4bb5      	ldr	r3, [pc, #724]	; (80030d8 <main+0x338>)
 8002e04:	22c8      	movs	r2, #200	; 0xc8
 8002e06:	0212      	lsls	r2, r2, #8
 8002e08:	60da      	str	r2, [r3, #12]
  Ramp1.VMAX 	= 51200;	//Motor Max speed limit
 8002e0a:	4bb3      	ldr	r3, [pc, #716]	; (80030d8 <main+0x338>)
 8002e0c:	22c8      	movs	r2, #200	; 0xc8
 8002e0e:	0212      	lsls	r2, r2, #8
 8002e10:	611a      	str	r2, [r3, #16]
  Ramp1.DMAX 	= 700;		//Motor Decelaration speed from speed VMAX to V1
 8002e12:	4bb1      	ldr	r3, [pc, #708]	; (80030d8 <main+0x338>)
 8002e14:	22af      	movs	r2, #175	; 0xaf
 8002e16:	0092      	lsls	r2, r2, #2
 8002e18:	615a      	str	r2, [r3, #20]
  Ramp1.D1 		= 1400; 	//Motor Decelaration speed from V1 to VStop
 8002e1a:	4baf      	ldr	r3, [pc, #700]	; (80030d8 <main+0x338>)
 8002e1c:	22af      	movs	r2, #175	; 0xaf
 8002e1e:	00d2      	lsls	r2, r2, #3
 8002e20:	619a      	str	r2, [r3, #24]
  Ramp1.VSTOP 	= 13;		//Motor Stop speed
 8002e22:	4bad      	ldr	r3, [pc, #692]	; (80030d8 <main+0x338>)
 8002e24:	220d      	movs	r2, #13
 8002e26:	61da      	str	r2, [r3, #28]

  CurrentSetting1.IHOLD = 3;
 8002e28:	4bad      	ldr	r3, [pc, #692]	; (80030e0 <main+0x340>)
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	605a      	str	r2, [r3, #4]
  CurrentSetting1.IRUN 	= 1;
 8002e2e:	4bac      	ldr	r3, [pc, #688]	; (80030e0 <main+0x340>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  TMC5160_Basic_Init(&CurrentSetting1); 	//TMC5160 basic init
 8002e34:	4baa      	ldr	r3, [pc, #680]	; (80030e0 <main+0x340>)
 8002e36:	0018      	movs	r0, r3
 8002e38:	f7ff f93a 	bl	80020b0 <TMC5160_Basic_Init>

  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,0); // make sure PLC waits
 8002e3c:	4ba4      	ldr	r3, [pc, #656]	; (80030d0 <main+0x330>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2110      	movs	r1, #16
 8002e42:	0018      	movs	r0, r3
 8002e44:	f002 f825 	bl	8004e92 <HAL_GPIO_WritePin>

  Drive_Enable(1); // enable driver
 8002e48:	2001      	movs	r0, #1
 8002e4a:	f7ff fbd5 	bl	80025f8 <Drive_Enable>

  TMC5160_Basic_Rotate(1, &Ramp1);
 8002e4e:	4ba2      	ldr	r3, [pc, #648]	; (80030d8 <main+0x338>)
 8002e50:	0019      	movs	r1, r3
 8002e52:	2001      	movs	r0, #1
 8002e54:	f7ff faaa 	bl	80023ac <TMC5160_Basic_Rotate>
  HAL_Delay(50);
 8002e58:	2032      	movs	r0, #50	; 0x32
 8002e5a:	f000 fd8f 	bl	800397c <HAL_Delay>
  TMC5160_Init_Stallguard(0);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7ff fa32 	bl	80022c8 <TMC5160_Init_Stallguard>


  while(stall == 0 && stallcounter < 35) //wait for stepper to reach closed position
 8002e64:	e015      	b.n	8002e92 <main+0xf2>
  {
		//TMC5160_Monitor_Stallguard();
	    HAL_Delay(10);
 8002e66:	200a      	movs	r0, #10
 8002e68:	f000 fd88 	bl	800397c <HAL_Delay>
		stallcounter++;
 8002e6c:	4b9d      	ldr	r3, [pc, #628]	; (80030e4 <main+0x344>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	4b9c      	ldr	r3, [pc, #624]	; (80030e4 <main+0x344>)
 8002e74:	601a      	str	r2, [r3, #0]

		if (TMC5160_Monitor_Stallguard() == 1) // stall event
 8002e76:	f7ff fa4b 	bl	8002310 <TMC5160_Monitor_Stallguard>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d108      	bne.n	8002e92 <main+0xf2>
		{
			Drive_Enable(0);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7ff fbb9 	bl	80025f8 <Drive_Enable>
			TMC5160_Init_Stallguard(1); // clear stall flag
 8002e86:	2001      	movs	r0, #1
 8002e88:	f7ff fa1e 	bl	80022c8 <TMC5160_Init_Stallguard>
			// enter breakpoint if motor needs to start movement here again, if no breakpoint is added, motor will not stall!
			stall = 1;
 8002e8c:	4b96      	ldr	r3, [pc, #600]	; (80030e8 <main+0x348>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
  while(stall == 0 && stallcounter < 35) //wait for stepper to reach closed position
 8002e92:	4b95      	ldr	r3, [pc, #596]	; (80030e8 <main+0x348>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <main+0x102>
 8002e9a:	4b92      	ldr	r3, [pc, #584]	; (80030e4 <main+0x344>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b22      	cmp	r3, #34	; 0x22
 8002ea0:	d9e1      	bls.n	8002e66 <main+0xc6>
		}
  }

  if (stall == 0)
 8002ea2:	4b91      	ldr	r3, [pc, #580]	; (80030e8 <main+0x348>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d108      	bne.n	8002ebc <main+0x11c>
  {
	  Drive_Enable(0);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7ff fba4 	bl	80025f8 <Drive_Enable>
	  HAL_Delay(100);
 8002eb0:	2064      	movs	r0, #100	; 0x64
 8002eb2:	f000 fd63 	bl	800397c <HAL_Delay>
	  TMC5160_Init_Stallguard(1); // clear stall flag
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f7ff fa06 	bl	80022c8 <TMC5160_Init_Stallguard>
  }

  TMC5160_SPIWrite(0x21, 0x00000000, 1);// writing value to address 24 = 0x2D(XTARGET)  1 lap
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2021      	movs	r0, #33	; 0x21
 8002ec2:	f7ff fc97 	bl	80027f4 <TMC5160_SPIWrite>
  TMC5160_Rotate_To(0, &Ramp1);
 8002ec6:	4b84      	ldr	r3, [pc, #528]	; (80030d8 <main+0x338>)
 8002ec8:	0019      	movs	r1, r3
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f7ff fab4 	bl	8002438 <TMC5160_Rotate_To>

  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,0);
 8002ed0:	4b7f      	ldr	r3, [pc, #508]	; (80030d0 <main+0x330>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2120      	movs	r1, #32
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f001 ffdb 	bl	8004e92 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002edc:	2064      	movs	r0, #100	; 0x64
 8002ede:	f000 fd4d 	bl	800397c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,1);
 8002ee2:	4b7b      	ldr	r3, [pc, #492]	; (80030d0 <main+0x330>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2120      	movs	r1, #32
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f001 ffd2 	bl	8004e92 <HAL_GPIO_WritePin>

  HAL_Delay(1500);
 8002eee:	4b7f      	ldr	r3, [pc, #508]	; (80030ec <main+0x34c>)
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f000 fd43 	bl	800397c <HAL_Delay>

  Open = 0;
 8002ef6:	4b7e      	ldr	r3, [pc, #504]	; (80030f0 <main+0x350>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
  open_pos = 0;
 8002efc:	4b7d      	ldr	r3, [pc, #500]	; (80030f4 <main+0x354>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	801a      	strh	r2, [r3, #0]
  closed_pos = 13800;
 8002f02:	4b7d      	ldr	r3, [pc, #500]	; (80030f8 <main+0x358>)
 8002f04:	4a7d      	ldr	r2, [pc, #500]	; (80030fc <main+0x35c>)
 8002f06:	801a      	strh	r2, [r3, #0]

  Drive_Enable(1); // enable driver
 8002f08:	2001      	movs	r0, #1
 8002f0a:	f7ff fb75 	bl	80025f8 <Drive_Enable>
  TMC5160_Rotate_To(closed_pos,&Ramp1); // close
 8002f0e:	4b7a      	ldr	r3, [pc, #488]	; (80030f8 <main+0x358>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	001a      	movs	r2, r3
 8002f14:	4b70      	ldr	r3, [pc, #448]	; (80030d8 <main+0x338>)
 8002f16:	0019      	movs	r1, r3
 8002f18:	0010      	movs	r0, r2
 8002f1a:	f7ff fa8d 	bl	8002438 <TMC5160_Rotate_To>
  Open = 1;
 8002f1e:	4b74      	ldr	r3, [pc, #464]	; (80030f0 <main+0x350>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
  Drive_Enable(0); // disable driver
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7ff fb67 	bl	80025f8 <Drive_Enable>

  for(m = 0; m < NumberofMarbles; m++) //Clear Array, and make sure all are 0
 8002f2a:	4b75      	ldr	r3, [pc, #468]	; (8003100 <main+0x360>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e009      	b.n	8002f46 <main+0x1a6>
  {
	  Marbles[m] = 0;
 8002f32:	4b73      	ldr	r3, [pc, #460]	; (8003100 <main+0x360>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a73      	ldr	r2, [pc, #460]	; (8003104 <main+0x364>)
 8002f38:	2100      	movs	r1, #0
 8002f3a:	54d1      	strb	r1, [r2, r3]
  for(m = 0; m < NumberofMarbles; m++) //Clear Array, and make sure all are 0
 8002f3c:	4b70      	ldr	r3, [pc, #448]	; (8003100 <main+0x360>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	4b6f      	ldr	r3, [pc, #444]	; (8003100 <main+0x360>)
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	4b6e      	ldr	r3, [pc, #440]	; (8003100 <main+0x360>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2214      	movs	r2, #20
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	dbf0      	blt.n	8002f32 <main+0x192>
  }

  // signal Raspi in case raspi is already powered
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,0);
 8002f50:	4b5f      	ldr	r3, [pc, #380]	; (80030d0 <main+0x330>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	2120      	movs	r1, #32
 8002f56:	0018      	movs	r0, r3
 8002f58:	f001 ff9b 	bl	8004e92 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8002f5c:	20c8      	movs	r0, #200	; 0xc8
 8002f5e:	f000 fd0d 	bl	800397c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,1);
 8002f62:	4b5b      	ldr	r3, [pc, #364]	; (80030d0 <main+0x330>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	2120      	movs	r1, #32
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f001 ff92 	bl	8004e92 <HAL_GPIO_WritePin>

  while(Read_IN(2) == 1) //Wait for RASPI signal to start
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	2002      	movs	r0, #2
 8002f72:	f7ff febf 	bl	8002cf4 <Read_IN>
 8002f76:	0003      	movs	r3, r0
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d0f9      	beq.n	8002f70 <main+0x1d0>
  {
  }

  while(Read_IN(2) == 0) //Wait for RASPI signal to start
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	2002      	movs	r0, #2
 8002f80:	f7ff feb8 	bl	8002cf4 <Read_IN>
 8002f84:	1e03      	subs	r3, r0, #0
 8002f86:	d0fa      	beq.n	8002f7e <main+0x1de>
  {
  }

  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,1);
 8002f88:	4b51      	ldr	r3, [pc, #324]	; (80030d0 <main+0x330>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f001 ff7f 	bl	8004e92 <HAL_GPIO_WritePin>
  {
  }
*/

//signal PLC to start
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,1);
 8002f94:	4b4e      	ldr	r3, [pc, #312]	; (80030d0 <main+0x330>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	2110      	movs	r1, #16
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f001 ff79 	bl	8004e92 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8002fa0:	23fa      	movs	r3, #250	; 0xfa
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 fce9 	bl	800397c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,0);
 8002faa:	4b49      	ldr	r3, [pc, #292]	; (80030d0 <main+0x330>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	2110      	movs	r1, #16
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f001 ff6e 	bl	8004e92 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	  while(Read_IN(1) == 1) //Wait for PLC signal that marble is in place
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	2001      	movs	r0, #1
 8002fba:	f7ff fe9b 	bl	8002cf4 <Read_IN>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d0f9      	beq.n	8002fb8 <main+0x218>
  	  {
  	  }

	  // signal Raspi to start
	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,0);
 8002fc4:	4b42      	ldr	r3, [pc, #264]	; (80030d0 <main+0x330>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2120      	movs	r1, #32
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f001 ff61 	bl	8004e92 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002fd0:	2064      	movs	r0, #100	; 0x64
 8002fd2:	f000 fcd3 	bl	800397c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,1);
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <main+0x330>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	2120      	movs	r1, #32
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f001 ff58 	bl	8004e92 <HAL_GPIO_WritePin>


	  while(Read_IN(2) == 1) //Wait for Raspi signal marble is measured
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	2002      	movs	r0, #2
 8002fe6:	f7ff fe85 	bl	8002cf4 <Read_IN>
 8002fea:	0003      	movs	r3, r0
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d0f9      	beq.n	8002fe4 <main+0x244>
	  {
	  }

	  HAL_Delay(1500); // do not change (for receiving pulses)
 8002ff0:	4b3e      	ldr	r3, [pc, #248]	; (80030ec <main+0x34c>)
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 fcc2 	bl	800397c <HAL_Delay>

	  if(Read_IN(2) == 0)  // 2 Pulses for Glass
 8002ff8:	2002      	movs	r0, #2
 8002ffa:	f7ff fe7b 	bl	8002cf4 <Read_IN>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d102      	bne.n	8003008 <main+0x268>
	  {
		  Reading_Marble = 1; // Glass
 8003002:	4b41      	ldr	r3, [pc, #260]	; (8003108 <main+0x368>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]
	  }

	  HAL_Delay(4000); // delay to add more time to sequence
 8003008:	23fa      	movs	r3, #250	; 0xfa
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	0018      	movs	r0, r3
 800300e:	f000 fcb5 	bl	800397c <HAL_Delay>

	  Marbles[0] = Reading_Marble;
 8003012:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <main+0x368>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b2da      	uxtb	r2, r3
 8003018:	4b3a      	ldr	r3, [pc, #232]	; (8003104 <main+0x364>)
 800301a:	701a      	strb	r2, [r3, #0]

	  Current_Marble = Marbles[1]; // place to kick, number of holes after seek camera
 800301c:	4b39      	ldr	r3, [pc, #228]	; (8003104 <main+0x364>)
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	001a      	movs	r2, r3
 8003022:	4b3a      	ldr	r3, [pc, #232]	; (800310c <main+0x36c>)
 8003024:	601a      	str	r2, [r3, #0]

	  if(Current_Marble == 0) // perform movement to sort Metal marble
 8003026:	4b39      	ldr	r3, [pc, #228]	; (800310c <main+0x36c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11a      	bne.n	8003064 <main+0x2c4>
	  {
		  if(Open == 0) // if nog niet open -> doe open
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <main+0x350>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d130      	bne.n	8003098 <main+0x2f8>
		  {
			  Drive_Enable(1); // enable driver
 8003036:	2001      	movs	r0, #1
 8003038:	f7ff fade 	bl	80025f8 <Drive_Enable>
			  TMC5160_Rotate_To(open_pos,&Ramp1); // close
 800303c:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <main+0x354>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	001a      	movs	r2, r3
 8003042:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <main+0x338>)
 8003044:	0019      	movs	r1, r3
 8003046:	0010      	movs	r0, r2
 8003048:	f7ff f9f6 	bl	8002438 <TMC5160_Rotate_To>
			  HAL_Delay(500);
 800304c:	23fa      	movs	r3, #250	; 0xfa
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	0018      	movs	r0, r3
 8003052:	f000 fc93 	bl	800397c <HAL_Delay>
			  Open = 1;
 8003056:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <main+0x350>)
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]
			  Drive_Enable(0); // enable driver
 800305c:	2000      	movs	r0, #0
 800305e:	f7ff facb 	bl	80025f8 <Drive_Enable>
 8003062:	e019      	b.n	8003098 <main+0x2f8>
		  }
	  }

	  else
	  {
		  if (Open == 1) // if open -> doe dicht
 8003064:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <main+0x350>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d115      	bne.n	8003098 <main+0x2f8>
		  {
			  Drive_Enable(1); // enable driver
 800306c:	2001      	movs	r0, #1
 800306e:	f7ff fac3 	bl	80025f8 <Drive_Enable>
			  TMC5160_Rotate_To(closed_pos,&Ramp1); // close
 8003072:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <main+0x358>)
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	001a      	movs	r2, r3
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <main+0x338>)
 800307a:	0019      	movs	r1, r3
 800307c:	0010      	movs	r0, r2
 800307e:	f7ff f9db 	bl	8002438 <TMC5160_Rotate_To>
			  HAL_Delay(500);
 8003082:	23fa      	movs	r3, #250	; 0xfa
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	0018      	movs	r0, r3
 8003088:	f000 fc78 	bl	800397c <HAL_Delay>
			  Open = 0;
 800308c:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <main+0x350>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
			  Drive_Enable(0); // enable driver
 8003092:	2000      	movs	r0, #0
 8003094:	f7ff fab0 	bl	80025f8 <Drive_Enable>
		  }
	  }

	  //Toggle_OUT(1,100); //signal PLC to continue
	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,1);
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <main+0x330>)
 800309a:	2201      	movs	r2, #1
 800309c:	2110      	movs	r1, #16
 800309e:	0018      	movs	r0, r3
 80030a0:	f001 fef7 	bl	8004e92 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80030a4:	23fa      	movs	r3, #250	; 0xfa
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	0018      	movs	r0, r3
 80030aa:	f000 fc67 	bl	800397c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,0);
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <main+0x330>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	2110      	movs	r1, #16
 80030b4:	0018      	movs	r0, r3
 80030b6:	f001 feec 	bl	8004e92 <HAL_GPIO_WritePin>

	  Marbles[1] = Marbles[0]; // move marble 1 place
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <main+0x364>)
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <main+0x364>)
 80030c0:	705a      	strb	r2, [r3, #1]
	  Marbles[0] = 0;
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <main+0x364>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
	  for(m = (NumberofMarbles-1); m > 0; m--) //Move every Marble 1 space in the array
	  {
	  	 Marbles[m] = Marbles[m-1];
	  }*/

	  Reading_Marble = 0;
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <main+0x368>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
  	  while(Read_IN(1) == 1) //Wait for PLC signal that marble is in place
 80030ce:	e772      	b.n	8002fb6 <main+0x216>
 80030d0:	48000400 	.word	0x48000400
 80030d4:	000009c4 	.word	0x000009c4
 80030d8:	200011a4 	.word	0x200011a4
 80030dc:	00002710 	.word	0x00002710
 80030e0:	20001190 	.word	0x20001190
 80030e4:	20003204 	.word	0x20003204
 80030e8:	20003200 	.word	0x20003200
 80030ec:	000005dc 	.word	0x000005dc
 80030f0:	200031fc 	.word	0x200031fc
 80030f4:	20003208 	.word	0x20003208
 80030f8:	2000320a 	.word	0x2000320a
 80030fc:	000035e8 	.word	0x000035e8
 8003100:	200031e4 	.word	0x200031e4
 8003104:	200031e8 	.word	0x200031e8
 8003108:	200031e0 	.word	0x200031e0
 800310c:	200031dc 	.word	0x200031dc

08003110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b093      	sub	sp, #76	; 0x4c
 8003114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003116:	2414      	movs	r4, #20
 8003118:	193b      	adds	r3, r7, r4
 800311a:	0018      	movs	r0, r3
 800311c:	2334      	movs	r3, #52	; 0x34
 800311e:	001a      	movs	r2, r3
 8003120:	2100      	movs	r1, #0
 8003122:	f002 fffb 	bl	800611c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003126:	1d3b      	adds	r3, r7, #4
 8003128:	0018      	movs	r0, r3
 800312a:	2310      	movs	r3, #16
 800312c:	001a      	movs	r2, r3
 800312e:	2100      	movs	r1, #0
 8003130:	f002 fff4 	bl	800611c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8003134:	0021      	movs	r1, r4
 8003136:	187b      	adds	r3, r7, r1
 8003138:	2211      	movs	r2, #17
 800313a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800313c:	187b      	adds	r3, r7, r1
 800313e:	2201      	movs	r2, #1
 8003140:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003142:	187b      	adds	r3, r7, r1
 8003144:	2201      	movs	r2, #1
 8003146:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003148:	187b      	adds	r3, r7, r1
 800314a:	2210      	movs	r2, #16
 800314c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800314e:	187b      	adds	r3, r7, r1
 8003150:	2200      	movs	r2, #0
 8003152:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003154:	187b      	adds	r3, r7, r1
 8003156:	0018      	movs	r0, r3
 8003158:	f001 fed4 	bl	8004f04 <HAL_RCC_OscConfig>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d001      	beq.n	8003164 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8003160:	f000 f9fc 	bl	800355c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	2207      	movs	r2, #7
 8003168:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	2201      	movs	r2, #1
 800316e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	2200      	movs	r2, #0
 800317a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	2100      	movs	r1, #0
 8003180:	0018      	movs	r0, r3
 8003182:	f002 fa45 	bl	8005610 <HAL_RCC_ClockConfig>
 8003186:	1e03      	subs	r3, r0, #0
 8003188:	d001      	beq.n	800318e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800318a:	f000 f9e7 	bl	800355c <Error_Handler>
  }
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b013      	add	sp, #76	; 0x4c
 8003194:	bd90      	pop	{r4, r7, pc}
	...

08003198 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800319e:	1d3b      	adds	r3, r7, #4
 80031a0:	0018      	movs	r0, r3
 80031a2:	230c      	movs	r3, #12
 80031a4:	001a      	movs	r2, r3
 80031a6:	2100      	movs	r1, #0
 80031a8:	f002 ffb8 	bl	800611c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80031ac:	4b26      	ldr	r3, [pc, #152]	; (8003248 <MX_ADC_Init+0xb0>)
 80031ae:	4a27      	ldr	r2, [pc, #156]	; (800324c <MX_ADC_Init+0xb4>)
 80031b0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80031b2:	4b25      	ldr	r3, [pc, #148]	; (8003248 <MX_ADC_Init+0xb0>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80031b8:	4b23      	ldr	r3, [pc, #140]	; (8003248 <MX_ADC_Init+0xb0>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <MX_ADC_Init+0xb0>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80031c4:	4b20      	ldr	r3, [pc, #128]	; (8003248 <MX_ADC_Init+0xb0>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031ca:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <MX_ADC_Init+0xb0>)
 80031cc:	2204      	movs	r2, #4
 80031ce:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <MX_ADC_Init+0xb0>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80031d6:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <MX_ADC_Init+0xb0>)
 80031d8:	2200      	movs	r2, #0
 80031da:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80031dc:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <MX_ADC_Init+0xb0>)
 80031de:	2200      	movs	r2, #0
 80031e0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <MX_ADC_Init+0xb0>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031e8:	4b17      	ldr	r3, [pc, #92]	; (8003248 <MX_ADC_Init+0xb0>)
 80031ea:	22c2      	movs	r2, #194	; 0xc2
 80031ec:	32ff      	adds	r2, #255	; 0xff
 80031ee:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <MX_ADC_Init+0xb0>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80031f6:	4b14      	ldr	r3, [pc, #80]	; (8003248 <MX_ADC_Init+0xb0>)
 80031f8:	2224      	movs	r2, #36	; 0x24
 80031fa:	2100      	movs	r1, #0
 80031fc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <MX_ADC_Init+0xb0>)
 8003200:	2201      	movs	r2, #1
 8003202:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003204:	4b10      	ldr	r3, [pc, #64]	; (8003248 <MX_ADC_Init+0xb0>)
 8003206:	0018      	movs	r0, r3
 8003208:	f000 fbdc 	bl	80039c4 <HAL_ADC_Init>
 800320c:	1e03      	subs	r3, r0, #0
 800320e:	d001      	beq.n	8003214 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003210:	f000 f9a4 	bl	800355c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	2280      	movs	r2, #128	; 0x80
 800321e:	0152      	lsls	r2, r2, #5
 8003220:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	2280      	movs	r2, #128	; 0x80
 8003226:	0552      	lsls	r2, r2, #21
 8003228:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800322a:	1d3a      	adds	r2, r7, #4
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <MX_ADC_Init+0xb0>)
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f000 fd07 	bl	8003c44 <HAL_ADC_ConfigChannel>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d001      	beq.n	800323e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800323a:	f000 f98f 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b004      	add	sp, #16
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	20001044 	.word	0x20001044
 800324c:	40012400 	.word	0x40012400

08003250 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN_Init 0 */
  HAL_GPIO_WritePin(GPIOA,CAN_STB_Pin,0); // Set STB pin LOW for normal operation
 8003256:	2390      	movs	r3, #144	; 0x90
 8003258:	05db      	lsls	r3, r3, #23
 800325a:	2200      	movs	r2, #0
 800325c:	2104      	movs	r1, #4
 800325e:	0018      	movs	r0, r3
 8003260:	f001 fe17 	bl	8004e92 <HAL_GPIO_WritePin>
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8003264:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <MX_CAN_Init+0xd0>)
 8003266:	4a2f      	ldr	r2, [pc, #188]	; (8003324 <MX_CAN_Init+0xd4>)
 8003268:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800326a:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <MX_CAN_Init+0xd0>)
 800326c:	2210      	movs	r2, #16
 800326e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <MX_CAN_Init+0xd0>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003276:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <MX_CAN_Init+0xd0>)
 8003278:	2200      	movs	r2, #0
 800327a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <MX_CAN_Init+0xd0>)
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	0252      	lsls	r2, r2, #9
 8003282:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003284:	4b26      	ldr	r3, [pc, #152]	; (8003320 <MX_CAN_Init+0xd0>)
 8003286:	2200      	movs	r2, #0
 8003288:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <MX_CAN_Init+0xd0>)
 800328c:	2200      	movs	r2, #0
 800328e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003290:	4b23      	ldr	r3, [pc, #140]	; (8003320 <MX_CAN_Init+0xd0>)
 8003292:	2200      	movs	r2, #0
 8003294:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003296:	4b22      	ldr	r3, [pc, #136]	; (8003320 <MX_CAN_Init+0xd0>)
 8003298:	2200      	movs	r2, #0
 800329a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800329c:	4b20      	ldr	r3, [pc, #128]	; (8003320 <MX_CAN_Init+0xd0>)
 800329e:	2200      	movs	r2, #0
 80032a0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80032a2:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <MX_CAN_Init+0xd0>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <MX_CAN_Init+0xd0>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80032ae:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <MX_CAN_Init+0xd0>)
 80032b0:	0018      	movs	r0, r3
 80032b2:	f000 fdd5 	bl	8003e60 <HAL_CAN_Init>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d001      	beq.n	80032be <MX_CAN_Init+0x6e>
  {
    Error_Handler();
 80032ba:	f000 f94f 	bl	800355c <Error_Handler>

  /* CAN filter */

  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 80032be:	003b      	movs	r3, r7
 80032c0:	2201      	movs	r2, #1
 80032c2:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 10;
 80032c4:	003b      	movs	r3, r7
 80032c6:	220a      	movs	r2, #10
 80032c8:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80032ca:	003b      	movs	r3, r7
 80032cc:	2200      	movs	r2, #0
 80032ce:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x0000;
 80032d0:	003b      	movs	r3, r7
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80032d6:	003b      	movs	r3, r7
 80032d8:	2200      	movs	r2, #0
 80032da:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80032dc:	003b      	movs	r3, r7
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80032e2:	003b      	movs	r3, r7
 80032e4:	2200      	movs	r2, #0
 80032e6:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80032e8:	003b      	movs	r3, r7
 80032ea:	2200      	movs	r2, #0
 80032ec:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80032ee:	003b      	movs	r3, r7
 80032f0:	2201      	movs	r2, #1
 80032f2:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 0;
 80032f4:	003b      	movs	r3, r7
 80032f6:	2200      	movs	r2, #0
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80032fa:	003a      	movs	r2, r7
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <MX_CAN_Init+0xd0>)
 80032fe:	0011      	movs	r1, r2
 8003300:	0018      	movs	r0, r3
 8003302:	f000 feab 	bl	800405c <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <MX_CAN_Init+0xd0>)
 8003308:	0018      	movs	r0, r3
 800330a:	f000 ff99 	bl	8004240 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800330e:	4b04      	ldr	r3, [pc, #16]	; (8003320 <MX_CAN_Init+0xd0>)
 8003310:	2102      	movs	r1, #2
 8003312:	0018      	movs	r0, r3
 8003314:	f001 f8f6 	bl	8004504 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b00a      	add	sp, #40	; 0x28
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20001084 	.word	0x20001084
 8003324:	40006400 	.word	0x40006400

08003328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <MX_SPI1_Init+0x74>)
 800332e:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <MX_SPI1_Init+0x78>)
 8003330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003332:	4b1a      	ldr	r3, [pc, #104]	; (800339c <MX_SPI1_Init+0x74>)
 8003334:	2282      	movs	r2, #130	; 0x82
 8003336:	0052      	lsls	r2, r2, #1
 8003338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800333a:	4b18      	ldr	r3, [pc, #96]	; (800339c <MX_SPI1_Init+0x74>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003340:	4b16      	ldr	r3, [pc, #88]	; (800339c <MX_SPI1_Init+0x74>)
 8003342:	22e0      	movs	r2, #224	; 0xe0
 8003344:	00d2      	lsls	r2, r2, #3
 8003346:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003348:	4b14      	ldr	r3, [pc, #80]	; (800339c <MX_SPI1_Init+0x74>)
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <MX_SPI1_Init+0x74>)
 8003350:	2201      	movs	r2, #1
 8003352:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <MX_SPI1_Init+0x74>)
 8003356:	2280      	movs	r2, #128	; 0x80
 8003358:	0092      	lsls	r2, r2, #2
 800335a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <MX_SPI1_Init+0x74>)
 800335e:	2200      	movs	r2, #0
 8003360:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <MX_SPI1_Init+0x74>)
 8003364:	2200      	movs	r2, #0
 8003366:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <MX_SPI1_Init+0x74>)
 800336a:	2200      	movs	r2, #0
 800336c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <MX_SPI1_Init+0x74>)
 8003370:	2200      	movs	r2, #0
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <MX_SPI1_Init+0x74>)
 8003376:	2207      	movs	r2, #7
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <MX_SPI1_Init+0x74>)
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <MX_SPI1_Init+0x74>)
 8003382:	2200      	movs	r2, #0
 8003384:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <MX_SPI1_Init+0x74>)
 8003388:	0018      	movs	r0, r3
 800338a:	f002 fa9d 	bl	80058c8 <HAL_SPI_Init>
 800338e:	1e03      	subs	r3, r0, #0
 8003390:	d001      	beq.n	8003396 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003392:	f000 f8e3 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200010ac 	.word	0x200010ac
 80033a0:	40013000 	.word	0x40013000

080033a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <MX_SPI2_Init+0x74>)
 80033aa:	4a1c      	ldr	r2, [pc, #112]	; (800341c <MX_SPI2_Init+0x78>)
 80033ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <MX_SPI2_Init+0x74>)
 80033b0:	2282      	movs	r2, #130	; 0x82
 80033b2:	0052      	lsls	r2, r2, #1
 80033b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80033b6:	4b18      	ldr	r3, [pc, #96]	; (8003418 <MX_SPI2_Init+0x74>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <MX_SPI2_Init+0x74>)
 80033be:	22e0      	movs	r2, #224	; 0xe0
 80033c0:	00d2      	lsls	r2, r2, #3
 80033c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <MX_SPI2_Init+0x74>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <MX_SPI2_Init+0x74>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80033d0:	4b11      	ldr	r3, [pc, #68]	; (8003418 <MX_SPI2_Init+0x74>)
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	0092      	lsls	r2, r2, #2
 80033d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <MX_SPI2_Init+0x74>)
 80033da:	2200      	movs	r2, #0
 80033dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033de:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <MX_SPI2_Init+0x74>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <MX_SPI2_Init+0x74>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <MX_SPI2_Init+0x74>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <MX_SPI2_Init+0x74>)
 80033f2:	2207      	movs	r2, #7
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <MX_SPI2_Init+0x74>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <MX_SPI2_Init+0x74>)
 80033fe:	2208      	movs	r2, #8
 8003400:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <MX_SPI2_Init+0x74>)
 8003404:	0018      	movs	r0, r3
 8003406:	f002 fa5f 	bl	80058c8 <HAL_SPI_Init>
 800340a:	1e03      	subs	r3, r0, #0
 800340c:	d001      	beq.n	8003412 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800340e:	f000 f8a5 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20001110 	.word	0x20001110
 800341c:	40003800 	.word	0x40003800

08003420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003426:	240c      	movs	r4, #12
 8003428:	193b      	adds	r3, r7, r4
 800342a:	0018      	movs	r0, r3
 800342c:	2314      	movs	r3, #20
 800342e:	001a      	movs	r2, r3
 8003430:	2100      	movs	r1, #0
 8003432:	f002 fe73 	bl	800611c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003436:	4b46      	ldr	r3, [pc, #280]	; (8003550 <MX_GPIO_Init+0x130>)
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	4b45      	ldr	r3, [pc, #276]	; (8003550 <MX_GPIO_Init+0x130>)
 800343c:	2180      	movs	r1, #128	; 0x80
 800343e:	03c9      	lsls	r1, r1, #15
 8003440:	430a      	orrs	r2, r1
 8003442:	615a      	str	r2, [r3, #20]
 8003444:	4b42      	ldr	r3, [pc, #264]	; (8003550 <MX_GPIO_Init+0x130>)
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	03db      	lsls	r3, r3, #15
 800344c:	4013      	ands	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003452:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <MX_GPIO_Init+0x130>)
 8003454:	695a      	ldr	r2, [r3, #20]
 8003456:	4b3e      	ldr	r3, [pc, #248]	; (8003550 <MX_GPIO_Init+0x130>)
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	0289      	lsls	r1, r1, #10
 800345c:	430a      	orrs	r2, r1
 800345e:	615a      	str	r2, [r3, #20]
 8003460:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <MX_GPIO_Init+0x130>)
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	029b      	lsls	r3, r3, #10
 8003468:	4013      	ands	r3, r2
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800346e:	4b38      	ldr	r3, [pc, #224]	; (8003550 <MX_GPIO_Init+0x130>)
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	4b37      	ldr	r3, [pc, #220]	; (8003550 <MX_GPIO_Init+0x130>)
 8003474:	2180      	movs	r1, #128	; 0x80
 8003476:	02c9      	lsls	r1, r1, #11
 8003478:	430a      	orrs	r2, r1
 800347a:	615a      	str	r2, [r3, #20]
 800347c:	4b34      	ldr	r3, [pc, #208]	; (8003550 <MX_GPIO_Init+0x130>)
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	02db      	lsls	r3, r3, #11
 8003484:	4013      	ands	r3, r2
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin, GPIO_PIN_RESET);
 800348a:	238a      	movs	r3, #138	; 0x8a
 800348c:	0059      	lsls	r1, r3, #1
 800348e:	2390      	movs	r3, #144	; 0x90
 8003490:	05db      	lsls	r3, r3, #23
 8003492:	2200      	movs	r2, #0
 8003494:	0018      	movs	r0, r3
 8003496:	f001 fcfc 	bl	8004e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin, GPIO_PIN_RESET);
 800349a:	492e      	ldr	r1, [pc, #184]	; (8003554 <MX_GPIO_Init+0x134>)
 800349c:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <MX_GPIO_Init+0x138>)
 800349e:	2200      	movs	r2, #0
 80034a0:	0018      	movs	r0, r3
 80034a2:	f001 fcf6 	bl	8004e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_STB_Pin AMS_CS_Pin DRV_ENN_Pin */
  GPIO_InitStruct.Pin = CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin;
 80034a6:	193b      	adds	r3, r7, r4
 80034a8:	228a      	movs	r2, #138	; 0x8a
 80034aa:	0052      	lsls	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ae:	193b      	adds	r3, r7, r4
 80034b0:	2201      	movs	r2, #1
 80034b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ba:	193b      	adds	r3, r7, r4
 80034bc:	2200      	movs	r2, #0
 80034be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c0:	193a      	adds	r2, r7, r4
 80034c2:	2390      	movs	r3, #144	; 0x90
 80034c4:	05db      	lsls	r3, r3, #23
 80034c6:	0011      	movs	r1, r2
 80034c8:	0018      	movs	r0, r3
 80034ca:	f001 fb4d 	bl	8004b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_INT_Pin */
  GPIO_InitStruct.Pin = AMS_INT_Pin;
 80034ce:	0021      	movs	r1, r4
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034d6:	187b      	adds	r3, r7, r1
 80034d8:	2288      	movs	r2, #136	; 0x88
 80034da:	0352      	lsls	r2, r2, #13
 80034dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	000c      	movs	r4, r1
 80034e0:	193b      	adds	r3, r7, r4
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AMS_INT_GPIO_Port, &GPIO_InitStruct);
 80034e6:	193b      	adds	r3, r7, r4
 80034e8:	4a1b      	ldr	r2, [pc, #108]	; (8003558 <MX_GPIO_Init+0x138>)
 80034ea:	0019      	movs	r1, r3
 80034ec:	0010      	movs	r0, r2
 80034ee:	f001 fb3b 	bl	8004b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC_CS_Pin EXT_OUT_1_Pin EXT_OUT_2_Pin */
  GPIO_InitStruct.Pin = TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin;
 80034f2:	193b      	adds	r3, r7, r4
 80034f4:	4a17      	ldr	r2, [pc, #92]	; (8003554 <MX_GPIO_Init+0x134>)
 80034f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f8:	193b      	adds	r3, r7, r4
 80034fa:	2201      	movs	r2, #1
 80034fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	193b      	adds	r3, r7, r4
 8003500:	2200      	movs	r2, #0
 8003502:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	193b      	adds	r3, r7, r4
 8003506:	2200      	movs	r2, #0
 8003508:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350a:	193b      	adds	r3, r7, r4
 800350c:	4a12      	ldr	r2, [pc, #72]	; (8003558 <MX_GPIO_Init+0x138>)
 800350e:	0019      	movs	r1, r3
 8003510:	0010      	movs	r0, r2
 8003512:	f001 fb29 	bl	8004b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : REFL_UC_Pin REFR_UC_Pin */
  GPIO_InitStruct.Pin = REFL_UC_Pin|REFR_UC_Pin;
 8003516:	0021      	movs	r1, r4
 8003518:	187b      	adds	r3, r7, r1
 800351a:	22c0      	movs	r2, #192	; 0xc0
 800351c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800351e:	187b      	adds	r3, r7, r1
 8003520:	2200      	movs	r2, #0
 8003522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003524:	187b      	adds	r3, r7, r1
 8003526:	2202      	movs	r2, #2
 8003528:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352a:	187b      	adds	r3, r7, r1
 800352c:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <MX_GPIO_Init+0x138>)
 800352e:	0019      	movs	r1, r3
 8003530:	0010      	movs	r0, r2
 8003532:	f001 fb19 	bl	8004b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003536:	2200      	movs	r2, #0
 8003538:	2100      	movs	r1, #0
 800353a:	2005      	movs	r0, #5
 800353c:	f001 fade 	bl	8004afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003540:	2005      	movs	r0, #5
 8003542:	f001 faf0 	bl	8004b26 <HAL_NVIC_EnableIRQ>

}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b009      	add	sp, #36	; 0x24
 800354c:	bd90      	pop	{r4, r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	40021000 	.word	0x40021000
 8003554:	00001030 	.word	0x00001030
 8003558:	48000400 	.word	0x48000400

0800355c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003560:	b672      	cpsid	i
}
 8003562:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003564:	e7fe      	b.n	8003564 <Error_Handler+0x8>
	...

08003568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <HAL_MspInit+0x44>)
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <HAL_MspInit+0x44>)
 8003574:	2101      	movs	r1, #1
 8003576:	430a      	orrs	r2, r1
 8003578:	619a      	str	r2, [r3, #24]
 800357a:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <HAL_MspInit+0x44>)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2201      	movs	r2, #1
 8003580:	4013      	ands	r3, r2
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_MspInit+0x44>)
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <HAL_MspInit+0x44>)
 800358c:	2180      	movs	r1, #128	; 0x80
 800358e:	0549      	lsls	r1, r1, #21
 8003590:	430a      	orrs	r2, r1
 8003592:	61da      	str	r2, [r3, #28]
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_MspInit+0x44>)
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	2380      	movs	r3, #128	; 0x80
 800359a:	055b      	lsls	r3, r3, #21
 800359c:	4013      	ands	r3, r2
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b002      	add	sp, #8
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b08b      	sub	sp, #44	; 0x2c
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	2414      	movs	r4, #20
 80035ba:	193b      	adds	r3, r7, r4
 80035bc:	0018      	movs	r0, r3
 80035be:	2314      	movs	r3, #20
 80035c0:	001a      	movs	r2, r3
 80035c2:	2100      	movs	r1, #0
 80035c4:	f002 fdaa 	bl	800611c <memset>
  if(hadc->Instance==ADC1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a19      	ldr	r2, [pc, #100]	; (8003634 <HAL_ADC_MspInit+0x84>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d12b      	bne.n	800362a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035d2:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_ADC_MspInit+0x88>)
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_ADC_MspInit+0x88>)
 80035d8:	2180      	movs	r1, #128	; 0x80
 80035da:	0089      	lsls	r1, r1, #2
 80035dc:	430a      	orrs	r2, r1
 80035de:	619a      	str	r2, [r3, #24]
 80035e0:	4b15      	ldr	r3, [pc, #84]	; (8003638 <HAL_ADC_MspInit+0x88>)
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_ADC_MspInit+0x88>)
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_ADC_MspInit+0x88>)
 80035f4:	2180      	movs	r1, #128	; 0x80
 80035f6:	0289      	lsls	r1, r1, #10
 80035f8:	430a      	orrs	r2, r1
 80035fa:	615a      	str	r2, [r3, #20]
 80035fc:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <HAL_ADC_MspInit+0x88>)
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	029b      	lsls	r3, r3, #10
 8003604:	4013      	ands	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = AIN_MCU_Pin;
 800360a:	193b      	adds	r3, r7, r4
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003610:	193b      	adds	r3, r7, r4
 8003612:	2203      	movs	r2, #3
 8003614:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003616:	193b      	adds	r3, r7, r4
 8003618:	2200      	movs	r2, #0
 800361a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AIN_MCU_GPIO_Port, &GPIO_InitStruct);
 800361c:	193a      	adds	r2, r7, r4
 800361e:	2390      	movs	r3, #144	; 0x90
 8003620:	05db      	lsls	r3, r3, #23
 8003622:	0011      	movs	r1, r2
 8003624:	0018      	movs	r0, r3
 8003626:	f001 fa9f 	bl	8004b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	b00b      	add	sp, #44	; 0x2c
 8003630:	bd90      	pop	{r4, r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	40012400 	.word	0x40012400
 8003638:	40021000 	.word	0x40021000

0800363c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b08b      	sub	sp, #44	; 0x2c
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003644:	2414      	movs	r4, #20
 8003646:	193b      	adds	r3, r7, r4
 8003648:	0018      	movs	r0, r3
 800364a:	2314      	movs	r3, #20
 800364c:	001a      	movs	r2, r3
 800364e:	2100      	movs	r1, #0
 8003650:	f002 fd64 	bl	800611c <memset>
  if(hcan->Instance==CAN)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a20      	ldr	r2, [pc, #128]	; (80036dc <HAL_CAN_MspInit+0xa0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d13a      	bne.n	80036d4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800365e:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_CAN_MspInit+0xa4>)
 8003660:	69da      	ldr	r2, [r3, #28]
 8003662:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <HAL_CAN_MspInit+0xa4>)
 8003664:	2180      	movs	r1, #128	; 0x80
 8003666:	0489      	lsls	r1, r1, #18
 8003668:	430a      	orrs	r2, r1
 800366a:	61da      	str	r2, [r3, #28]
 800366c:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <HAL_CAN_MspInit+0xa4>)
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	049b      	lsls	r3, r3, #18
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800367a:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <HAL_CAN_MspInit+0xa4>)
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <HAL_CAN_MspInit+0xa4>)
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	02c9      	lsls	r1, r1, #11
 8003684:	430a      	orrs	r2, r1
 8003686:	615a      	str	r2, [r3, #20]
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_CAN_MspInit+0xa4>)
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	02db      	lsls	r3, r3, #11
 8003690:	4013      	ands	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003696:	193b      	adds	r3, r7, r4
 8003698:	22c0      	movs	r2, #192	; 0xc0
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	0021      	movs	r1, r4
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	2202      	movs	r2, #2
 80036a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2200      	movs	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	2203      	movs	r2, #3
 80036b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	2204      	movs	r2, #4
 80036b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	4a0a      	ldr	r2, [pc, #40]	; (80036e4 <HAL_CAN_MspInit+0xa8>)
 80036bc:	0019      	movs	r1, r3
 80036be:	0010      	movs	r0, r2
 80036c0:	f001 fa52 	bl	8004b68 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80036c4:	2200      	movs	r2, #0
 80036c6:	2100      	movs	r1, #0
 80036c8:	201e      	movs	r0, #30
 80036ca:	f001 fa17 	bl	8004afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80036ce:	201e      	movs	r0, #30
 80036d0:	f001 fa29 	bl	8004b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b00b      	add	sp, #44	; 0x2c
 80036da:	bd90      	pop	{r4, r7, pc}
 80036dc:	40006400 	.word	0x40006400
 80036e0:	40021000 	.word	0x40021000
 80036e4:	48000400 	.word	0x48000400

080036e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b08d      	sub	sp, #52	; 0x34
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f0:	241c      	movs	r4, #28
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	0018      	movs	r0, r3
 80036f6:	2314      	movs	r3, #20
 80036f8:	001a      	movs	r2, r3
 80036fa:	2100      	movs	r1, #0
 80036fc:	f002 fd0e 	bl	800611c <memset>
  if(hspi->Instance==SPI1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a39      	ldr	r2, [pc, #228]	; (80037ec <HAL_SPI_MspInit+0x104>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d133      	bne.n	8003772 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800370a:	4b39      	ldr	r3, [pc, #228]	; (80037f0 <HAL_SPI_MspInit+0x108>)
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <HAL_SPI_MspInit+0x108>)
 8003710:	2180      	movs	r1, #128	; 0x80
 8003712:	0149      	lsls	r1, r1, #5
 8003714:	430a      	orrs	r2, r1
 8003716:	619a      	str	r2, [r3, #24]
 8003718:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <HAL_SPI_MspInit+0x108>)
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	015b      	lsls	r3, r3, #5
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003726:	4b32      	ldr	r3, [pc, #200]	; (80037f0 <HAL_SPI_MspInit+0x108>)
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	4b31      	ldr	r3, [pc, #196]	; (80037f0 <HAL_SPI_MspInit+0x108>)
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	0289      	lsls	r1, r1, #10
 8003730:	430a      	orrs	r2, r1
 8003732:	615a      	str	r2, [r3, #20]
 8003734:	4b2e      	ldr	r3, [pc, #184]	; (80037f0 <HAL_SPI_MspInit+0x108>)
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	029b      	lsls	r3, r3, #10
 800373c:	4013      	ands	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AMS_SCK_Pin|AMS_MISO_Pin|AMS_MOSI_Pin;
 8003742:	0021      	movs	r1, r4
 8003744:	187b      	adds	r3, r7, r1
 8003746:	22e0      	movs	r2, #224	; 0xe0
 8003748:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374a:	187b      	adds	r3, r7, r1
 800374c:	2202      	movs	r2, #2
 800374e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	187b      	adds	r3, r7, r1
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003756:	187b      	adds	r3, r7, r1
 8003758:	2203      	movs	r2, #3
 800375a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800375c:	187b      	adds	r3, r7, r1
 800375e:	2200      	movs	r2, #0
 8003760:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003762:	187a      	adds	r2, r7, r1
 8003764:	2390      	movs	r3, #144	; 0x90
 8003766:	05db      	lsls	r3, r3, #23
 8003768:	0011      	movs	r1, r2
 800376a:	0018      	movs	r0, r3
 800376c:	f001 f9fc 	bl	8004b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003770:	e037      	b.n	80037e2 <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_SPI_MspInit+0x10c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d132      	bne.n	80037e2 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800377c:	4b1c      	ldr	r3, [pc, #112]	; (80037f0 <HAL_SPI_MspInit+0x108>)
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <HAL_SPI_MspInit+0x108>)
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	01c9      	lsls	r1, r1, #7
 8003786:	430a      	orrs	r2, r1
 8003788:	61da      	str	r2, [r3, #28]
 800378a:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_SPI_MspInit+0x108>)
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	01db      	lsls	r3, r3, #7
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <HAL_SPI_MspInit+0x108>)
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <HAL_SPI_MspInit+0x108>)
 800379e:	2180      	movs	r1, #128	; 0x80
 80037a0:	02c9      	lsls	r1, r1, #11
 80037a2:	430a      	orrs	r2, r1
 80037a4:	615a      	str	r2, [r3, #20]
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_SPI_MspInit+0x108>)
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	2380      	movs	r3, #128	; 0x80
 80037ac:	02db      	lsls	r3, r3, #11
 80037ae:	4013      	ands	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMC_SCK_Pin|TMC_MISO_Pin|TMC_MOSI_Pin;
 80037b4:	211c      	movs	r1, #28
 80037b6:	187b      	adds	r3, r7, r1
 80037b8:	22e0      	movs	r2, #224	; 0xe0
 80037ba:	0212      	lsls	r2, r2, #8
 80037bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	187b      	adds	r3, r7, r1
 80037c0:	2202      	movs	r2, #2
 80037c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	187b      	adds	r3, r7, r1
 80037c6:	2200      	movs	r2, #0
 80037c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ca:	187b      	adds	r3, r7, r1
 80037cc:	2203      	movs	r2, #3
 80037ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80037d0:	187b      	adds	r3, r7, r1
 80037d2:	2200      	movs	r2, #0
 80037d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d6:	187b      	adds	r3, r7, r1
 80037d8:	4a07      	ldr	r2, [pc, #28]	; (80037f8 <HAL_SPI_MspInit+0x110>)
 80037da:	0019      	movs	r1, r3
 80037dc:	0010      	movs	r0, r2
 80037de:	f001 f9c3 	bl	8004b68 <HAL_GPIO_Init>
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b00d      	add	sp, #52	; 0x34
 80037e8:	bd90      	pop	{r4, r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	40013000 	.word	0x40013000
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40003800 	.word	0x40003800
 80037f8:	48000400 	.word	0x48000400

080037fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003800:	e7fe      	b.n	8003800 <NMI_Handler+0x4>

08003802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <HardFault_Handler+0x4>

08003808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003820:	f000 f890 	bl	8003944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AMS_INT_Pin);
 800382e:	2001      	movs	r0, #1
 8003830:	f001 fb4c 	bl	8004ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <CEC_CAN_IRQHandler+0x14>)
 8003842:	0018      	movs	r0, r3
 8003844:	f000 fe88 	bl	8004558 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	20001084 	.word	0x20001084

08003854 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003860:	480d      	ldr	r0, [pc, #52]	; (8003898 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003862:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003864:	480d      	ldr	r0, [pc, #52]	; (800389c <LoopForever+0x6>)
  ldr r1, =_edata
 8003866:	490e      	ldr	r1, [pc, #56]	; (80038a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003868:	4a0e      	ldr	r2, [pc, #56]	; (80038a4 <LoopForever+0xe>)
  movs r3, #0
 800386a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800386c:	e002      	b.n	8003874 <LoopCopyDataInit>

0800386e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800386e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003872:	3304      	adds	r3, #4

08003874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003878:	d3f9      	bcc.n	800386e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800387a:	4a0b      	ldr	r2, [pc, #44]	; (80038a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800387c:	4c0b      	ldr	r4, [pc, #44]	; (80038ac <LoopForever+0x16>)
  movs r3, #0
 800387e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003880:	e001      	b.n	8003886 <LoopFillZerobss>

08003882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003884:	3204      	adds	r2, #4

08003886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003888:	d3fb      	bcc.n	8003882 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800388a:	f7ff ffe3 	bl	8003854 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800388e:	f002 fc21 	bl	80060d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003892:	f7ff fa85 	bl	8002da0 <main>

08003896 <LoopForever>:

LoopForever:
    b LoopForever
 8003896:	e7fe      	b.n	8003896 <LoopForever>
  ldr   r0, =_estack
 8003898:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800389c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80038a4:	08006fe8 	.word	0x08006fe8
  ldr r2, =_sbss
 80038a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80038ac:	20003210 	.word	0x20003210

080038b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038b0:	e7fe      	b.n	80038b0 <ADC1_COMP_IRQHandler>
	...

080038b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038b8:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <HAL_Init+0x24>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_Init+0x24>)
 80038be:	2110      	movs	r1, #16
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80038c4:	2003      	movs	r0, #3
 80038c6:	f000 f809 	bl	80038dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038ca:	f7ff fe4d 	bl	8003568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	40022000 	.word	0x40022000

080038dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038e4:	4b14      	ldr	r3, [pc, #80]	; (8003938 <HAL_InitTick+0x5c>)
 80038e6:	681c      	ldr	r4, [r3, #0]
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <HAL_InitTick+0x60>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	0019      	movs	r1, r3
 80038ee:	23fa      	movs	r3, #250	; 0xfa
 80038f0:	0098      	lsls	r0, r3, #2
 80038f2:	f7fc fc07 	bl	8000104 <__udivsi3>
 80038f6:	0003      	movs	r3, r0
 80038f8:	0019      	movs	r1, r3
 80038fa:	0020      	movs	r0, r4
 80038fc:	f7fc fc02 	bl	8000104 <__udivsi3>
 8003900:	0003      	movs	r3, r0
 8003902:	0018      	movs	r0, r3
 8003904:	f001 f923 	bl	8004b4e <HAL_SYSTICK_Config>
 8003908:	1e03      	subs	r3, r0, #0
 800390a:	d001      	beq.n	8003910 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e00f      	b.n	8003930 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b03      	cmp	r3, #3
 8003914:	d80b      	bhi.n	800392e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	2301      	movs	r3, #1
 800391a:	425b      	negs	r3, r3
 800391c:	2200      	movs	r2, #0
 800391e:	0018      	movs	r0, r3
 8003920:	f001 f8ec 	bl	8004afc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_InitTick+0x64>)
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	b003      	add	sp, #12
 8003936:	bd90      	pop	{r4, r7, pc}
 8003938:	20000000 	.word	0x20000000
 800393c:	20000008 	.word	0x20000008
 8003940:	20000004 	.word	0x20000004

08003944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_IncTick+0x1c>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	001a      	movs	r2, r3
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_IncTick+0x20>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	18d2      	adds	r2, r2, r3
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <HAL_IncTick+0x20>)
 8003956:	601a      	str	r2, [r3, #0]
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	20000008 	.word	0x20000008
 8003964:	2000320c 	.word	0x2000320c

08003968 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  return uwTick;
 800396c:	4b02      	ldr	r3, [pc, #8]	; (8003978 <HAL_GetTick+0x10>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	2000320c 	.word	0x2000320c

0800397c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7ff fff0 	bl	8003968 <HAL_GetTick>
 8003988:	0003      	movs	r3, r0
 800398a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3301      	adds	r3, #1
 8003994:	d005      	beq.n	80039a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003996:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <HAL_Delay+0x44>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	001a      	movs	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	189b      	adds	r3, r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	f7ff ffe0 	bl	8003968 <HAL_GetTick>
 80039a8:	0002      	movs	r2, r0
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d8f7      	bhi.n	80039a4 <HAL_Delay+0x28>
  {
  }
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b004      	add	sp, #16
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	20000008 	.word	0x20000008

080039c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039cc:	230f      	movs	r3, #15
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e125      	b.n	8003c2e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2234      	movs	r2, #52	; 0x34
 80039f4:	2100      	movs	r1, #0
 80039f6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7ff fdd8 	bl	80035b0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	2210      	movs	r2, #16
 8003a06:	4013      	ands	r3, r2
 8003a08:	d000      	beq.n	8003a0c <HAL_ADC_Init+0x48>
 8003a0a:	e103      	b.n	8003c14 <HAL_ADC_Init+0x250>
 8003a0c:	230f      	movs	r3, #15
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d000      	beq.n	8003a18 <HAL_ADC_Init+0x54>
 8003a16:	e0fd      	b.n	8003c14 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003a22:	d000      	beq.n	8003a26 <HAL_ADC_Init+0x62>
 8003a24:	e0f6      	b.n	8003c14 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	4a83      	ldr	r2, [pc, #524]	; (8003c38 <HAL_ADC_Init+0x274>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2202      	movs	r2, #2
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d112      	bne.n	8003a6a <HAL_ADC_Init+0xa6>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d009      	beq.n	8003a66 <HAL_ADC_Init+0xa2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	401a      	ands	r2, r3
 8003a5e:	2380      	movs	r3, #128	; 0x80
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d101      	bne.n	8003a6a <HAL_ADC_Init+0xa6>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <HAL_ADC_Init+0xa8>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d116      	bne.n	8003a9e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2218      	movs	r2, #24
 8003a78:	4393      	bics	r3, r2
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	0899      	lsrs	r1, r3, #2
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4964      	ldr	r1, [pc, #400]	; (8003c3c <HAL_ADC_Init+0x278>)
 8003aaa:	400a      	ands	r2, r1
 8003aac:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7e1b      	ldrb	r3, [r3, #24]
 8003ab2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	7e5b      	ldrb	r3, [r3, #25]
 8003ab8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003aba:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	7e9b      	ldrb	r3, [r3, #26]
 8003ac0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003ac2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d002      	beq.n	8003ad2 <HAL_ADC_Init+0x10e>
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	015b      	lsls	r3, r3, #5
 8003ad0:	e000      	b.n	8003ad4 <HAL_ADC_Init+0x110>
 8003ad2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ad4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003ada:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d101      	bne.n	8003ae8 <HAL_ADC_Init+0x124>
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	e000      	b.n	8003aea <HAL_ADC_Init+0x126>
 8003ae8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003aea:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2124      	movs	r1, #36	; 0x24
 8003af0:	5c5b      	ldrb	r3, [r3, r1]
 8003af2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003af4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7edb      	ldrb	r3, [r3, #27]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d115      	bne.n	8003b30 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	7e9b      	ldrb	r3, [r3, #26]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2280      	movs	r2, #128	; 0x80
 8003b10:	0252      	lsls	r2, r2, #9
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	e00b      	b.n	8003b30 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	2201      	movs	r2, #1
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	23c2      	movs	r3, #194	; 0xc2
 8003b36:	33ff      	adds	r3, #255	; 0xff
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d007      	beq.n	8003b4c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003b44:	4313      	orrs	r3, r2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68d9      	ldr	r1, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	055b      	lsls	r3, r3, #21
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d01b      	beq.n	8003ba0 <HAL_ADC_Init+0x1dc>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d017      	beq.n	8003ba0 <HAL_ADC_Init+0x1dc>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d013      	beq.n	8003ba0 <HAL_ADC_Init+0x1dc>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d00f      	beq.n	8003ba0 <HAL_ADC_Init+0x1dc>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d00b      	beq.n	8003ba0 <HAL_ADC_Init+0x1dc>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	d007      	beq.n	8003ba0 <HAL_ADC_Init+0x1dc>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	2b06      	cmp	r3, #6
 8003b96:	d003      	beq.n	8003ba0 <HAL_ADC_Init+0x1dc>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	2b07      	cmp	r3, #7
 8003b9e:	d112      	bne.n	8003bc6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2107      	movs	r1, #7
 8003bac:	438a      	bics	r2, r1
 8003bae:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6959      	ldr	r1, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	2207      	movs	r2, #7
 8003bbc:	401a      	ands	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <HAL_ADC_Init+0x27c>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d10b      	bne.n	8003bee <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	2203      	movs	r2, #3
 8003be2:	4393      	bics	r3, r2
 8003be4:	2201      	movs	r2, #1
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003bec:	e01c      	b.n	8003c28 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	2212      	movs	r2, #18
 8003bf4:	4393      	bics	r3, r2
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	2201      	movs	r2, #1
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003c0a:	230f      	movs	r3, #15
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003c12:	e009      	b.n	8003c28 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	2210      	movs	r2, #16
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003c20:	230f      	movs	r3, #15
 8003c22:	18fb      	adds	r3, r7, r3
 8003c24:	2201      	movs	r2, #1
 8003c26:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c28:	230f      	movs	r3, #15
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	781b      	ldrb	r3, [r3, #0]
}
 8003c2e:	0018      	movs	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b004      	add	sp, #16
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	fffffefd 	.word	0xfffffefd
 8003c3c:	fffe0219 	.word	0xfffe0219
 8003c40:	833fffe7 	.word	0x833fffe7

08003c44 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c4e:	230f      	movs	r3, #15
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	2200      	movs	r2, #0
 8003c54:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	055b      	lsls	r3, r3, #21
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d011      	beq.n	8003c8a <HAL_ADC_ConfigChannel+0x46>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d00d      	beq.n	8003c8a <HAL_ADC_ConfigChannel+0x46>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d009      	beq.n	8003c8a <HAL_ADC_ConfigChannel+0x46>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d005      	beq.n	8003c8a <HAL_ADC_ConfigChannel+0x46>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d001      	beq.n	8003c8a <HAL_ADC_ConfigChannel+0x46>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2234      	movs	r2, #52	; 0x34
 8003c8e:	5c9b      	ldrb	r3, [r3, r2]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x54>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e0d0      	b.n	8003e3a <HAL_ADC_ConfigChannel+0x1f6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2234      	movs	r2, #52	; 0x34
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d000      	beq.n	8003cae <HAL_ADC_ConfigChannel+0x6a>
 8003cac:	e0b4      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4a64      	ldr	r2, [pc, #400]	; (8003e44 <HAL_ADC_ConfigChannel+0x200>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d100      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x76>
 8003cb8:	e082      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	055b      	lsls	r3, r3, #21
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d037      	beq.n	8003d4c <HAL_ADC_ConfigChannel+0x108>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d033      	beq.n	8003d4c <HAL_ADC_ConfigChannel+0x108>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d02f      	beq.n	8003d4c <HAL_ADC_ConfigChannel+0x108>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d02b      	beq.n	8003d4c <HAL_ADC_ConfigChannel+0x108>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d027      	beq.n	8003d4c <HAL_ADC_ConfigChannel+0x108>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	2b05      	cmp	r3, #5
 8003d02:	d023      	beq.n	8003d4c <HAL_ADC_ConfigChannel+0x108>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	2b06      	cmp	r3, #6
 8003d0a:	d01f      	beq.n	8003d4c <HAL_ADC_ConfigChannel+0x108>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	2b07      	cmp	r3, #7
 8003d12:	d01b      	beq.n	8003d4c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2107      	movs	r1, #7
 8003d20:	400b      	ands	r3, r1
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d012      	beq.n	8003d4c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2107      	movs	r1, #7
 8003d32:	438a      	bics	r2, r1
 8003d34:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6959      	ldr	r1, [r3, #20]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2207      	movs	r2, #7
 8003d42:	401a      	ands	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d007      	beq.n	8003d64 <HAL_ADC_ConfigChannel+0x120>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b11      	cmp	r3, #17
 8003d5a:	d003      	beq.n	8003d64 <HAL_ADC_ConfigChannel+0x120>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b12      	cmp	r3, #18
 8003d62:	d163      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003d64:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <HAL_ADC_ConfigChannel+0x204>)
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d009      	beq.n	8003d84 <HAL_ADC_ConfigChannel+0x140>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b11      	cmp	r3, #17
 8003d76:	d102      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x13a>
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	03db      	lsls	r3, r3, #15
 8003d7c:	e004      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x144>
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	045b      	lsls	r3, r3, #17
 8003d82:	e001      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x144>
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	041b      	lsls	r3, r3, #16
 8003d88:	4a2f      	ldr	r2, [pc, #188]	; (8003e48 <HAL_ADC_ConfigChannel+0x204>)
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b10      	cmp	r3, #16
 8003d94:	d14a      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d96:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_ADC_ConfigChannel+0x208>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	492d      	ldr	r1, [pc, #180]	; (8003e50 <HAL_ADC_ConfigChannel+0x20c>)
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7fc f9b1 	bl	8000104 <__udivsi3>
 8003da2:	0003      	movs	r3, r0
 8003da4:	001a      	movs	r2, r3
 8003da6:	0013      	movs	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	189b      	adds	r3, r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003db0:	e002      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f9      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x16e>
 8003dbe:	e035      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4099      	lsls	r1, r3
 8003dce:	000b      	movs	r3, r1
 8003dd0:	43d9      	mvns	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	400a      	ands	r2, r1
 8003dd8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d007      	beq.n	8003df2 <HAL_ADC_ConfigChannel+0x1ae>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b11      	cmp	r3, #17
 8003de8:	d003      	beq.n	8003df2 <HAL_ADC_ConfigChannel+0x1ae>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b12      	cmp	r3, #18
 8003df0:	d11c      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <HAL_ADC_ConfigChannel+0x204>)
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d007      	beq.n	8003e0e <HAL_ADC_ConfigChannel+0x1ca>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b11      	cmp	r3, #17
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x1c6>
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <HAL_ADC_ConfigChannel+0x210>)
 8003e08:	e002      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x1cc>
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <HAL_ADC_ConfigChannel+0x214>)
 8003e0c:	e000      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x1cc>
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <HAL_ADC_ConfigChannel+0x218>)
 8003e10:	4a0d      	ldr	r2, [pc, #52]	; (8003e48 <HAL_ADC_ConfigChannel+0x204>)
 8003e12:	400b      	ands	r3, r1
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e009      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003e24:	230f      	movs	r3, #15
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2234      	movs	r2, #52	; 0x34
 8003e30:	2100      	movs	r1, #0
 8003e32:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003e34:	230f      	movs	r3, #15
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	781b      	ldrb	r3, [r3, #0]
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b004      	add	sp, #16
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	00001001 	.word	0x00001001
 8003e48:	40012708 	.word	0x40012708
 8003e4c:	20000000 	.word	0x20000000
 8003e50:	000f4240 	.word	0x000f4240
 8003e54:	ffbfffff 	.word	0xffbfffff
 8003e58:	feffffff 	.word	0xfeffffff
 8003e5c:	ff7fffff 	.word	0xff7fffff

08003e60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0f0      	b.n	8004054 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	5c9b      	ldrb	r3, [r3, r2]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7ff fbdb 	bl	800363c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2101      	movs	r1, #1
 8003e92:	430a      	orrs	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e96:	f7ff fd67 	bl	8003968 <HAL_GetTick>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e9e:	e013      	b.n	8003ec8 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ea0:	f7ff fd62 	bl	8003968 <HAL_GetTick>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b0a      	cmp	r3, #10
 8003eac:	d90c      	bls.n	8003ec8 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	2280      	movs	r2, #128	; 0x80
 8003eb4:	0292      	lsls	r2, r2, #10
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	2105      	movs	r1, #5
 8003ec2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0c5      	b.n	8004054 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d0e5      	beq.n	8003ea0 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2102      	movs	r1, #2
 8003ee0:	438a      	bics	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee4:	f7ff fd40 	bl	8003968 <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003eec:	e013      	b.n	8003f16 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003eee:	f7ff fd3b 	bl	8003968 <HAL_GetTick>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b0a      	cmp	r3, #10
 8003efa:	d90c      	bls.n	8003f16 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2280      	movs	r2, #128	; 0x80
 8003f02:	0292      	lsls	r2, r2, #10
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	2105      	movs	r1, #5
 8003f10:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e09e      	b.n	8004054 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d1e5      	bne.n	8003eee <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7e1b      	ldrb	r3, [r3, #24]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d108      	bne.n	8003f3c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2180      	movs	r1, #128	; 0x80
 8003f36:	430a      	orrs	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	e007      	b.n	8003f4c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2180      	movs	r1, #128	; 0x80
 8003f48:	438a      	bics	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	7e5b      	ldrb	r3, [r3, #25]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d108      	bne.n	8003f66 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2140      	movs	r1, #64	; 0x40
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e007      	b.n	8003f76 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2140      	movs	r1, #64	; 0x40
 8003f72:	438a      	bics	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	7e9b      	ldrb	r3, [r3, #26]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d108      	bne.n	8003f90 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2120      	movs	r1, #32
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e007      	b.n	8003fa0 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2120      	movs	r1, #32
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7edb      	ldrb	r3, [r3, #27]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d108      	bne.n	8003fba <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2110      	movs	r1, #16
 8003fb4:	438a      	bics	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e007      	b.n	8003fca <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2110      	movs	r1, #16
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	7f1b      	ldrb	r3, [r3, #28]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d108      	bne.n	8003fe4 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2108      	movs	r1, #8
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e007      	b.n	8003ff4 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2108      	movs	r1, #8
 8003ff0:	438a      	bics	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	7f5b      	ldrb	r3, [r3, #29]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d108      	bne.n	800400e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2104      	movs	r1, #4
 8004008:	430a      	orrs	r2, r1
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e007      	b.n	800401e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2104      	movs	r1, #4
 800401a:	438a      	bics	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	431a      	orrs	r2, r3
 8004034:	0011      	movs	r1, r2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	1e5a      	subs	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b004      	add	sp, #16
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800406c:	2013      	movs	r0, #19
 800406e:	183b      	adds	r3, r7, r0
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	2120      	movs	r1, #32
 8004074:	5c52      	ldrb	r2, [r2, r1]
 8004076:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8004078:	0002      	movs	r2, r0
 800407a:	18bb      	adds	r3, r7, r2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d004      	beq.n	800408c <HAL_CAN_ConfigFilter+0x30>
 8004082:	18bb      	adds	r3, r7, r2
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d000      	beq.n	800408c <HAL_CAN_ConfigFilter+0x30>
 800408a:	e0cd      	b.n	8004228 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	58d3      	ldr	r3, [r2, r3]
 8004094:	2201      	movs	r2, #1
 8004096:	431a      	orrs	r2, r3
 8004098:	0011      	movs	r1, r2
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	221f      	movs	r2, #31
 80040a8:	4013      	ands	r3, r2
 80040aa:	2201      	movs	r2, #1
 80040ac:	409a      	lsls	r2, r3
 80040ae:	0013      	movs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	2387      	movs	r3, #135	; 0x87
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	58d3      	ldr	r3, [r2, r3]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	43d2      	mvns	r2, r2
 80040be:	401a      	ands	r2, r3
 80040c0:	0011      	movs	r1, r2
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	2387      	movs	r3, #135	; 0x87
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d129      	bne.n	8004126 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	2383      	movs	r3, #131	; 0x83
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	58d3      	ldr	r3, [r2, r3]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	43d2      	mvns	r2, r2
 80040de:	401a      	ands	r2, r3
 80040e0:	0011      	movs	r1, r2
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	2383      	movs	r3, #131	; 0x83
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	041b      	lsls	r3, r3, #16
 80040f6:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040fc:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	3248      	adds	r2, #72	; 0x48
 8004102:	00d2      	lsls	r2, r2, #3
 8004104:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004118:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800411a:	6979      	ldr	r1, [r7, #20]
 800411c:	3348      	adds	r3, #72	; 0x48
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	18cb      	adds	r3, r1, r3
 8004122:	3304      	adds	r3, #4
 8004124:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d128      	bne.n	8004180 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	2383      	movs	r3, #131	; 0x83
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	58d2      	ldr	r2, [r2, r3]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	431a      	orrs	r2, r3
 800413a:	0011      	movs	r1, r2
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	2383      	movs	r3, #131	; 0x83
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004156:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	3248      	adds	r2, #72	; 0x48
 800415c:	00d2      	lsls	r2, r2, #3
 800415e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	041b      	lsls	r3, r3, #16
 800416c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004172:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004174:	6979      	ldr	r1, [r7, #20]
 8004176:	3348      	adds	r3, #72	; 0x48
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	18cb      	adds	r3, r1, r3
 800417c:	3304      	adds	r3, #4
 800417e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10c      	bne.n	80041a2 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	2381      	movs	r3, #129	; 0x81
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	58d3      	ldr	r3, [r2, r3]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	43d2      	mvns	r2, r2
 8004194:	401a      	ands	r2, r3
 8004196:	0011      	movs	r1, r2
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	2381      	movs	r3, #129	; 0x81
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	50d1      	str	r1, [r2, r3]
 80041a0:	e00a      	b.n	80041b8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	2381      	movs	r3, #129	; 0x81
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	58d2      	ldr	r2, [r2, r3]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	0011      	movs	r1, r2
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	2381      	movs	r3, #129	; 0x81
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10c      	bne.n	80041da <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	2385      	movs	r3, #133	; 0x85
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	58d3      	ldr	r3, [r2, r3]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	43d2      	mvns	r2, r2
 80041cc:	401a      	ands	r2, r3
 80041ce:	0011      	movs	r1, r2
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	2385      	movs	r3, #133	; 0x85
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	50d1      	str	r1, [r2, r3]
 80041d8:	e00a      	b.n	80041f0 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	2385      	movs	r3, #133	; 0x85
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	58d2      	ldr	r2, [r2, r3]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	0011      	movs	r1, r2
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	2385      	movs	r3, #133	; 0x85
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d10a      	bne.n	800420e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	2387      	movs	r3, #135	; 0x87
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	58d2      	ldr	r2, [r2, r3]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	431a      	orrs	r2, r3
 8004204:	0011      	movs	r1, r2
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	2387      	movs	r3, #135	; 0x87
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	58d3      	ldr	r3, [r2, r3]
 8004216:	2201      	movs	r2, #1
 8004218:	4393      	bics	r3, r2
 800421a:	0019      	movs	r1, r3
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	e007      	b.n	8004238 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2280      	movs	r2, #128	; 0x80
 800422e:	02d2      	lsls	r2, r2, #11
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
  }
}
 8004238:	0018      	movs	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	b006      	add	sp, #24
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	5c9b      	ldrb	r3, [r3, r2]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d12f      	bne.n	80042b4 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	2102      	movs	r1, #2
 800425a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2101      	movs	r1, #1
 8004268:	438a      	bics	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800426c:	f7ff fb7c 	bl	8003968 <HAL_GetTick>
 8004270:	0003      	movs	r3, r0
 8004272:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004274:	e013      	b.n	800429e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004276:	f7ff fb77 	bl	8003968 <HAL_GetTick>
 800427a:	0002      	movs	r2, r0
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b0a      	cmp	r3, #10
 8004282:	d90c      	bls.n	800429e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	2280      	movs	r2, #128	; 0x80
 800428a:	0292      	lsls	r2, r2, #10
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	2105      	movs	r1, #5
 8004298:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e012      	b.n	80042c4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	4013      	ands	r3, r2
 80042a8:	d1e5      	bne.n	8004276 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e007      	b.n	80042c4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	2280      	movs	r2, #128	; 0x80
 80042ba:	0312      	lsls	r2, r2, #12
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
  }
}
 80042c4:	0018      	movs	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	b004      	add	sp, #16
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042da:	2017      	movs	r0, #23
 80042dc:	183b      	adds	r3, r7, r0
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	2120      	movs	r1, #32
 80042e2:	5c52      	ldrb	r2, [r2, r1]
 80042e4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80042e6:	0002      	movs	r2, r0
 80042e8:	18bb      	adds	r3, r7, r2
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d004      	beq.n	80042fa <HAL_CAN_GetRxMessage+0x2e>
 80042f0:	18bb      	adds	r3, r7, r2
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d000      	beq.n	80042fa <HAL_CAN_GetRxMessage+0x2e>
 80042f8:	e0f8      	b.n	80044ec <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10e      	bne.n	800431e <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2203      	movs	r2, #3
 8004308:	4013      	ands	r3, r2
 800430a:	d117      	bne.n	800433c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	2280      	movs	r2, #128	; 0x80
 8004312:	0392      	lsls	r2, r2, #14
 8004314:	431a      	orrs	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e0ee      	b.n	80044fc <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2203      	movs	r2, #3
 8004326:	4013      	ands	r3, r2
 8004328:	d108      	bne.n	800433c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	2280      	movs	r2, #128	; 0x80
 8004330:	0392      	lsls	r2, r2, #14
 8004332:	431a      	orrs	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0df      	b.n	80044fc <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	321b      	adds	r2, #27
 8004344:	0112      	lsls	r2, r2, #4
 8004346:	58d3      	ldr	r3, [r2, r3]
 8004348:	2204      	movs	r2, #4
 800434a:	401a      	ands	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10b      	bne.n	8004370 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	321b      	adds	r2, #27
 8004360:	0112      	lsls	r2, r2, #4
 8004362:	58d3      	ldr	r3, [r2, r3]
 8004364:	0d5b      	lsrs	r3, r3, #21
 8004366:	055b      	lsls	r3, r3, #21
 8004368:	0d5a      	lsrs	r2, r3, #21
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e00a      	b.n	8004386 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	321b      	adds	r2, #27
 8004378:	0112      	lsls	r2, r2, #4
 800437a:	58d3      	ldr	r3, [r2, r3]
 800437c:	08db      	lsrs	r3, r3, #3
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	08da      	lsrs	r2, r3, #3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	321b      	adds	r2, #27
 800438e:	0112      	lsls	r2, r2, #4
 8004390:	58d3      	ldr	r3, [r2, r3]
 8004392:	2202      	movs	r2, #2
 8004394:	401a      	ands	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	331b      	adds	r3, #27
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	18d3      	adds	r3, r2, r3
 80043a6:	3304      	adds	r3, #4
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	220f      	movs	r2, #15
 80043ac:	401a      	ands	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	331b      	adds	r3, #27
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	18d3      	adds	r3, r2, r3
 80043be:	3304      	adds	r3, #4
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	22ff      	movs	r2, #255	; 0xff
 80043c6:	401a      	ands	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	331b      	adds	r3, #27
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	18d3      	adds	r3, r2, r3
 80043d8:	3304      	adds	r3, #4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	0c1a      	lsrs	r2, r3, #16
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6819      	ldr	r1, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	23dc      	movs	r3, #220	; 0xdc
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	0112      	lsls	r2, r2, #4
 80043f2:	188a      	adds	r2, r1, r2
 80043f4:	18d3      	adds	r3, r2, r3
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6819      	ldr	r1, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	23dc      	movs	r3, #220	; 0xdc
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	0112      	lsls	r2, r2, #4
 800440a:	188a      	adds	r2, r1, r2
 800440c:	18d3      	adds	r3, r2, r3
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	0a1a      	lsrs	r2, r3, #8
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6819      	ldr	r1, [r3, #0]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	23dc      	movs	r3, #220	; 0xdc
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	0112      	lsls	r2, r2, #4
 8004426:	188a      	adds	r2, r1, r2
 8004428:	18d3      	adds	r3, r2, r3
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	0c1a      	lsrs	r2, r3, #16
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	3302      	adds	r3, #2
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	23dc      	movs	r3, #220	; 0xdc
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	0112      	lsls	r2, r2, #4
 8004442:	188a      	adds	r2, r1, r2
 8004444:	18d3      	adds	r3, r2, r3
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	0e1a      	lsrs	r2, r3, #24
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	3303      	adds	r3, #3
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6819      	ldr	r1, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	23de      	movs	r3, #222	; 0xde
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	0112      	lsls	r2, r2, #4
 800445e:	188a      	adds	r2, r1, r2
 8004460:	18d3      	adds	r3, r2, r3
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	3304      	adds	r3, #4
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	23de      	movs	r3, #222	; 0xde
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	0112      	lsls	r2, r2, #4
 8004478:	188a      	adds	r2, r1, r2
 800447a:	18d3      	adds	r3, r2, r3
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	0a1a      	lsrs	r2, r3, #8
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	3305      	adds	r3, #5
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6819      	ldr	r1, [r3, #0]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	23de      	movs	r3, #222	; 0xde
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	0112      	lsls	r2, r2, #4
 8004494:	188a      	adds	r2, r1, r2
 8004496:	18d3      	adds	r3, r2, r3
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	0c1a      	lsrs	r2, r3, #16
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	3306      	adds	r3, #6
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6819      	ldr	r1, [r3, #0]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	23de      	movs	r3, #222	; 0xde
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	0112      	lsls	r2, r2, #4
 80044b0:	188a      	adds	r2, r1, r2
 80044b2:	18d3      	adds	r3, r2, r3
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	0e1a      	lsrs	r2, r3, #24
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	3307      	adds	r3, #7
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d108      	bne.n	80044d8 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2120      	movs	r1, #32
 80044d2:	430a      	orrs	r2, r1
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	e007      	b.n	80044e8 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2120      	movs	r1, #32
 80044e4:	430a      	orrs	r2, r1
 80044e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e007      	b.n	80044fc <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2280      	movs	r2, #128	; 0x80
 80044f2:	02d2      	lsls	r2, r2, #11
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
  }
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b006      	add	sp, #24
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800450e:	200f      	movs	r0, #15
 8004510:	183b      	adds	r3, r7, r0
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	2120      	movs	r1, #32
 8004516:	5c52      	ldrb	r2, [r2, r1]
 8004518:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800451a:	0002      	movs	r2, r0
 800451c:	18bb      	adds	r3, r7, r2
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d003      	beq.n	800452c <HAL_CAN_ActivateNotification+0x28>
 8004524:	18bb      	adds	r3, r7, r2
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d109      	bne.n	8004540 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6959      	ldr	r1, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e007      	b.n	8004550 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	2280      	movs	r2, #128	; 0x80
 8004546:	02d2      	lsls	r2, r2, #11
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
  }
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b004      	add	sp, #16
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004560:	2300      	movs	r3, #0
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	2201      	movs	r2, #1
 8004598:	4013      	ands	r3, r2
 800459a:	d100      	bne.n	800459e <HAL_CAN_IRQHandler+0x46>
 800459c:	e084      	b.n	80046a8 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2201      	movs	r2, #1
 80045a2:	4013      	ands	r3, r2
 80045a4:	d024      	beq.n	80045f0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2201      	movs	r2, #1
 80045ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2202      	movs	r2, #2
 80045b2:	4013      	ands	r3, r2
 80045b4:	d004      	beq.n	80045c0 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f000 f981 	bl	80048c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80045be:	e017      	b.n	80045f0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2204      	movs	r2, #4
 80045c4:	4013      	ands	r3, r2
 80045c6:	d005      	beq.n	80045d4 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	2280      	movs	r2, #128	; 0x80
 80045cc:	0112      	lsls	r2, r2, #4
 80045ce:	4313      	orrs	r3, r2
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
 80045d2:	e00d      	b.n	80045f0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2208      	movs	r2, #8
 80045d8:	4013      	ands	r3, r2
 80045da:	d005      	beq.n	80045e8 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	2280      	movs	r2, #128	; 0x80
 80045e0:	0152      	lsls	r2, r2, #5
 80045e2:	4313      	orrs	r3, r2
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
 80045e6:	e003      	b.n	80045f0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 f980 	bl	80048f0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	2380      	movs	r3, #128	; 0x80
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	4013      	ands	r3, r2
 80045f8:	d028      	beq.n	800464c <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2280      	movs	r2, #128	; 0x80
 8004600:	0052      	lsls	r2, r2, #1
 8004602:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4013      	ands	r3, r2
 800460c:	d004      	beq.n	8004618 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	0018      	movs	r0, r3
 8004612:	f000 f95d 	bl	80048d0 <HAL_CAN_TxMailbox1CompleteCallback>
 8004616:	e019      	b.n	800464c <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4013      	ands	r3, r2
 8004620:	d005      	beq.n	800462e <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	2280      	movs	r2, #128	; 0x80
 8004626:	0192      	lsls	r2, r2, #6
 8004628:	4313      	orrs	r3, r2
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
 800462c:	e00e      	b.n	800464c <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	4013      	ands	r3, r2
 8004636:	d005      	beq.n	8004644 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	01d2      	lsls	r2, r2, #7
 800463e:	4313      	orrs	r3, r2
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
 8004642:	e003      	b.n	800464c <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	0018      	movs	r0, r3
 8004648:	f000 f95a 	bl	8004900 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	2380      	movs	r3, #128	; 0x80
 8004650:	025b      	lsls	r3, r3, #9
 8004652:	4013      	ands	r3, r2
 8004654:	d028      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2280      	movs	r2, #128	; 0x80
 800465c:	0252      	lsls	r2, r2, #9
 800465e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	029b      	lsls	r3, r3, #10
 8004666:	4013      	ands	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f000 f937 	bl	80048e0 <HAL_CAN_TxMailbox2CompleteCallback>
 8004672:	e019      	b.n	80046a8 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	2380      	movs	r3, #128	; 0x80
 8004678:	02db      	lsls	r3, r3, #11
 800467a:	4013      	ands	r3, r2
 800467c:	d005      	beq.n	800468a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	2280      	movs	r2, #128	; 0x80
 8004682:	0212      	lsls	r2, r2, #8
 8004684:	4313      	orrs	r3, r2
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
 8004688:	e00e      	b.n	80046a8 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	031b      	lsls	r3, r3, #12
 8004690:	4013      	ands	r3, r2
 8004692:	d005      	beq.n	80046a0 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	2280      	movs	r2, #128	; 0x80
 8004698:	0252      	lsls	r2, r2, #9
 800469a:	4313      	orrs	r3, r2
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
 800469e:	e003      	b.n	80046a8 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	0018      	movs	r0, r3
 80046a4:	f000 f934 	bl	8004910 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	2208      	movs	r2, #8
 80046ac:	4013      	ands	r3, r2
 80046ae:	d00c      	beq.n	80046ca <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2210      	movs	r2, #16
 80046b4:	4013      	ands	r3, r2
 80046b6:	d008      	beq.n	80046ca <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	2280      	movs	r2, #128	; 0x80
 80046bc:	0092      	lsls	r2, r2, #2
 80046be:	4313      	orrs	r3, r2
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2210      	movs	r2, #16
 80046c8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	2204      	movs	r2, #4
 80046ce:	4013      	ands	r3, r2
 80046d0:	d00b      	beq.n	80046ea <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2208      	movs	r2, #8
 80046d6:	4013      	ands	r3, r2
 80046d8:	d007      	beq.n	80046ea <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2208      	movs	r2, #8
 80046e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	0018      	movs	r0, r3
 80046e6:	f000 f91b 	bl	8004920 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	2202      	movs	r2, #2
 80046ee:	4013      	ands	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	2203      	movs	r2, #3
 80046fa:	4013      	ands	r3, r2
 80046fc:	d003      	beq.n	8004706 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	0018      	movs	r0, r3
 8004702:	f7fe fb19 	bl	8002d38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	2240      	movs	r2, #64	; 0x40
 800470a:	4013      	ands	r3, r2
 800470c:	d00c      	beq.n	8004728 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2210      	movs	r2, #16
 8004712:	4013      	ands	r3, r2
 8004714:	d008      	beq.n	8004728 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	2280      	movs	r2, #128	; 0x80
 800471a:	00d2      	lsls	r2, r2, #3
 800471c:	4313      	orrs	r3, r2
 800471e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2210      	movs	r2, #16
 8004726:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	2220      	movs	r2, #32
 800472c:	4013      	ands	r3, r2
 800472e:	d00b      	beq.n	8004748 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2208      	movs	r2, #8
 8004734:	4013      	ands	r3, r2
 8004736:	d007      	beq.n	8004748 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2208      	movs	r2, #8
 800473e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 f8fc 	bl	8004940 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	2210      	movs	r2, #16
 800474c:	4013      	ands	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2203      	movs	r2, #3
 8004758:	4013      	ands	r3, r2
 800475a:	d003      	beq.n	8004764 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	0018      	movs	r0, r3
 8004760:	f000 f8e6 	bl	8004930 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004764:	6a3a      	ldr	r2, [r7, #32]
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	029b      	lsls	r3, r3, #10
 800476a:	4013      	ands	r3, r2
 800476c:	d00b      	beq.n	8004786 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2210      	movs	r2, #16
 8004772:	4013      	ands	r3, r2
 8004774:	d007      	beq.n	8004786 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2210      	movs	r2, #16
 800477c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0018      	movs	r0, r3
 8004782:	f000 f8e5 	bl	8004950 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004786:	6a3a      	ldr	r2, [r7, #32]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	025b      	lsls	r3, r3, #9
 800478c:	4013      	ands	r3, r2
 800478e:	d00b      	beq.n	80047a8 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	2208      	movs	r2, #8
 8004794:	4013      	ands	r3, r2
 8004796:	d007      	beq.n	80047a8 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2208      	movs	r2, #8
 800479e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	0018      	movs	r0, r3
 80047a4:	f000 f8dc 	bl	8004960 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	4013      	ands	r3, r2
 80047b0:	d100      	bne.n	80047b4 <HAL_CAN_IRQHandler+0x25c>
 80047b2:	e074      	b.n	800489e <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2204      	movs	r2, #4
 80047b8:	4013      	ands	r3, r2
 80047ba:	d100      	bne.n	80047be <HAL_CAN_IRQHandler+0x266>
 80047bc:	e06b      	b.n	8004896 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	4013      	ands	r3, r2
 80047c6:	d007      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047ce:	d003      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	2201      	movs	r2, #1
 80047d4:	4313      	orrs	r3, r2
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047d8:	6a3a      	ldr	r2, [r7, #32]
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4013      	ands	r3, r2
 80047e0:	d007      	beq.n	80047f2 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2202      	movs	r2, #2
 80047e6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047e8:	d003      	beq.n	80047f2 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	2202      	movs	r2, #2
 80047ee:	4313      	orrs	r3, r2
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047f2:	6a3a      	ldr	r2, [r7, #32]
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4013      	ands	r3, r2
 80047fa:	d007      	beq.n	800480c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2204      	movs	r2, #4
 8004800:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004802:	d003      	beq.n	800480c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	2204      	movs	r2, #4
 8004808:	4313      	orrs	r3, r2
 800480a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800480c:	6a3a      	ldr	r2, [r7, #32]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	4013      	ands	r3, r2
 8004814:	d03f      	beq.n	8004896 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2270      	movs	r2, #112	; 0x70
 800481a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800481c:	d03b      	beq.n	8004896 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2270      	movs	r2, #112	; 0x70
 8004822:	4013      	ands	r3, r2
 8004824:	2b60      	cmp	r3, #96	; 0x60
 8004826:	d027      	beq.n	8004878 <HAL_CAN_IRQHandler+0x320>
 8004828:	d82c      	bhi.n	8004884 <HAL_CAN_IRQHandler+0x32c>
 800482a:	2b50      	cmp	r3, #80	; 0x50
 800482c:	d01f      	beq.n	800486e <HAL_CAN_IRQHandler+0x316>
 800482e:	d829      	bhi.n	8004884 <HAL_CAN_IRQHandler+0x32c>
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d017      	beq.n	8004864 <HAL_CAN_IRQHandler+0x30c>
 8004834:	d826      	bhi.n	8004884 <HAL_CAN_IRQHandler+0x32c>
 8004836:	2b30      	cmp	r3, #48	; 0x30
 8004838:	d00f      	beq.n	800485a <HAL_CAN_IRQHandler+0x302>
 800483a:	d823      	bhi.n	8004884 <HAL_CAN_IRQHandler+0x32c>
 800483c:	2b10      	cmp	r3, #16
 800483e:	d002      	beq.n	8004846 <HAL_CAN_IRQHandler+0x2ee>
 8004840:	2b20      	cmp	r3, #32
 8004842:	d005      	beq.n	8004850 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004844:	e01e      	b.n	8004884 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	2208      	movs	r2, #8
 800484a:	4313      	orrs	r3, r2
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800484e:	e01a      	b.n	8004886 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	2210      	movs	r2, #16
 8004854:	4313      	orrs	r3, r2
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004858:	e015      	b.n	8004886 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	2220      	movs	r2, #32
 800485e:	4313      	orrs	r3, r2
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004862:	e010      	b.n	8004886 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	2240      	movs	r2, #64	; 0x40
 8004868:	4313      	orrs	r3, r2
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800486c:	e00b      	b.n	8004886 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	2280      	movs	r2, #128	; 0x80
 8004872:	4313      	orrs	r3, r2
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004876:	e006      	b.n	8004886 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	2280      	movs	r2, #128	; 0x80
 800487c:	0052      	lsls	r2, r2, #1
 800487e:	4313      	orrs	r3, r2
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004882:	e000      	b.n	8004886 <HAL_CAN_IRQHandler+0x32e>
            break;
 8004884:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699a      	ldr	r2, [r3, #24]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2170      	movs	r1, #112	; 0x70
 8004892:	438a      	bics	r2, r1
 8004894:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2204      	movs	r2, #4
 800489c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d009      	beq.n	80048b8 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 f85c 	bl	8004970 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b00a      	add	sp, #40	; 0x28
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b002      	add	sp, #8
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80048d8:	46c0      	nop			; (mov r8, r8)
 80048da:	46bd      	mov	sp, r7
 80048dc:	b002      	add	sp, #8
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80048e8:	46c0      	nop			; (mov r8, r8)
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b002      	add	sp, #8
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b002      	add	sp, #8
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004908:	46c0      	nop			; (mov r8, r8)
 800490a:	46bd      	mov	sp, r7
 800490c:	b002      	add	sp, #8
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004928:	46c0      	nop			; (mov r8, r8)
 800492a:	46bd      	mov	sp, r7
 800492c:	b002      	add	sp, #8
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	b002      	add	sp, #8
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004948:	46c0      	nop			; (mov r8, r8)
 800494a:	46bd      	mov	sp, r7
 800494c:	b002      	add	sp, #8
 800494e:	bd80      	pop	{r7, pc}

08004950 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	46bd      	mov	sp, r7
 800495c:	b002      	add	sp, #8
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004968:	46c0      	nop			; (mov r8, r8)
 800496a:	46bd      	mov	sp, r7
 800496c:	b002      	add	sp, #8
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004978:	46c0      	nop			; (mov r8, r8)
 800497a:	46bd      	mov	sp, r7
 800497c:	b002      	add	sp, #8
 800497e:	bd80      	pop	{r7, pc}

08004980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	0002      	movs	r2, r0
 8004988:	1dfb      	adds	r3, r7, #7
 800498a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800498c:	1dfb      	adds	r3, r7, #7
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b7f      	cmp	r3, #127	; 0x7f
 8004992:	d809      	bhi.n	80049a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004994:	1dfb      	adds	r3, r7, #7
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	001a      	movs	r2, r3
 800499a:	231f      	movs	r3, #31
 800499c:	401a      	ands	r2, r3
 800499e:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <__NVIC_EnableIRQ+0x30>)
 80049a0:	2101      	movs	r1, #1
 80049a2:	4091      	lsls	r1, r2
 80049a4:	000a      	movs	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
  }
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b002      	add	sp, #8
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	e000e100 	.word	0xe000e100

080049b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	0002      	movs	r2, r0
 80049bc:	6039      	str	r1, [r7, #0]
 80049be:	1dfb      	adds	r3, r7, #7
 80049c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80049c2:	1dfb      	adds	r3, r7, #7
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b7f      	cmp	r3, #127	; 0x7f
 80049c8:	d828      	bhi.n	8004a1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049ca:	4a2f      	ldr	r2, [pc, #188]	; (8004a88 <__NVIC_SetPriority+0xd4>)
 80049cc:	1dfb      	adds	r3, r7, #7
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	b25b      	sxtb	r3, r3
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	33c0      	adds	r3, #192	; 0xc0
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	589b      	ldr	r3, [r3, r2]
 80049da:	1dfa      	adds	r2, r7, #7
 80049dc:	7812      	ldrb	r2, [r2, #0]
 80049de:	0011      	movs	r1, r2
 80049e0:	2203      	movs	r2, #3
 80049e2:	400a      	ands	r2, r1
 80049e4:	00d2      	lsls	r2, r2, #3
 80049e6:	21ff      	movs	r1, #255	; 0xff
 80049e8:	4091      	lsls	r1, r2
 80049ea:	000a      	movs	r2, r1
 80049ec:	43d2      	mvns	r2, r2
 80049ee:	401a      	ands	r2, r3
 80049f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	019b      	lsls	r3, r3, #6
 80049f6:	22ff      	movs	r2, #255	; 0xff
 80049f8:	401a      	ands	r2, r3
 80049fa:	1dfb      	adds	r3, r7, #7
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	0018      	movs	r0, r3
 8004a00:	2303      	movs	r3, #3
 8004a02:	4003      	ands	r3, r0
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a08:	481f      	ldr	r0, [pc, #124]	; (8004a88 <__NVIC_SetPriority+0xd4>)
 8004a0a:	1dfb      	adds	r3, r7, #7
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b25b      	sxtb	r3, r3
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	430a      	orrs	r2, r1
 8004a14:	33c0      	adds	r3, #192	; 0xc0
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004a1a:	e031      	b.n	8004a80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a1c:	4a1b      	ldr	r2, [pc, #108]	; (8004a8c <__NVIC_SetPriority+0xd8>)
 8004a1e:	1dfb      	adds	r3, r7, #7
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	0019      	movs	r1, r3
 8004a24:	230f      	movs	r3, #15
 8004a26:	400b      	ands	r3, r1
 8004a28:	3b08      	subs	r3, #8
 8004a2a:	089b      	lsrs	r3, r3, #2
 8004a2c:	3306      	adds	r3, #6
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	18d3      	adds	r3, r2, r3
 8004a32:	3304      	adds	r3, #4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	1dfa      	adds	r2, r7, #7
 8004a38:	7812      	ldrb	r2, [r2, #0]
 8004a3a:	0011      	movs	r1, r2
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	400a      	ands	r2, r1
 8004a40:	00d2      	lsls	r2, r2, #3
 8004a42:	21ff      	movs	r1, #255	; 0xff
 8004a44:	4091      	lsls	r1, r2
 8004a46:	000a      	movs	r2, r1
 8004a48:	43d2      	mvns	r2, r2
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	019b      	lsls	r3, r3, #6
 8004a52:	22ff      	movs	r2, #255	; 0xff
 8004a54:	401a      	ands	r2, r3
 8004a56:	1dfb      	adds	r3, r7, #7
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	4003      	ands	r3, r0
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a64:	4809      	ldr	r0, [pc, #36]	; (8004a8c <__NVIC_SetPriority+0xd8>)
 8004a66:	1dfb      	adds	r3, r7, #7
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	001c      	movs	r4, r3
 8004a6c:	230f      	movs	r3, #15
 8004a6e:	4023      	ands	r3, r4
 8004a70:	3b08      	subs	r3, #8
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	430a      	orrs	r2, r1
 8004a76:	3306      	adds	r3, #6
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	18c3      	adds	r3, r0, r3
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	601a      	str	r2, [r3, #0]
}
 8004a80:	46c0      	nop			; (mov r8, r8)
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b003      	add	sp, #12
 8004a86:	bd90      	pop	{r4, r7, pc}
 8004a88:	e000e100 	.word	0xe000e100
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a94:	f3bf 8f4f 	dsb	sy
}
 8004a98:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a9a:	4b04      	ldr	r3, [pc, #16]	; (8004aac <__NVIC_SystemReset+0x1c>)
 8004a9c:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <__NVIC_SystemReset+0x20>)
 8004a9e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004aa0:	f3bf 8f4f 	dsb	sy
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	e7fd      	b.n	8004aa6 <__NVIC_SystemReset+0x16>
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	e000ed00 	.word	0xe000ed00
 8004ab0:	05fa0004 	.word	0x05fa0004

08004ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	1e5a      	subs	r2, r3, #1
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	045b      	lsls	r3, r3, #17
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d301      	bcc.n	8004acc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e010      	b.n	8004aee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004acc:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <SysTick_Config+0x44>)
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	3a01      	subs	r2, #1
 8004ad2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	425b      	negs	r3, r3
 8004ad8:	2103      	movs	r1, #3
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7ff ff6a 	bl	80049b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <SysTick_Config+0x44>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae6:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <SysTick_Config+0x44>)
 8004ae8:	2207      	movs	r2, #7
 8004aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	0018      	movs	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	e000e010 	.word	0xe000e010

08004afc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	210f      	movs	r1, #15
 8004b08:	187b      	adds	r3, r7, r1
 8004b0a:	1c02      	adds	r2, r0, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	187b      	adds	r3, r7, r1
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	b25b      	sxtb	r3, r3
 8004b16:	0011      	movs	r1, r2
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7ff ff4b 	bl	80049b4 <__NVIC_SetPriority>
}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b004      	add	sp, #16
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	0002      	movs	r2, r0
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b32:	1dfb      	adds	r3, r7, #7
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	b25b      	sxtb	r3, r3
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff ff21 	bl	8004980 <__NVIC_EnableIRQ>
}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004b4a:	f7ff ffa1 	bl	8004a90 <__NVIC_SystemReset>

08004b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7ff ffab 	bl	8004ab4 <SysTick_Config>
 8004b5e:	0003      	movs	r3, r0
}
 8004b60:	0018      	movs	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b002      	add	sp, #8
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b76:	e155      	b.n	8004e24 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4091      	lsls	r1, r2
 8004b82:	000a      	movs	r2, r1
 8004b84:	4013      	ands	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d100      	bne.n	8004b90 <HAL_GPIO_Init+0x28>
 8004b8e:	e146      	b.n	8004e1e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2203      	movs	r2, #3
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d005      	beq.n	8004ba8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d130      	bne.n	8004c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	0013      	movs	r3, r2
 8004bb8:	43da      	mvns	r2, r3
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	0013      	movs	r3, r2
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bde:	2201      	movs	r2, #1
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	409a      	lsls	r2, r3
 8004be4:	0013      	movs	r3, r2
 8004be6:	43da      	mvns	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4013      	ands	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	0013      	movs	r3, r2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2203      	movs	r2, #3
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d017      	beq.n	8004c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	2203      	movs	r2, #3
 8004c22:	409a      	lsls	r2, r3
 8004c24:	0013      	movs	r3, r2
 8004c26:	43da      	mvns	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	409a      	lsls	r2, r3
 8004c38:	0013      	movs	r3, r2
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d123      	bne.n	8004c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	08da      	lsrs	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3208      	adds	r2, #8
 8004c5a:	0092      	lsls	r2, r2, #2
 8004c5c:	58d3      	ldr	r3, [r2, r3]
 8004c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2207      	movs	r2, #7
 8004c64:	4013      	ands	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	220f      	movs	r2, #15
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	0013      	movs	r3, r2
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4013      	ands	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2107      	movs	r1, #7
 8004c7e:	400b      	ands	r3, r1
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	409a      	lsls	r2, r3
 8004c84:	0013      	movs	r3, r2
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	08da      	lsrs	r2, r3, #3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3208      	adds	r2, #8
 8004c94:	0092      	lsls	r2, r2, #2
 8004c96:	6939      	ldr	r1, [r7, #16]
 8004c98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	0013      	movs	r3, r2
 8004caa:	43da      	mvns	r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	401a      	ands	r2, r3
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	0013      	movs	r3, r2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	23c0      	movs	r3, #192	; 0xc0
 8004cd4:	029b      	lsls	r3, r3, #10
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d100      	bne.n	8004cdc <HAL_GPIO_Init+0x174>
 8004cda:	e0a0      	b.n	8004e1e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cdc:	4b57      	ldr	r3, [pc, #348]	; (8004e3c <HAL_GPIO_Init+0x2d4>)
 8004cde:	699a      	ldr	r2, [r3, #24]
 8004ce0:	4b56      	ldr	r3, [pc, #344]	; (8004e3c <HAL_GPIO_Init+0x2d4>)
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	619a      	str	r2, [r3, #24]
 8004ce8:	4b54      	ldr	r3, [pc, #336]	; (8004e3c <HAL_GPIO_Init+0x2d4>)
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	2201      	movs	r2, #1
 8004cee:	4013      	ands	r3, r2
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004cf4:	4a52      	ldr	r2, [pc, #328]	; (8004e40 <HAL_GPIO_Init+0x2d8>)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	089b      	lsrs	r3, r3, #2
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	589b      	ldr	r3, [r3, r2]
 8004d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2203      	movs	r2, #3
 8004d06:	4013      	ands	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	220f      	movs	r2, #15
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	0013      	movs	r3, r2
 8004d10:	43da      	mvns	r2, r3
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	2390      	movs	r3, #144	; 0x90
 8004d1c:	05db      	lsls	r3, r3, #23
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d019      	beq.n	8004d56 <HAL_GPIO_Init+0x1ee>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a47      	ldr	r2, [pc, #284]	; (8004e44 <HAL_GPIO_Init+0x2dc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d013      	beq.n	8004d52 <HAL_GPIO_Init+0x1ea>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a46      	ldr	r2, [pc, #280]	; (8004e48 <HAL_GPIO_Init+0x2e0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00d      	beq.n	8004d4e <HAL_GPIO_Init+0x1e6>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a45      	ldr	r2, [pc, #276]	; (8004e4c <HAL_GPIO_Init+0x2e4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d007      	beq.n	8004d4a <HAL_GPIO_Init+0x1e2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a44      	ldr	r2, [pc, #272]	; (8004e50 <HAL_GPIO_Init+0x2e8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d101      	bne.n	8004d46 <HAL_GPIO_Init+0x1de>
 8004d42:	2304      	movs	r3, #4
 8004d44:	e008      	b.n	8004d58 <HAL_GPIO_Init+0x1f0>
 8004d46:	2305      	movs	r3, #5
 8004d48:	e006      	b.n	8004d58 <HAL_GPIO_Init+0x1f0>
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e004      	b.n	8004d58 <HAL_GPIO_Init+0x1f0>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e002      	b.n	8004d58 <HAL_GPIO_Init+0x1f0>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <HAL_GPIO_Init+0x1f0>
 8004d56:	2300      	movs	r3, #0
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	2103      	movs	r1, #3
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	0092      	lsls	r2, r2, #2
 8004d60:	4093      	lsls	r3, r2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d68:	4935      	ldr	r1, [pc, #212]	; (8004e40 <HAL_GPIO_Init+0x2d8>)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	089b      	lsrs	r3, r3, #2
 8004d6e:	3302      	adds	r3, #2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d76:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <HAL_GPIO_Init+0x2ec>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	43da      	mvns	r2, r3
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4013      	ands	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	025b      	lsls	r3, r3, #9
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d003      	beq.n	8004d9a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004d9a:	4b2e      	ldr	r3, [pc, #184]	; (8004e54 <HAL_GPIO_Init+0x2ec>)
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004da0:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <HAL_GPIO_Init+0x2ec>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	43da      	mvns	r2, r3
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4013      	ands	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	029b      	lsls	r3, r3, #10
 8004db8:	4013      	ands	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004dc4:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <HAL_GPIO_Init+0x2ec>)
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dca:	4b22      	ldr	r3, [pc, #136]	; (8004e54 <HAL_GPIO_Init+0x2ec>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	43da      	mvns	r2, r3
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	035b      	lsls	r3, r3, #13
 8004de2:	4013      	ands	r3, r2
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004dee:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <HAL_GPIO_Init+0x2ec>)
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004df4:	4b17      	ldr	r3, [pc, #92]	; (8004e54 <HAL_GPIO_Init+0x2ec>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	43da      	mvns	r2, r3
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4013      	ands	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	039b      	lsls	r3, r3, #14
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e18:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <HAL_GPIO_Init+0x2ec>)
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	3301      	adds	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	40da      	lsrs	r2, r3
 8004e2c:	1e13      	subs	r3, r2, #0
 8004e2e:	d000      	beq.n	8004e32 <HAL_GPIO_Init+0x2ca>
 8004e30:	e6a2      	b.n	8004b78 <HAL_GPIO_Init+0x10>
  } 
}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	46c0      	nop			; (mov r8, r8)
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b006      	add	sp, #24
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40010000 	.word	0x40010000
 8004e44:	48000400 	.word	0x48000400
 8004e48:	48000800 	.word	0x48000800
 8004e4c:	48000c00 	.word	0x48000c00
 8004e50:	48001000 	.word	0x48001000
 8004e54:	40010400 	.word	0x40010400

08004e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	000a      	movs	r2, r1
 8004e62:	1cbb      	adds	r3, r7, #2
 8004e64:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	1cba      	adds	r2, r7, #2
 8004e6c:	8812      	ldrh	r2, [r2, #0]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004e72:	230f      	movs	r3, #15
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	2201      	movs	r2, #1
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	e003      	b.n	8004e84 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e7c:	230f      	movs	r3, #15
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004e84:	230f      	movs	r3, #15
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	781b      	ldrb	r3, [r3, #0]
  }
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	0008      	movs	r0, r1
 8004e9c:	0011      	movs	r1, r2
 8004e9e:	1cbb      	adds	r3, r7, #2
 8004ea0:	1c02      	adds	r2, r0, #0
 8004ea2:	801a      	strh	r2, [r3, #0]
 8004ea4:	1c7b      	adds	r3, r7, #1
 8004ea6:	1c0a      	adds	r2, r1, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004eaa:	1c7b      	adds	r3, r7, #1
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d004      	beq.n	8004ebc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eb2:	1cbb      	adds	r3, r7, #2
 8004eb4:	881a      	ldrh	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004eba:	e003      	b.n	8004ec4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ebc:	1cbb      	adds	r3, r7, #2
 8004ebe:	881a      	ldrh	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b002      	add	sp, #8
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	1dbb      	adds	r3, r7, #6
 8004ed6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	1dba      	adds	r2, r7, #6
 8004ede:	8812      	ldrh	r2, [r2, #0]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d008      	beq.n	8004ef6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004ee6:	1dba      	adds	r2, r7, #6
 8004ee8:	8812      	ldrh	r2, [r2, #0]
 8004eea:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004eec:	1dbb      	adds	r3, r7, #6
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f7fd ff3d 	bl	8002d70 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b002      	add	sp, #8
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	40010400 	.word	0x40010400

08004f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f000 fb76 	bl	8005604 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d100      	bne.n	8004f24 <HAL_RCC_OscConfig+0x20>
 8004f22:	e08e      	b.n	8005042 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f24:	4bc5      	ldr	r3, [pc, #788]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	220c      	movs	r2, #12
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d00e      	beq.n	8004f4e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f30:	4bc2      	ldr	r3, [pc, #776]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	220c      	movs	r2, #12
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d117      	bne.n	8004f6c <HAL_RCC_OscConfig+0x68>
 8004f3c:	4bbf      	ldr	r3, [pc, #764]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	23c0      	movs	r3, #192	; 0xc0
 8004f42:	025b      	lsls	r3, r3, #9
 8004f44:	401a      	ands	r2, r3
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	025b      	lsls	r3, r3, #9
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d10e      	bne.n	8004f6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4e:	4bbb      	ldr	r3, [pc, #748]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	4013      	ands	r3, r2
 8004f58:	d100      	bne.n	8004f5c <HAL_RCC_OscConfig+0x58>
 8004f5a:	e071      	b.n	8005040 <HAL_RCC_OscConfig+0x13c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d000      	beq.n	8004f66 <HAL_RCC_OscConfig+0x62>
 8004f64:	e06c      	b.n	8005040 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f000 fb4c 	bl	8005604 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d107      	bne.n	8004f84 <HAL_RCC_OscConfig+0x80>
 8004f74:	4bb1      	ldr	r3, [pc, #708]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4bb0      	ldr	r3, [pc, #704]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	0249      	lsls	r1, r1, #9
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e02f      	b.n	8004fe4 <HAL_RCC_OscConfig+0xe0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10c      	bne.n	8004fa6 <HAL_RCC_OscConfig+0xa2>
 8004f8c:	4bab      	ldr	r3, [pc, #684]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4baa      	ldr	r3, [pc, #680]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004f92:	49ab      	ldr	r1, [pc, #684]	; (8005240 <HAL_RCC_OscConfig+0x33c>)
 8004f94:	400a      	ands	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	4ba8      	ldr	r3, [pc, #672]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4ba7      	ldr	r3, [pc, #668]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004f9e:	49a9      	ldr	r1, [pc, #676]	; (8005244 <HAL_RCC_OscConfig+0x340>)
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	e01e      	b.n	8004fe4 <HAL_RCC_OscConfig+0xe0>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d10e      	bne.n	8004fcc <HAL_RCC_OscConfig+0xc8>
 8004fae:	4ba3      	ldr	r3, [pc, #652]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4ba2      	ldr	r3, [pc, #648]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004fb4:	2180      	movs	r1, #128	; 0x80
 8004fb6:	02c9      	lsls	r1, r1, #11
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	4b9f      	ldr	r3, [pc, #636]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	4b9e      	ldr	r3, [pc, #632]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004fc2:	2180      	movs	r1, #128	; 0x80
 8004fc4:	0249      	lsls	r1, r1, #9
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCC_OscConfig+0xe0>
 8004fcc:	4b9b      	ldr	r3, [pc, #620]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	4b9a      	ldr	r3, [pc, #616]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004fd2:	499b      	ldr	r1, [pc, #620]	; (8005240 <HAL_RCC_OscConfig+0x33c>)
 8004fd4:	400a      	ands	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	4b98      	ldr	r3, [pc, #608]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4b97      	ldr	r3, [pc, #604]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8004fde:	4999      	ldr	r1, [pc, #612]	; (8005244 <HAL_RCC_OscConfig+0x340>)
 8004fe0:	400a      	ands	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d014      	beq.n	8005016 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fec:	f7fe fcbc 	bl	8003968 <HAL_GetTick>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff6:	f7fe fcb7 	bl	8003968 <HAL_GetTick>
 8004ffa:	0002      	movs	r2, r0
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b64      	cmp	r3, #100	; 0x64
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e2fd      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005008:	4b8c      	ldr	r3, [pc, #560]	; (800523c <HAL_RCC_OscConfig+0x338>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	2380      	movs	r3, #128	; 0x80
 800500e:	029b      	lsls	r3, r3, #10
 8005010:	4013      	ands	r3, r2
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0xf2>
 8005014:	e015      	b.n	8005042 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005016:	f7fe fca7 	bl	8003968 <HAL_GetTick>
 800501a:	0003      	movs	r3, r0
 800501c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005020:	f7fe fca2 	bl	8003968 <HAL_GetTick>
 8005024:	0002      	movs	r2, r0
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b64      	cmp	r3, #100	; 0x64
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e2e8      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005032:	4b82      	ldr	r3, [pc, #520]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	2380      	movs	r3, #128	; 0x80
 8005038:	029b      	lsls	r3, r3, #10
 800503a:	4013      	ands	r3, r2
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0x11c>
 800503e:	e000      	b.n	8005042 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005040:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2202      	movs	r2, #2
 8005048:	4013      	ands	r3, r2
 800504a:	d100      	bne.n	800504e <HAL_RCC_OscConfig+0x14a>
 800504c:	e06c      	b.n	8005128 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800504e:	4b7b      	ldr	r3, [pc, #492]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	220c      	movs	r2, #12
 8005054:	4013      	ands	r3, r2
 8005056:	d00e      	beq.n	8005076 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005058:	4b78      	ldr	r3, [pc, #480]	; (800523c <HAL_RCC_OscConfig+0x338>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	220c      	movs	r2, #12
 800505e:	4013      	ands	r3, r2
 8005060:	2b08      	cmp	r3, #8
 8005062:	d11f      	bne.n	80050a4 <HAL_RCC_OscConfig+0x1a0>
 8005064:	4b75      	ldr	r3, [pc, #468]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	23c0      	movs	r3, #192	; 0xc0
 800506a:	025b      	lsls	r3, r3, #9
 800506c:	401a      	ands	r2, r3
 800506e:	2380      	movs	r3, #128	; 0x80
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	429a      	cmp	r2, r3
 8005074:	d116      	bne.n	80050a4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005076:	4b71      	ldr	r3, [pc, #452]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2202      	movs	r2, #2
 800507c:	4013      	ands	r3, r2
 800507e:	d005      	beq.n	800508c <HAL_RCC_OscConfig+0x188>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d001      	beq.n	800508c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e2bb      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800508c:	4b6b      	ldr	r3, [pc, #428]	; (800523c <HAL_RCC_OscConfig+0x338>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	22f8      	movs	r2, #248	; 0xf8
 8005092:	4393      	bics	r3, r2
 8005094:	0019      	movs	r1, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	00da      	lsls	r2, r3, #3
 800509c:	4b67      	ldr	r3, [pc, #412]	; (800523c <HAL_RCC_OscConfig+0x338>)
 800509e:	430a      	orrs	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a2:	e041      	b.n	8005128 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d024      	beq.n	80050f6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ac:	4b63      	ldr	r3, [pc, #396]	; (800523c <HAL_RCC_OscConfig+0x338>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	4b62      	ldr	r3, [pc, #392]	; (800523c <HAL_RCC_OscConfig+0x338>)
 80050b2:	2101      	movs	r1, #1
 80050b4:	430a      	orrs	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7fe fc56 	bl	8003968 <HAL_GetTick>
 80050bc:	0003      	movs	r3, r0
 80050be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050c2:	f7fe fc51 	bl	8003968 <HAL_GetTick>
 80050c6:	0002      	movs	r2, r0
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e297      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d4:	4b59      	ldr	r3, [pc, #356]	; (800523c <HAL_RCC_OscConfig+0x338>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2202      	movs	r2, #2
 80050da:	4013      	ands	r3, r2
 80050dc:	d0f1      	beq.n	80050c2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050de:	4b57      	ldr	r3, [pc, #348]	; (800523c <HAL_RCC_OscConfig+0x338>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	22f8      	movs	r2, #248	; 0xf8
 80050e4:	4393      	bics	r3, r2
 80050e6:	0019      	movs	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	00da      	lsls	r2, r3, #3
 80050ee:	4b53      	ldr	r3, [pc, #332]	; (800523c <HAL_RCC_OscConfig+0x338>)
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e018      	b.n	8005128 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f6:	4b51      	ldr	r3, [pc, #324]	; (800523c <HAL_RCC_OscConfig+0x338>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b50      	ldr	r3, [pc, #320]	; (800523c <HAL_RCC_OscConfig+0x338>)
 80050fc:	2101      	movs	r1, #1
 80050fe:	438a      	bics	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005102:	f7fe fc31 	bl	8003968 <HAL_GetTick>
 8005106:	0003      	movs	r3, r0
 8005108:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800510c:	f7fe fc2c 	bl	8003968 <HAL_GetTick>
 8005110:	0002      	movs	r2, r0
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e272      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800511e:	4b47      	ldr	r3, [pc, #284]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2202      	movs	r2, #2
 8005124:	4013      	ands	r3, r2
 8005126:	d1f1      	bne.n	800510c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2208      	movs	r2, #8
 800512e:	4013      	ands	r3, r2
 8005130:	d036      	beq.n	80051a0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d019      	beq.n	800516e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800513a:	4b40      	ldr	r3, [pc, #256]	; (800523c <HAL_RCC_OscConfig+0x338>)
 800513c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800513e:	4b3f      	ldr	r3, [pc, #252]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8005140:	2101      	movs	r1, #1
 8005142:	430a      	orrs	r2, r1
 8005144:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005146:	f7fe fc0f 	bl	8003968 <HAL_GetTick>
 800514a:	0003      	movs	r3, r0
 800514c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005150:	f7fe fc0a 	bl	8003968 <HAL_GetTick>
 8005154:	0002      	movs	r2, r0
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e250      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005162:	4b36      	ldr	r3, [pc, #216]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2202      	movs	r2, #2
 8005168:	4013      	ands	r3, r2
 800516a:	d0f1      	beq.n	8005150 <HAL_RCC_OscConfig+0x24c>
 800516c:	e018      	b.n	80051a0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800516e:	4b33      	ldr	r3, [pc, #204]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8005170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005172:	4b32      	ldr	r3, [pc, #200]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8005174:	2101      	movs	r1, #1
 8005176:	438a      	bics	r2, r1
 8005178:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800517a:	f7fe fbf5 	bl	8003968 <HAL_GetTick>
 800517e:	0003      	movs	r3, r0
 8005180:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005184:	f7fe fbf0 	bl	8003968 <HAL_GetTick>
 8005188:	0002      	movs	r2, r0
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e236      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005196:	4b29      	ldr	r3, [pc, #164]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	2202      	movs	r2, #2
 800519c:	4013      	ands	r3, r2
 800519e:	d1f1      	bne.n	8005184 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2204      	movs	r2, #4
 80051a6:	4013      	ands	r3, r2
 80051a8:	d100      	bne.n	80051ac <HAL_RCC_OscConfig+0x2a8>
 80051aa:	e0b5      	b.n	8005318 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ac:	201f      	movs	r0, #31
 80051ae:	183b      	adds	r3, r7, r0
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051b4:	4b21      	ldr	r3, [pc, #132]	; (800523c <HAL_RCC_OscConfig+0x338>)
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	055b      	lsls	r3, r3, #21
 80051bc:	4013      	ands	r3, r2
 80051be:	d110      	bne.n	80051e2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051c0:	4b1e      	ldr	r3, [pc, #120]	; (800523c <HAL_RCC_OscConfig+0x338>)
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	4b1d      	ldr	r3, [pc, #116]	; (800523c <HAL_RCC_OscConfig+0x338>)
 80051c6:	2180      	movs	r1, #128	; 0x80
 80051c8:	0549      	lsls	r1, r1, #21
 80051ca:	430a      	orrs	r2, r1
 80051cc:	61da      	str	r2, [r3, #28]
 80051ce:	4b1b      	ldr	r3, [pc, #108]	; (800523c <HAL_RCC_OscConfig+0x338>)
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	2380      	movs	r3, #128	; 0x80
 80051d4:	055b      	lsls	r3, r3, #21
 80051d6:	4013      	ands	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051dc:	183b      	adds	r3, r7, r0
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e2:	4b19      	ldr	r3, [pc, #100]	; (8005248 <HAL_RCC_OscConfig+0x344>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	2380      	movs	r3, #128	; 0x80
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4013      	ands	r3, r2
 80051ec:	d11a      	bne.n	8005224 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ee:	4b16      	ldr	r3, [pc, #88]	; (8005248 <HAL_RCC_OscConfig+0x344>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <HAL_RCC_OscConfig+0x344>)
 80051f4:	2180      	movs	r1, #128	; 0x80
 80051f6:	0049      	lsls	r1, r1, #1
 80051f8:	430a      	orrs	r2, r1
 80051fa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051fc:	f7fe fbb4 	bl	8003968 <HAL_GetTick>
 8005200:	0003      	movs	r3, r0
 8005202:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005206:	f7fe fbaf 	bl	8003968 <HAL_GetTick>
 800520a:	0002      	movs	r2, r0
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b64      	cmp	r3, #100	; 0x64
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e1f5      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_RCC_OscConfig+0x344>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4013      	ands	r3, r2
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d10f      	bne.n	800524c <HAL_RCC_OscConfig+0x348>
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <HAL_RCC_OscConfig+0x338>)
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	4b02      	ldr	r3, [pc, #8]	; (800523c <HAL_RCC_OscConfig+0x338>)
 8005232:	2101      	movs	r1, #1
 8005234:	430a      	orrs	r2, r1
 8005236:	621a      	str	r2, [r3, #32]
 8005238:	e036      	b.n	80052a8 <HAL_RCC_OscConfig+0x3a4>
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	40021000 	.word	0x40021000
 8005240:	fffeffff 	.word	0xfffeffff
 8005244:	fffbffff 	.word	0xfffbffff
 8005248:	40007000 	.word	0x40007000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10c      	bne.n	800526e <HAL_RCC_OscConfig+0x36a>
 8005254:	4bca      	ldr	r3, [pc, #808]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005256:	6a1a      	ldr	r2, [r3, #32]
 8005258:	4bc9      	ldr	r3, [pc, #804]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800525a:	2101      	movs	r1, #1
 800525c:	438a      	bics	r2, r1
 800525e:	621a      	str	r2, [r3, #32]
 8005260:	4bc7      	ldr	r3, [pc, #796]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005262:	6a1a      	ldr	r2, [r3, #32]
 8005264:	4bc6      	ldr	r3, [pc, #792]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005266:	2104      	movs	r1, #4
 8005268:	438a      	bics	r2, r1
 800526a:	621a      	str	r2, [r3, #32]
 800526c:	e01c      	b.n	80052a8 <HAL_RCC_OscConfig+0x3a4>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b05      	cmp	r3, #5
 8005274:	d10c      	bne.n	8005290 <HAL_RCC_OscConfig+0x38c>
 8005276:	4bc2      	ldr	r3, [pc, #776]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005278:	6a1a      	ldr	r2, [r3, #32]
 800527a:	4bc1      	ldr	r3, [pc, #772]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800527c:	2104      	movs	r1, #4
 800527e:	430a      	orrs	r2, r1
 8005280:	621a      	str	r2, [r3, #32]
 8005282:	4bbf      	ldr	r3, [pc, #764]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005284:	6a1a      	ldr	r2, [r3, #32]
 8005286:	4bbe      	ldr	r3, [pc, #760]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005288:	2101      	movs	r1, #1
 800528a:	430a      	orrs	r2, r1
 800528c:	621a      	str	r2, [r3, #32]
 800528e:	e00b      	b.n	80052a8 <HAL_RCC_OscConfig+0x3a4>
 8005290:	4bbb      	ldr	r3, [pc, #748]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005292:	6a1a      	ldr	r2, [r3, #32]
 8005294:	4bba      	ldr	r3, [pc, #744]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005296:	2101      	movs	r1, #1
 8005298:	438a      	bics	r2, r1
 800529a:	621a      	str	r2, [r3, #32]
 800529c:	4bb8      	ldr	r3, [pc, #736]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	4bb7      	ldr	r3, [pc, #732]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80052a2:	2104      	movs	r1, #4
 80052a4:	438a      	bics	r2, r1
 80052a6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d014      	beq.n	80052da <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b0:	f7fe fb5a 	bl	8003968 <HAL_GetTick>
 80052b4:	0003      	movs	r3, r0
 80052b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b8:	e009      	b.n	80052ce <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ba:	f7fe fb55 	bl	8003968 <HAL_GetTick>
 80052be:	0002      	movs	r2, r0
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	4aaf      	ldr	r2, [pc, #700]	; (8005584 <HAL_RCC_OscConfig+0x680>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e19a      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ce:	4bac      	ldr	r3, [pc, #688]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	2202      	movs	r2, #2
 80052d4:	4013      	ands	r3, r2
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCC_OscConfig+0x3b6>
 80052d8:	e013      	b.n	8005302 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052da:	f7fe fb45 	bl	8003968 <HAL_GetTick>
 80052de:	0003      	movs	r3, r0
 80052e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e2:	e009      	b.n	80052f8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e4:	f7fe fb40 	bl	8003968 <HAL_GetTick>
 80052e8:	0002      	movs	r2, r0
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	4aa5      	ldr	r2, [pc, #660]	; (8005584 <HAL_RCC_OscConfig+0x680>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e185      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f8:	4ba1      	ldr	r3, [pc, #644]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	2202      	movs	r2, #2
 80052fe:	4013      	ands	r3, r2
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005302:	231f      	movs	r3, #31
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d105      	bne.n	8005318 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800530c:	4b9c      	ldr	r3, [pc, #624]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	4b9b      	ldr	r3, [pc, #620]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005312:	499d      	ldr	r1, [pc, #628]	; (8005588 <HAL_RCC_OscConfig+0x684>)
 8005314:	400a      	ands	r2, r1
 8005316:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2210      	movs	r2, #16
 800531e:	4013      	ands	r3, r2
 8005320:	d063      	beq.n	80053ea <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d12a      	bne.n	8005380 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800532a:	4b95      	ldr	r3, [pc, #596]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800532c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800532e:	4b94      	ldr	r3, [pc, #592]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005330:	2104      	movs	r1, #4
 8005332:	430a      	orrs	r2, r1
 8005334:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005336:	4b92      	ldr	r3, [pc, #584]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800533a:	4b91      	ldr	r3, [pc, #580]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800533c:	2101      	movs	r1, #1
 800533e:	430a      	orrs	r2, r1
 8005340:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005342:	f7fe fb11 	bl	8003968 <HAL_GetTick>
 8005346:	0003      	movs	r3, r0
 8005348:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800534c:	f7fe fb0c 	bl	8003968 <HAL_GetTick>
 8005350:	0002      	movs	r2, r0
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e152      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800535e:	4b88      	ldr	r3, [pc, #544]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	2202      	movs	r2, #2
 8005364:	4013      	ands	r3, r2
 8005366:	d0f1      	beq.n	800534c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005368:	4b85      	ldr	r3, [pc, #532]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800536a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536c:	22f8      	movs	r2, #248	; 0xf8
 800536e:	4393      	bics	r3, r2
 8005370:	0019      	movs	r1, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	00da      	lsls	r2, r3, #3
 8005378:	4b81      	ldr	r3, [pc, #516]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800537a:	430a      	orrs	r2, r1
 800537c:	635a      	str	r2, [r3, #52]	; 0x34
 800537e:	e034      	b.n	80053ea <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	3305      	adds	r3, #5
 8005386:	d111      	bne.n	80053ac <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005388:	4b7d      	ldr	r3, [pc, #500]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800538a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800538c:	4b7c      	ldr	r3, [pc, #496]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800538e:	2104      	movs	r1, #4
 8005390:	438a      	bics	r2, r1
 8005392:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005394:	4b7a      	ldr	r3, [pc, #488]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005398:	22f8      	movs	r2, #248	; 0xf8
 800539a:	4393      	bics	r3, r2
 800539c:	0019      	movs	r1, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	00da      	lsls	r2, r3, #3
 80053a4:	4b76      	ldr	r3, [pc, #472]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80053a6:	430a      	orrs	r2, r1
 80053a8:	635a      	str	r2, [r3, #52]	; 0x34
 80053aa:	e01e      	b.n	80053ea <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80053ac:	4b74      	ldr	r3, [pc, #464]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80053ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b0:	4b73      	ldr	r3, [pc, #460]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80053b2:	2104      	movs	r1, #4
 80053b4:	430a      	orrs	r2, r1
 80053b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80053b8:	4b71      	ldr	r3, [pc, #452]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80053ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053bc:	4b70      	ldr	r3, [pc, #448]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80053be:	2101      	movs	r1, #1
 80053c0:	438a      	bics	r2, r1
 80053c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c4:	f7fe fad0 	bl	8003968 <HAL_GetTick>
 80053c8:	0003      	movs	r3, r0
 80053ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80053ce:	f7fe facb 	bl	8003968 <HAL_GetTick>
 80053d2:	0002      	movs	r2, r0
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e111      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80053e0:	4b67      	ldr	r3, [pc, #412]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80053e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e4:	2202      	movs	r2, #2
 80053e6:	4013      	ands	r3, r2
 80053e8:	d1f1      	bne.n	80053ce <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2220      	movs	r2, #32
 80053f0:	4013      	ands	r3, r2
 80053f2:	d05c      	beq.n	80054ae <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80053f4:	4b62      	ldr	r3, [pc, #392]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	220c      	movs	r2, #12
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b0c      	cmp	r3, #12
 80053fe:	d00e      	beq.n	800541e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005400:	4b5f      	ldr	r3, [pc, #380]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	220c      	movs	r2, #12
 8005406:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005408:	2b08      	cmp	r3, #8
 800540a:	d114      	bne.n	8005436 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800540c:	4b5c      	ldr	r3, [pc, #368]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	23c0      	movs	r3, #192	; 0xc0
 8005412:	025b      	lsls	r3, r3, #9
 8005414:	401a      	ands	r2, r3
 8005416:	23c0      	movs	r3, #192	; 0xc0
 8005418:	025b      	lsls	r3, r3, #9
 800541a:	429a      	cmp	r2, r3
 800541c:	d10b      	bne.n	8005436 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800541e:	4b58      	ldr	r3, [pc, #352]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005422:	2380      	movs	r3, #128	; 0x80
 8005424:	025b      	lsls	r3, r3, #9
 8005426:	4013      	ands	r3, r2
 8005428:	d040      	beq.n	80054ac <HAL_RCC_OscConfig+0x5a8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d03c      	beq.n	80054ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e0e6      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01b      	beq.n	8005476 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800543e:	4b50      	ldr	r3, [pc, #320]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005442:	4b4f      	ldr	r3, [pc, #316]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005444:	2180      	movs	r1, #128	; 0x80
 8005446:	0249      	lsls	r1, r1, #9
 8005448:	430a      	orrs	r2, r1
 800544a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544c:	f7fe fa8c 	bl	8003968 <HAL_GetTick>
 8005450:	0003      	movs	r3, r0
 8005452:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005456:	f7fe fa87 	bl	8003968 <HAL_GetTick>
 800545a:	0002      	movs	r2, r0
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e0cd      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005468:	4b45      	ldr	r3, [pc, #276]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800546a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	025b      	lsls	r3, r3, #9
 8005470:	4013      	ands	r3, r2
 8005472:	d0f0      	beq.n	8005456 <HAL_RCC_OscConfig+0x552>
 8005474:	e01b      	b.n	80054ae <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005476:	4b42      	ldr	r3, [pc, #264]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800547a:	4b41      	ldr	r3, [pc, #260]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800547c:	4943      	ldr	r1, [pc, #268]	; (800558c <HAL_RCC_OscConfig+0x688>)
 800547e:	400a      	ands	r2, r1
 8005480:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005482:	f7fe fa71 	bl	8003968 <HAL_GetTick>
 8005486:	0003      	movs	r3, r0
 8005488:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800548c:	f7fe fa6c 	bl	8003968 <HAL_GetTick>
 8005490:	0002      	movs	r2, r0
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e0b2      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800549e:	4b38      	ldr	r3, [pc, #224]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80054a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a2:	2380      	movs	r3, #128	; 0x80
 80054a4:	025b      	lsls	r3, r3, #9
 80054a6:	4013      	ands	r3, r2
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x588>
 80054aa:	e000      	b.n	80054ae <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80054ac:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d100      	bne.n	80054b8 <HAL_RCC_OscConfig+0x5b4>
 80054b6:	e0a4      	b.n	8005602 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054b8:	4b31      	ldr	r3, [pc, #196]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	220c      	movs	r2, #12
 80054be:	4013      	ands	r3, r2
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d100      	bne.n	80054c6 <HAL_RCC_OscConfig+0x5c2>
 80054c4:	e078      	b.n	80055b8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d14c      	bne.n	8005568 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ce:	4b2c      	ldr	r3, [pc, #176]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b2b      	ldr	r3, [pc, #172]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80054d4:	492e      	ldr	r1, [pc, #184]	; (8005590 <HAL_RCC_OscConfig+0x68c>)
 80054d6:	400a      	ands	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054da:	f7fe fa45 	bl	8003968 <HAL_GetTick>
 80054de:	0003      	movs	r3, r0
 80054e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e4:	f7fe fa40 	bl	8003968 <HAL_GetTick>
 80054e8:	0002      	movs	r2, r0
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e086      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054f6:	4b22      	ldr	r3, [pc, #136]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	049b      	lsls	r3, r3, #18
 80054fe:	4013      	ands	r3, r2
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005502:	4b1f      	ldr	r3, [pc, #124]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	220f      	movs	r2, #15
 8005508:	4393      	bics	r3, r2
 800550a:	0019      	movs	r1, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005510:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005512:	430a      	orrs	r2, r1
 8005514:	62da      	str	r2, [r3, #44]	; 0x2c
 8005516:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <HAL_RCC_OscConfig+0x690>)
 800551c:	4013      	ands	r3, r2
 800551e:	0019      	movs	r1, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	431a      	orrs	r2, r3
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800552c:	430a      	orrs	r2, r1
 800552e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005530:	4b13      	ldr	r3, [pc, #76]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b12      	ldr	r3, [pc, #72]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 8005536:	2180      	movs	r1, #128	; 0x80
 8005538:	0449      	lsls	r1, r1, #17
 800553a:	430a      	orrs	r2, r1
 800553c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553e:	f7fe fa13 	bl	8003968 <HAL_GetTick>
 8005542:	0003      	movs	r3, r0
 8005544:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005548:	f7fe fa0e 	bl	8003968 <HAL_GetTick>
 800554c:	0002      	movs	r2, r0
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e054      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800555a:	4b09      	ldr	r3, [pc, #36]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	049b      	lsls	r3, r3, #18
 8005562:	4013      	ands	r3, r2
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0x644>
 8005566:	e04c      	b.n	8005602 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4b04      	ldr	r3, [pc, #16]	; (8005580 <HAL_RCC_OscConfig+0x67c>)
 800556e:	4908      	ldr	r1, [pc, #32]	; (8005590 <HAL_RCC_OscConfig+0x68c>)
 8005570:	400a      	ands	r2, r1
 8005572:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fe f9f8 	bl	8003968 <HAL_GetTick>
 8005578:	0003      	movs	r3, r0
 800557a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800557c:	e015      	b.n	80055aa <HAL_RCC_OscConfig+0x6a6>
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	40021000 	.word	0x40021000
 8005584:	00001388 	.word	0x00001388
 8005588:	efffffff 	.word	0xefffffff
 800558c:	fffeffff 	.word	0xfffeffff
 8005590:	feffffff 	.word	0xfeffffff
 8005594:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005598:	f7fe f9e6 	bl	8003968 <HAL_GetTick>
 800559c:	0002      	movs	r2, r0
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e02c      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055aa:	4b18      	ldr	r3, [pc, #96]	; (800560c <HAL_RCC_OscConfig+0x708>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	2380      	movs	r3, #128	; 0x80
 80055b0:	049b      	lsls	r3, r3, #18
 80055b2:	4013      	ands	r3, r2
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x694>
 80055b6:	e024      	b.n	8005602 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e01f      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80055c4:	4b11      	ldr	r3, [pc, #68]	; (800560c <HAL_RCC_OscConfig+0x708>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80055ca:	4b10      	ldr	r3, [pc, #64]	; (800560c <HAL_RCC_OscConfig+0x708>)
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	23c0      	movs	r3, #192	; 0xc0
 80055d4:	025b      	lsls	r3, r3, #9
 80055d6:	401a      	ands	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	429a      	cmp	r2, r3
 80055de:	d10e      	bne.n	80055fe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	220f      	movs	r2, #15
 80055e4:	401a      	ands	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d107      	bne.n	80055fe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	23f0      	movs	r3, #240	; 0xf0
 80055f2:	039b      	lsls	r3, r3, #14
 80055f4:	401a      	ands	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d001      	beq.n	8005602 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	0018      	movs	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	b008      	add	sp, #32
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40021000 	.word	0x40021000

08005610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0bf      	b.n	80057a4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005624:	4b61      	ldr	r3, [pc, #388]	; (80057ac <HAL_RCC_ClockConfig+0x19c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2201      	movs	r2, #1
 800562a:	4013      	ands	r3, r2
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d911      	bls.n	8005656 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005632:	4b5e      	ldr	r3, [pc, #376]	; (80057ac <HAL_RCC_ClockConfig+0x19c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2201      	movs	r2, #1
 8005638:	4393      	bics	r3, r2
 800563a:	0019      	movs	r1, r3
 800563c:	4b5b      	ldr	r3, [pc, #364]	; (80057ac <HAL_RCC_ClockConfig+0x19c>)
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005644:	4b59      	ldr	r3, [pc, #356]	; (80057ac <HAL_RCC_ClockConfig+0x19c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2201      	movs	r2, #1
 800564a:	4013      	ands	r3, r2
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d001      	beq.n	8005656 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e0a6      	b.n	80057a4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2202      	movs	r2, #2
 800565c:	4013      	ands	r3, r2
 800565e:	d015      	beq.n	800568c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2204      	movs	r2, #4
 8005666:	4013      	ands	r3, r2
 8005668:	d006      	beq.n	8005678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800566a:	4b51      	ldr	r3, [pc, #324]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	4b50      	ldr	r3, [pc, #320]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 8005670:	21e0      	movs	r1, #224	; 0xe0
 8005672:	00c9      	lsls	r1, r1, #3
 8005674:	430a      	orrs	r2, r1
 8005676:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005678:	4b4d      	ldr	r3, [pc, #308]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	22f0      	movs	r2, #240	; 0xf0
 800567e:	4393      	bics	r3, r2
 8005680:	0019      	movs	r1, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	4b4a      	ldr	r3, [pc, #296]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2201      	movs	r2, #1
 8005692:	4013      	ands	r3, r2
 8005694:	d04c      	beq.n	8005730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569e:	4b44      	ldr	r3, [pc, #272]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	029b      	lsls	r3, r3, #10
 80056a6:	4013      	ands	r3, r2
 80056a8:	d120      	bne.n	80056ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e07a      	b.n	80057a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d107      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b6:	4b3e      	ldr	r3, [pc, #248]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	2380      	movs	r3, #128	; 0x80
 80056bc:	049b      	lsls	r3, r3, #18
 80056be:	4013      	ands	r3, r2
 80056c0:	d114      	bne.n	80056ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e06e      	b.n	80057a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d107      	bne.n	80056de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80056ce:	4b38      	ldr	r3, [pc, #224]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 80056d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d2:	2380      	movs	r3, #128	; 0x80
 80056d4:	025b      	lsls	r3, r3, #9
 80056d6:	4013      	ands	r3, r2
 80056d8:	d108      	bne.n	80056ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e062      	b.n	80057a4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056de:	4b34      	ldr	r3, [pc, #208]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2202      	movs	r2, #2
 80056e4:	4013      	ands	r3, r2
 80056e6:	d101      	bne.n	80056ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e05b      	b.n	80057a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ec:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2203      	movs	r2, #3
 80056f2:	4393      	bics	r3, r2
 80056f4:	0019      	movs	r1, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	4b2d      	ldr	r3, [pc, #180]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 80056fc:	430a      	orrs	r2, r1
 80056fe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005700:	f7fe f932 	bl	8003968 <HAL_GetTick>
 8005704:	0003      	movs	r3, r0
 8005706:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005708:	e009      	b.n	800571e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800570a:	f7fe f92d 	bl	8003968 <HAL_GetTick>
 800570e:	0002      	movs	r2, r0
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <HAL_RCC_ClockConfig+0x1a4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e042      	b.n	80057a4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571e:	4b24      	ldr	r3, [pc, #144]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	220c      	movs	r2, #12
 8005724:	401a      	ands	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	429a      	cmp	r2, r3
 800572e:	d1ec      	bne.n	800570a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005730:	4b1e      	ldr	r3, [pc, #120]	; (80057ac <HAL_RCC_ClockConfig+0x19c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2201      	movs	r2, #1
 8005736:	4013      	ands	r3, r2
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d211      	bcs.n	8005762 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573e:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <HAL_RCC_ClockConfig+0x19c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2201      	movs	r2, #1
 8005744:	4393      	bics	r3, r2
 8005746:	0019      	movs	r1, r3
 8005748:	4b18      	ldr	r3, [pc, #96]	; (80057ac <HAL_RCC_ClockConfig+0x19c>)
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005750:	4b16      	ldr	r3, [pc, #88]	; (80057ac <HAL_RCC_ClockConfig+0x19c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2201      	movs	r2, #1
 8005756:	4013      	ands	r3, r2
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d001      	beq.n	8005762 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e020      	b.n	80057a4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2204      	movs	r2, #4
 8005768:	4013      	ands	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800576c:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	4a11      	ldr	r2, [pc, #68]	; (80057b8 <HAL_RCC_ClockConfig+0x1a8>)
 8005772:	4013      	ands	r3, r2
 8005774:	0019      	movs	r1, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005780:	f000 f820 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8005784:	0001      	movs	r1, r0
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <HAL_RCC_ClockConfig+0x1a0>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	220f      	movs	r2, #15
 800578e:	4013      	ands	r3, r2
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <HAL_RCC_ClockConfig+0x1ac>)
 8005792:	5cd3      	ldrb	r3, [r2, r3]
 8005794:	000a      	movs	r2, r1
 8005796:	40da      	lsrs	r2, r3
 8005798:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <HAL_RCC_ClockConfig+0x1b0>)
 800579a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800579c:	2003      	movs	r0, #3
 800579e:	f7fe f89d 	bl	80038dc <HAL_InitTick>
  
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	0018      	movs	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	b004      	add	sp, #16
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40022000 	.word	0x40022000
 80057b0:	40021000 	.word	0x40021000
 80057b4:	00001388 	.word	0x00001388
 80057b8:	fffff8ff 	.word	0xfffff8ff
 80057bc:	08006fa0 	.word	0x08006fa0
 80057c0:	20000000 	.word	0x20000000

080057c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c4:	b590      	push	{r4, r7, lr}
 80057c6:	b08f      	sub	sp, #60	; 0x3c
 80057c8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80057ca:	2314      	movs	r3, #20
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	4a38      	ldr	r2, [pc, #224]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xec>)
 80057d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80057d2:	c313      	stmia	r3!, {r0, r1, r4}
 80057d4:	6812      	ldr	r2, [r2, #0]
 80057d6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	4a36      	ldr	r2, [pc, #216]	; (80058b4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80057dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80057de:	c313      	stmia	r3!, {r0, r1, r4}
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e8:	2300      	movs	r3, #0
 80057ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ec:	2300      	movs	r3, #0
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
 80057f0:	2300      	movs	r3, #0
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80057f8:	4b2f      	ldr	r3, [pc, #188]	; (80058b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005800:	220c      	movs	r2, #12
 8005802:	4013      	ands	r3, r2
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d047      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0xd4>
 8005808:	d849      	bhi.n	800589e <HAL_RCC_GetSysClockFreq+0xda>
 800580a:	2b04      	cmp	r3, #4
 800580c:	d002      	beq.n	8005814 <HAL_RCC_GetSysClockFreq+0x50>
 800580e:	2b08      	cmp	r3, #8
 8005810:	d003      	beq.n	800581a <HAL_RCC_GetSysClockFreq+0x56>
 8005812:	e044      	b.n	800589e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005814:	4b29      	ldr	r3, [pc, #164]	; (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005816:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005818:	e044      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	0c9b      	lsrs	r3, r3, #18
 800581e:	220f      	movs	r2, #15
 8005820:	4013      	ands	r3, r2
 8005822:	2214      	movs	r2, #20
 8005824:	18ba      	adds	r2, r7, r2
 8005826:	5cd3      	ldrb	r3, [r2, r3]
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800582a:	4b23      	ldr	r3, [pc, #140]	; (80058b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	220f      	movs	r2, #15
 8005830:	4013      	ands	r3, r2
 8005832:	1d3a      	adds	r2, r7, #4
 8005834:	5cd3      	ldrb	r3, [r2, r3]
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800583a:	23c0      	movs	r3, #192	; 0xc0
 800583c:	025b      	lsls	r3, r3, #9
 800583e:	401a      	ands	r2, r3
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	025b      	lsls	r3, r3, #9
 8005844:	429a      	cmp	r2, r3
 8005846:	d109      	bne.n	800585c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800584a:	481c      	ldr	r0, [pc, #112]	; (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800584c:	f7fa fc5a 	bl	8000104 <__udivsi3>
 8005850:	0003      	movs	r3, r0
 8005852:	001a      	movs	r2, r3
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	4353      	muls	r3, r2
 8005858:	637b      	str	r3, [r7, #52]	; 0x34
 800585a:	e01a      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800585c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800585e:	23c0      	movs	r3, #192	; 0xc0
 8005860:	025b      	lsls	r3, r3, #9
 8005862:	401a      	ands	r2, r3
 8005864:	23c0      	movs	r3, #192	; 0xc0
 8005866:	025b      	lsls	r3, r3, #9
 8005868:	429a      	cmp	r2, r3
 800586a:	d109      	bne.n	8005880 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800586c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800586e:	4814      	ldr	r0, [pc, #80]	; (80058c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005870:	f7fa fc48 	bl	8000104 <__udivsi3>
 8005874:	0003      	movs	r3, r0
 8005876:	001a      	movs	r2, r3
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	4353      	muls	r3, r2
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
 800587e:	e008      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005882:	4810      	ldr	r0, [pc, #64]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005884:	f7fa fc3e 	bl	8000104 <__udivsi3>
 8005888:	0003      	movs	r3, r0
 800588a:	001a      	movs	r2, r3
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	4353      	muls	r3, r2
 8005890:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005894:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005896:	e005      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005898:	4b09      	ldr	r3, [pc, #36]	; (80058c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800589a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800589c:	e002      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800589e:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x100>)
 80058a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80058a6:	0018      	movs	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b00f      	add	sp, #60	; 0x3c
 80058ac:	bd90      	pop	{r4, r7, pc}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	08006f00 	.word	0x08006f00
 80058b4:	08006f10 	.word	0x08006f10
 80058b8:	40021000 	.word	0x40021000
 80058bc:	00b71b00 	.word	0x00b71b00
 80058c0:	02dc6c00 	.word	0x02dc6c00
 80058c4:	007a1200 	.word	0x007a1200

080058c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e0a8      	b.n	8005a2c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	2382      	movs	r3, #130	; 0x82
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d009      	beq.n	8005902 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	61da      	str	r2, [r3, #28]
 80058f4:	e005      	b.n	8005902 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	225d      	movs	r2, #93	; 0x5d
 800590c:	5c9b      	ldrb	r3, [r3, r2]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d107      	bne.n	8005924 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	225c      	movs	r2, #92	; 0x5c
 8005918:	2100      	movs	r1, #0
 800591a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	0018      	movs	r0, r3
 8005920:	f7fd fee2 	bl	80036e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	225d      	movs	r2, #93	; 0x5d
 8005928:	2102      	movs	r1, #2
 800592a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2140      	movs	r1, #64	; 0x40
 8005938:	438a      	bics	r2, r1
 800593a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	23e0      	movs	r3, #224	; 0xe0
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	429a      	cmp	r2, r3
 8005946:	d902      	bls.n	800594e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e002      	b.n	8005954 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	015b      	lsls	r3, r3, #5
 8005952:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	23f0      	movs	r3, #240	; 0xf0
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	429a      	cmp	r2, r3
 800595e:	d008      	beq.n	8005972 <HAL_SPI_Init+0xaa>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	23e0      	movs	r3, #224	; 0xe0
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	429a      	cmp	r2, r3
 800596a:	d002      	beq.n	8005972 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	2382      	movs	r3, #130	; 0x82
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	401a      	ands	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6899      	ldr	r1, [r3, #8]
 8005980:	2384      	movs	r3, #132	; 0x84
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	400b      	ands	r3, r1
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2102      	movs	r1, #2
 800598e:	400b      	ands	r3, r1
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	2101      	movs	r1, #1
 8005998:	400b      	ands	r3, r1
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6999      	ldr	r1, [r3, #24]
 80059a0:	2380      	movs	r3, #128	; 0x80
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	400b      	ands	r3, r1
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	2138      	movs	r1, #56	; 0x38
 80059ae:	400b      	ands	r3, r1
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	2180      	movs	r1, #128	; 0x80
 80059b8:	400b      	ands	r3, r1
 80059ba:	431a      	orrs	r2, r3
 80059bc:	0011      	movs	r1, r2
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059c2:	2380      	movs	r3, #128	; 0x80
 80059c4:	019b      	lsls	r3, r3, #6
 80059c6:	401a      	ands	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	0c1b      	lsrs	r3, r3, #16
 80059d6:	2204      	movs	r2, #4
 80059d8:	401a      	ands	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	2110      	movs	r1, #16
 80059e0:	400b      	ands	r3, r1
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e8:	2108      	movs	r1, #8
 80059ea:	400b      	ands	r3, r1
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68d9      	ldr	r1, [r3, #12]
 80059f2:	23f0      	movs	r3, #240	; 0xf0
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	400b      	ands	r3, r1
 80059f8:	431a      	orrs	r2, r3
 80059fa:	0011      	movs	r1, r2
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	2380      	movs	r3, #128	; 0x80
 8005a00:	015b      	lsls	r3, r3, #5
 8005a02:	401a      	ands	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4907      	ldr	r1, [pc, #28]	; (8005a34 <HAL_SPI_Init+0x16c>)
 8005a18:	400a      	ands	r2, r1
 8005a1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	225d      	movs	r2, #93	; 0x5d
 8005a26:	2101      	movs	r1, #1
 8005a28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b004      	add	sp, #16
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	fffff7ff 	.word	0xfffff7ff

08005a38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	; 0x28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	001a      	movs	r2, r3
 8005a46:	1cbb      	adds	r3, r7, #2
 8005a48:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a4e:	2323      	movs	r3, #35	; 0x23
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	225c      	movs	r2, #92	; 0x5c
 8005a5a:	5c9b      	ldrb	r3, [r3, r2]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_SPI_TransmitReceive+0x2c>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e1b5      	b.n	8005dd0 <HAL_SPI_TransmitReceive+0x398>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	225c      	movs	r2, #92	; 0x5c
 8005a68:	2101      	movs	r1, #1
 8005a6a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a6c:	f7fd ff7c 	bl	8003968 <HAL_GetTick>
 8005a70:	0003      	movs	r3, r0
 8005a72:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a74:	201b      	movs	r0, #27
 8005a76:	183b      	adds	r3, r7, r0
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	215d      	movs	r1, #93	; 0x5d
 8005a7c:	5c52      	ldrb	r2, [r2, r1]
 8005a7e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a86:	2312      	movs	r3, #18
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	1cba      	adds	r2, r7, #2
 8005a8c:	8812      	ldrh	r2, [r2, #0]
 8005a8e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a90:	183b      	adds	r3, r7, r0
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d011      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x84>
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	2382      	movs	r3, #130	; 0x82
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d107      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x7a>
 8005aaa:	183b      	adds	r3, r7, r0
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d004      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005ab2:	2323      	movs	r3, #35	; 0x23
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	701a      	strb	r2, [r3, #0]
    goto error;
 8005aba:	e17e      	b.n	8005dba <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d006      	beq.n	8005ad0 <HAL_SPI_TransmitReceive+0x98>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_SPI_TransmitReceive+0x98>
 8005ac8:	1cbb      	adds	r3, r7, #2
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d104      	bne.n	8005ada <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005ad0:	2323      	movs	r3, #35	; 0x23
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ad8:	e16f      	b.n	8005dba <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	225d      	movs	r2, #93	; 0x5d
 8005ade:	5c9b      	ldrb	r3, [r3, r2]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d003      	beq.n	8005aee <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	225d      	movs	r2, #93	; 0x5d
 8005aea:	2105      	movs	r1, #5
 8005aec:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1cba      	adds	r2, r7, #2
 8005afe:	2146      	movs	r1, #70	; 0x46
 8005b00:	8812      	ldrh	r2, [r2, #0]
 8005b02:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	1cba      	adds	r2, r7, #2
 8005b08:	2144      	movs	r1, #68	; 0x44
 8005b0a:	8812      	ldrh	r2, [r2, #0]
 8005b0c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	1cba      	adds	r2, r7, #2
 8005b18:	8812      	ldrh	r2, [r2, #0]
 8005b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	1cba      	adds	r2, r7, #2
 8005b20:	8812      	ldrh	r2, [r2, #0]
 8005b22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	23e0      	movs	r3, #224	; 0xe0
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d908      	bls.n	8005b4e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	49a4      	ldr	r1, [pc, #656]	; (8005dd8 <HAL_SPI_TransmitReceive+0x3a0>)
 8005b48:	400a      	ands	r2, r1
 8005b4a:	605a      	str	r2, [r3, #4]
 8005b4c:	e008      	b.n	8005b60 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2180      	movs	r1, #128	; 0x80
 8005b5a:	0149      	lsls	r1, r1, #5
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2240      	movs	r2, #64	; 0x40
 8005b68:	4013      	ands	r3, r2
 8005b6a:	2b40      	cmp	r3, #64	; 0x40
 8005b6c:	d007      	beq.n	8005b7e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2140      	movs	r1, #64	; 0x40
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	23e0      	movs	r3, #224	; 0xe0
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d800      	bhi.n	8005b8c <HAL_SPI_TransmitReceive+0x154>
 8005b8a:	e07f      	b.n	8005c8c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d005      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x168>
 8005b94:	2312      	movs	r3, #18
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d000      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x168>
 8005b9e:	e069      	b.n	8005c74 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	881a      	ldrh	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	1c9a      	adds	r2, r3, #2
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bc4:	e056      	b.n	8005c74 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d11b      	bne.n	8005c0c <HAL_SPI_TransmitReceive+0x1d4>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d016      	beq.n	8005c0c <HAL_SPI_TransmitReceive+0x1d4>
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d113      	bne.n	8005c0c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	881a      	ldrh	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	1c9a      	adds	r2, r3, #2
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	2201      	movs	r2, #1
 8005c14:	4013      	ands	r3, r2
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d11c      	bne.n	8005c54 <HAL_SPI_TransmitReceive+0x21c>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2246      	movs	r2, #70	; 0x46
 8005c1e:	5a9b      	ldrh	r3, [r3, r2]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d016      	beq.n	8005c54 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	b292      	uxth	r2, r2
 8005c32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	1c9a      	adds	r2, r3, #2
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2246      	movs	r2, #70	; 0x46
 8005c42:	5a9b      	ldrh	r3, [r3, r2]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b299      	uxth	r1, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2246      	movs	r2, #70	; 0x46
 8005c4e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c50:	2301      	movs	r3, #1
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c54:	f7fd fe88 	bl	8003968 <HAL_GetTick>
 8005c58:	0002      	movs	r2, r0
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d807      	bhi.n	8005c74 <HAL_SPI_TransmitReceive+0x23c>
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	3301      	adds	r3, #1
 8005c68:	d004      	beq.n	8005c74 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005c6a:	2323      	movs	r3, #35	; 0x23
 8005c6c:	18fb      	adds	r3, r7, r3
 8005c6e:	2203      	movs	r2, #3
 8005c70:	701a      	strb	r2, [r3, #0]
        goto error;
 8005c72:	e0a2      	b.n	8005dba <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1a3      	bne.n	8005bc6 <HAL_SPI_TransmitReceive+0x18e>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2246      	movs	r2, #70	; 0x46
 8005c82:	5a9b      	ldrh	r3, [r3, r2]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d19d      	bne.n	8005bc6 <HAL_SPI_TransmitReceive+0x18e>
 8005c8a:	e085      	b.n	8005d98 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_SPI_TransmitReceive+0x268>
 8005c94:	2312      	movs	r3, #18
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d000      	beq.n	8005ca0 <HAL_SPI_TransmitReceive+0x268>
 8005c9e:	e070      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	330c      	adds	r3, #12
 8005caa:	7812      	ldrb	r2, [r2, #0]
 8005cac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cc6:	e05c      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d11c      	bne.n	8005d10 <HAL_SPI_TransmitReceive+0x2d8>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d017      	beq.n	8005d10 <HAL_SPI_TransmitReceive+0x2d8>
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d114      	bne.n	8005d10 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	330c      	adds	r3, #12
 8005cf0:	7812      	ldrb	r2, [r2, #0]
 8005cf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2201      	movs	r2, #1
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d11e      	bne.n	8005d5c <HAL_SPI_TransmitReceive+0x324>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2246      	movs	r2, #70	; 0x46
 8005d22:	5a9b      	ldrh	r3, [r3, r2]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d018      	beq.n	8005d5c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	330c      	adds	r3, #12
 8005d30:	001a      	movs	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	7812      	ldrb	r2, [r2, #0]
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2246      	movs	r2, #70	; 0x46
 8005d4a:	5a9b      	ldrh	r3, [r3, r2]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b299      	uxth	r1, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2246      	movs	r2, #70	; 0x46
 8005d56:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d5c:	f7fd fe04 	bl	8003968 <HAL_GetTick>
 8005d60:	0002      	movs	r2, r0
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d802      	bhi.n	8005d72 <HAL_SPI_TransmitReceive+0x33a>
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	3301      	adds	r3, #1
 8005d70:	d102      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x340>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005d78:	2323      	movs	r3, #35	; 0x23
 8005d7a:	18fb      	adds	r3, r7, r3
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	701a      	strb	r2, [r3, #0]
        goto error;
 8005d80:	e01b      	b.n	8005dba <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d19d      	bne.n	8005cc8 <HAL_SPI_TransmitReceive+0x290>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2246      	movs	r2, #70	; 0x46
 8005d90:	5a9b      	ldrh	r3, [r3, r2]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d197      	bne.n	8005cc8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f000 f94c 	bl	800603c <SPI_EndRxTxTransaction>
 8005da4:	1e03      	subs	r3, r0, #0
 8005da6:	d007      	beq.n	8005db8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005da8:	2323      	movs	r3, #35	; 0x23
 8005daa:	18fb      	adds	r3, r7, r3
 8005dac:	2201      	movs	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	661a      	str	r2, [r3, #96]	; 0x60
 8005db6:	e000      	b.n	8005dba <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005db8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	225d      	movs	r2, #93	; 0x5d
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	225c      	movs	r2, #92	; 0x5c
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005dca:	2323      	movs	r3, #35	; 0x23
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	781b      	ldrb	r3, [r3, #0]
}
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b00a      	add	sp, #40	; 0x28
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	ffffefff 	.word	0xffffefff

08005ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	1dfb      	adds	r3, r7, #7
 8005dea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dec:	f7fd fdbc 	bl	8003968 <HAL_GetTick>
 8005df0:	0002      	movs	r2, r0
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	18d3      	adds	r3, r2, r3
 8005dfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dfc:	f7fd fdb4 	bl	8003968 <HAL_GetTick>
 8005e00:	0003      	movs	r3, r0
 8005e02:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e04:	4b3a      	ldr	r3, [pc, #232]	; (8005ef0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	015b      	lsls	r3, r3, #5
 8005e0a:	0d1b      	lsrs	r3, r3, #20
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	4353      	muls	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e12:	e058      	b.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	3301      	adds	r3, #1
 8005e18:	d055      	beq.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e1a:	f7fd fda5 	bl	8003968 <HAL_GetTick>
 8005e1e:	0002      	movs	r2, r0
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d902      	bls.n	8005e30 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d142      	bne.n	8005eb6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	21e0      	movs	r1, #224	; 0xe0
 8005e3c:	438a      	bics	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	2382      	movs	r3, #130	; 0x82
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d113      	bne.n	8005e74 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d005      	beq.n	8005e64 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	2380      	movs	r3, #128	; 0x80
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d107      	bne.n	8005e74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2140      	movs	r1, #64	; 0x40
 8005e70:	438a      	bics	r2, r1
 8005e72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e78:	2380      	movs	r3, #128	; 0x80
 8005e7a:	019b      	lsls	r3, r3, #6
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d110      	bne.n	8005ea2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	491a      	ldr	r1, [pc, #104]	; (8005ef4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005e8c:	400a      	ands	r2, r1
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2180      	movs	r1, #128	; 0x80
 8005e9c:	0189      	lsls	r1, r1, #6
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	225d      	movs	r2, #93	; 0x5d
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	225c      	movs	r2, #92	; 0x5c
 8005eae:	2100      	movs	r1, #0
 8005eb0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e017      	b.n	8005ee6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	425a      	negs	r2, r3
 8005ed6:	4153      	adcs	r3, r2
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	001a      	movs	r2, r3
 8005edc:	1dfb      	adds	r3, r7, #7
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d197      	bne.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	b008      	add	sp, #32
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	20000000 	.word	0x20000000
 8005ef4:	ffffdfff 	.word	0xffffdfff

08005ef8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f06:	2317      	movs	r3, #23
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f0e:	f7fd fd2b 	bl	8003968 <HAL_GetTick>
 8005f12:	0002      	movs	r2, r0
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	18d3      	adds	r3, r2, r3
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f1e:	f7fd fd23 	bl	8003968 <HAL_GetTick>
 8005f22:	0003      	movs	r3, r0
 8005f24:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	330c      	adds	r3, #12
 8005f2c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f2e:	4b41      	ldr	r3, [pc, #260]	; (8006034 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	0013      	movs	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	189b      	adds	r3, r3, r2
 8005f38:	00da      	lsls	r2, r3, #3
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	0d1b      	lsrs	r3, r3, #20
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f40:	4353      	muls	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f44:	e068      	b.n	8006018 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	23c0      	movs	r3, #192	; 0xc0
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d10a      	bne.n	8005f66 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d107      	bne.n	8005f66 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	2117      	movs	r1, #23
 8005f5e:	187b      	adds	r3, r7, r1
 8005f60:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f62:	187b      	adds	r3, r7, r1
 8005f64:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	d055      	beq.n	8006018 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f6c:	f7fd fcfc 	bl	8003968 <HAL_GetTick>
 8005f70:	0002      	movs	r2, r0
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d902      	bls.n	8005f82 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d142      	bne.n	8006008 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	21e0      	movs	r1, #224	; 0xe0
 8005f8e:	438a      	bics	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	2382      	movs	r3, #130	; 0x82
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d113      	bne.n	8005fc6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	2380      	movs	r3, #128	; 0x80
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d005      	beq.n	8005fb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	2380      	movs	r3, #128	; 0x80
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d107      	bne.n	8005fc6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2140      	movs	r1, #64	; 0x40
 8005fc2:	438a      	bics	r2, r1
 8005fc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	019b      	lsls	r3, r3, #6
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d110      	bne.n	8005ff4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4916      	ldr	r1, [pc, #88]	; (8006038 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005fde:	400a      	ands	r2, r1
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2180      	movs	r1, #128	; 0x80
 8005fee:	0189      	lsls	r1, r1, #6
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	225d      	movs	r2, #93	; 0x5d
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	225c      	movs	r2, #92	; 0x5c
 8006000:	2100      	movs	r1, #0
 8006002:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e010      	b.n	800602a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	3b01      	subs	r3, #1
 8006016:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	4013      	ands	r3, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	429a      	cmp	r2, r3
 8006026:	d18e      	bne.n	8005f46 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	0018      	movs	r0, r3
 800602c:	46bd      	mov	sp, r7
 800602e:	b00a      	add	sp, #40	; 0x28
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	20000000 	.word	0x20000000
 8006038:	ffffdfff 	.word	0xffffdfff

0800603c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af02      	add	r7, sp, #8
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	23c0      	movs	r3, #192	; 0xc0
 800604c:	0159      	lsls	r1, r3, #5
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	0013      	movs	r3, r2
 8006056:	2200      	movs	r2, #0
 8006058:	f7ff ff4e 	bl	8005ef8 <SPI_WaitFifoStateUntilTimeout>
 800605c:	1e03      	subs	r3, r0, #0
 800605e:	d007      	beq.n	8006070 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006064:	2220      	movs	r2, #32
 8006066:	431a      	orrs	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e027      	b.n	80060c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	0013      	movs	r3, r2
 800607a:	2200      	movs	r2, #0
 800607c:	2180      	movs	r1, #128	; 0x80
 800607e:	f7ff fead 	bl	8005ddc <SPI_WaitFlagStateUntilTimeout>
 8006082:	1e03      	subs	r3, r0, #0
 8006084:	d007      	beq.n	8006096 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608a:	2220      	movs	r2, #32
 800608c:	431a      	orrs	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e014      	b.n	80060c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	23c0      	movs	r3, #192	; 0xc0
 800609a:	00d9      	lsls	r1, r3, #3
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	0013      	movs	r3, r2
 80060a4:	2200      	movs	r2, #0
 80060a6:	f7ff ff27 	bl	8005ef8 <SPI_WaitFifoStateUntilTimeout>
 80060aa:	1e03      	subs	r3, r0, #0
 80060ac:	d007      	beq.n	80060be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b2:	2220      	movs	r2, #32
 80060b4:	431a      	orrs	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e000      	b.n	80060c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	0018      	movs	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	b004      	add	sp, #16
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <__errno>:
 80060c8:	4b01      	ldr	r3, [pc, #4]	; (80060d0 <__errno+0x8>)
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	4770      	bx	lr
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	2000000c 	.word	0x2000000c

080060d4 <__libc_init_array>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	2600      	movs	r6, #0
 80060d8:	4d0c      	ldr	r5, [pc, #48]	; (800610c <__libc_init_array+0x38>)
 80060da:	4c0d      	ldr	r4, [pc, #52]	; (8006110 <__libc_init_array+0x3c>)
 80060dc:	1b64      	subs	r4, r4, r5
 80060de:	10a4      	asrs	r4, r4, #2
 80060e0:	42a6      	cmp	r6, r4
 80060e2:	d109      	bne.n	80060f8 <__libc_init_array+0x24>
 80060e4:	2600      	movs	r6, #0
 80060e6:	f000 feff 	bl	8006ee8 <_init>
 80060ea:	4d0a      	ldr	r5, [pc, #40]	; (8006114 <__libc_init_array+0x40>)
 80060ec:	4c0a      	ldr	r4, [pc, #40]	; (8006118 <__libc_init_array+0x44>)
 80060ee:	1b64      	subs	r4, r4, r5
 80060f0:	10a4      	asrs	r4, r4, #2
 80060f2:	42a6      	cmp	r6, r4
 80060f4:	d105      	bne.n	8006102 <__libc_init_array+0x2e>
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
 80060f8:	00b3      	lsls	r3, r6, #2
 80060fa:	58eb      	ldr	r3, [r5, r3]
 80060fc:	4798      	blx	r3
 80060fe:	3601      	adds	r6, #1
 8006100:	e7ee      	b.n	80060e0 <__libc_init_array+0xc>
 8006102:	00b3      	lsls	r3, r6, #2
 8006104:	58eb      	ldr	r3, [r5, r3]
 8006106:	4798      	blx	r3
 8006108:	3601      	adds	r6, #1
 800610a:	e7f2      	b.n	80060f2 <__libc_init_array+0x1e>
 800610c:	08006fe0 	.word	0x08006fe0
 8006110:	08006fe0 	.word	0x08006fe0
 8006114:	08006fe0 	.word	0x08006fe0
 8006118:	08006fe4 	.word	0x08006fe4

0800611c <memset>:
 800611c:	0003      	movs	r3, r0
 800611e:	1882      	adds	r2, r0, r2
 8006120:	4293      	cmp	r3, r2
 8006122:	d100      	bne.n	8006126 <memset+0xa>
 8006124:	4770      	bx	lr
 8006126:	7019      	strb	r1, [r3, #0]
 8006128:	3301      	adds	r3, #1
 800612a:	e7f9      	b.n	8006120 <memset+0x4>

0800612c <pow>:
 800612c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800612e:	0014      	movs	r4, r2
 8006130:	001d      	movs	r5, r3
 8006132:	9000      	str	r0, [sp, #0]
 8006134:	9101      	str	r1, [sp, #4]
 8006136:	f000 f867 	bl	8006208 <__ieee754_pow>
 800613a:	0022      	movs	r2, r4
 800613c:	0006      	movs	r6, r0
 800613e:	000f      	movs	r7, r1
 8006140:	002b      	movs	r3, r5
 8006142:	0020      	movs	r0, r4
 8006144:	0029      	movs	r1, r5
 8006146:	f7fb feeb 	bl	8001f20 <__aeabi_dcmpun>
 800614a:	2800      	cmp	r0, #0
 800614c:	d13f      	bne.n	80061ce <pow+0xa2>
 800614e:	9800      	ldr	r0, [sp, #0]
 8006150:	9901      	ldr	r1, [sp, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	2300      	movs	r3, #0
 8006156:	f7fa f95b 	bl	8000410 <__aeabi_dcmpeq>
 800615a:	2800      	cmp	r0, #0
 800615c:	d019      	beq.n	8006192 <pow+0x66>
 800615e:	2200      	movs	r2, #0
 8006160:	2300      	movs	r3, #0
 8006162:	0020      	movs	r0, r4
 8006164:	0029      	movs	r1, r5
 8006166:	f7fa f953 	bl	8000410 <__aeabi_dcmpeq>
 800616a:	2800      	cmp	r0, #0
 800616c:	d146      	bne.n	80061fc <pow+0xd0>
 800616e:	0020      	movs	r0, r4
 8006170:	0029      	movs	r1, r5
 8006172:	f000 fe3d 	bl	8006df0 <finite>
 8006176:	2800      	cmp	r0, #0
 8006178:	d029      	beq.n	80061ce <pow+0xa2>
 800617a:	2200      	movs	r2, #0
 800617c:	2300      	movs	r3, #0
 800617e:	0020      	movs	r0, r4
 8006180:	0029      	movs	r1, r5
 8006182:	f7fa f94b 	bl	800041c <__aeabi_dcmplt>
 8006186:	2800      	cmp	r0, #0
 8006188:	d021      	beq.n	80061ce <pow+0xa2>
 800618a:	f7ff ff9d 	bl	80060c8 <__errno>
 800618e:	2322      	movs	r3, #34	; 0x22
 8006190:	e01c      	b.n	80061cc <pow+0xa0>
 8006192:	0030      	movs	r0, r6
 8006194:	0039      	movs	r1, r7
 8006196:	f000 fe2b 	bl	8006df0 <finite>
 800619a:	2800      	cmp	r0, #0
 800619c:	d11b      	bne.n	80061d6 <pow+0xaa>
 800619e:	9800      	ldr	r0, [sp, #0]
 80061a0:	9901      	ldr	r1, [sp, #4]
 80061a2:	f000 fe25 	bl	8006df0 <finite>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d015      	beq.n	80061d6 <pow+0xaa>
 80061aa:	0020      	movs	r0, r4
 80061ac:	0029      	movs	r1, r5
 80061ae:	f000 fe1f 	bl	8006df0 <finite>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d00f      	beq.n	80061d6 <pow+0xaa>
 80061b6:	0032      	movs	r2, r6
 80061b8:	003b      	movs	r3, r7
 80061ba:	0030      	movs	r0, r6
 80061bc:	0039      	movs	r1, r7
 80061be:	f7fb feaf 	bl	8001f20 <__aeabi_dcmpun>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d0e1      	beq.n	800618a <pow+0x5e>
 80061c6:	f7ff ff7f 	bl	80060c8 <__errno>
 80061ca:	2321      	movs	r3, #33	; 0x21
 80061cc:	6003      	str	r3, [r0, #0]
 80061ce:	0030      	movs	r0, r6
 80061d0:	0039      	movs	r1, r7
 80061d2:	b003      	add	sp, #12
 80061d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d6:	2200      	movs	r2, #0
 80061d8:	2300      	movs	r3, #0
 80061da:	0030      	movs	r0, r6
 80061dc:	0039      	movs	r1, r7
 80061de:	f7fa f917 	bl	8000410 <__aeabi_dcmpeq>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d0f3      	beq.n	80061ce <pow+0xa2>
 80061e6:	9800      	ldr	r0, [sp, #0]
 80061e8:	9901      	ldr	r1, [sp, #4]
 80061ea:	f000 fe01 	bl	8006df0 <finite>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d0ed      	beq.n	80061ce <pow+0xa2>
 80061f2:	0020      	movs	r0, r4
 80061f4:	0029      	movs	r1, r5
 80061f6:	f000 fdfb 	bl	8006df0 <finite>
 80061fa:	e7c4      	b.n	8006186 <pow+0x5a>
 80061fc:	2600      	movs	r6, #0
 80061fe:	4f01      	ldr	r7, [pc, #4]	; (8006204 <pow+0xd8>)
 8006200:	e7e5      	b.n	80061ce <pow+0xa2>
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	3ff00000 	.word	0x3ff00000

08006208 <__ieee754_pow>:
 8006208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620a:	b095      	sub	sp, #84	; 0x54
 800620c:	9202      	str	r2, [sp, #8]
 800620e:	9303      	str	r3, [sp, #12]
 8006210:	9b03      	ldr	r3, [sp, #12]
 8006212:	9a03      	ldr	r2, [sp, #12]
 8006214:	9304      	str	r3, [sp, #16]
 8006216:	9b02      	ldr	r3, [sp, #8]
 8006218:	0056      	lsls	r6, r2, #1
 800621a:	001a      	movs	r2, r3
 800621c:	0876      	lsrs	r6, r6, #1
 800621e:	0007      	movs	r7, r0
 8006220:	000d      	movs	r5, r1
 8006222:	4332      	orrs	r2, r6
 8006224:	d119      	bne.n	800625a <__ieee754_pow+0x52>
 8006226:	2180      	movs	r1, #128	; 0x80
 8006228:	0309      	lsls	r1, r1, #12
 800622a:	4069      	eors	r1, r5
 800622c:	0002      	movs	r2, r0
 800622e:	000b      	movs	r3, r1
 8006230:	1892      	adds	r2, r2, r2
 8006232:	415b      	adcs	r3, r3
 8006234:	4989      	ldr	r1, [pc, #548]	; (800645c <__ieee754_pow+0x254>)
 8006236:	428b      	cmp	r3, r1
 8006238:	d806      	bhi.n	8006248 <__ieee754_pow+0x40>
 800623a:	d001      	beq.n	8006240 <__ieee754_pow+0x38>
 800623c:	f000 fcb6 	bl	8006bac <__ieee754_pow+0x9a4>
 8006240:	2a00      	cmp	r2, #0
 8006242:	d101      	bne.n	8006248 <__ieee754_pow+0x40>
 8006244:	f000 fcb2 	bl	8006bac <__ieee754_pow+0x9a4>
 8006248:	9a02      	ldr	r2, [sp, #8]
 800624a:	9b03      	ldr	r3, [sp, #12]
 800624c:	0038      	movs	r0, r7
 800624e:	0029      	movs	r1, r5
 8006250:	f7fa f92a 	bl	80004a8 <__aeabi_dadd>
 8006254:	9000      	str	r0, [sp, #0]
 8006256:	9101      	str	r1, [sp, #4]
 8006258:	e0ad      	b.n	80063b6 <__ieee754_pow+0x1ae>
 800625a:	4a81      	ldr	r2, [pc, #516]	; (8006460 <__ieee754_pow+0x258>)
 800625c:	004c      	lsls	r4, r1, #1
 800625e:	9108      	str	r1, [sp, #32]
 8006260:	9000      	str	r0, [sp, #0]
 8006262:	0864      	lsrs	r4, r4, #1
 8006264:	4294      	cmp	r4, r2
 8006266:	dc08      	bgt.n	800627a <__ieee754_pow+0x72>
 8006268:	d101      	bne.n	800626e <__ieee754_pow+0x66>
 800626a:	2800      	cmp	r0, #0
 800626c:	d1ec      	bne.n	8006248 <__ieee754_pow+0x40>
 800626e:	4a7c      	ldr	r2, [pc, #496]	; (8006460 <__ieee754_pow+0x258>)
 8006270:	4296      	cmp	r6, r2
 8006272:	dc02      	bgt.n	800627a <__ieee754_pow+0x72>
 8006274:	d10c      	bne.n	8006290 <__ieee754_pow+0x88>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <__ieee754_pow+0x88>
 800627a:	4b7a      	ldr	r3, [pc, #488]	; (8006464 <__ieee754_pow+0x25c>)
 800627c:	18eb      	adds	r3, r5, r3
 800627e:	433b      	orrs	r3, r7
 8006280:	d1e2      	bne.n	8006248 <__ieee754_pow+0x40>
 8006282:	2180      	movs	r1, #128	; 0x80
 8006284:	9803      	ldr	r0, [sp, #12]
 8006286:	0309      	lsls	r1, r1, #12
 8006288:	4048      	eors	r0, r1
 800628a:	0003      	movs	r3, r0
 800628c:	9a02      	ldr	r2, [sp, #8]
 800628e:	e7cf      	b.n	8006230 <__ieee754_pow+0x28>
 8006290:	2200      	movs	r2, #0
 8006292:	9206      	str	r2, [sp, #24]
 8006294:	2d00      	cmp	r5, #0
 8006296:	da69      	bge.n	800636c <__ieee754_pow+0x164>
 8006298:	4a73      	ldr	r2, [pc, #460]	; (8006468 <__ieee754_pow+0x260>)
 800629a:	4296      	cmp	r6, r2
 800629c:	dc64      	bgt.n	8006368 <__ieee754_pow+0x160>
 800629e:	4a73      	ldr	r2, [pc, #460]	; (800646c <__ieee754_pow+0x264>)
 80062a0:	4296      	cmp	r6, r2
 80062a2:	dd11      	ble.n	80062c8 <__ieee754_pow+0xc0>
 80062a4:	4972      	ldr	r1, [pc, #456]	; (8006470 <__ieee754_pow+0x268>)
 80062a6:	1532      	asrs	r2, r6, #20
 80062a8:	1852      	adds	r2, r2, r1
 80062aa:	2a14      	cmp	r2, #20
 80062ac:	dd3c      	ble.n	8006328 <__ieee754_pow+0x120>
 80062ae:	2134      	movs	r1, #52	; 0x34
 80062b0:	1a8a      	subs	r2, r1, r2
 80062b2:	9902      	ldr	r1, [sp, #8]
 80062b4:	40d1      	lsrs	r1, r2
 80062b6:	0008      	movs	r0, r1
 80062b8:	4090      	lsls	r0, r2
 80062ba:	4298      	cmp	r0, r3
 80062bc:	d104      	bne.n	80062c8 <__ieee754_pow+0xc0>
 80062be:	2201      	movs	r2, #1
 80062c0:	4011      	ands	r1, r2
 80062c2:	1892      	adds	r2, r2, r2
 80062c4:	1a52      	subs	r2, r2, r1
 80062c6:	9206      	str	r2, [sp, #24]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d03c      	beq.n	8006346 <__ieee754_pow+0x13e>
 80062cc:	0038      	movs	r0, r7
 80062ce:	0029      	movs	r1, r5
 80062d0:	f000 fd8b 	bl	8006dea <fabs>
 80062d4:	9000      	str	r0, [sp, #0]
 80062d6:	9101      	str	r1, [sp, #4]
 80062d8:	2f00      	cmp	r7, #0
 80062da:	d000      	beq.n	80062de <__ieee754_pow+0xd6>
 80062dc:	e094      	b.n	8006408 <__ieee754_pow+0x200>
 80062de:	2c00      	cmp	r4, #0
 80062e0:	d005      	beq.n	80062ee <__ieee754_pow+0xe6>
 80062e2:	4a64      	ldr	r2, [pc, #400]	; (8006474 <__ieee754_pow+0x26c>)
 80062e4:	00ab      	lsls	r3, r5, #2
 80062e6:	089b      	lsrs	r3, r3, #2
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d000      	beq.n	80062ee <__ieee754_pow+0xe6>
 80062ec:	e08c      	b.n	8006408 <__ieee754_pow+0x200>
 80062ee:	9b04      	ldr	r3, [sp, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	da07      	bge.n	8006304 <__ieee754_pow+0xfc>
 80062f4:	9a00      	ldr	r2, [sp, #0]
 80062f6:	9b01      	ldr	r3, [sp, #4]
 80062f8:	2000      	movs	r0, #0
 80062fa:	495e      	ldr	r1, [pc, #376]	; (8006474 <__ieee754_pow+0x26c>)
 80062fc:	f7fa fc10 	bl	8000b20 <__aeabi_ddiv>
 8006300:	9000      	str	r0, [sp, #0]
 8006302:	9101      	str	r1, [sp, #4]
 8006304:	9b08      	ldr	r3, [sp, #32]
 8006306:	2b00      	cmp	r3, #0
 8006308:	da55      	bge.n	80063b6 <__ieee754_pow+0x1ae>
 800630a:	4b56      	ldr	r3, [pc, #344]	; (8006464 <__ieee754_pow+0x25c>)
 800630c:	18e4      	adds	r4, r4, r3
 800630e:	9b06      	ldr	r3, [sp, #24]
 8006310:	431c      	orrs	r4, r3
 8006312:	d000      	beq.n	8006316 <__ieee754_pow+0x10e>
 8006314:	e06c      	b.n	80063f0 <__ieee754_pow+0x1e8>
 8006316:	9a00      	ldr	r2, [sp, #0]
 8006318:	9b01      	ldr	r3, [sp, #4]
 800631a:	0010      	movs	r0, r2
 800631c:	0019      	movs	r1, r3
 800631e:	f7fb fa6d 	bl	80017fc <__aeabi_dsub>
 8006322:	0002      	movs	r2, r0
 8006324:	000b      	movs	r3, r1
 8006326:	e01c      	b.n	8006362 <__ieee754_pow+0x15a>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1cf      	bne.n	80062cc <__ieee754_pow+0xc4>
 800632c:	3314      	adds	r3, #20
 800632e:	1a9a      	subs	r2, r3, r2
 8006330:	0033      	movs	r3, r6
 8006332:	4113      	asrs	r3, r2
 8006334:	0019      	movs	r1, r3
 8006336:	4091      	lsls	r1, r2
 8006338:	42b1      	cmp	r1, r6
 800633a:	d104      	bne.n	8006346 <__ieee754_pow+0x13e>
 800633c:	2201      	movs	r2, #1
 800633e:	4013      	ands	r3, r2
 8006340:	1892      	adds	r2, r2, r2
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	9306      	str	r3, [sp, #24]
 8006346:	4b4b      	ldr	r3, [pc, #300]	; (8006474 <__ieee754_pow+0x26c>)
 8006348:	429e      	cmp	r6, r3
 800634a:	d138      	bne.n	80063be <__ieee754_pow+0x1b6>
 800634c:	0038      	movs	r0, r7
 800634e:	0029      	movs	r1, r5
 8006350:	9b04      	ldr	r3, [sp, #16]
 8006352:	9000      	str	r0, [sp, #0]
 8006354:	9101      	str	r1, [sp, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	da2d      	bge.n	80063b6 <__ieee754_pow+0x1ae>
 800635a:	003a      	movs	r2, r7
 800635c:	002b      	movs	r3, r5
 800635e:	2000      	movs	r0, #0
 8006360:	4944      	ldr	r1, [pc, #272]	; (8006474 <__ieee754_pow+0x26c>)
 8006362:	f7fa fbdd 	bl	8000b20 <__aeabi_ddiv>
 8006366:	e775      	b.n	8006254 <__ieee754_pow+0x4c>
 8006368:	2202      	movs	r2, #2
 800636a:	9206      	str	r2, [sp, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1ad      	bne.n	80062cc <__ieee754_pow+0xc4>
 8006370:	4b3b      	ldr	r3, [pc, #236]	; (8006460 <__ieee754_pow+0x258>)
 8006372:	429e      	cmp	r6, r3
 8006374:	d1e7      	bne.n	8006346 <__ieee754_pow+0x13e>
 8006376:	4b3b      	ldr	r3, [pc, #236]	; (8006464 <__ieee754_pow+0x25c>)
 8006378:	18e3      	adds	r3, r4, r3
 800637a:	431f      	orrs	r7, r3
 800637c:	d101      	bne.n	8006382 <__ieee754_pow+0x17a>
 800637e:	f000 fc15 	bl	8006bac <__ieee754_pow+0x9a4>
 8006382:	4b3a      	ldr	r3, [pc, #232]	; (800646c <__ieee754_pow+0x264>)
 8006384:	429c      	cmp	r4, r3
 8006386:	dd09      	ble.n	800639c <__ieee754_pow+0x194>
 8006388:	9b04      	ldr	r3, [sp, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	da01      	bge.n	8006392 <__ieee754_pow+0x18a>
 800638e:	f000 fc11 	bl	8006bb4 <__ieee754_pow+0x9ac>
 8006392:	9b02      	ldr	r3, [sp, #8]
 8006394:	9c03      	ldr	r4, [sp, #12]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	9401      	str	r4, [sp, #4]
 800639a:	e00c      	b.n	80063b6 <__ieee754_pow+0x1ae>
 800639c:	9b04      	ldr	r3, [sp, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	db01      	blt.n	80063a6 <__ieee754_pow+0x19e>
 80063a2:	f000 fc07 	bl	8006bb4 <__ieee754_pow+0x9ac>
 80063a6:	2280      	movs	r2, #128	; 0x80
 80063a8:	0612      	lsls	r2, r2, #24
 80063aa:	4694      	mov	ip, r2
 80063ac:	9b02      	ldr	r3, [sp, #8]
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	9b03      	ldr	r3, [sp, #12]
 80063b2:	4463      	add	r3, ip
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	9800      	ldr	r0, [sp, #0]
 80063b8:	9901      	ldr	r1, [sp, #4]
 80063ba:	b015      	add	sp, #84	; 0x54
 80063bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063be:	2380      	movs	r3, #128	; 0x80
 80063c0:	9a04      	ldr	r2, [sp, #16]
 80063c2:	05db      	lsls	r3, r3, #23
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d106      	bne.n	80063d6 <__ieee754_pow+0x1ce>
 80063c8:	003a      	movs	r2, r7
 80063ca:	002b      	movs	r3, r5
 80063cc:	0038      	movs	r0, r7
 80063ce:	0029      	movs	r1, r5
 80063d0:	f7fa ffa8 	bl	8001324 <__aeabi_dmul>
 80063d4:	e73e      	b.n	8006254 <__ieee754_pow+0x4c>
 80063d6:	4b28      	ldr	r3, [pc, #160]	; (8006478 <__ieee754_pow+0x270>)
 80063d8:	9a04      	ldr	r2, [sp, #16]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d000      	beq.n	80063e0 <__ieee754_pow+0x1d8>
 80063de:	e775      	b.n	80062cc <__ieee754_pow+0xc4>
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	da00      	bge.n	80063e6 <__ieee754_pow+0x1de>
 80063e4:	e772      	b.n	80062cc <__ieee754_pow+0xc4>
 80063e6:	0038      	movs	r0, r7
 80063e8:	0029      	movs	r1, r5
 80063ea:	f000 fc17 	bl	8006c1c <__ieee754_sqrt>
 80063ee:	e731      	b.n	8006254 <__ieee754_pow+0x4c>
 80063f0:	9b06      	ldr	r3, [sp, #24]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d1df      	bne.n	80063b6 <__ieee754_pow+0x1ae>
 80063f6:	9800      	ldr	r0, [sp, #0]
 80063f8:	2180      	movs	r1, #128	; 0x80
 80063fa:	0002      	movs	r2, r0
 80063fc:	9801      	ldr	r0, [sp, #4]
 80063fe:	0609      	lsls	r1, r1, #24
 8006400:	1843      	adds	r3, r0, r1
 8006402:	9200      	str	r2, [sp, #0]
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	e7d6      	b.n	80063b6 <__ieee754_pow+0x1ae>
 8006408:	0feb      	lsrs	r3, r5, #31
 800640a:	3b01      	subs	r3, #1
 800640c:	930e      	str	r3, [sp, #56]	; 0x38
 800640e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006410:	9b06      	ldr	r3, [sp, #24]
 8006412:	4313      	orrs	r3, r2
 8006414:	d104      	bne.n	8006420 <__ieee754_pow+0x218>
 8006416:	003a      	movs	r2, r7
 8006418:	002b      	movs	r3, r5
 800641a:	0038      	movs	r0, r7
 800641c:	0029      	movs	r1, r5
 800641e:	e77e      	b.n	800631e <__ieee754_pow+0x116>
 8006420:	4b16      	ldr	r3, [pc, #88]	; (800647c <__ieee754_pow+0x274>)
 8006422:	429e      	cmp	r6, r3
 8006424:	dc00      	bgt.n	8006428 <__ieee754_pow+0x220>
 8006426:	e0ef      	b.n	8006608 <__ieee754_pow+0x400>
 8006428:	4b15      	ldr	r3, [pc, #84]	; (8006480 <__ieee754_pow+0x278>)
 800642a:	429e      	cmp	r6, r3
 800642c:	dd09      	ble.n	8006442 <__ieee754_pow+0x23a>
 800642e:	4b0f      	ldr	r3, [pc, #60]	; (800646c <__ieee754_pow+0x264>)
 8006430:	429c      	cmp	r4, r3
 8006432:	dc0c      	bgt.n	800644e <__ieee754_pow+0x246>
 8006434:	9b04      	ldr	r3, [sp, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	da0c      	bge.n	8006454 <__ieee754_pow+0x24c>
 800643a:	2000      	movs	r0, #0
 800643c:	f000 fcce 	bl	8006ddc <__math_oflow>
 8006440:	e708      	b.n	8006254 <__ieee754_pow+0x4c>
 8006442:	4b10      	ldr	r3, [pc, #64]	; (8006484 <__ieee754_pow+0x27c>)
 8006444:	429c      	cmp	r4, r3
 8006446:	ddf5      	ble.n	8006434 <__ieee754_pow+0x22c>
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <__ieee754_pow+0x26c>)
 800644a:	429c      	cmp	r4, r3
 800644c:	dd1c      	ble.n	8006488 <__ieee754_pow+0x280>
 800644e:	9b04      	ldr	r3, [sp, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	dcf2      	bgt.n	800643a <__ieee754_pow+0x232>
 8006454:	2000      	movs	r0, #0
 8006456:	f000 fcba 	bl	8006dce <__math_uflow>
 800645a:	e6fb      	b.n	8006254 <__ieee754_pow+0x4c>
 800645c:	fff00000 	.word	0xfff00000
 8006460:	7ff00000 	.word	0x7ff00000
 8006464:	c0100000 	.word	0xc0100000
 8006468:	433fffff 	.word	0x433fffff
 800646c:	3fefffff 	.word	0x3fefffff
 8006470:	fffffc01 	.word	0xfffffc01
 8006474:	3ff00000 	.word	0x3ff00000
 8006478:	3fe00000 	.word	0x3fe00000
 800647c:	41e00000 	.word	0x41e00000
 8006480:	43f00000 	.word	0x43f00000
 8006484:	3feffffe 	.word	0x3feffffe
 8006488:	2200      	movs	r2, #0
 800648a:	9800      	ldr	r0, [sp, #0]
 800648c:	9901      	ldr	r1, [sp, #4]
 800648e:	4b52      	ldr	r3, [pc, #328]	; (80065d8 <__ieee754_pow+0x3d0>)
 8006490:	f7fb f9b4 	bl	80017fc <__aeabi_dsub>
 8006494:	22c0      	movs	r2, #192	; 0xc0
 8006496:	4b51      	ldr	r3, [pc, #324]	; (80065dc <__ieee754_pow+0x3d4>)
 8006498:	05d2      	lsls	r2, r2, #23
 800649a:	0004      	movs	r4, r0
 800649c:	000d      	movs	r5, r1
 800649e:	f7fa ff41 	bl	8001324 <__aeabi_dmul>
 80064a2:	4a4f      	ldr	r2, [pc, #316]	; (80065e0 <__ieee754_pow+0x3d8>)
 80064a4:	9000      	str	r0, [sp, #0]
 80064a6:	9101      	str	r1, [sp, #4]
 80064a8:	4b4e      	ldr	r3, [pc, #312]	; (80065e4 <__ieee754_pow+0x3dc>)
 80064aa:	0020      	movs	r0, r4
 80064ac:	0029      	movs	r1, r5
 80064ae:	f7fa ff39 	bl	8001324 <__aeabi_dmul>
 80064b2:	2200      	movs	r2, #0
 80064b4:	9004      	str	r0, [sp, #16]
 80064b6:	9105      	str	r1, [sp, #20]
 80064b8:	4b4b      	ldr	r3, [pc, #300]	; (80065e8 <__ieee754_pow+0x3e0>)
 80064ba:	0020      	movs	r0, r4
 80064bc:	0029      	movs	r1, r5
 80064be:	f7fa ff31 	bl	8001324 <__aeabi_dmul>
 80064c2:	0002      	movs	r2, r0
 80064c4:	000b      	movs	r3, r1
 80064c6:	4849      	ldr	r0, [pc, #292]	; (80065ec <__ieee754_pow+0x3e4>)
 80064c8:	4949      	ldr	r1, [pc, #292]	; (80065f0 <__ieee754_pow+0x3e8>)
 80064ca:	f7fb f997 	bl	80017fc <__aeabi_dsub>
 80064ce:	0022      	movs	r2, r4
 80064d0:	002b      	movs	r3, r5
 80064d2:	f7fa ff27 	bl	8001324 <__aeabi_dmul>
 80064d6:	0002      	movs	r2, r0
 80064d8:	000b      	movs	r3, r1
 80064da:	2000      	movs	r0, #0
 80064dc:	4945      	ldr	r1, [pc, #276]	; (80065f4 <__ieee754_pow+0x3ec>)
 80064de:	f7fb f98d 	bl	80017fc <__aeabi_dsub>
 80064e2:	0022      	movs	r2, r4
 80064e4:	0006      	movs	r6, r0
 80064e6:	000f      	movs	r7, r1
 80064e8:	002b      	movs	r3, r5
 80064ea:	0020      	movs	r0, r4
 80064ec:	0029      	movs	r1, r5
 80064ee:	f7fa ff19 	bl	8001324 <__aeabi_dmul>
 80064f2:	0002      	movs	r2, r0
 80064f4:	000b      	movs	r3, r1
 80064f6:	0030      	movs	r0, r6
 80064f8:	0039      	movs	r1, r7
 80064fa:	f7fa ff13 	bl	8001324 <__aeabi_dmul>
 80064fe:	4a3e      	ldr	r2, [pc, #248]	; (80065f8 <__ieee754_pow+0x3f0>)
 8006500:	4b36      	ldr	r3, [pc, #216]	; (80065dc <__ieee754_pow+0x3d4>)
 8006502:	f7fa ff0f 	bl	8001324 <__aeabi_dmul>
 8006506:	0002      	movs	r2, r0
 8006508:	000b      	movs	r3, r1
 800650a:	9804      	ldr	r0, [sp, #16]
 800650c:	9905      	ldr	r1, [sp, #20]
 800650e:	f7fb f975 	bl	80017fc <__aeabi_dsub>
 8006512:	0002      	movs	r2, r0
 8006514:	000b      	movs	r3, r1
 8006516:	0004      	movs	r4, r0
 8006518:	000d      	movs	r5, r1
 800651a:	9800      	ldr	r0, [sp, #0]
 800651c:	9901      	ldr	r1, [sp, #4]
 800651e:	f7f9 ffc3 	bl	80004a8 <__aeabi_dadd>
 8006522:	9a00      	ldr	r2, [sp, #0]
 8006524:	9b01      	ldr	r3, [sp, #4]
 8006526:	2000      	movs	r0, #0
 8006528:	000f      	movs	r7, r1
 800652a:	0006      	movs	r6, r0
 800652c:	f7fb f966 	bl	80017fc <__aeabi_dsub>
 8006530:	0002      	movs	r2, r0
 8006532:	000b      	movs	r3, r1
 8006534:	0020      	movs	r0, r4
 8006536:	0029      	movs	r1, r5
 8006538:	f7fb f960 	bl	80017fc <__aeabi_dsub>
 800653c:	9b06      	ldr	r3, [sp, #24]
 800653e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006540:	3b01      	subs	r3, #1
 8006542:	9004      	str	r0, [sp, #16]
 8006544:	9105      	str	r1, [sp, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	d000      	beq.n	800654c <__ieee754_pow+0x344>
 800654a:	e1db      	b.n	8006904 <__ieee754_pow+0x6fc>
 800654c:	2300      	movs	r3, #0
 800654e:	4c2b      	ldr	r4, [pc, #172]	; (80065fc <__ieee754_pow+0x3f4>)
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	9401      	str	r4, [sp, #4]
 8006554:	9c02      	ldr	r4, [sp, #8]
 8006556:	9d03      	ldr	r5, [sp, #12]
 8006558:	9802      	ldr	r0, [sp, #8]
 800655a:	9903      	ldr	r1, [sp, #12]
 800655c:	2400      	movs	r4, #0
 800655e:	002b      	movs	r3, r5
 8006560:	0022      	movs	r2, r4
 8006562:	f7fb f94b 	bl	80017fc <__aeabi_dsub>
 8006566:	0032      	movs	r2, r6
 8006568:	003b      	movs	r3, r7
 800656a:	f7fa fedb 	bl	8001324 <__aeabi_dmul>
 800656e:	9a02      	ldr	r2, [sp, #8]
 8006570:	9b03      	ldr	r3, [sp, #12]
 8006572:	9006      	str	r0, [sp, #24]
 8006574:	9107      	str	r1, [sp, #28]
 8006576:	9804      	ldr	r0, [sp, #16]
 8006578:	9905      	ldr	r1, [sp, #20]
 800657a:	f7fa fed3 	bl	8001324 <__aeabi_dmul>
 800657e:	0002      	movs	r2, r0
 8006580:	000b      	movs	r3, r1
 8006582:	9806      	ldr	r0, [sp, #24]
 8006584:	9907      	ldr	r1, [sp, #28]
 8006586:	f7f9 ff8f 	bl	80004a8 <__aeabi_dadd>
 800658a:	0022      	movs	r2, r4
 800658c:	002b      	movs	r3, r5
 800658e:	9004      	str	r0, [sp, #16]
 8006590:	9105      	str	r1, [sp, #20]
 8006592:	0030      	movs	r0, r6
 8006594:	0039      	movs	r1, r7
 8006596:	f7fa fec5 	bl	8001324 <__aeabi_dmul>
 800659a:	0006      	movs	r6, r0
 800659c:	000f      	movs	r7, r1
 800659e:	000b      	movs	r3, r1
 80065a0:	0002      	movs	r2, r0
 80065a2:	9804      	ldr	r0, [sp, #16]
 80065a4:	9905      	ldr	r1, [sp, #20]
 80065a6:	9606      	str	r6, [sp, #24]
 80065a8:	9707      	str	r7, [sp, #28]
 80065aa:	f7f9 ff7d 	bl	80004a8 <__aeabi_dadd>
 80065ae:	4b14      	ldr	r3, [pc, #80]	; (8006600 <__ieee754_pow+0x3f8>)
 80065b0:	0005      	movs	r5, r0
 80065b2:	000c      	movs	r4, r1
 80065b4:	9108      	str	r1, [sp, #32]
 80065b6:	4299      	cmp	r1, r3
 80065b8:	dc00      	bgt.n	80065bc <__ieee754_pow+0x3b4>
 80065ba:	e2d6      	b.n	8006b6a <__ieee754_pow+0x962>
 80065bc:	4b11      	ldr	r3, [pc, #68]	; (8006604 <__ieee754_pow+0x3fc>)
 80065be:	18cb      	adds	r3, r1, r3
 80065c0:	4303      	orrs	r3, r0
 80065c2:	d100      	bne.n	80065c6 <__ieee754_pow+0x3be>
 80065c4:	e1d8      	b.n	8006978 <__ieee754_pow+0x770>
 80065c6:	9800      	ldr	r0, [sp, #0]
 80065c8:	9901      	ldr	r1, [sp, #4]
 80065ca:	2300      	movs	r3, #0
 80065cc:	2200      	movs	r2, #0
 80065ce:	f7f9 ff25 	bl	800041c <__aeabi_dcmplt>
 80065d2:	1e43      	subs	r3, r0, #1
 80065d4:	4198      	sbcs	r0, r3
 80065d6:	e731      	b.n	800643c <__ieee754_pow+0x234>
 80065d8:	3ff00000 	.word	0x3ff00000
 80065dc:	3ff71547 	.word	0x3ff71547
 80065e0:	f85ddf44 	.word	0xf85ddf44
 80065e4:	3e54ae0b 	.word	0x3e54ae0b
 80065e8:	3fd00000 	.word	0x3fd00000
 80065ec:	55555555 	.word	0x55555555
 80065f0:	3fd55555 	.word	0x3fd55555
 80065f4:	3fe00000 	.word	0x3fe00000
 80065f8:	652b82fe 	.word	0x652b82fe
 80065fc:	bff00000 	.word	0xbff00000
 8006600:	408fffff 	.word	0x408fffff
 8006604:	bf700000 	.word	0xbf700000
 8006608:	4bc0      	ldr	r3, [pc, #768]	; (800690c <__ieee754_pow+0x704>)
 800660a:	2200      	movs	r2, #0
 800660c:	422b      	tst	r3, r5
 800660e:	d10a      	bne.n	8006626 <__ieee754_pow+0x41e>
 8006610:	9800      	ldr	r0, [sp, #0]
 8006612:	9901      	ldr	r1, [sp, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	4bbe      	ldr	r3, [pc, #760]	; (8006910 <__ieee754_pow+0x708>)
 8006618:	f7fa fe84 	bl	8001324 <__aeabi_dmul>
 800661c:	2235      	movs	r2, #53	; 0x35
 800661e:	9000      	str	r0, [sp, #0]
 8006620:	9101      	str	r1, [sp, #4]
 8006622:	9c01      	ldr	r4, [sp, #4]
 8006624:	4252      	negs	r2, r2
 8006626:	49bb      	ldr	r1, [pc, #748]	; (8006914 <__ieee754_pow+0x70c>)
 8006628:	1523      	asrs	r3, r4, #20
 800662a:	185b      	adds	r3, r3, r1
 800662c:	189b      	adds	r3, r3, r2
 800662e:	0324      	lsls	r4, r4, #12
 8006630:	4db9      	ldr	r5, [pc, #740]	; (8006918 <__ieee754_pow+0x710>)
 8006632:	930d      	str	r3, [sp, #52]	; 0x34
 8006634:	4bb9      	ldr	r3, [pc, #740]	; (800691c <__ieee754_pow+0x714>)
 8006636:	0b22      	lsrs	r2, r4, #12
 8006638:	4315      	orrs	r5, r2
 800663a:	2400      	movs	r4, #0
 800663c:	429a      	cmp	r2, r3
 800663e:	dd09      	ble.n	8006654 <__ieee754_pow+0x44c>
 8006640:	4bb7      	ldr	r3, [pc, #732]	; (8006920 <__ieee754_pow+0x718>)
 8006642:	3401      	adds	r4, #1
 8006644:	429a      	cmp	r2, r3
 8006646:	dd05      	ble.n	8006654 <__ieee754_pow+0x44c>
 8006648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800664a:	191b      	adds	r3, r3, r4
 800664c:	2400      	movs	r4, #0
 800664e:	930d      	str	r3, [sp, #52]	; 0x34
 8006650:	4bb4      	ldr	r3, [pc, #720]	; (8006924 <__ieee754_pow+0x71c>)
 8006652:	18ed      	adds	r5, r5, r3
 8006654:	00e3      	lsls	r3, r4, #3
 8006656:	930f      	str	r3, [sp, #60]	; 0x3c
 8006658:	4bb3      	ldr	r3, [pc, #716]	; (8006928 <__ieee754_pow+0x720>)
 800665a:	00e2      	lsls	r2, r4, #3
 800665c:	189b      	adds	r3, r3, r2
 800665e:	9800      	ldr	r0, [sp, #0]
 8006660:	9901      	ldr	r1, [sp, #4]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	0029      	movs	r1, r5
 8006668:	0006      	movs	r6, r0
 800666a:	920a      	str	r2, [sp, #40]	; 0x28
 800666c:	930b      	str	r3, [sp, #44]	; 0x2c
 800666e:	f7fb f8c5 	bl	80017fc <__aeabi_dsub>
 8006672:	0032      	movs	r2, r6
 8006674:	002b      	movs	r3, r5
 8006676:	9010      	str	r0, [sp, #64]	; 0x40
 8006678:	9111      	str	r1, [sp, #68]	; 0x44
 800667a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800667c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800667e:	f7f9 ff13 	bl	80004a8 <__aeabi_dadd>
 8006682:	0002      	movs	r2, r0
 8006684:	000b      	movs	r3, r1
 8006686:	2000      	movs	r0, #0
 8006688:	49a3      	ldr	r1, [pc, #652]	; (8006918 <__ieee754_pow+0x710>)
 800668a:	f7fa fa49 	bl	8000b20 <__aeabi_ddiv>
 800668e:	0002      	movs	r2, r0
 8006690:	000b      	movs	r3, r1
 8006692:	9012      	str	r0, [sp, #72]	; 0x48
 8006694:	9113      	str	r1, [sp, #76]	; 0x4c
 8006696:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006698:	9911      	ldr	r1, [sp, #68]	; 0x44
 800669a:	f7fa fe43 	bl	8001324 <__aeabi_dmul>
 800669e:	9008      	str	r0, [sp, #32]
 80066a0:	9109      	str	r1, [sp, #36]	; 0x24
 80066a2:	9a08      	ldr	r2, [sp, #32]
 80066a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a6:	2180      	movs	r1, #128	; 0x80
 80066a8:	9204      	str	r2, [sp, #16]
 80066aa:	9305      	str	r3, [sp, #20]
 80066ac:	2300      	movs	r3, #0
 80066ae:	002f      	movs	r7, r5
 80066b0:	0589      	lsls	r1, r1, #22
 80066b2:	106d      	asrs	r5, r5, #1
 80066b4:	430d      	orrs	r5, r1
 80066b6:	2180      	movs	r1, #128	; 0x80
 80066b8:	9304      	str	r3, [sp, #16]
 80066ba:	9a04      	ldr	r2, [sp, #16]
 80066bc:	9b05      	ldr	r3, [sp, #20]
 80066be:	9200      	str	r2, [sp, #0]
 80066c0:	9301      	str	r3, [sp, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	0309      	lsls	r1, r1, #12
 80066c6:	186d      	adds	r5, r5, r1
 80066c8:	04a1      	lsls	r1, r4, #18
 80066ca:	186b      	adds	r3, r5, r1
 80066cc:	9800      	ldr	r0, [sp, #0]
 80066ce:	9901      	ldr	r1, [sp, #4]
 80066d0:	0014      	movs	r4, r2
 80066d2:	001d      	movs	r5, r3
 80066d4:	f7fa fe26 	bl	8001324 <__aeabi_dmul>
 80066d8:	0002      	movs	r2, r0
 80066da:	000b      	movs	r3, r1
 80066dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80066de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80066e0:	f7fb f88c 	bl	80017fc <__aeabi_dsub>
 80066e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066e8:	9010      	str	r0, [sp, #64]	; 0x40
 80066ea:	9111      	str	r1, [sp, #68]	; 0x44
 80066ec:	0020      	movs	r0, r4
 80066ee:	0029      	movs	r1, r5
 80066f0:	f7fb f884 	bl	80017fc <__aeabi_dsub>
 80066f4:	0002      	movs	r2, r0
 80066f6:	000b      	movs	r3, r1
 80066f8:	0030      	movs	r0, r6
 80066fa:	0039      	movs	r1, r7
 80066fc:	f7fb f87e 	bl	80017fc <__aeabi_dsub>
 8006700:	9a00      	ldr	r2, [sp, #0]
 8006702:	9b01      	ldr	r3, [sp, #4]
 8006704:	f7fa fe0e 	bl	8001324 <__aeabi_dmul>
 8006708:	0002      	movs	r2, r0
 800670a:	000b      	movs	r3, r1
 800670c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800670e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006710:	f7fb f874 	bl	80017fc <__aeabi_dsub>
 8006714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006718:	f7fa fe04 	bl	8001324 <__aeabi_dmul>
 800671c:	9a08      	ldr	r2, [sp, #32]
 800671e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006720:	900a      	str	r0, [sp, #40]	; 0x28
 8006722:	910b      	str	r1, [sp, #44]	; 0x2c
 8006724:	0010      	movs	r0, r2
 8006726:	0019      	movs	r1, r3
 8006728:	f7fa fdfc 	bl	8001324 <__aeabi_dmul>
 800672c:	0006      	movs	r6, r0
 800672e:	000f      	movs	r7, r1
 8006730:	4a7e      	ldr	r2, [pc, #504]	; (800692c <__ieee754_pow+0x724>)
 8006732:	4b7f      	ldr	r3, [pc, #508]	; (8006930 <__ieee754_pow+0x728>)
 8006734:	f7fa fdf6 	bl	8001324 <__aeabi_dmul>
 8006738:	4a7e      	ldr	r2, [pc, #504]	; (8006934 <__ieee754_pow+0x72c>)
 800673a:	4b7f      	ldr	r3, [pc, #508]	; (8006938 <__ieee754_pow+0x730>)
 800673c:	f7f9 feb4 	bl	80004a8 <__aeabi_dadd>
 8006740:	0032      	movs	r2, r6
 8006742:	003b      	movs	r3, r7
 8006744:	f7fa fdee 	bl	8001324 <__aeabi_dmul>
 8006748:	4a7c      	ldr	r2, [pc, #496]	; (800693c <__ieee754_pow+0x734>)
 800674a:	4b7d      	ldr	r3, [pc, #500]	; (8006940 <__ieee754_pow+0x738>)
 800674c:	f7f9 feac 	bl	80004a8 <__aeabi_dadd>
 8006750:	0032      	movs	r2, r6
 8006752:	003b      	movs	r3, r7
 8006754:	f7fa fde6 	bl	8001324 <__aeabi_dmul>
 8006758:	4a7a      	ldr	r2, [pc, #488]	; (8006944 <__ieee754_pow+0x73c>)
 800675a:	4b7b      	ldr	r3, [pc, #492]	; (8006948 <__ieee754_pow+0x740>)
 800675c:	f7f9 fea4 	bl	80004a8 <__aeabi_dadd>
 8006760:	0032      	movs	r2, r6
 8006762:	003b      	movs	r3, r7
 8006764:	f7fa fdde 	bl	8001324 <__aeabi_dmul>
 8006768:	4a78      	ldr	r2, [pc, #480]	; (800694c <__ieee754_pow+0x744>)
 800676a:	4b79      	ldr	r3, [pc, #484]	; (8006950 <__ieee754_pow+0x748>)
 800676c:	f7f9 fe9c 	bl	80004a8 <__aeabi_dadd>
 8006770:	0032      	movs	r2, r6
 8006772:	003b      	movs	r3, r7
 8006774:	f7fa fdd6 	bl	8001324 <__aeabi_dmul>
 8006778:	4a76      	ldr	r2, [pc, #472]	; (8006954 <__ieee754_pow+0x74c>)
 800677a:	4b77      	ldr	r3, [pc, #476]	; (8006958 <__ieee754_pow+0x750>)
 800677c:	f7f9 fe94 	bl	80004a8 <__aeabi_dadd>
 8006780:	0032      	movs	r2, r6
 8006782:	0004      	movs	r4, r0
 8006784:	000d      	movs	r5, r1
 8006786:	003b      	movs	r3, r7
 8006788:	0030      	movs	r0, r6
 800678a:	0039      	movs	r1, r7
 800678c:	f7fa fdca 	bl	8001324 <__aeabi_dmul>
 8006790:	0002      	movs	r2, r0
 8006792:	000b      	movs	r3, r1
 8006794:	0020      	movs	r0, r4
 8006796:	0029      	movs	r1, r5
 8006798:	f7fa fdc4 	bl	8001324 <__aeabi_dmul>
 800679c:	9a00      	ldr	r2, [sp, #0]
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	0004      	movs	r4, r0
 80067a2:	000d      	movs	r5, r1
 80067a4:	9808      	ldr	r0, [sp, #32]
 80067a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067a8:	f7f9 fe7e 	bl	80004a8 <__aeabi_dadd>
 80067ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067b0:	f7fa fdb8 	bl	8001324 <__aeabi_dmul>
 80067b4:	0022      	movs	r2, r4
 80067b6:	002b      	movs	r3, r5
 80067b8:	f7f9 fe76 	bl	80004a8 <__aeabi_dadd>
 80067bc:	9a00      	ldr	r2, [sp, #0]
 80067be:	9b01      	ldr	r3, [sp, #4]
 80067c0:	9010      	str	r0, [sp, #64]	; 0x40
 80067c2:	9111      	str	r1, [sp, #68]	; 0x44
 80067c4:	0010      	movs	r0, r2
 80067c6:	0019      	movs	r1, r3
 80067c8:	f7fa fdac 	bl	8001324 <__aeabi_dmul>
 80067cc:	2200      	movs	r2, #0
 80067ce:	4b63      	ldr	r3, [pc, #396]	; (800695c <__ieee754_pow+0x754>)
 80067d0:	0004      	movs	r4, r0
 80067d2:	000d      	movs	r5, r1
 80067d4:	f7f9 fe68 	bl	80004a8 <__aeabi_dadd>
 80067d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067dc:	f7f9 fe64 	bl	80004a8 <__aeabi_dadd>
 80067e0:	2600      	movs	r6, #0
 80067e2:	000f      	movs	r7, r1
 80067e4:	0032      	movs	r2, r6
 80067e6:	000b      	movs	r3, r1
 80067e8:	9800      	ldr	r0, [sp, #0]
 80067ea:	9901      	ldr	r1, [sp, #4]
 80067ec:	f7fa fd9a 	bl	8001324 <__aeabi_dmul>
 80067f0:	2200      	movs	r2, #0
 80067f2:	9000      	str	r0, [sp, #0]
 80067f4:	9101      	str	r1, [sp, #4]
 80067f6:	4b59      	ldr	r3, [pc, #356]	; (800695c <__ieee754_pow+0x754>)
 80067f8:	0030      	movs	r0, r6
 80067fa:	0039      	movs	r1, r7
 80067fc:	f7fa fffe 	bl	80017fc <__aeabi_dsub>
 8006800:	0022      	movs	r2, r4
 8006802:	002b      	movs	r3, r5
 8006804:	f7fa fffa 	bl	80017fc <__aeabi_dsub>
 8006808:	0002      	movs	r2, r0
 800680a:	000b      	movs	r3, r1
 800680c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800680e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006810:	f7fa fff4 	bl	80017fc <__aeabi_dsub>
 8006814:	9a08      	ldr	r2, [sp, #32]
 8006816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006818:	f7fa fd84 	bl	8001324 <__aeabi_dmul>
 800681c:	0032      	movs	r2, r6
 800681e:	0004      	movs	r4, r0
 8006820:	000d      	movs	r5, r1
 8006822:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006826:	003b      	movs	r3, r7
 8006828:	f7fa fd7c 	bl	8001324 <__aeabi_dmul>
 800682c:	0002      	movs	r2, r0
 800682e:	000b      	movs	r3, r1
 8006830:	0020      	movs	r0, r4
 8006832:	0029      	movs	r1, r5
 8006834:	f7f9 fe38 	bl	80004a8 <__aeabi_dadd>
 8006838:	0004      	movs	r4, r0
 800683a:	000d      	movs	r5, r1
 800683c:	0002      	movs	r2, r0
 800683e:	000b      	movs	r3, r1
 8006840:	9800      	ldr	r0, [sp, #0]
 8006842:	9901      	ldr	r1, [sp, #4]
 8006844:	f7f9 fe30 	bl	80004a8 <__aeabi_dadd>
 8006848:	2600      	movs	r6, #0
 800684a:	22e0      	movs	r2, #224	; 0xe0
 800684c:	4b44      	ldr	r3, [pc, #272]	; (8006960 <__ieee754_pow+0x758>)
 800684e:	0612      	lsls	r2, r2, #24
 8006850:	0030      	movs	r0, r6
 8006852:	000f      	movs	r7, r1
 8006854:	f7fa fd66 	bl	8001324 <__aeabi_dmul>
 8006858:	9008      	str	r0, [sp, #32]
 800685a:	9109      	str	r1, [sp, #36]	; 0x24
 800685c:	9a00      	ldr	r2, [sp, #0]
 800685e:	9b01      	ldr	r3, [sp, #4]
 8006860:	0039      	movs	r1, r7
 8006862:	0030      	movs	r0, r6
 8006864:	f7fa ffca 	bl	80017fc <__aeabi_dsub>
 8006868:	0002      	movs	r2, r0
 800686a:	000b      	movs	r3, r1
 800686c:	0020      	movs	r0, r4
 800686e:	0029      	movs	r1, r5
 8006870:	f7fa ffc4 	bl	80017fc <__aeabi_dsub>
 8006874:	4a3b      	ldr	r2, [pc, #236]	; (8006964 <__ieee754_pow+0x75c>)
 8006876:	4b3a      	ldr	r3, [pc, #232]	; (8006960 <__ieee754_pow+0x758>)
 8006878:	f7fa fd54 	bl	8001324 <__aeabi_dmul>
 800687c:	4a3a      	ldr	r2, [pc, #232]	; (8006968 <__ieee754_pow+0x760>)
 800687e:	0004      	movs	r4, r0
 8006880:	000d      	movs	r5, r1
 8006882:	4b3a      	ldr	r3, [pc, #232]	; (800696c <__ieee754_pow+0x764>)
 8006884:	0039      	movs	r1, r7
 8006886:	0030      	movs	r0, r6
 8006888:	f7fa fd4c 	bl	8001324 <__aeabi_dmul>
 800688c:	0002      	movs	r2, r0
 800688e:	000b      	movs	r3, r1
 8006890:	0020      	movs	r0, r4
 8006892:	0029      	movs	r1, r5
 8006894:	f7f9 fe08 	bl	80004a8 <__aeabi_dadd>
 8006898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800689a:	4b35      	ldr	r3, [pc, #212]	; (8006970 <__ieee754_pow+0x768>)
 800689c:	189b      	adds	r3, r3, r2
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f7f9 fe01 	bl	80004a8 <__aeabi_dadd>
 80068a6:	900a      	str	r0, [sp, #40]	; 0x28
 80068a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80068aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80068ac:	f7fb fb8c 	bl	8001fc8 <__aeabi_i2d>
 80068b0:	0004      	movs	r4, r0
 80068b2:	000d      	movs	r5, r1
 80068b4:	9808      	ldr	r0, [sp, #32]
 80068b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068ba:	4b2e      	ldr	r3, [pc, #184]	; (8006974 <__ieee754_pow+0x76c>)
 80068bc:	189b      	adds	r3, r3, r2
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	9200      	str	r2, [sp, #0]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ca:	f7f9 fded 	bl	80004a8 <__aeabi_dadd>
 80068ce:	9a00      	ldr	r2, [sp, #0]
 80068d0:	9b01      	ldr	r3, [sp, #4]
 80068d2:	f7f9 fde9 	bl	80004a8 <__aeabi_dadd>
 80068d6:	0022      	movs	r2, r4
 80068d8:	002b      	movs	r3, r5
 80068da:	f7f9 fde5 	bl	80004a8 <__aeabi_dadd>
 80068de:	0022      	movs	r2, r4
 80068e0:	002b      	movs	r3, r5
 80068e2:	0030      	movs	r0, r6
 80068e4:	000f      	movs	r7, r1
 80068e6:	f7fa ff89 	bl	80017fc <__aeabi_dsub>
 80068ea:	9a00      	ldr	r2, [sp, #0]
 80068ec:	9b01      	ldr	r3, [sp, #4]
 80068ee:	f7fa ff85 	bl	80017fc <__aeabi_dsub>
 80068f2:	9a08      	ldr	r2, [sp, #32]
 80068f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f6:	f7fa ff81 	bl	80017fc <__aeabi_dsub>
 80068fa:	0002      	movs	r2, r0
 80068fc:	000b      	movs	r3, r1
 80068fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006900:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006902:	e619      	b.n	8006538 <__ieee754_pow+0x330>
 8006904:	2300      	movs	r3, #0
 8006906:	4c04      	ldr	r4, [pc, #16]	; (8006918 <__ieee754_pow+0x710>)
 8006908:	e622      	b.n	8006550 <__ieee754_pow+0x348>
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	7ff00000 	.word	0x7ff00000
 8006910:	43400000 	.word	0x43400000
 8006914:	fffffc01 	.word	0xfffffc01
 8006918:	3ff00000 	.word	0x3ff00000
 800691c:	0003988e 	.word	0x0003988e
 8006920:	000bb679 	.word	0x000bb679
 8006924:	fff00000 	.word	0xfff00000
 8006928:	08006fb0 	.word	0x08006fb0
 800692c:	4a454eef 	.word	0x4a454eef
 8006930:	3fca7e28 	.word	0x3fca7e28
 8006934:	93c9db65 	.word	0x93c9db65
 8006938:	3fcd864a 	.word	0x3fcd864a
 800693c:	a91d4101 	.word	0xa91d4101
 8006940:	3fd17460 	.word	0x3fd17460
 8006944:	518f264d 	.word	0x518f264d
 8006948:	3fd55555 	.word	0x3fd55555
 800694c:	db6fabff 	.word	0xdb6fabff
 8006950:	3fdb6db6 	.word	0x3fdb6db6
 8006954:	33333303 	.word	0x33333303
 8006958:	3fe33333 	.word	0x3fe33333
 800695c:	40080000 	.word	0x40080000
 8006960:	3feec709 	.word	0x3feec709
 8006964:	dc3a03fd 	.word	0xdc3a03fd
 8006968:	145b01f5 	.word	0x145b01f5
 800696c:	be3e2fe0 	.word	0xbe3e2fe0
 8006970:	08006fd0 	.word	0x08006fd0
 8006974:	08006fc0 	.word	0x08006fc0
 8006978:	4a90      	ldr	r2, [pc, #576]	; (8006bbc <__ieee754_pow+0x9b4>)
 800697a:	4b91      	ldr	r3, [pc, #580]	; (8006bc0 <__ieee754_pow+0x9b8>)
 800697c:	9804      	ldr	r0, [sp, #16]
 800697e:	9905      	ldr	r1, [sp, #20]
 8006980:	f7f9 fd92 	bl	80004a8 <__aeabi_dadd>
 8006984:	0032      	movs	r2, r6
 8006986:	9002      	str	r0, [sp, #8]
 8006988:	9103      	str	r1, [sp, #12]
 800698a:	003b      	movs	r3, r7
 800698c:	0028      	movs	r0, r5
 800698e:	0021      	movs	r1, r4
 8006990:	f7fa ff34 	bl	80017fc <__aeabi_dsub>
 8006994:	0002      	movs	r2, r0
 8006996:	000b      	movs	r3, r1
 8006998:	9802      	ldr	r0, [sp, #8]
 800699a:	9903      	ldr	r1, [sp, #12]
 800699c:	f7f9 fd52 	bl	8000444 <__aeabi_dcmpgt>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d000      	beq.n	80069a6 <__ieee754_pow+0x79e>
 80069a4:	e60f      	b.n	80065c6 <__ieee754_pow+0x3be>
 80069a6:	2100      	movs	r1, #0
 80069a8:	4a86      	ldr	r2, [pc, #536]	; (8006bc4 <__ieee754_pow+0x9bc>)
 80069aa:	0063      	lsls	r3, r4, #1
 80069ac:	085b      	lsrs	r3, r3, #1
 80069ae:	9102      	str	r1, [sp, #8]
 80069b0:	4293      	cmp	r3, r2
 80069b2:	dd25      	ble.n	8006a00 <__ieee754_pow+0x7f8>
 80069b4:	4a84      	ldr	r2, [pc, #528]	; (8006bc8 <__ieee754_pow+0x9c0>)
 80069b6:	151b      	asrs	r3, r3, #20
 80069b8:	189b      	adds	r3, r3, r2
 80069ba:	2280      	movs	r2, #128	; 0x80
 80069bc:	0352      	lsls	r2, r2, #13
 80069be:	4694      	mov	ip, r2
 80069c0:	411a      	asrs	r2, r3
 80069c2:	1914      	adds	r4, r2, r4
 80069c4:	4b81      	ldr	r3, [pc, #516]	; (8006bcc <__ieee754_pow+0x9c4>)
 80069c6:	0060      	lsls	r0, r4, #1
 80069c8:	4d81      	ldr	r5, [pc, #516]	; (8006bd0 <__ieee754_pow+0x9c8>)
 80069ca:	0d40      	lsrs	r0, r0, #21
 80069cc:	18c0      	adds	r0, r0, r3
 80069ce:	4105      	asrs	r5, r0
 80069d0:	0021      	movs	r1, r4
 80069d2:	43a9      	bics	r1, r5
 80069d4:	000b      	movs	r3, r1
 80069d6:	4661      	mov	r1, ip
 80069d8:	0324      	lsls	r4, r4, #12
 80069da:	0b24      	lsrs	r4, r4, #12
 80069dc:	4321      	orrs	r1, r4
 80069de:	2414      	movs	r4, #20
 80069e0:	1a20      	subs	r0, r4, r0
 80069e2:	4101      	asrs	r1, r0
 80069e4:	9102      	str	r1, [sp, #8]
 80069e6:	9908      	ldr	r1, [sp, #32]
 80069e8:	2200      	movs	r2, #0
 80069ea:	2900      	cmp	r1, #0
 80069ec:	da02      	bge.n	80069f4 <__ieee754_pow+0x7ec>
 80069ee:	9902      	ldr	r1, [sp, #8]
 80069f0:	4249      	negs	r1, r1
 80069f2:	9102      	str	r1, [sp, #8]
 80069f4:	0030      	movs	r0, r6
 80069f6:	0039      	movs	r1, r7
 80069f8:	f7fa ff00 	bl	80017fc <__aeabi_dsub>
 80069fc:	9006      	str	r0, [sp, #24]
 80069fe:	9107      	str	r1, [sp, #28]
 8006a00:	9a04      	ldr	r2, [sp, #16]
 8006a02:	9b05      	ldr	r3, [sp, #20]
 8006a04:	9806      	ldr	r0, [sp, #24]
 8006a06:	9907      	ldr	r1, [sp, #28]
 8006a08:	2600      	movs	r6, #0
 8006a0a:	f7f9 fd4d 	bl	80004a8 <__aeabi_dadd>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	0030      	movs	r0, r6
 8006a12:	4b70      	ldr	r3, [pc, #448]	; (8006bd4 <__ieee754_pow+0x9cc>)
 8006a14:	000f      	movs	r7, r1
 8006a16:	f7fa fc85 	bl	8001324 <__aeabi_dmul>
 8006a1a:	9a06      	ldr	r2, [sp, #24]
 8006a1c:	9b07      	ldr	r3, [sp, #28]
 8006a1e:	9008      	str	r0, [sp, #32]
 8006a20:	9109      	str	r1, [sp, #36]	; 0x24
 8006a22:	0030      	movs	r0, r6
 8006a24:	0039      	movs	r1, r7
 8006a26:	f7fa fee9 	bl	80017fc <__aeabi_dsub>
 8006a2a:	0002      	movs	r2, r0
 8006a2c:	000b      	movs	r3, r1
 8006a2e:	9804      	ldr	r0, [sp, #16]
 8006a30:	9905      	ldr	r1, [sp, #20]
 8006a32:	f7fa fee3 	bl	80017fc <__aeabi_dsub>
 8006a36:	4a68      	ldr	r2, [pc, #416]	; (8006bd8 <__ieee754_pow+0x9d0>)
 8006a38:	4b68      	ldr	r3, [pc, #416]	; (8006bdc <__ieee754_pow+0x9d4>)
 8006a3a:	f7fa fc73 	bl	8001324 <__aeabi_dmul>
 8006a3e:	4a68      	ldr	r2, [pc, #416]	; (8006be0 <__ieee754_pow+0x9d8>)
 8006a40:	0004      	movs	r4, r0
 8006a42:	000d      	movs	r5, r1
 8006a44:	0030      	movs	r0, r6
 8006a46:	0039      	movs	r1, r7
 8006a48:	4b66      	ldr	r3, [pc, #408]	; (8006be4 <__ieee754_pow+0x9dc>)
 8006a4a:	f7fa fc6b 	bl	8001324 <__aeabi_dmul>
 8006a4e:	0002      	movs	r2, r0
 8006a50:	000b      	movs	r3, r1
 8006a52:	0020      	movs	r0, r4
 8006a54:	0029      	movs	r1, r5
 8006a56:	f7f9 fd27 	bl	80004a8 <__aeabi_dadd>
 8006a5a:	0004      	movs	r4, r0
 8006a5c:	000d      	movs	r5, r1
 8006a5e:	0002      	movs	r2, r0
 8006a60:	000b      	movs	r3, r1
 8006a62:	9808      	ldr	r0, [sp, #32]
 8006a64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a66:	f7f9 fd1f 	bl	80004a8 <__aeabi_dadd>
 8006a6a:	9a08      	ldr	r2, [sp, #32]
 8006a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6e:	0006      	movs	r6, r0
 8006a70:	000f      	movs	r7, r1
 8006a72:	f7fa fec3 	bl	80017fc <__aeabi_dsub>
 8006a76:	0002      	movs	r2, r0
 8006a78:	000b      	movs	r3, r1
 8006a7a:	0020      	movs	r0, r4
 8006a7c:	0029      	movs	r1, r5
 8006a7e:	f7fa febd 	bl	80017fc <__aeabi_dsub>
 8006a82:	0032      	movs	r2, r6
 8006a84:	9004      	str	r0, [sp, #16]
 8006a86:	9105      	str	r1, [sp, #20]
 8006a88:	003b      	movs	r3, r7
 8006a8a:	0030      	movs	r0, r6
 8006a8c:	0039      	movs	r1, r7
 8006a8e:	f7fa fc49 	bl	8001324 <__aeabi_dmul>
 8006a92:	0004      	movs	r4, r0
 8006a94:	000d      	movs	r5, r1
 8006a96:	4a54      	ldr	r2, [pc, #336]	; (8006be8 <__ieee754_pow+0x9e0>)
 8006a98:	4b54      	ldr	r3, [pc, #336]	; (8006bec <__ieee754_pow+0x9e4>)
 8006a9a:	f7fa fc43 	bl	8001324 <__aeabi_dmul>
 8006a9e:	4a54      	ldr	r2, [pc, #336]	; (8006bf0 <__ieee754_pow+0x9e8>)
 8006aa0:	4b54      	ldr	r3, [pc, #336]	; (8006bf4 <__ieee754_pow+0x9ec>)
 8006aa2:	f7fa feab 	bl	80017fc <__aeabi_dsub>
 8006aa6:	0022      	movs	r2, r4
 8006aa8:	002b      	movs	r3, r5
 8006aaa:	f7fa fc3b 	bl	8001324 <__aeabi_dmul>
 8006aae:	4a52      	ldr	r2, [pc, #328]	; (8006bf8 <__ieee754_pow+0x9f0>)
 8006ab0:	4b52      	ldr	r3, [pc, #328]	; (8006bfc <__ieee754_pow+0x9f4>)
 8006ab2:	f7f9 fcf9 	bl	80004a8 <__aeabi_dadd>
 8006ab6:	0022      	movs	r2, r4
 8006ab8:	002b      	movs	r3, r5
 8006aba:	f7fa fc33 	bl	8001324 <__aeabi_dmul>
 8006abe:	4a50      	ldr	r2, [pc, #320]	; (8006c00 <__ieee754_pow+0x9f8>)
 8006ac0:	4b50      	ldr	r3, [pc, #320]	; (8006c04 <__ieee754_pow+0x9fc>)
 8006ac2:	f7fa fe9b 	bl	80017fc <__aeabi_dsub>
 8006ac6:	0022      	movs	r2, r4
 8006ac8:	002b      	movs	r3, r5
 8006aca:	f7fa fc2b 	bl	8001324 <__aeabi_dmul>
 8006ace:	4a4e      	ldr	r2, [pc, #312]	; (8006c08 <__ieee754_pow+0xa00>)
 8006ad0:	4b4e      	ldr	r3, [pc, #312]	; (8006c0c <__ieee754_pow+0xa04>)
 8006ad2:	f7f9 fce9 	bl	80004a8 <__aeabi_dadd>
 8006ad6:	0022      	movs	r2, r4
 8006ad8:	002b      	movs	r3, r5
 8006ada:	f7fa fc23 	bl	8001324 <__aeabi_dmul>
 8006ade:	0002      	movs	r2, r0
 8006ae0:	000b      	movs	r3, r1
 8006ae2:	0030      	movs	r0, r6
 8006ae4:	0039      	movs	r1, r7
 8006ae6:	f7fa fe89 	bl	80017fc <__aeabi_dsub>
 8006aea:	0004      	movs	r4, r0
 8006aec:	000d      	movs	r5, r1
 8006aee:	0002      	movs	r2, r0
 8006af0:	000b      	movs	r3, r1
 8006af2:	0030      	movs	r0, r6
 8006af4:	0039      	movs	r1, r7
 8006af6:	f7fa fc15 	bl	8001324 <__aeabi_dmul>
 8006afa:	2380      	movs	r3, #128	; 0x80
 8006afc:	9006      	str	r0, [sp, #24]
 8006afe:	9107      	str	r1, [sp, #28]
 8006b00:	2200      	movs	r2, #0
 8006b02:	0020      	movs	r0, r4
 8006b04:	0029      	movs	r1, r5
 8006b06:	05db      	lsls	r3, r3, #23
 8006b08:	f7fa fe78 	bl	80017fc <__aeabi_dsub>
 8006b0c:	0002      	movs	r2, r0
 8006b0e:	000b      	movs	r3, r1
 8006b10:	9806      	ldr	r0, [sp, #24]
 8006b12:	9907      	ldr	r1, [sp, #28]
 8006b14:	f7fa f804 	bl	8000b20 <__aeabi_ddiv>
 8006b18:	9a04      	ldr	r2, [sp, #16]
 8006b1a:	9b05      	ldr	r3, [sp, #20]
 8006b1c:	0004      	movs	r4, r0
 8006b1e:	000d      	movs	r5, r1
 8006b20:	0030      	movs	r0, r6
 8006b22:	0039      	movs	r1, r7
 8006b24:	f7fa fbfe 	bl	8001324 <__aeabi_dmul>
 8006b28:	9a04      	ldr	r2, [sp, #16]
 8006b2a:	9b05      	ldr	r3, [sp, #20]
 8006b2c:	f7f9 fcbc 	bl	80004a8 <__aeabi_dadd>
 8006b30:	0002      	movs	r2, r0
 8006b32:	000b      	movs	r3, r1
 8006b34:	0020      	movs	r0, r4
 8006b36:	0029      	movs	r1, r5
 8006b38:	f7fa fe60 	bl	80017fc <__aeabi_dsub>
 8006b3c:	0032      	movs	r2, r6
 8006b3e:	003b      	movs	r3, r7
 8006b40:	f7fa fe5c 	bl	80017fc <__aeabi_dsub>
 8006b44:	0002      	movs	r2, r0
 8006b46:	000b      	movs	r3, r1
 8006b48:	2000      	movs	r0, #0
 8006b4a:	4931      	ldr	r1, [pc, #196]	; (8006c10 <__ieee754_pow+0xa08>)
 8006b4c:	f7fa fe56 	bl	80017fc <__aeabi_dsub>
 8006b50:	9b02      	ldr	r3, [sp, #8]
 8006b52:	051b      	lsls	r3, r3, #20
 8006b54:	185b      	adds	r3, r3, r1
 8006b56:	151a      	asrs	r2, r3, #20
 8006b58:	2a00      	cmp	r2, #0
 8006b5a:	dc25      	bgt.n	8006ba8 <__ieee754_pow+0x9a0>
 8006b5c:	9a02      	ldr	r2, [sp, #8]
 8006b5e:	f000 f94f 	bl	8006e00 <scalbn>
 8006b62:	9a00      	ldr	r2, [sp, #0]
 8006b64:	9b01      	ldr	r3, [sp, #4]
 8006b66:	f7ff fc33 	bl	80063d0 <__ieee754_pow+0x1c8>
 8006b6a:	4a2a      	ldr	r2, [pc, #168]	; (8006c14 <__ieee754_pow+0xa0c>)
 8006b6c:	004b      	lsls	r3, r1, #1
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	4293      	cmp	r3, r2
 8006b72:	dc00      	bgt.n	8006b76 <__ieee754_pow+0x96e>
 8006b74:	e717      	b.n	80069a6 <__ieee754_pow+0x79e>
 8006b76:	4b28      	ldr	r3, [pc, #160]	; (8006c18 <__ieee754_pow+0xa10>)
 8006b78:	18cb      	adds	r3, r1, r3
 8006b7a:	4303      	orrs	r3, r0
 8006b7c:	d008      	beq.n	8006b90 <__ieee754_pow+0x988>
 8006b7e:	9800      	ldr	r0, [sp, #0]
 8006b80:	9901      	ldr	r1, [sp, #4]
 8006b82:	2300      	movs	r3, #0
 8006b84:	2200      	movs	r2, #0
 8006b86:	f7f9 fc49 	bl	800041c <__aeabi_dcmplt>
 8006b8a:	1e43      	subs	r3, r0, #1
 8006b8c:	4198      	sbcs	r0, r3
 8006b8e:	e462      	b.n	8006456 <__ieee754_pow+0x24e>
 8006b90:	0032      	movs	r2, r6
 8006b92:	003b      	movs	r3, r7
 8006b94:	f7fa fe32 	bl	80017fc <__aeabi_dsub>
 8006b98:	9a04      	ldr	r2, [sp, #16]
 8006b9a:	9b05      	ldr	r3, [sp, #20]
 8006b9c:	f7f9 fc5c 	bl	8000458 <__aeabi_dcmpge>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d100      	bne.n	8006ba6 <__ieee754_pow+0x99e>
 8006ba4:	e6ff      	b.n	80069a6 <__ieee754_pow+0x79e>
 8006ba6:	e7ea      	b.n	8006b7e <__ieee754_pow+0x976>
 8006ba8:	0019      	movs	r1, r3
 8006baa:	e7da      	b.n	8006b62 <__ieee754_pow+0x95a>
 8006bac:	2300      	movs	r3, #0
 8006bae:	4c18      	ldr	r4, [pc, #96]	; (8006c10 <__ieee754_pow+0xa08>)
 8006bb0:	f7ff fbf1 	bl	8006396 <__ieee754_pow+0x18e>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2400      	movs	r4, #0
 8006bb8:	f7ff fbed 	bl	8006396 <__ieee754_pow+0x18e>
 8006bbc:	652b82fe 	.word	0x652b82fe
 8006bc0:	3c971547 	.word	0x3c971547
 8006bc4:	3fe00000 	.word	0x3fe00000
 8006bc8:	fffffc02 	.word	0xfffffc02
 8006bcc:	fffffc01 	.word	0xfffffc01
 8006bd0:	000fffff 	.word	0x000fffff
 8006bd4:	3fe62e43 	.word	0x3fe62e43
 8006bd8:	fefa39ef 	.word	0xfefa39ef
 8006bdc:	3fe62e42 	.word	0x3fe62e42
 8006be0:	0ca86c39 	.word	0x0ca86c39
 8006be4:	be205c61 	.word	0xbe205c61
 8006be8:	72bea4d0 	.word	0x72bea4d0
 8006bec:	3e663769 	.word	0x3e663769
 8006bf0:	c5d26bf1 	.word	0xc5d26bf1
 8006bf4:	3ebbbd41 	.word	0x3ebbbd41
 8006bf8:	af25de2c 	.word	0xaf25de2c
 8006bfc:	3f11566a 	.word	0x3f11566a
 8006c00:	16bebd93 	.word	0x16bebd93
 8006c04:	3f66c16c 	.word	0x3f66c16c
 8006c08:	5555553e 	.word	0x5555553e
 8006c0c:	3fc55555 	.word	0x3fc55555
 8006c10:	3ff00000 	.word	0x3ff00000
 8006c14:	4090cbff 	.word	0x4090cbff
 8006c18:	3f6f3400 	.word	0x3f6f3400

08006c1c <__ieee754_sqrt>:
 8006c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c1e:	000b      	movs	r3, r1
 8006c20:	000c      	movs	r4, r1
 8006c22:	4956      	ldr	r1, [pc, #344]	; (8006d7c <__ieee754_sqrt+0x160>)
 8006c24:	0005      	movs	r5, r0
 8006c26:	0002      	movs	r2, r0
 8006c28:	0008      	movs	r0, r1
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	4020      	ands	r0, r4
 8006c2e:	4288      	cmp	r0, r1
 8006c30:	d10f      	bne.n	8006c52 <__ieee754_sqrt+0x36>
 8006c32:	0028      	movs	r0, r5
 8006c34:	0021      	movs	r1, r4
 8006c36:	f7fa fb75 	bl	8001324 <__aeabi_dmul>
 8006c3a:	0002      	movs	r2, r0
 8006c3c:	000b      	movs	r3, r1
 8006c3e:	0028      	movs	r0, r5
 8006c40:	0021      	movs	r1, r4
 8006c42:	f7f9 fc31 	bl	80004a8 <__aeabi_dadd>
 8006c46:	0005      	movs	r5, r0
 8006c48:	000c      	movs	r4, r1
 8006c4a:	0028      	movs	r0, r5
 8006c4c:	0021      	movs	r1, r4
 8006c4e:	b005      	add	sp, #20
 8006c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c52:	2c00      	cmp	r4, #0
 8006c54:	dc10      	bgt.n	8006c78 <__ieee754_sqrt+0x5c>
 8006c56:	0061      	lsls	r1, r4, #1
 8006c58:	0849      	lsrs	r1, r1, #1
 8006c5a:	4329      	orrs	r1, r5
 8006c5c:	d0f5      	beq.n	8006c4a <__ieee754_sqrt+0x2e>
 8006c5e:	2100      	movs	r1, #0
 8006c60:	428c      	cmp	r4, r1
 8006c62:	d100      	bne.n	8006c66 <__ieee754_sqrt+0x4a>
 8006c64:	e080      	b.n	8006d68 <__ieee754_sqrt+0x14c>
 8006c66:	0028      	movs	r0, r5
 8006c68:	0021      	movs	r1, r4
 8006c6a:	f7fa fdc7 	bl	80017fc <__aeabi_dsub>
 8006c6e:	0002      	movs	r2, r0
 8006c70:	000b      	movs	r3, r1
 8006c72:	f7f9 ff55 	bl	8000b20 <__aeabi_ddiv>
 8006c76:	e7e6      	b.n	8006c46 <__ieee754_sqrt+0x2a>
 8006c78:	1521      	asrs	r1, r4, #20
 8006c7a:	d075      	beq.n	8006d68 <__ieee754_sqrt+0x14c>
 8006c7c:	4840      	ldr	r0, [pc, #256]	; (8006d80 <__ieee754_sqrt+0x164>)
 8006c7e:	031b      	lsls	r3, r3, #12
 8006c80:	180c      	adds	r4, r1, r0
 8006c82:	2080      	movs	r0, #128	; 0x80
 8006c84:	0b1b      	lsrs	r3, r3, #12
 8006c86:	0340      	lsls	r0, r0, #13
 8006c88:	4303      	orrs	r3, r0
 8006c8a:	07c9      	lsls	r1, r1, #31
 8006c8c:	d403      	bmi.n	8006c96 <__ieee754_sqrt+0x7a>
 8006c8e:	0fd1      	lsrs	r1, r2, #31
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	185b      	adds	r3, r3, r1
 8006c94:	0052      	lsls	r2, r2, #1
 8006c96:	1061      	asrs	r1, r4, #1
 8006c98:	2400      	movs	r4, #0
 8006c9a:	9103      	str	r1, [sp, #12]
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	0fd1      	lsrs	r1, r2, #31
 8006ca0:	185b      	adds	r3, r3, r1
 8006ca2:	2180      	movs	r1, #128	; 0x80
 8006ca4:	2516      	movs	r5, #22
 8006ca6:	0020      	movs	r0, r4
 8006ca8:	0052      	lsls	r2, r2, #1
 8006caa:	0389      	lsls	r1, r1, #14
 8006cac:	1846      	adds	r6, r0, r1
 8006cae:	429e      	cmp	r6, r3
 8006cb0:	dc02      	bgt.n	8006cb8 <__ieee754_sqrt+0x9c>
 8006cb2:	1870      	adds	r0, r6, r1
 8006cb4:	1b9b      	subs	r3, r3, r6
 8006cb6:	1864      	adds	r4, r4, r1
 8006cb8:	0fd6      	lsrs	r6, r2, #31
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	3d01      	subs	r5, #1
 8006cbe:	18f3      	adds	r3, r6, r3
 8006cc0:	0052      	lsls	r2, r2, #1
 8006cc2:	0849      	lsrs	r1, r1, #1
 8006cc4:	2d00      	cmp	r5, #0
 8006cc6:	d1f1      	bne.n	8006cac <__ieee754_sqrt+0x90>
 8006cc8:	2620      	movs	r6, #32
 8006cca:	2780      	movs	r7, #128	; 0x80
 8006ccc:	0029      	movs	r1, r5
 8006cce:	9601      	str	r6, [sp, #4]
 8006cd0:	063f      	lsls	r7, r7, #24
 8006cd2:	197e      	adds	r6, r7, r5
 8006cd4:	46b4      	mov	ip, r6
 8006cd6:	4283      	cmp	r3, r0
 8006cd8:	dc02      	bgt.n	8006ce0 <__ieee754_sqrt+0xc4>
 8006cda:	d114      	bne.n	8006d06 <__ieee754_sqrt+0xea>
 8006cdc:	4296      	cmp	r6, r2
 8006cde:	d812      	bhi.n	8006d06 <__ieee754_sqrt+0xea>
 8006ce0:	4665      	mov	r5, ip
 8006ce2:	4666      	mov	r6, ip
 8006ce4:	19ed      	adds	r5, r5, r7
 8006ce6:	9002      	str	r0, [sp, #8]
 8006ce8:	2e00      	cmp	r6, #0
 8006cea:	da03      	bge.n	8006cf4 <__ieee754_sqrt+0xd8>
 8006cec:	43ee      	mvns	r6, r5
 8006cee:	0ff6      	lsrs	r6, r6, #31
 8006cf0:	1986      	adds	r6, r0, r6
 8006cf2:	9602      	str	r6, [sp, #8]
 8006cf4:	1a1b      	subs	r3, r3, r0
 8006cf6:	4562      	cmp	r2, ip
 8006cf8:	4180      	sbcs	r0, r0
 8006cfa:	4240      	negs	r0, r0
 8006cfc:	1a1b      	subs	r3, r3, r0
 8006cfe:	4660      	mov	r0, ip
 8006d00:	1a12      	subs	r2, r2, r0
 8006d02:	9802      	ldr	r0, [sp, #8]
 8006d04:	19c9      	adds	r1, r1, r7
 8006d06:	0fd6      	lsrs	r6, r2, #31
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	199b      	adds	r3, r3, r6
 8006d0c:	9e01      	ldr	r6, [sp, #4]
 8006d0e:	0052      	lsls	r2, r2, #1
 8006d10:	3e01      	subs	r6, #1
 8006d12:	087f      	lsrs	r7, r7, #1
 8006d14:	9601      	str	r6, [sp, #4]
 8006d16:	2e00      	cmp	r6, #0
 8006d18:	d1db      	bne.n	8006cd2 <__ieee754_sqrt+0xb6>
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	d003      	beq.n	8006d26 <__ieee754_sqrt+0x10a>
 8006d1e:	1c4b      	adds	r3, r1, #1
 8006d20:	d127      	bne.n	8006d72 <__ieee754_sqrt+0x156>
 8006d22:	0031      	movs	r1, r6
 8006d24:	3401      	adds	r4, #1
 8006d26:	4b17      	ldr	r3, [pc, #92]	; (8006d84 <__ieee754_sqrt+0x168>)
 8006d28:	1060      	asrs	r0, r4, #1
 8006d2a:	18c0      	adds	r0, r0, r3
 8006d2c:	0849      	lsrs	r1, r1, #1
 8006d2e:	07e3      	lsls	r3, r4, #31
 8006d30:	d502      	bpl.n	8006d38 <__ieee754_sqrt+0x11c>
 8006d32:	2380      	movs	r3, #128	; 0x80
 8006d34:	061b      	lsls	r3, r3, #24
 8006d36:	4319      	orrs	r1, r3
 8006d38:	9b03      	ldr	r3, [sp, #12]
 8006d3a:	000d      	movs	r5, r1
 8006d3c:	051c      	lsls	r4, r3, #20
 8006d3e:	1823      	adds	r3, r4, r0
 8006d40:	001c      	movs	r4, r3
 8006d42:	e782      	b.n	8006c4a <__ieee754_sqrt+0x2e>
 8006d44:	0ad3      	lsrs	r3, r2, #11
 8006d46:	3815      	subs	r0, #21
 8006d48:	0552      	lsls	r2, r2, #21
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0fa      	beq.n	8006d44 <__ieee754_sqrt+0x128>
 8006d4e:	2480      	movs	r4, #128	; 0x80
 8006d50:	0364      	lsls	r4, r4, #13
 8006d52:	4223      	tst	r3, r4
 8006d54:	d00a      	beq.n	8006d6c <__ieee754_sqrt+0x150>
 8006d56:	2420      	movs	r4, #32
 8006d58:	0016      	movs	r6, r2
 8006d5a:	1a64      	subs	r4, r4, r1
 8006d5c:	40e6      	lsrs	r6, r4
 8006d5e:	1e4d      	subs	r5, r1, #1
 8006d60:	408a      	lsls	r2, r1
 8006d62:	4333      	orrs	r3, r6
 8006d64:	1b41      	subs	r1, r0, r5
 8006d66:	e789      	b.n	8006c7c <__ieee754_sqrt+0x60>
 8006d68:	2000      	movs	r0, #0
 8006d6a:	e7ee      	b.n	8006d4a <__ieee754_sqrt+0x12e>
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	3101      	adds	r1, #1
 8006d70:	e7ef      	b.n	8006d52 <__ieee754_sqrt+0x136>
 8006d72:	2301      	movs	r3, #1
 8006d74:	3101      	adds	r1, #1
 8006d76:	4399      	bics	r1, r3
 8006d78:	e7d5      	b.n	8006d26 <__ieee754_sqrt+0x10a>
 8006d7a:	46c0      	nop			; (mov r8, r8)
 8006d7c:	7ff00000 	.word	0x7ff00000
 8006d80:	fffffc01 	.word	0xfffffc01
 8006d84:	3fe00000 	.word	0x3fe00000

08006d88 <with_errno>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	000d      	movs	r5, r1
 8006d8c:	0016      	movs	r6, r2
 8006d8e:	0004      	movs	r4, r0
 8006d90:	f7ff f99a 	bl	80060c8 <__errno>
 8006d94:	0029      	movs	r1, r5
 8006d96:	6006      	str	r6, [r0, #0]
 8006d98:	0020      	movs	r0, r4
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}

08006d9c <xflow>:
 8006d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d9e:	0015      	movs	r5, r2
 8006da0:	001c      	movs	r4, r3
 8006da2:	2800      	cmp	r0, #0
 8006da4:	d010      	beq.n	8006dc8 <xflow+0x2c>
 8006da6:	2380      	movs	r3, #128	; 0x80
 8006da8:	0010      	movs	r0, r2
 8006daa:	061b      	lsls	r3, r3, #24
 8006dac:	18e1      	adds	r1, r4, r3
 8006dae:	9000      	str	r0, [sp, #0]
 8006db0:	9101      	str	r1, [sp, #4]
 8006db2:	9a00      	ldr	r2, [sp, #0]
 8006db4:	9b01      	ldr	r3, [sp, #4]
 8006db6:	0028      	movs	r0, r5
 8006db8:	0021      	movs	r1, r4
 8006dba:	f7fa fab3 	bl	8001324 <__aeabi_dmul>
 8006dbe:	2222      	movs	r2, #34	; 0x22
 8006dc0:	f7ff ffe2 	bl	8006d88 <with_errno>
 8006dc4:	b003      	add	sp, #12
 8006dc6:	bd30      	pop	{r4, r5, pc}
 8006dc8:	0010      	movs	r0, r2
 8006dca:	0019      	movs	r1, r3
 8006dcc:	e7ef      	b.n	8006dae <xflow+0x12>

08006dce <__math_uflow>:
 8006dce:	2380      	movs	r3, #128	; 0x80
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	055b      	lsls	r3, r3, #21
 8006dd6:	f7ff ffe1 	bl	8006d9c <xflow>
 8006dda:	bd10      	pop	{r4, pc}

08006ddc <__math_oflow>:
 8006ddc:	23e0      	movs	r3, #224	; 0xe0
 8006dde:	b510      	push	{r4, lr}
 8006de0:	2200      	movs	r2, #0
 8006de2:	05db      	lsls	r3, r3, #23
 8006de4:	f7ff ffda 	bl	8006d9c <xflow>
 8006de8:	bd10      	pop	{r4, pc}

08006dea <fabs>:
 8006dea:	004b      	lsls	r3, r1, #1
 8006dec:	0859      	lsrs	r1, r3, #1
 8006dee:	4770      	bx	lr

08006df0 <finite>:
 8006df0:	4b02      	ldr	r3, [pc, #8]	; (8006dfc <finite+0xc>)
 8006df2:	0048      	lsls	r0, r1, #1
 8006df4:	0840      	lsrs	r0, r0, #1
 8006df6:	18c0      	adds	r0, r0, r3
 8006df8:	0fc0      	lsrs	r0, r0, #31
 8006dfa:	4770      	bx	lr
 8006dfc:	80100000 	.word	0x80100000

08006e00 <scalbn>:
 8006e00:	004b      	lsls	r3, r1, #1
 8006e02:	b570      	push	{r4, r5, r6, lr}
 8006e04:	0d5b      	lsrs	r3, r3, #21
 8006e06:	0014      	movs	r4, r2
 8006e08:	000a      	movs	r2, r1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10d      	bne.n	8006e2a <scalbn+0x2a>
 8006e0e:	004b      	lsls	r3, r1, #1
 8006e10:	085b      	lsrs	r3, r3, #1
 8006e12:	4303      	orrs	r3, r0
 8006e14:	d010      	beq.n	8006e38 <scalbn+0x38>
 8006e16:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <scalbn+0xb4>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f7fa fa83 	bl	8001324 <__aeabi_dmul>
 8006e1e:	4b26      	ldr	r3, [pc, #152]	; (8006eb8 <scalbn+0xb8>)
 8006e20:	429c      	cmp	r4, r3
 8006e22:	da0a      	bge.n	8006e3a <scalbn+0x3a>
 8006e24:	4a25      	ldr	r2, [pc, #148]	; (8006ebc <scalbn+0xbc>)
 8006e26:	4b26      	ldr	r3, [pc, #152]	; (8006ec0 <scalbn+0xc0>)
 8006e28:	e019      	b.n	8006e5e <scalbn+0x5e>
 8006e2a:	4d26      	ldr	r5, [pc, #152]	; (8006ec4 <scalbn+0xc4>)
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	d108      	bne.n	8006e42 <scalbn+0x42>
 8006e30:	0002      	movs	r2, r0
 8006e32:	000b      	movs	r3, r1
 8006e34:	f7f9 fb38 	bl	80004a8 <__aeabi_dadd>
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
 8006e3a:	000a      	movs	r2, r1
 8006e3c:	004b      	lsls	r3, r1, #1
 8006e3e:	0d5b      	lsrs	r3, r3, #21
 8006e40:	3b36      	subs	r3, #54	; 0x36
 8006e42:	4d21      	ldr	r5, [pc, #132]	; (8006ec8 <scalbn+0xc8>)
 8006e44:	18e3      	adds	r3, r4, r3
 8006e46:	42ab      	cmp	r3, r5
 8006e48:	dd0c      	ble.n	8006e64 <scalbn+0x64>
 8006e4a:	4c20      	ldr	r4, [pc, #128]	; (8006ecc <scalbn+0xcc>)
 8006e4c:	4d20      	ldr	r5, [pc, #128]	; (8006ed0 <scalbn+0xd0>)
 8006e4e:	2900      	cmp	r1, #0
 8006e50:	da01      	bge.n	8006e56 <scalbn+0x56>
 8006e52:	4c1e      	ldr	r4, [pc, #120]	; (8006ecc <scalbn+0xcc>)
 8006e54:	4d1f      	ldr	r5, [pc, #124]	; (8006ed4 <scalbn+0xd4>)
 8006e56:	0020      	movs	r0, r4
 8006e58:	0029      	movs	r1, r5
 8006e5a:	4a1c      	ldr	r2, [pc, #112]	; (8006ecc <scalbn+0xcc>)
 8006e5c:	4b1c      	ldr	r3, [pc, #112]	; (8006ed0 <scalbn+0xd0>)
 8006e5e:	f7fa fa61 	bl	8001324 <__aeabi_dmul>
 8006e62:	e7e9      	b.n	8006e38 <scalbn+0x38>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	dd05      	ble.n	8006e74 <scalbn+0x74>
 8006e68:	4c1b      	ldr	r4, [pc, #108]	; (8006ed8 <scalbn+0xd8>)
 8006e6a:	051b      	lsls	r3, r3, #20
 8006e6c:	4022      	ands	r2, r4
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	0011      	movs	r1, r2
 8006e72:	e7e1      	b.n	8006e38 <scalbn+0x38>
 8006e74:	001d      	movs	r5, r3
 8006e76:	3535      	adds	r5, #53	; 0x35
 8006e78:	da13      	bge.n	8006ea2 <scalbn+0xa2>
 8006e7a:	4a18      	ldr	r2, [pc, #96]	; (8006edc <scalbn+0xdc>)
 8006e7c:	0fcb      	lsrs	r3, r1, #31
 8006e7e:	4294      	cmp	r4, r2
 8006e80:	dd08      	ble.n	8006e94 <scalbn+0x94>
 8006e82:	4812      	ldr	r0, [pc, #72]	; (8006ecc <scalbn+0xcc>)
 8006e84:	4912      	ldr	r1, [pc, #72]	; (8006ed0 <scalbn+0xd0>)
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <scalbn+0x8e>
 8006e8a:	4810      	ldr	r0, [pc, #64]	; (8006ecc <scalbn+0xcc>)
 8006e8c:	4911      	ldr	r1, [pc, #68]	; (8006ed4 <scalbn+0xd4>)
 8006e8e:	4a0f      	ldr	r2, [pc, #60]	; (8006ecc <scalbn+0xcc>)
 8006e90:	4b0f      	ldr	r3, [pc, #60]	; (8006ed0 <scalbn+0xd0>)
 8006e92:	e7e4      	b.n	8006e5e <scalbn+0x5e>
 8006e94:	4809      	ldr	r0, [pc, #36]	; (8006ebc <scalbn+0xbc>)
 8006e96:	490a      	ldr	r1, [pc, #40]	; (8006ec0 <scalbn+0xc0>)
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0c3      	beq.n	8006e24 <scalbn+0x24>
 8006e9c:	4807      	ldr	r0, [pc, #28]	; (8006ebc <scalbn+0xbc>)
 8006e9e:	4910      	ldr	r1, [pc, #64]	; (8006ee0 <scalbn+0xe0>)
 8006ea0:	e7c0      	b.n	8006e24 <scalbn+0x24>
 8006ea2:	4c0d      	ldr	r4, [pc, #52]	; (8006ed8 <scalbn+0xd8>)
 8006ea4:	3336      	adds	r3, #54	; 0x36
 8006ea6:	4022      	ands	r2, r4
 8006ea8:	051b      	lsls	r3, r3, #20
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	0019      	movs	r1, r3
 8006eae:	2200      	movs	r2, #0
 8006eb0:	4b0c      	ldr	r3, [pc, #48]	; (8006ee4 <scalbn+0xe4>)
 8006eb2:	e7d4      	b.n	8006e5e <scalbn+0x5e>
 8006eb4:	43500000 	.word	0x43500000
 8006eb8:	ffff3cb0 	.word	0xffff3cb0
 8006ebc:	c2f8f359 	.word	0xc2f8f359
 8006ec0:	01a56e1f 	.word	0x01a56e1f
 8006ec4:	000007ff 	.word	0x000007ff
 8006ec8:	000007fe 	.word	0x000007fe
 8006ecc:	8800759c 	.word	0x8800759c
 8006ed0:	7e37e43c 	.word	0x7e37e43c
 8006ed4:	fe37e43c 	.word	0xfe37e43c
 8006ed8:	800fffff 	.word	0x800fffff
 8006edc:	0000c350 	.word	0x0000c350
 8006ee0:	81a56e1f 	.word	0x81a56e1f
 8006ee4:	3c900000 	.word	0x3c900000

08006ee8 <_init>:
 8006ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eee:	bc08      	pop	{r3}
 8006ef0:	469e      	mov	lr, r3
 8006ef2:	4770      	bx	lr

08006ef4 <_fini>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr
