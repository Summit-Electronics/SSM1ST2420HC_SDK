
1_AXIS_F091_Knikker_Demo_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f58  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007018  08007018  00017018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b8  080070b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080070b8  080070b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070b8  080070b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070b8  080070b8  000170b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070bc  080070bc  000170bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080070c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032e0  20000070  08007130  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003350  08007130  00023350  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009200  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b2f  00000000  00000000  000292db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0002ae10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000679  00000000  00000000  0002b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d4ec  00000000  00000000  0002bd11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000adc3  00000000  00000000  000491fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aaee8  00000000  00000000  00053fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002380  00000000  00000000  000feea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00101228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006ffc 	.word	0x08006ffc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08006ffc 	.word	0x08006ffc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f000 ff47 	bl	8001294 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fe97 	bl	8001144 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 ff39 	bl	8001294 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ff2f 	bl	8001294 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 febf 	bl	80011c8 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 feb5 	bl	80011c8 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_d2uiz>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	2200      	movs	r2, #0
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <__aeabi_d2uiz+0x38>)
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	f7ff ffef 	bl	8000458 <__aeabi_dcmpge>
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <__aeabi_d2uiz+0x1c>
 800047e:	0020      	movs	r0, r4
 8000480:	0029      	movs	r1, r5
 8000482:	f001 fdcd 	bl	8002020 <__aeabi_d2iz>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <__aeabi_d2uiz+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	0020      	movs	r0, r4
 800048e:	0029      	movs	r1, r5
 8000490:	f001 fa26 	bl	80018e0 <__aeabi_dsub>
 8000494:	f001 fdc4 	bl	8002020 <__aeabi_d2iz>
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	061b      	lsls	r3, r3, #24
 800049c:	469c      	mov	ip, r3
 800049e:	4460      	add	r0, ip
 80004a0:	e7f1      	b.n	8000486 <__aeabi_d2uiz+0x1a>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	41e00000 	.word	0x41e00000

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0004      	movs	r4, r0
 80004b2:	b5c0      	push	{r6, r7, lr}
 80004b4:	001f      	movs	r7, r3
 80004b6:	030b      	lsls	r3, r1, #12
 80004b8:	0010      	movs	r0, r2
 80004ba:	004e      	lsls	r6, r1, #1
 80004bc:	0a5b      	lsrs	r3, r3, #9
 80004be:	0fcd      	lsrs	r5, r1, #31
 80004c0:	0f61      	lsrs	r1, r4, #29
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	4319      	orrs	r1, r3
 80004c6:	00e3      	lsls	r3, r4, #3
 80004c8:	033c      	lsls	r4, r7, #12
 80004ca:	0fff      	lsrs	r7, r7, #31
 80004cc:	46bc      	mov	ip, r7
 80004ce:	0a64      	lsrs	r4, r4, #9
 80004d0:	0f47      	lsrs	r7, r0, #29
 80004d2:	4327      	orrs	r7, r4
 80004d4:	0d76      	lsrs	r6, r6, #21
 80004d6:	0d52      	lsrs	r2, r2, #21
 80004d8:	00c0      	lsls	r0, r0, #3
 80004da:	46b9      	mov	r9, r7
 80004dc:	4680      	mov	r8, r0
 80004de:	1ab7      	subs	r7, r6, r2
 80004e0:	4565      	cmp	r5, ip
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x3e>
 80004e4:	e09b      	b.n	800061e <__aeabi_dadd+0x176>
 80004e6:	2f00      	cmp	r7, #0
 80004e8:	dc00      	bgt.n	80004ec <__aeabi_dadd+0x44>
 80004ea:	e084      	b.n	80005f6 <__aeabi_dadd+0x14e>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_dadd+0x4a>
 80004f0:	e0be      	b.n	8000670 <__aeabi_dadd+0x1c8>
 80004f2:	4ac8      	ldr	r2, [pc, #800]	; (8000814 <__aeabi_dadd+0x36c>)
 80004f4:	4296      	cmp	r6, r2
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e124      	b.n	8000744 <__aeabi_dadd+0x29c>
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	464c      	mov	r4, r9
 80004fe:	0412      	lsls	r2, r2, #16
 8000500:	4314      	orrs	r4, r2
 8000502:	46a1      	mov	r9, r4
 8000504:	2f38      	cmp	r7, #56	; 0x38
 8000506:	dd00      	ble.n	800050a <__aeabi_dadd+0x62>
 8000508:	e167      	b.n	80007da <__aeabi_dadd+0x332>
 800050a:	2f1f      	cmp	r7, #31
 800050c:	dd00      	ble.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e1d6      	b.n	80008be <__aeabi_dadd+0x416>
 8000510:	2220      	movs	r2, #32
 8000512:	464c      	mov	r4, r9
 8000514:	1bd2      	subs	r2, r2, r7
 8000516:	4094      	lsls	r4, r2
 8000518:	46a2      	mov	sl, r4
 800051a:	4644      	mov	r4, r8
 800051c:	40fc      	lsrs	r4, r7
 800051e:	0020      	movs	r0, r4
 8000520:	4654      	mov	r4, sl
 8000522:	4304      	orrs	r4, r0
 8000524:	4640      	mov	r0, r8
 8000526:	4090      	lsls	r0, r2
 8000528:	1e42      	subs	r2, r0, #1
 800052a:	4190      	sbcs	r0, r2
 800052c:	464a      	mov	r2, r9
 800052e:	40fa      	lsrs	r2, r7
 8000530:	4304      	orrs	r4, r0
 8000532:	1a89      	subs	r1, r1, r2
 8000534:	1b1c      	subs	r4, r3, r4
 8000536:	42a3      	cmp	r3, r4
 8000538:	4192      	sbcs	r2, r2
 800053a:	4252      	negs	r2, r2
 800053c:	1a8b      	subs	r3, r1, r2
 800053e:	469a      	mov	sl, r3
 8000540:	4653      	mov	r3, sl
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	d400      	bmi.n	8000548 <__aeabi_dadd+0xa0>
 8000546:	e0d4      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000548:	4653      	mov	r3, sl
 800054a:	025a      	lsls	r2, r3, #9
 800054c:	0a53      	lsrs	r3, r2, #9
 800054e:	469a      	mov	sl, r3
 8000550:	4653      	mov	r3, sl
 8000552:	2b00      	cmp	r3, #0
 8000554:	d100      	bne.n	8000558 <__aeabi_dadd+0xb0>
 8000556:	e104      	b.n	8000762 <__aeabi_dadd+0x2ba>
 8000558:	4650      	mov	r0, sl
 800055a:	f001 fded 	bl	8002138 <__clzsi2>
 800055e:	0003      	movs	r3, r0
 8000560:	3b08      	subs	r3, #8
 8000562:	2220      	movs	r2, #32
 8000564:	0020      	movs	r0, r4
 8000566:	1ad2      	subs	r2, r2, r3
 8000568:	4651      	mov	r1, sl
 800056a:	40d0      	lsrs	r0, r2
 800056c:	4099      	lsls	r1, r3
 800056e:	0002      	movs	r2, r0
 8000570:	409c      	lsls	r4, r3
 8000572:	430a      	orrs	r2, r1
 8000574:	42b3      	cmp	r3, r6
 8000576:	da00      	bge.n	800057a <__aeabi_dadd+0xd2>
 8000578:	e102      	b.n	8000780 <__aeabi_dadd+0x2d8>
 800057a:	1b9b      	subs	r3, r3, r6
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	291f      	cmp	r1, #31
 8000580:	dd00      	ble.n	8000584 <__aeabi_dadd+0xdc>
 8000582:	e0a7      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000584:	2320      	movs	r3, #32
 8000586:	0010      	movs	r0, r2
 8000588:	0026      	movs	r6, r4
 800058a:	1a5b      	subs	r3, r3, r1
 800058c:	409c      	lsls	r4, r3
 800058e:	4098      	lsls	r0, r3
 8000590:	40ce      	lsrs	r6, r1
 8000592:	40ca      	lsrs	r2, r1
 8000594:	1e63      	subs	r3, r4, #1
 8000596:	419c      	sbcs	r4, r3
 8000598:	4330      	orrs	r0, r6
 800059a:	4692      	mov	sl, r2
 800059c:	2600      	movs	r6, #0
 800059e:	4304      	orrs	r4, r0
 80005a0:	0763      	lsls	r3, r4, #29
 80005a2:	d009      	beq.n	80005b8 <__aeabi_dadd+0x110>
 80005a4:	230f      	movs	r3, #15
 80005a6:	4023      	ands	r3, r4
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d005      	beq.n	80005b8 <__aeabi_dadd+0x110>
 80005ac:	1d23      	adds	r3, r4, #4
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	41a4      	sbcs	r4, r4
 80005b2:	4264      	negs	r4, r4
 80005b4:	44a2      	add	sl, r4
 80005b6:	001c      	movs	r4, r3
 80005b8:	4653      	mov	r3, sl
 80005ba:	021b      	lsls	r3, r3, #8
 80005bc:	d400      	bmi.n	80005c0 <__aeabi_dadd+0x118>
 80005be:	e09b      	b.n	80006f8 <__aeabi_dadd+0x250>
 80005c0:	4b94      	ldr	r3, [pc, #592]	; (8000814 <__aeabi_dadd+0x36c>)
 80005c2:	3601      	adds	r6, #1
 80005c4:	429e      	cmp	r6, r3
 80005c6:	d100      	bne.n	80005ca <__aeabi_dadd+0x122>
 80005c8:	e0b8      	b.n	800073c <__aeabi_dadd+0x294>
 80005ca:	4653      	mov	r3, sl
 80005cc:	4992      	ldr	r1, [pc, #584]	; (8000818 <__aeabi_dadd+0x370>)
 80005ce:	08e4      	lsrs	r4, r4, #3
 80005d0:	400b      	ands	r3, r1
 80005d2:	0019      	movs	r1, r3
 80005d4:	075b      	lsls	r3, r3, #29
 80005d6:	4323      	orrs	r3, r4
 80005d8:	0572      	lsls	r2, r6, #21
 80005da:	024c      	lsls	r4, r1, #9
 80005dc:	0b24      	lsrs	r4, r4, #12
 80005de:	0d52      	lsrs	r2, r2, #21
 80005e0:	0512      	lsls	r2, r2, #20
 80005e2:	07ed      	lsls	r5, r5, #31
 80005e4:	4322      	orrs	r2, r4
 80005e6:	432a      	orrs	r2, r5
 80005e8:	0018      	movs	r0, r3
 80005ea:	0011      	movs	r1, r2
 80005ec:	bce0      	pop	{r5, r6, r7}
 80005ee:	46ba      	mov	sl, r7
 80005f0:	46b1      	mov	r9, r6
 80005f2:	46a8      	mov	r8, r5
 80005f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f6:	2f00      	cmp	r7, #0
 80005f8:	d048      	beq.n	800068c <__aeabi_dadd+0x1e4>
 80005fa:	1b97      	subs	r7, r2, r6
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e10e      	b.n	8000820 <__aeabi_dadd+0x378>
 8000602:	000c      	movs	r4, r1
 8000604:	431c      	orrs	r4, r3
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e1b7      	b.n	800097a <__aeabi_dadd+0x4d2>
 800060a:	1e7c      	subs	r4, r7, #1
 800060c:	2f01      	cmp	r7, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e226      	b.n	8000a60 <__aeabi_dadd+0x5b8>
 8000612:	4d80      	ldr	r5, [pc, #512]	; (8000814 <__aeabi_dadd+0x36c>)
 8000614:	42af      	cmp	r7, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e1d5      	b.n	80009c6 <__aeabi_dadd+0x51e>
 800061a:	0027      	movs	r7, r4
 800061c:	e107      	b.n	800082e <__aeabi_dadd+0x386>
 800061e:	2f00      	cmp	r7, #0
 8000620:	dc00      	bgt.n	8000624 <__aeabi_dadd+0x17c>
 8000622:	e0b2      	b.n	800078a <__aeabi_dadd+0x2e2>
 8000624:	2a00      	cmp	r2, #0
 8000626:	d047      	beq.n	80006b8 <__aeabi_dadd+0x210>
 8000628:	4a7a      	ldr	r2, [pc, #488]	; (8000814 <__aeabi_dadd+0x36c>)
 800062a:	4296      	cmp	r6, r2
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0x188>
 800062e:	e089      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	464c      	mov	r4, r9
 8000634:	0412      	lsls	r2, r2, #16
 8000636:	4314      	orrs	r4, r2
 8000638:	46a1      	mov	r9, r4
 800063a:	2f38      	cmp	r7, #56	; 0x38
 800063c:	dc6b      	bgt.n	8000716 <__aeabi_dadd+0x26e>
 800063e:	2f1f      	cmp	r7, #31
 8000640:	dc00      	bgt.n	8000644 <__aeabi_dadd+0x19c>
 8000642:	e16e      	b.n	8000922 <__aeabi_dadd+0x47a>
 8000644:	003a      	movs	r2, r7
 8000646:	4648      	mov	r0, r9
 8000648:	3a20      	subs	r2, #32
 800064a:	40d0      	lsrs	r0, r2
 800064c:	4684      	mov	ip, r0
 800064e:	2f20      	cmp	r7, #32
 8000650:	d007      	beq.n	8000662 <__aeabi_dadd+0x1ba>
 8000652:	2240      	movs	r2, #64	; 0x40
 8000654:	4648      	mov	r0, r9
 8000656:	1bd2      	subs	r2, r2, r7
 8000658:	4090      	lsls	r0, r2
 800065a:	0002      	movs	r2, r0
 800065c:	4640      	mov	r0, r8
 800065e:	4310      	orrs	r0, r2
 8000660:	4680      	mov	r8, r0
 8000662:	4640      	mov	r0, r8
 8000664:	1e42      	subs	r2, r0, #1
 8000666:	4190      	sbcs	r0, r2
 8000668:	4662      	mov	r2, ip
 800066a:	0004      	movs	r4, r0
 800066c:	4314      	orrs	r4, r2
 800066e:	e057      	b.n	8000720 <__aeabi_dadd+0x278>
 8000670:	464a      	mov	r2, r9
 8000672:	4302      	orrs	r2, r0
 8000674:	d100      	bne.n	8000678 <__aeabi_dadd+0x1d0>
 8000676:	e103      	b.n	8000880 <__aeabi_dadd+0x3d8>
 8000678:	1e7a      	subs	r2, r7, #1
 800067a:	2f01      	cmp	r7, #1
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x1d8>
 800067e:	e193      	b.n	80009a8 <__aeabi_dadd+0x500>
 8000680:	4c64      	ldr	r4, [pc, #400]	; (8000814 <__aeabi_dadd+0x36c>)
 8000682:	42a7      	cmp	r7, r4
 8000684:	d100      	bne.n	8000688 <__aeabi_dadd+0x1e0>
 8000686:	e18a      	b.n	800099e <__aeabi_dadd+0x4f6>
 8000688:	0017      	movs	r7, r2
 800068a:	e73b      	b.n	8000504 <__aeabi_dadd+0x5c>
 800068c:	4c63      	ldr	r4, [pc, #396]	; (800081c <__aeabi_dadd+0x374>)
 800068e:	1c72      	adds	r2, r6, #1
 8000690:	4222      	tst	r2, r4
 8000692:	d000      	beq.n	8000696 <__aeabi_dadd+0x1ee>
 8000694:	e0e0      	b.n	8000858 <__aeabi_dadd+0x3b0>
 8000696:	000a      	movs	r2, r1
 8000698:	431a      	orrs	r2, r3
 800069a:	2e00      	cmp	r6, #0
 800069c:	d000      	beq.n	80006a0 <__aeabi_dadd+0x1f8>
 800069e:	e174      	b.n	800098a <__aeabi_dadd+0x4e2>
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x1fe>
 80006a4:	e1d0      	b.n	8000a48 <__aeabi_dadd+0x5a0>
 80006a6:	464a      	mov	r2, r9
 80006a8:	4302      	orrs	r2, r0
 80006aa:	d000      	beq.n	80006ae <__aeabi_dadd+0x206>
 80006ac:	e1e3      	b.n	8000a76 <__aeabi_dadd+0x5ce>
 80006ae:	074a      	lsls	r2, r1, #29
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	4313      	orrs	r3, r2
 80006b4:	08c9      	lsrs	r1, r1, #3
 80006b6:	e029      	b.n	800070c <__aeabi_dadd+0x264>
 80006b8:	464a      	mov	r2, r9
 80006ba:	4302      	orrs	r2, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x218>
 80006be:	e17d      	b.n	80009bc <__aeabi_dadd+0x514>
 80006c0:	1e7a      	subs	r2, r7, #1
 80006c2:	2f01      	cmp	r7, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x220>
 80006c6:	e0e0      	b.n	800088a <__aeabi_dadd+0x3e2>
 80006c8:	4c52      	ldr	r4, [pc, #328]	; (8000814 <__aeabi_dadd+0x36c>)
 80006ca:	42a7      	cmp	r7, r4
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e166      	b.n	800099e <__aeabi_dadd+0x4f6>
 80006d0:	0017      	movs	r7, r2
 80006d2:	e7b2      	b.n	800063a <__aeabi_dadd+0x192>
 80006d4:	0010      	movs	r0, r2
 80006d6:	3b1f      	subs	r3, #31
 80006d8:	40d8      	lsrs	r0, r3
 80006da:	2920      	cmp	r1, #32
 80006dc:	d003      	beq.n	80006e6 <__aeabi_dadd+0x23e>
 80006de:	2340      	movs	r3, #64	; 0x40
 80006e0:	1a5b      	subs	r3, r3, r1
 80006e2:	409a      	lsls	r2, r3
 80006e4:	4314      	orrs	r4, r2
 80006e6:	1e63      	subs	r3, r4, #1
 80006e8:	419c      	sbcs	r4, r3
 80006ea:	2300      	movs	r3, #0
 80006ec:	2600      	movs	r6, #0
 80006ee:	469a      	mov	sl, r3
 80006f0:	4304      	orrs	r4, r0
 80006f2:	0763      	lsls	r3, r4, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x250>
 80006f6:	e755      	b.n	80005a4 <__aeabi_dadd+0xfc>
 80006f8:	4652      	mov	r2, sl
 80006fa:	08e3      	lsrs	r3, r4, #3
 80006fc:	0752      	lsls	r2, r2, #29
 80006fe:	4313      	orrs	r3, r2
 8000700:	4652      	mov	r2, sl
 8000702:	0037      	movs	r7, r6
 8000704:	08d1      	lsrs	r1, r2, #3
 8000706:	4a43      	ldr	r2, [pc, #268]	; (8000814 <__aeabi_dadd+0x36c>)
 8000708:	4297      	cmp	r7, r2
 800070a:	d01f      	beq.n	800074c <__aeabi_dadd+0x2a4>
 800070c:	0309      	lsls	r1, r1, #12
 800070e:	057a      	lsls	r2, r7, #21
 8000710:	0b0c      	lsrs	r4, r1, #12
 8000712:	0d52      	lsrs	r2, r2, #21
 8000714:	e764      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000716:	4642      	mov	r2, r8
 8000718:	464c      	mov	r4, r9
 800071a:	4314      	orrs	r4, r2
 800071c:	1e62      	subs	r2, r4, #1
 800071e:	4194      	sbcs	r4, r2
 8000720:	18e4      	adds	r4, r4, r3
 8000722:	429c      	cmp	r4, r3
 8000724:	4192      	sbcs	r2, r2
 8000726:	4252      	negs	r2, r2
 8000728:	4692      	mov	sl, r2
 800072a:	448a      	add	sl, r1
 800072c:	4653      	mov	r3, sl
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	d5df      	bpl.n	80006f2 <__aeabi_dadd+0x24a>
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <__aeabi_dadd+0x36c>)
 8000734:	3601      	adds	r6, #1
 8000736:	429e      	cmp	r6, r3
 8000738:	d000      	beq.n	800073c <__aeabi_dadd+0x294>
 800073a:	e0b3      	b.n	80008a4 <__aeabi_dadd+0x3fc>
 800073c:	0032      	movs	r2, r6
 800073e:	2400      	movs	r4, #0
 8000740:	2300      	movs	r3, #0
 8000742:	e74d      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000744:	074a      	lsls	r2, r1, #29
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	4313      	orrs	r3, r2
 800074a:	08c9      	lsrs	r1, r1, #3
 800074c:	001a      	movs	r2, r3
 800074e:	430a      	orrs	r2, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000752:	e200      	b.n	8000b56 <__aeabi_dadd+0x6ae>
 8000754:	2480      	movs	r4, #128	; 0x80
 8000756:	0324      	lsls	r4, r4, #12
 8000758:	430c      	orrs	r4, r1
 800075a:	0324      	lsls	r4, r4, #12
 800075c:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <__aeabi_dadd+0x36c>)
 800075e:	0b24      	lsrs	r4, r4, #12
 8000760:	e73e      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000762:	0020      	movs	r0, r4
 8000764:	f001 fce8 	bl	8002138 <__clzsi2>
 8000768:	0003      	movs	r3, r0
 800076a:	3318      	adds	r3, #24
 800076c:	2b1f      	cmp	r3, #31
 800076e:	dc00      	bgt.n	8000772 <__aeabi_dadd+0x2ca>
 8000770:	e6f7      	b.n	8000562 <__aeabi_dadd+0xba>
 8000772:	0022      	movs	r2, r4
 8000774:	3808      	subs	r0, #8
 8000776:	4082      	lsls	r2, r0
 8000778:	2400      	movs	r4, #0
 800077a:	42b3      	cmp	r3, r6
 800077c:	db00      	blt.n	8000780 <__aeabi_dadd+0x2d8>
 800077e:	e6fc      	b.n	800057a <__aeabi_dadd+0xd2>
 8000780:	1af6      	subs	r6, r6, r3
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <__aeabi_dadd+0x370>)
 8000784:	401a      	ands	r2, r3
 8000786:	4692      	mov	sl, r2
 8000788:	e70a      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800078a:	2f00      	cmp	r7, #0
 800078c:	d02b      	beq.n	80007e6 <__aeabi_dadd+0x33e>
 800078e:	1b97      	subs	r7, r2, r6
 8000790:	2e00      	cmp	r6, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e0b8      	b.n	8000908 <__aeabi_dadd+0x460>
 8000796:	4c1f      	ldr	r4, [pc, #124]	; (8000814 <__aeabi_dadd+0x36c>)
 8000798:	42a2      	cmp	r2, r4
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x2f6>
 800079c:	e11c      	b.n	80009d8 <__aeabi_dadd+0x530>
 800079e:	2480      	movs	r4, #128	; 0x80
 80007a0:	0424      	lsls	r4, r4, #16
 80007a2:	4321      	orrs	r1, r4
 80007a4:	2f38      	cmp	r7, #56	; 0x38
 80007a6:	dd00      	ble.n	80007aa <__aeabi_dadd+0x302>
 80007a8:	e11e      	b.n	80009e8 <__aeabi_dadd+0x540>
 80007aa:	2f1f      	cmp	r7, #31
 80007ac:	dd00      	ble.n	80007b0 <__aeabi_dadd+0x308>
 80007ae:	e19e      	b.n	8000aee <__aeabi_dadd+0x646>
 80007b0:	2620      	movs	r6, #32
 80007b2:	000c      	movs	r4, r1
 80007b4:	1bf6      	subs	r6, r6, r7
 80007b6:	0018      	movs	r0, r3
 80007b8:	40b3      	lsls	r3, r6
 80007ba:	40b4      	lsls	r4, r6
 80007bc:	40f8      	lsrs	r0, r7
 80007be:	1e5e      	subs	r6, r3, #1
 80007c0:	41b3      	sbcs	r3, r6
 80007c2:	40f9      	lsrs	r1, r7
 80007c4:	4304      	orrs	r4, r0
 80007c6:	431c      	orrs	r4, r3
 80007c8:	4489      	add	r9, r1
 80007ca:	4444      	add	r4, r8
 80007cc:	4544      	cmp	r4, r8
 80007ce:	419b      	sbcs	r3, r3
 80007d0:	425b      	negs	r3, r3
 80007d2:	444b      	add	r3, r9
 80007d4:	469a      	mov	sl, r3
 80007d6:	0016      	movs	r6, r2
 80007d8:	e7a8      	b.n	800072c <__aeabi_dadd+0x284>
 80007da:	4642      	mov	r2, r8
 80007dc:	464c      	mov	r4, r9
 80007de:	4314      	orrs	r4, r2
 80007e0:	1e62      	subs	r2, r4, #1
 80007e2:	4194      	sbcs	r4, r2
 80007e4:	e6a6      	b.n	8000534 <__aeabi_dadd+0x8c>
 80007e6:	4c0d      	ldr	r4, [pc, #52]	; (800081c <__aeabi_dadd+0x374>)
 80007e8:	1c72      	adds	r2, r6, #1
 80007ea:	4222      	tst	r2, r4
 80007ec:	d000      	beq.n	80007f0 <__aeabi_dadd+0x348>
 80007ee:	e0a8      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007f0:	000a      	movs	r2, r1
 80007f2:	431a      	orrs	r2, r3
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d000      	beq.n	80007fa <__aeabi_dadd+0x352>
 80007f8:	e10a      	b.n	8000a10 <__aeabi_dadd+0x568>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x358>
 80007fe:	e15e      	b.n	8000abe <__aeabi_dadd+0x616>
 8000800:	464a      	mov	r2, r9
 8000802:	4302      	orrs	r2, r0
 8000804:	d000      	beq.n	8000808 <__aeabi_dadd+0x360>
 8000806:	e161      	b.n	8000acc <__aeabi_dadd+0x624>
 8000808:	074a      	lsls	r2, r1, #29
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	4313      	orrs	r3, r2
 800080e:	08c9      	lsrs	r1, r1, #3
 8000810:	e77c      	b.n	800070c <__aeabi_dadd+0x264>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	000007ff 	.word	0x000007ff
 8000818:	ff7fffff 	.word	0xff7fffff
 800081c:	000007fe 	.word	0x000007fe
 8000820:	4ccf      	ldr	r4, [pc, #828]	; (8000b60 <__aeabi_dadd+0x6b8>)
 8000822:	42a2      	cmp	r2, r4
 8000824:	d100      	bne.n	8000828 <__aeabi_dadd+0x380>
 8000826:	e0ce      	b.n	80009c6 <__aeabi_dadd+0x51e>
 8000828:	2480      	movs	r4, #128	; 0x80
 800082a:	0424      	lsls	r4, r4, #16
 800082c:	4321      	orrs	r1, r4
 800082e:	2f38      	cmp	r7, #56	; 0x38
 8000830:	dc5b      	bgt.n	80008ea <__aeabi_dadd+0x442>
 8000832:	2f1f      	cmp	r7, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0x390>
 8000836:	e0dc      	b.n	80009f2 <__aeabi_dadd+0x54a>
 8000838:	2520      	movs	r5, #32
 800083a:	000c      	movs	r4, r1
 800083c:	1bed      	subs	r5, r5, r7
 800083e:	001e      	movs	r6, r3
 8000840:	40ab      	lsls	r3, r5
 8000842:	40ac      	lsls	r4, r5
 8000844:	40fe      	lsrs	r6, r7
 8000846:	1e5d      	subs	r5, r3, #1
 8000848:	41ab      	sbcs	r3, r5
 800084a:	4334      	orrs	r4, r6
 800084c:	40f9      	lsrs	r1, r7
 800084e:	431c      	orrs	r4, r3
 8000850:	464b      	mov	r3, r9
 8000852:	1a5b      	subs	r3, r3, r1
 8000854:	4699      	mov	r9, r3
 8000856:	e04c      	b.n	80008f2 <__aeabi_dadd+0x44a>
 8000858:	464a      	mov	r2, r9
 800085a:	1a1c      	subs	r4, r3, r0
 800085c:	1a88      	subs	r0, r1, r2
 800085e:	42a3      	cmp	r3, r4
 8000860:	4192      	sbcs	r2, r2
 8000862:	4252      	negs	r2, r2
 8000864:	4692      	mov	sl, r2
 8000866:	0002      	movs	r2, r0
 8000868:	4650      	mov	r0, sl
 800086a:	1a12      	subs	r2, r2, r0
 800086c:	4692      	mov	sl, r2
 800086e:	0212      	lsls	r2, r2, #8
 8000870:	d478      	bmi.n	8000964 <__aeabi_dadd+0x4bc>
 8000872:	4653      	mov	r3, sl
 8000874:	4323      	orrs	r3, r4
 8000876:	d000      	beq.n	800087a <__aeabi_dadd+0x3d2>
 8000878:	e66a      	b.n	8000550 <__aeabi_dadd+0xa8>
 800087a:	2100      	movs	r1, #0
 800087c:	2500      	movs	r5, #0
 800087e:	e745      	b.n	800070c <__aeabi_dadd+0x264>
 8000880:	074a      	lsls	r2, r1, #29
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4313      	orrs	r3, r2
 8000886:	08c9      	lsrs	r1, r1, #3
 8000888:	e73d      	b.n	8000706 <__aeabi_dadd+0x25e>
 800088a:	181c      	adds	r4, r3, r0
 800088c:	429c      	cmp	r4, r3
 800088e:	419b      	sbcs	r3, r3
 8000890:	4449      	add	r1, r9
 8000892:	468a      	mov	sl, r1
 8000894:	425b      	negs	r3, r3
 8000896:	449a      	add	sl, r3
 8000898:	4653      	mov	r3, sl
 800089a:	2601      	movs	r6, #1
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	d400      	bmi.n	80008a2 <__aeabi_dadd+0x3fa>
 80008a0:	e727      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80008a2:	2602      	movs	r6, #2
 80008a4:	4652      	mov	r2, sl
 80008a6:	4baf      	ldr	r3, [pc, #700]	; (8000b64 <__aeabi_dadd+0x6bc>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	401a      	ands	r2, r3
 80008ac:	0013      	movs	r3, r2
 80008ae:	4021      	ands	r1, r4
 80008b0:	0862      	lsrs	r2, r4, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	07dc      	lsls	r4, r3, #31
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	469a      	mov	sl, r3
 80008ba:	4314      	orrs	r4, r2
 80008bc:	e670      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80008be:	003a      	movs	r2, r7
 80008c0:	464c      	mov	r4, r9
 80008c2:	3a20      	subs	r2, #32
 80008c4:	40d4      	lsrs	r4, r2
 80008c6:	46a4      	mov	ip, r4
 80008c8:	2f20      	cmp	r7, #32
 80008ca:	d007      	beq.n	80008dc <__aeabi_dadd+0x434>
 80008cc:	2240      	movs	r2, #64	; 0x40
 80008ce:	4648      	mov	r0, r9
 80008d0:	1bd2      	subs	r2, r2, r7
 80008d2:	4090      	lsls	r0, r2
 80008d4:	0002      	movs	r2, r0
 80008d6:	4640      	mov	r0, r8
 80008d8:	4310      	orrs	r0, r2
 80008da:	4680      	mov	r8, r0
 80008dc:	4640      	mov	r0, r8
 80008de:	1e42      	subs	r2, r0, #1
 80008e0:	4190      	sbcs	r0, r2
 80008e2:	4662      	mov	r2, ip
 80008e4:	0004      	movs	r4, r0
 80008e6:	4314      	orrs	r4, r2
 80008e8:	e624      	b.n	8000534 <__aeabi_dadd+0x8c>
 80008ea:	4319      	orrs	r1, r3
 80008ec:	000c      	movs	r4, r1
 80008ee:	1e63      	subs	r3, r4, #1
 80008f0:	419c      	sbcs	r4, r3
 80008f2:	4643      	mov	r3, r8
 80008f4:	1b1c      	subs	r4, r3, r4
 80008f6:	45a0      	cmp	r8, r4
 80008f8:	419b      	sbcs	r3, r3
 80008fa:	4649      	mov	r1, r9
 80008fc:	425b      	negs	r3, r3
 80008fe:	1acb      	subs	r3, r1, r3
 8000900:	469a      	mov	sl, r3
 8000902:	4665      	mov	r5, ip
 8000904:	0016      	movs	r6, r2
 8000906:	e61b      	b.n	8000540 <__aeabi_dadd+0x98>
 8000908:	000c      	movs	r4, r1
 800090a:	431c      	orrs	r4, r3
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x468>
 800090e:	e0c7      	b.n	8000aa0 <__aeabi_dadd+0x5f8>
 8000910:	1e7c      	subs	r4, r7, #1
 8000912:	2f01      	cmp	r7, #1
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x470>
 8000916:	e0f9      	b.n	8000b0c <__aeabi_dadd+0x664>
 8000918:	4e91      	ldr	r6, [pc, #580]	; (8000b60 <__aeabi_dadd+0x6b8>)
 800091a:	42b7      	cmp	r7, r6
 800091c:	d05c      	beq.n	80009d8 <__aeabi_dadd+0x530>
 800091e:	0027      	movs	r7, r4
 8000920:	e740      	b.n	80007a4 <__aeabi_dadd+0x2fc>
 8000922:	2220      	movs	r2, #32
 8000924:	464c      	mov	r4, r9
 8000926:	4640      	mov	r0, r8
 8000928:	1bd2      	subs	r2, r2, r7
 800092a:	4094      	lsls	r4, r2
 800092c:	40f8      	lsrs	r0, r7
 800092e:	4304      	orrs	r4, r0
 8000930:	4640      	mov	r0, r8
 8000932:	4090      	lsls	r0, r2
 8000934:	1e42      	subs	r2, r0, #1
 8000936:	4190      	sbcs	r0, r2
 8000938:	464a      	mov	r2, r9
 800093a:	40fa      	lsrs	r2, r7
 800093c:	4304      	orrs	r4, r0
 800093e:	1889      	adds	r1, r1, r2
 8000940:	e6ee      	b.n	8000720 <__aeabi_dadd+0x278>
 8000942:	4c87      	ldr	r4, [pc, #540]	; (8000b60 <__aeabi_dadd+0x6b8>)
 8000944:	42a2      	cmp	r2, r4
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x4a2>
 8000948:	e6f9      	b.n	800073e <__aeabi_dadd+0x296>
 800094a:	1818      	adds	r0, r3, r0
 800094c:	4298      	cmp	r0, r3
 800094e:	419b      	sbcs	r3, r3
 8000950:	4449      	add	r1, r9
 8000952:	425b      	negs	r3, r3
 8000954:	18cb      	adds	r3, r1, r3
 8000956:	07dc      	lsls	r4, r3, #31
 8000958:	0840      	lsrs	r0, r0, #1
 800095a:	085b      	lsrs	r3, r3, #1
 800095c:	469a      	mov	sl, r3
 800095e:	0016      	movs	r6, r2
 8000960:	4304      	orrs	r4, r0
 8000962:	e6c6      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000964:	4642      	mov	r2, r8
 8000966:	1ad4      	subs	r4, r2, r3
 8000968:	45a0      	cmp	r8, r4
 800096a:	4180      	sbcs	r0, r0
 800096c:	464b      	mov	r3, r9
 800096e:	4240      	negs	r0, r0
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	1a0b      	subs	r3, r1, r0
 8000974:	469a      	mov	sl, r3
 8000976:	4665      	mov	r5, ip
 8000978:	e5ea      	b.n	8000550 <__aeabi_dadd+0xa8>
 800097a:	464b      	mov	r3, r9
 800097c:	464a      	mov	r2, r9
 800097e:	08c0      	lsrs	r0, r0, #3
 8000980:	075b      	lsls	r3, r3, #29
 8000982:	4665      	mov	r5, ip
 8000984:	4303      	orrs	r3, r0
 8000986:	08d1      	lsrs	r1, r2, #3
 8000988:	e6bd      	b.n	8000706 <__aeabi_dadd+0x25e>
 800098a:	2a00      	cmp	r2, #0
 800098c:	d000      	beq.n	8000990 <__aeabi_dadd+0x4e8>
 800098e:	e08e      	b.n	8000aae <__aeabi_dadd+0x606>
 8000990:	464b      	mov	r3, r9
 8000992:	4303      	orrs	r3, r0
 8000994:	d117      	bne.n	80009c6 <__aeabi_dadd+0x51e>
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2500      	movs	r5, #0
 800099a:	0309      	lsls	r1, r1, #12
 800099c:	e6da      	b.n	8000754 <__aeabi_dadd+0x2ac>
 800099e:	074a      	lsls	r2, r1, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	08c9      	lsrs	r1, r1, #3
 80009a6:	e6d1      	b.n	800074c <__aeabi_dadd+0x2a4>
 80009a8:	1a1c      	subs	r4, r3, r0
 80009aa:	464a      	mov	r2, r9
 80009ac:	42a3      	cmp	r3, r4
 80009ae:	419b      	sbcs	r3, r3
 80009b0:	1a89      	subs	r1, r1, r2
 80009b2:	425b      	negs	r3, r3
 80009b4:	1acb      	subs	r3, r1, r3
 80009b6:	469a      	mov	sl, r3
 80009b8:	2601      	movs	r6, #1
 80009ba:	e5c1      	b.n	8000540 <__aeabi_dadd+0x98>
 80009bc:	074a      	lsls	r2, r1, #29
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	08c9      	lsrs	r1, r1, #3
 80009c4:	e69f      	b.n	8000706 <__aeabi_dadd+0x25e>
 80009c6:	4643      	mov	r3, r8
 80009c8:	08d8      	lsrs	r0, r3, #3
 80009ca:	464b      	mov	r3, r9
 80009cc:	464a      	mov	r2, r9
 80009ce:	075b      	lsls	r3, r3, #29
 80009d0:	4665      	mov	r5, ip
 80009d2:	4303      	orrs	r3, r0
 80009d4:	08d1      	lsrs	r1, r2, #3
 80009d6:	e6b9      	b.n	800074c <__aeabi_dadd+0x2a4>
 80009d8:	4643      	mov	r3, r8
 80009da:	08d8      	lsrs	r0, r3, #3
 80009dc:	464b      	mov	r3, r9
 80009de:	464a      	mov	r2, r9
 80009e0:	075b      	lsls	r3, r3, #29
 80009e2:	4303      	orrs	r3, r0
 80009e4:	08d1      	lsrs	r1, r2, #3
 80009e6:	e6b1      	b.n	800074c <__aeabi_dadd+0x2a4>
 80009e8:	4319      	orrs	r1, r3
 80009ea:	000c      	movs	r4, r1
 80009ec:	1e63      	subs	r3, r4, #1
 80009ee:	419c      	sbcs	r4, r3
 80009f0:	e6eb      	b.n	80007ca <__aeabi_dadd+0x322>
 80009f2:	003c      	movs	r4, r7
 80009f4:	000d      	movs	r5, r1
 80009f6:	3c20      	subs	r4, #32
 80009f8:	40e5      	lsrs	r5, r4
 80009fa:	2f20      	cmp	r7, #32
 80009fc:	d003      	beq.n	8000a06 <__aeabi_dadd+0x55e>
 80009fe:	2440      	movs	r4, #64	; 0x40
 8000a00:	1be4      	subs	r4, r4, r7
 8000a02:	40a1      	lsls	r1, r4
 8000a04:	430b      	orrs	r3, r1
 8000a06:	001c      	movs	r4, r3
 8000a08:	1e63      	subs	r3, r4, #1
 8000a0a:	419c      	sbcs	r4, r3
 8000a0c:	432c      	orrs	r4, r5
 8000a0e:	e770      	b.n	80008f2 <__aeabi_dadd+0x44a>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d0e1      	beq.n	80009d8 <__aeabi_dadd+0x530>
 8000a14:	464a      	mov	r2, r9
 8000a16:	4302      	orrs	r2, r0
 8000a18:	d0c1      	beq.n	800099e <__aeabi_dadd+0x4f6>
 8000a1a:	074a      	lsls	r2, r1, #29
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	08c9      	lsrs	r1, r1, #3
 8000a24:	0312      	lsls	r2, r2, #12
 8000a26:	4211      	tst	r1, r2
 8000a28:	d008      	beq.n	8000a3c <__aeabi_dadd+0x594>
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	08c4      	lsrs	r4, r0, #3
 8000a2e:	4214      	tst	r4, r2
 8000a30:	d104      	bne.n	8000a3c <__aeabi_dadd+0x594>
 8000a32:	4643      	mov	r3, r8
 8000a34:	0021      	movs	r1, r4
 8000a36:	08db      	lsrs	r3, r3, #3
 8000a38:	0742      	lsls	r2, r0, #29
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	0f5a      	lsrs	r2, r3, #29
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	0752      	lsls	r2, r2, #29
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	e681      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000a48:	464b      	mov	r3, r9
 8000a4a:	4303      	orrs	r3, r0
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_dadd+0x5a8>
 8000a4e:	e714      	b.n	800087a <__aeabi_dadd+0x3d2>
 8000a50:	464b      	mov	r3, r9
 8000a52:	464a      	mov	r2, r9
 8000a54:	08c0      	lsrs	r0, r0, #3
 8000a56:	075b      	lsls	r3, r3, #29
 8000a58:	4665      	mov	r5, ip
 8000a5a:	4303      	orrs	r3, r0
 8000a5c:	08d1      	lsrs	r1, r2, #3
 8000a5e:	e655      	b.n	800070c <__aeabi_dadd+0x264>
 8000a60:	1ac4      	subs	r4, r0, r3
 8000a62:	45a0      	cmp	r8, r4
 8000a64:	4180      	sbcs	r0, r0
 8000a66:	464b      	mov	r3, r9
 8000a68:	4240      	negs	r0, r0
 8000a6a:	1a59      	subs	r1, r3, r1
 8000a6c:	1a0b      	subs	r3, r1, r0
 8000a6e:	469a      	mov	sl, r3
 8000a70:	4665      	mov	r5, ip
 8000a72:	2601      	movs	r6, #1
 8000a74:	e564      	b.n	8000540 <__aeabi_dadd+0x98>
 8000a76:	1a1c      	subs	r4, r3, r0
 8000a78:	464a      	mov	r2, r9
 8000a7a:	42a3      	cmp	r3, r4
 8000a7c:	4180      	sbcs	r0, r0
 8000a7e:	1a8a      	subs	r2, r1, r2
 8000a80:	4240      	negs	r0, r0
 8000a82:	1a12      	subs	r2, r2, r0
 8000a84:	4692      	mov	sl, r2
 8000a86:	0212      	lsls	r2, r2, #8
 8000a88:	d549      	bpl.n	8000b1e <__aeabi_dadd+0x676>
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	1ad4      	subs	r4, r2, r3
 8000a8e:	45a0      	cmp	r8, r4
 8000a90:	4180      	sbcs	r0, r0
 8000a92:	464b      	mov	r3, r9
 8000a94:	4240      	negs	r0, r0
 8000a96:	1a59      	subs	r1, r3, r1
 8000a98:	1a0b      	subs	r3, r1, r0
 8000a9a:	469a      	mov	sl, r3
 8000a9c:	4665      	mov	r5, ip
 8000a9e:	e57f      	b.n	80005a0 <__aeabi_dadd+0xf8>
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	464a      	mov	r2, r9
 8000aa4:	08c0      	lsrs	r0, r0, #3
 8000aa6:	075b      	lsls	r3, r3, #29
 8000aa8:	4303      	orrs	r3, r0
 8000aaa:	08d1      	lsrs	r1, r2, #3
 8000aac:	e62b      	b.n	8000706 <__aeabi_dadd+0x25e>
 8000aae:	464a      	mov	r2, r9
 8000ab0:	08db      	lsrs	r3, r3, #3
 8000ab2:	4302      	orrs	r2, r0
 8000ab4:	d138      	bne.n	8000b28 <__aeabi_dadd+0x680>
 8000ab6:	074a      	lsls	r2, r1, #29
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c9      	lsrs	r1, r1, #3
 8000abc:	e646      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000abe:	464b      	mov	r3, r9
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	08c0      	lsrs	r0, r0, #3
 8000ac4:	075b      	lsls	r3, r3, #29
 8000ac6:	4303      	orrs	r3, r0
 8000ac8:	08d1      	lsrs	r1, r2, #3
 8000aca:	e61f      	b.n	800070c <__aeabi_dadd+0x264>
 8000acc:	181c      	adds	r4, r3, r0
 8000ace:	429c      	cmp	r4, r3
 8000ad0:	419b      	sbcs	r3, r3
 8000ad2:	4449      	add	r1, r9
 8000ad4:	468a      	mov	sl, r1
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	449a      	add	sl, r3
 8000ada:	4653      	mov	r3, sl
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	d400      	bmi.n	8000ae2 <__aeabi_dadd+0x63a>
 8000ae0:	e607      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000ae2:	4652      	mov	r2, sl
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <__aeabi_dadd+0x6bc>)
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	401a      	ands	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	e601      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aee:	003c      	movs	r4, r7
 8000af0:	000e      	movs	r6, r1
 8000af2:	3c20      	subs	r4, #32
 8000af4:	40e6      	lsrs	r6, r4
 8000af6:	2f20      	cmp	r7, #32
 8000af8:	d003      	beq.n	8000b02 <__aeabi_dadd+0x65a>
 8000afa:	2440      	movs	r4, #64	; 0x40
 8000afc:	1be4      	subs	r4, r4, r7
 8000afe:	40a1      	lsls	r1, r4
 8000b00:	430b      	orrs	r3, r1
 8000b02:	001c      	movs	r4, r3
 8000b04:	1e63      	subs	r3, r4, #1
 8000b06:	419c      	sbcs	r4, r3
 8000b08:	4334      	orrs	r4, r6
 8000b0a:	e65e      	b.n	80007ca <__aeabi_dadd+0x322>
 8000b0c:	4443      	add	r3, r8
 8000b0e:	4283      	cmp	r3, r0
 8000b10:	4180      	sbcs	r0, r0
 8000b12:	4449      	add	r1, r9
 8000b14:	468a      	mov	sl, r1
 8000b16:	4240      	negs	r0, r0
 8000b18:	001c      	movs	r4, r3
 8000b1a:	4482      	add	sl, r0
 8000b1c:	e6bc      	b.n	8000898 <__aeabi_dadd+0x3f0>
 8000b1e:	4653      	mov	r3, sl
 8000b20:	4323      	orrs	r3, r4
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x67e>
 8000b24:	e6a9      	b.n	800087a <__aeabi_dadd+0x3d2>
 8000b26:	e5e4      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000b28:	074a      	lsls	r2, r1, #29
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	08c9      	lsrs	r1, r1, #3
 8000b30:	0312      	lsls	r2, r2, #12
 8000b32:	4211      	tst	r1, r2
 8000b34:	d009      	beq.n	8000b4a <__aeabi_dadd+0x6a2>
 8000b36:	4648      	mov	r0, r9
 8000b38:	08c4      	lsrs	r4, r0, #3
 8000b3a:	4214      	tst	r4, r2
 8000b3c:	d105      	bne.n	8000b4a <__aeabi_dadd+0x6a2>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	4665      	mov	r5, ip
 8000b42:	0021      	movs	r1, r4
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	0742      	lsls	r2, r0, #29
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	0f5a      	lsrs	r2, r3, #29
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	08db      	lsrs	r3, r3, #3
 8000b50:	0752      	lsls	r2, r2, #29
 8000b52:	4313      	orrs	r3, r2
 8000b54:	e5fa      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000b56:	2300      	movs	r3, #0
 8000b58:	4a01      	ldr	r2, [pc, #4]	; (8000b60 <__aeabi_dadd+0x6b8>)
 8000b5a:	001c      	movs	r4, r3
 8000b5c:	e540      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	000007ff 	.word	0x000007ff
 8000b64:	ff7fffff 	.word	0xff7fffff

08000b68 <__aeabi_ddiv>:
 8000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6a:	4657      	mov	r7, sl
 8000b6c:	464e      	mov	r6, r9
 8000b6e:	4645      	mov	r5, r8
 8000b70:	46de      	mov	lr, fp
 8000b72:	b5e0      	push	{r5, r6, r7, lr}
 8000b74:	030c      	lsls	r4, r1, #12
 8000b76:	001f      	movs	r7, r3
 8000b78:	004b      	lsls	r3, r1, #1
 8000b7a:	4681      	mov	r9, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0005      	movs	r5, r0
 8000b80:	b085      	sub	sp, #20
 8000b82:	0b24      	lsrs	r4, r4, #12
 8000b84:	0d5b      	lsrs	r3, r3, #21
 8000b86:	0fce      	lsrs	r6, r1, #31
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_ddiv+0x26>
 8000b8c:	e152      	b.n	8000e34 <__aeabi_ddiv+0x2cc>
 8000b8e:	4ad2      	ldr	r2, [pc, #840]	; (8000ed8 <__aeabi_ddiv+0x370>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d100      	bne.n	8000b96 <__aeabi_ddiv+0x2e>
 8000b94:	e16e      	b.n	8000e74 <__aeabi_ddiv+0x30c>
 8000b96:	0f42      	lsrs	r2, r0, #29
 8000b98:	00e4      	lsls	r4, r4, #3
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	0412      	lsls	r2, r2, #16
 8000ba0:	4322      	orrs	r2, r4
 8000ba2:	4690      	mov	r8, r2
 8000ba4:	4acd      	ldr	r2, [pc, #820]	; (8000edc <__aeabi_ddiv+0x374>)
 8000ba6:	00c5      	lsls	r5, r0, #3
 8000ba8:	4693      	mov	fp, r2
 8000baa:	449b      	add	fp, r3
 8000bac:	2300      	movs	r3, #0
 8000bae:	4699      	mov	r9, r3
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	033c      	lsls	r4, r7, #12
 8000bb4:	007b      	lsls	r3, r7, #1
 8000bb6:	4650      	mov	r0, sl
 8000bb8:	0b24      	lsrs	r4, r4, #12
 8000bba:	0d5b      	lsrs	r3, r3, #21
 8000bbc:	0fff      	lsrs	r7, r7, #31
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_ddiv+0x5c>
 8000bc2:	e11a      	b.n	8000dfa <__aeabi_ddiv+0x292>
 8000bc4:	4ac4      	ldr	r2, [pc, #784]	; (8000ed8 <__aeabi_ddiv+0x370>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_ddiv+0x64>
 8000bca:	e15e      	b.n	8000e8a <__aeabi_ddiv+0x322>
 8000bcc:	0f42      	lsrs	r2, r0, #29
 8000bce:	00e4      	lsls	r4, r4, #3
 8000bd0:	4322      	orrs	r2, r4
 8000bd2:	2480      	movs	r4, #128	; 0x80
 8000bd4:	0424      	lsls	r4, r4, #16
 8000bd6:	4314      	orrs	r4, r2
 8000bd8:	4ac0      	ldr	r2, [pc, #768]	; (8000edc <__aeabi_ddiv+0x374>)
 8000bda:	00c1      	lsls	r1, r0, #3
 8000bdc:	4694      	mov	ip, r2
 8000bde:	465a      	mov	r2, fp
 8000be0:	4463      	add	r3, ip
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	469b      	mov	fp, r3
 8000be6:	2000      	movs	r0, #0
 8000be8:	0033      	movs	r3, r6
 8000bea:	407b      	eors	r3, r7
 8000bec:	469a      	mov	sl, r3
 8000bee:	464b      	mov	r3, r9
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d827      	bhi.n	8000c44 <__aeabi_ddiv+0xdc>
 8000bf4:	4aba      	ldr	r2, [pc, #744]	; (8000ee0 <__aeabi_ddiv+0x378>)
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	58d3      	ldr	r3, [r2, r3]
 8000bfa:	469f      	mov	pc, r3
 8000bfc:	46b2      	mov	sl, r6
 8000bfe:	9b00      	ldr	r3, [sp, #0]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d016      	beq.n	8000c32 <__aeabi_ddiv+0xca>
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d100      	bne.n	8000c0a <__aeabi_ddiv+0xa2>
 8000c08:	e287      	b.n	800111a <__aeabi_ddiv+0x5b2>
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d000      	beq.n	8000c10 <__aeabi_ddiv+0xa8>
 8000c0e:	e0d5      	b.n	8000dbc <__aeabi_ddiv+0x254>
 8000c10:	2300      	movs	r3, #0
 8000c12:	2200      	movs	r2, #0
 8000c14:	2500      	movs	r5, #0
 8000c16:	051b      	lsls	r3, r3, #20
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	4652      	mov	r2, sl
 8000c1c:	07d2      	lsls	r2, r2, #31
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	0028      	movs	r0, r5
 8000c22:	0019      	movs	r1, r3
 8000c24:	b005      	add	sp, #20
 8000c26:	bcf0      	pop	{r4, r5, r6, r7}
 8000c28:	46bb      	mov	fp, r7
 8000c2a:	46b2      	mov	sl, r6
 8000c2c:	46a9      	mov	r9, r5
 8000c2e:	46a0      	mov	r8, r4
 8000c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c32:	2200      	movs	r2, #0
 8000c34:	2500      	movs	r5, #0
 8000c36:	4ba8      	ldr	r3, [pc, #672]	; (8000ed8 <__aeabi_ddiv+0x370>)
 8000c38:	e7ed      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000c3a:	46ba      	mov	sl, r7
 8000c3c:	46a0      	mov	r8, r4
 8000c3e:	000d      	movs	r5, r1
 8000c40:	9000      	str	r0, [sp, #0]
 8000c42:	e7dc      	b.n	8000bfe <__aeabi_ddiv+0x96>
 8000c44:	4544      	cmp	r4, r8
 8000c46:	d200      	bcs.n	8000c4a <__aeabi_ddiv+0xe2>
 8000c48:	e1c4      	b.n	8000fd4 <__aeabi_ddiv+0x46c>
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_ddiv+0xe6>
 8000c4c:	e1bf      	b.n	8000fce <__aeabi_ddiv+0x466>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	425b      	negs	r3, r3
 8000c52:	469c      	mov	ip, r3
 8000c54:	002e      	movs	r6, r5
 8000c56:	4640      	mov	r0, r8
 8000c58:	2500      	movs	r5, #0
 8000c5a:	44e3      	add	fp, ip
 8000c5c:	0223      	lsls	r3, r4, #8
 8000c5e:	0e0c      	lsrs	r4, r1, #24
 8000c60:	431c      	orrs	r4, r3
 8000c62:	0c1b      	lsrs	r3, r3, #16
 8000c64:	4699      	mov	r9, r3
 8000c66:	0423      	lsls	r3, r4, #16
 8000c68:	020a      	lsls	r2, r1, #8
 8000c6a:	0c1f      	lsrs	r7, r3, #16
 8000c6c:	4649      	mov	r1, r9
 8000c6e:	9200      	str	r2, [sp, #0]
 8000c70:	9701      	str	r7, [sp, #4]
 8000c72:	f7ff facd 	bl	8000210 <__aeabi_uidivmod>
 8000c76:	0002      	movs	r2, r0
 8000c78:	437a      	muls	r2, r7
 8000c7a:	040b      	lsls	r3, r1, #16
 8000c7c:	0c31      	lsrs	r1, r6, #16
 8000c7e:	4680      	mov	r8, r0
 8000c80:	4319      	orrs	r1, r3
 8000c82:	428a      	cmp	r2, r1
 8000c84:	d907      	bls.n	8000c96 <__aeabi_ddiv+0x12e>
 8000c86:	2301      	movs	r3, #1
 8000c88:	425b      	negs	r3, r3
 8000c8a:	469c      	mov	ip, r3
 8000c8c:	1909      	adds	r1, r1, r4
 8000c8e:	44e0      	add	r8, ip
 8000c90:	428c      	cmp	r4, r1
 8000c92:	d800      	bhi.n	8000c96 <__aeabi_ddiv+0x12e>
 8000c94:	e201      	b.n	800109a <__aeabi_ddiv+0x532>
 8000c96:	1a88      	subs	r0, r1, r2
 8000c98:	4649      	mov	r1, r9
 8000c9a:	f7ff fab9 	bl	8000210 <__aeabi_uidivmod>
 8000c9e:	9a01      	ldr	r2, [sp, #4]
 8000ca0:	0436      	lsls	r6, r6, #16
 8000ca2:	4342      	muls	r2, r0
 8000ca4:	0409      	lsls	r1, r1, #16
 8000ca6:	0c36      	lsrs	r6, r6, #16
 8000ca8:	0003      	movs	r3, r0
 8000caa:	430e      	orrs	r6, r1
 8000cac:	42b2      	cmp	r2, r6
 8000cae:	d904      	bls.n	8000cba <__aeabi_ddiv+0x152>
 8000cb0:	1936      	adds	r6, r6, r4
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	42b4      	cmp	r4, r6
 8000cb6:	d800      	bhi.n	8000cba <__aeabi_ddiv+0x152>
 8000cb8:	e1e9      	b.n	800108e <__aeabi_ddiv+0x526>
 8000cba:	1ab0      	subs	r0, r6, r2
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	9e00      	ldr	r6, [sp, #0]
 8000cc0:	0412      	lsls	r2, r2, #16
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	0c33      	lsrs	r3, r6, #16
 8000cc6:	001f      	movs	r7, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	4690      	mov	r8, r2
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	0413      	lsls	r3, r2, #16
 8000cd0:	0432      	lsls	r2, r6, #16
 8000cd2:	0c16      	lsrs	r6, r2, #16
 8000cd4:	0032      	movs	r2, r6
 8000cd6:	0c1b      	lsrs	r3, r3, #16
 8000cd8:	435a      	muls	r2, r3
 8000cda:	9603      	str	r6, [sp, #12]
 8000cdc:	437b      	muls	r3, r7
 8000cde:	434e      	muls	r6, r1
 8000ce0:	4379      	muls	r1, r7
 8000ce2:	0c17      	lsrs	r7, r2, #16
 8000ce4:	46bc      	mov	ip, r7
 8000ce6:	199b      	adds	r3, r3, r6
 8000ce8:	4463      	add	r3, ip
 8000cea:	429e      	cmp	r6, r3
 8000cec:	d903      	bls.n	8000cf6 <__aeabi_ddiv+0x18e>
 8000cee:	2680      	movs	r6, #128	; 0x80
 8000cf0:	0276      	lsls	r6, r6, #9
 8000cf2:	46b4      	mov	ip, r6
 8000cf4:	4461      	add	r1, ip
 8000cf6:	0c1e      	lsrs	r6, r3, #16
 8000cf8:	1871      	adds	r1, r6, r1
 8000cfa:	0416      	lsls	r6, r2, #16
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	0c36      	lsrs	r6, r6, #16
 8000d00:	199e      	adds	r6, r3, r6
 8000d02:	4288      	cmp	r0, r1
 8000d04:	d302      	bcc.n	8000d0c <__aeabi_ddiv+0x1a4>
 8000d06:	d112      	bne.n	8000d2e <__aeabi_ddiv+0x1c6>
 8000d08:	42b5      	cmp	r5, r6
 8000d0a:	d210      	bcs.n	8000d2e <__aeabi_ddiv+0x1c6>
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	9b00      	ldr	r3, [sp, #0]
 8000d12:	469c      	mov	ip, r3
 8000d14:	4465      	add	r5, ip
 8000d16:	001f      	movs	r7, r3
 8000d18:	429d      	cmp	r5, r3
 8000d1a:	419b      	sbcs	r3, r3
 8000d1c:	425b      	negs	r3, r3
 8000d1e:	191b      	adds	r3, r3, r4
 8000d20:	18c0      	adds	r0, r0, r3
 8000d22:	4284      	cmp	r4, r0
 8000d24:	d200      	bcs.n	8000d28 <__aeabi_ddiv+0x1c0>
 8000d26:	e19e      	b.n	8001066 <__aeabi_ddiv+0x4fe>
 8000d28:	d100      	bne.n	8000d2c <__aeabi_ddiv+0x1c4>
 8000d2a:	e199      	b.n	8001060 <__aeabi_ddiv+0x4f8>
 8000d2c:	4690      	mov	r8, r2
 8000d2e:	1bae      	subs	r6, r5, r6
 8000d30:	42b5      	cmp	r5, r6
 8000d32:	41ad      	sbcs	r5, r5
 8000d34:	1a40      	subs	r0, r0, r1
 8000d36:	426d      	negs	r5, r5
 8000d38:	1b40      	subs	r0, r0, r5
 8000d3a:	4284      	cmp	r4, r0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_ddiv+0x1d8>
 8000d3e:	e1d2      	b.n	80010e6 <__aeabi_ddiv+0x57e>
 8000d40:	4649      	mov	r1, r9
 8000d42:	f7ff fa65 	bl	8000210 <__aeabi_uidivmod>
 8000d46:	9a01      	ldr	r2, [sp, #4]
 8000d48:	040b      	lsls	r3, r1, #16
 8000d4a:	4342      	muls	r2, r0
 8000d4c:	0c31      	lsrs	r1, r6, #16
 8000d4e:	0005      	movs	r5, r0
 8000d50:	4319      	orrs	r1, r3
 8000d52:	428a      	cmp	r2, r1
 8000d54:	d900      	bls.n	8000d58 <__aeabi_ddiv+0x1f0>
 8000d56:	e16c      	b.n	8001032 <__aeabi_ddiv+0x4ca>
 8000d58:	1a88      	subs	r0, r1, r2
 8000d5a:	4649      	mov	r1, r9
 8000d5c:	f7ff fa58 	bl	8000210 <__aeabi_uidivmod>
 8000d60:	9a01      	ldr	r2, [sp, #4]
 8000d62:	0436      	lsls	r6, r6, #16
 8000d64:	4342      	muls	r2, r0
 8000d66:	0409      	lsls	r1, r1, #16
 8000d68:	0c36      	lsrs	r6, r6, #16
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	430e      	orrs	r6, r1
 8000d6e:	42b2      	cmp	r2, r6
 8000d70:	d900      	bls.n	8000d74 <__aeabi_ddiv+0x20c>
 8000d72:	e153      	b.n	800101c <__aeabi_ddiv+0x4b4>
 8000d74:	9803      	ldr	r0, [sp, #12]
 8000d76:	1ab6      	subs	r6, r6, r2
 8000d78:	0002      	movs	r2, r0
 8000d7a:	042d      	lsls	r5, r5, #16
 8000d7c:	431d      	orrs	r5, r3
 8000d7e:	9f02      	ldr	r7, [sp, #8]
 8000d80:	042b      	lsls	r3, r5, #16
 8000d82:	0c1b      	lsrs	r3, r3, #16
 8000d84:	435a      	muls	r2, r3
 8000d86:	437b      	muls	r3, r7
 8000d88:	469c      	mov	ip, r3
 8000d8a:	0c29      	lsrs	r1, r5, #16
 8000d8c:	4348      	muls	r0, r1
 8000d8e:	0c13      	lsrs	r3, r2, #16
 8000d90:	4484      	add	ip, r0
 8000d92:	4463      	add	r3, ip
 8000d94:	4379      	muls	r1, r7
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d903      	bls.n	8000da2 <__aeabi_ddiv+0x23a>
 8000d9a:	2080      	movs	r0, #128	; 0x80
 8000d9c:	0240      	lsls	r0, r0, #9
 8000d9e:	4684      	mov	ip, r0
 8000da0:	4461      	add	r1, ip
 8000da2:	0c18      	lsrs	r0, r3, #16
 8000da4:	0412      	lsls	r2, r2, #16
 8000da6:	041b      	lsls	r3, r3, #16
 8000da8:	0c12      	lsrs	r2, r2, #16
 8000daa:	1840      	adds	r0, r0, r1
 8000dac:	189b      	adds	r3, r3, r2
 8000dae:	4286      	cmp	r6, r0
 8000db0:	d200      	bcs.n	8000db4 <__aeabi_ddiv+0x24c>
 8000db2:	e100      	b.n	8000fb6 <__aeabi_ddiv+0x44e>
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x250>
 8000db6:	e0fb      	b.n	8000fb0 <__aeabi_ddiv+0x448>
 8000db8:	2301      	movs	r3, #1
 8000dba:	431d      	orrs	r5, r3
 8000dbc:	4b49      	ldr	r3, [pc, #292]	; (8000ee4 <__aeabi_ddiv+0x37c>)
 8000dbe:	445b      	add	r3, fp
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_ddiv+0x25e>
 8000dc4:	e0aa      	b.n	8000f1c <__aeabi_ddiv+0x3b4>
 8000dc6:	076a      	lsls	r2, r5, #29
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_ddiv+0x264>
 8000dca:	e13d      	b.n	8001048 <__aeabi_ddiv+0x4e0>
 8000dcc:	08e9      	lsrs	r1, r5, #3
 8000dce:	4642      	mov	r2, r8
 8000dd0:	01d2      	lsls	r2, r2, #7
 8000dd2:	d506      	bpl.n	8000de2 <__aeabi_ddiv+0x27a>
 8000dd4:	4642      	mov	r2, r8
 8000dd6:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <__aeabi_ddiv+0x380>)
 8000dd8:	401a      	ands	r2, r3
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	4690      	mov	r8, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	445b      	add	r3, fp
 8000de2:	4a42      	ldr	r2, [pc, #264]	; (8000eec <__aeabi_ddiv+0x384>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	dd00      	ble.n	8000dea <__aeabi_ddiv+0x282>
 8000de8:	e723      	b.n	8000c32 <__aeabi_ddiv+0xca>
 8000dea:	4642      	mov	r2, r8
 8000dec:	055b      	lsls	r3, r3, #21
 8000dee:	0755      	lsls	r5, r2, #29
 8000df0:	0252      	lsls	r2, r2, #9
 8000df2:	430d      	orrs	r5, r1
 8000df4:	0b12      	lsrs	r2, r2, #12
 8000df6:	0d5b      	lsrs	r3, r3, #21
 8000df8:	e70d      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000dfa:	4651      	mov	r1, sl
 8000dfc:	4321      	orrs	r1, r4
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x29a>
 8000e00:	e07c      	b.n	8000efc <__aeabi_ddiv+0x394>
 8000e02:	2c00      	cmp	r4, #0
 8000e04:	d100      	bne.n	8000e08 <__aeabi_ddiv+0x2a0>
 8000e06:	e0fb      	b.n	8001000 <__aeabi_ddiv+0x498>
 8000e08:	0020      	movs	r0, r4
 8000e0a:	f001 f995 	bl	8002138 <__clzsi2>
 8000e0e:	0002      	movs	r2, r0
 8000e10:	3a0b      	subs	r2, #11
 8000e12:	231d      	movs	r3, #29
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	4652      	mov	r2, sl
 8000e18:	0001      	movs	r1, r0
 8000e1a:	40da      	lsrs	r2, r3
 8000e1c:	4653      	mov	r3, sl
 8000e1e:	3908      	subs	r1, #8
 8000e20:	408b      	lsls	r3, r1
 8000e22:	408c      	lsls	r4, r1
 8000e24:	0019      	movs	r1, r3
 8000e26:	4314      	orrs	r4, r2
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <__aeabi_ddiv+0x388>)
 8000e2a:	4458      	add	r0, fp
 8000e2c:	469b      	mov	fp, r3
 8000e2e:	4483      	add	fp, r0
 8000e30:	2000      	movs	r0, #0
 8000e32:	e6d9      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000e34:	0003      	movs	r3, r0
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d044      	beq.n	8000ec6 <__aeabi_ddiv+0x35e>
 8000e3c:	2c00      	cmp	r4, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x2da>
 8000e40:	e0cf      	b.n	8000fe2 <__aeabi_ddiv+0x47a>
 8000e42:	0020      	movs	r0, r4
 8000e44:	f001 f978 	bl	8002138 <__clzsi2>
 8000e48:	0001      	movs	r1, r0
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	390b      	subs	r1, #11
 8000e4e:	231d      	movs	r3, #29
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	4649      	mov	r1, r9
 8000e54:	0010      	movs	r0, r2
 8000e56:	40d9      	lsrs	r1, r3
 8000e58:	3808      	subs	r0, #8
 8000e5a:	4084      	lsls	r4, r0
 8000e5c:	000b      	movs	r3, r1
 8000e5e:	464d      	mov	r5, r9
 8000e60:	4323      	orrs	r3, r4
 8000e62:	4698      	mov	r8, r3
 8000e64:	4085      	lsls	r5, r0
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <__aeabi_ddiv+0x38c>)
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	469b      	mov	fp, r3
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	4699      	mov	r9, r3
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	e69e      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000e74:	0002      	movs	r2, r0
 8000e76:	4322      	orrs	r2, r4
 8000e78:	4690      	mov	r8, r2
 8000e7a:	d11d      	bne.n	8000eb8 <__aeabi_ddiv+0x350>
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	469b      	mov	fp, r3
 8000e80:	2302      	movs	r3, #2
 8000e82:	2500      	movs	r5, #0
 8000e84:	4691      	mov	r9, r2
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	e693      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000e8a:	4651      	mov	r1, sl
 8000e8c:	4321      	orrs	r1, r4
 8000e8e:	d109      	bne.n	8000ea4 <__aeabi_ddiv+0x33c>
 8000e90:	2302      	movs	r3, #2
 8000e92:	464a      	mov	r2, r9
 8000e94:	431a      	orrs	r2, r3
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <__aeabi_ddiv+0x390>)
 8000e98:	4691      	mov	r9, r2
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	44e3      	add	fp, ip
 8000ea2:	e6a1      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	464a      	mov	r2, r9
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <__aeabi_ddiv+0x390>)
 8000eac:	4691      	mov	r9, r2
 8000eae:	469c      	mov	ip, r3
 8000eb0:	4651      	mov	r1, sl
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	44e3      	add	fp, ip
 8000eb6:	e697      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000eb8:	220c      	movs	r2, #12
 8000eba:	469b      	mov	fp, r3
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	46a0      	mov	r8, r4
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	e675      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	4699      	mov	r9, r3
 8000eca:	2300      	movs	r3, #0
 8000ecc:	469b      	mov	fp, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	e66d      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	000007ff 	.word	0x000007ff
 8000edc:	fffffc01 	.word	0xfffffc01
 8000ee0:	08007038 	.word	0x08007038
 8000ee4:	000003ff 	.word	0x000003ff
 8000ee8:	feffffff 	.word	0xfeffffff
 8000eec:	000007fe 	.word	0x000007fe
 8000ef0:	000003f3 	.word	0x000003f3
 8000ef4:	fffffc0d 	.word	0xfffffc0d
 8000ef8:	fffff801 	.word	0xfffff801
 8000efc:	464a      	mov	r2, r9
 8000efe:	2301      	movs	r3, #1
 8000f00:	431a      	orrs	r2, r3
 8000f02:	4691      	mov	r9, r2
 8000f04:	2400      	movs	r4, #0
 8000f06:	2001      	movs	r0, #1
 8000f08:	e66e      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	469a      	mov	sl, r3
 8000f10:	2500      	movs	r5, #0
 8000f12:	4b88      	ldr	r3, [pc, #544]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8000f14:	0312      	lsls	r2, r2, #12
 8000f16:	e67e      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000f18:	2501      	movs	r5, #1
 8000f1a:	426d      	negs	r5, r5
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	1ad2      	subs	r2, r2, r3
 8000f20:	2a38      	cmp	r2, #56	; 0x38
 8000f22:	dd00      	ble.n	8000f26 <__aeabi_ddiv+0x3be>
 8000f24:	e674      	b.n	8000c10 <__aeabi_ddiv+0xa8>
 8000f26:	2a1f      	cmp	r2, #31
 8000f28:	dc00      	bgt.n	8000f2c <__aeabi_ddiv+0x3c4>
 8000f2a:	e0bd      	b.n	80010a8 <__aeabi_ddiv+0x540>
 8000f2c:	211f      	movs	r1, #31
 8000f2e:	4249      	negs	r1, r1
 8000f30:	1acb      	subs	r3, r1, r3
 8000f32:	4641      	mov	r1, r8
 8000f34:	40d9      	lsrs	r1, r3
 8000f36:	000b      	movs	r3, r1
 8000f38:	2a20      	cmp	r2, #32
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_ddiv+0x3de>
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	4a7e      	ldr	r2, [pc, #504]	; (8001138 <__aeabi_ddiv+0x5d0>)
 8000f40:	445a      	add	r2, fp
 8000f42:	4091      	lsls	r1, r2
 8000f44:	430d      	orrs	r5, r1
 8000f46:	0029      	movs	r1, r5
 8000f48:	1e4a      	subs	r2, r1, #1
 8000f4a:	4191      	sbcs	r1, r2
 8000f4c:	4319      	orrs	r1, r3
 8000f4e:	2307      	movs	r3, #7
 8000f50:	001d      	movs	r5, r3
 8000f52:	2200      	movs	r2, #0
 8000f54:	400d      	ands	r5, r1
 8000f56:	420b      	tst	r3, r1
 8000f58:	d100      	bne.n	8000f5c <__aeabi_ddiv+0x3f4>
 8000f5a:	e0d0      	b.n	80010fe <__aeabi_ddiv+0x596>
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	2300      	movs	r3, #0
 8000f60:	400a      	ands	r2, r1
 8000f62:	2a04      	cmp	r2, #4
 8000f64:	d100      	bne.n	8000f68 <__aeabi_ddiv+0x400>
 8000f66:	e0c7      	b.n	80010f8 <__aeabi_ddiv+0x590>
 8000f68:	1d0a      	adds	r2, r1, #4
 8000f6a:	428a      	cmp	r2, r1
 8000f6c:	4189      	sbcs	r1, r1
 8000f6e:	4249      	negs	r1, r1
 8000f70:	185b      	adds	r3, r3, r1
 8000f72:	0011      	movs	r1, r2
 8000f74:	021a      	lsls	r2, r3, #8
 8000f76:	d400      	bmi.n	8000f7a <__aeabi_ddiv+0x412>
 8000f78:	e0be      	b.n	80010f8 <__aeabi_ddiv+0x590>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2500      	movs	r5, #0
 8000f80:	e649      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	4643      	mov	r3, r8
 8000f86:	0312      	lsls	r2, r2, #12
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d008      	beq.n	8000f9e <__aeabi_ddiv+0x436>
 8000f8c:	4214      	tst	r4, r2
 8000f8e:	d106      	bne.n	8000f9e <__aeabi_ddiv+0x436>
 8000f90:	4322      	orrs	r2, r4
 8000f92:	0312      	lsls	r2, r2, #12
 8000f94:	46ba      	mov	sl, r7
 8000f96:	000d      	movs	r5, r1
 8000f98:	4b66      	ldr	r3, [pc, #408]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8000f9a:	0b12      	lsrs	r2, r2, #12
 8000f9c:	e63b      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	4643      	mov	r3, r8
 8000fa2:	0312      	lsls	r2, r2, #12
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	0312      	lsls	r2, r2, #12
 8000fa8:	46b2      	mov	sl, r6
 8000faa:	4b62      	ldr	r3, [pc, #392]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8000fac:	0b12      	lsrs	r2, r2, #12
 8000fae:	e632      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_ddiv+0x44e>
 8000fb4:	e702      	b.n	8000dbc <__aeabi_ddiv+0x254>
 8000fb6:	19a6      	adds	r6, r4, r6
 8000fb8:	1e6a      	subs	r2, r5, #1
 8000fba:	42a6      	cmp	r6, r4
 8000fbc:	d200      	bcs.n	8000fc0 <__aeabi_ddiv+0x458>
 8000fbe:	e089      	b.n	80010d4 <__aeabi_ddiv+0x56c>
 8000fc0:	4286      	cmp	r6, r0
 8000fc2:	d200      	bcs.n	8000fc6 <__aeabi_ddiv+0x45e>
 8000fc4:	e09f      	b.n	8001106 <__aeabi_ddiv+0x59e>
 8000fc6:	d100      	bne.n	8000fca <__aeabi_ddiv+0x462>
 8000fc8:	e0af      	b.n	800112a <__aeabi_ddiv+0x5c2>
 8000fca:	0015      	movs	r5, r2
 8000fcc:	e6f4      	b.n	8000db8 <__aeabi_ddiv+0x250>
 8000fce:	42a9      	cmp	r1, r5
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x46c>
 8000fd2:	e63c      	b.n	8000c4e <__aeabi_ddiv+0xe6>
 8000fd4:	4643      	mov	r3, r8
 8000fd6:	07de      	lsls	r6, r3, #31
 8000fd8:	0858      	lsrs	r0, r3, #1
 8000fda:	086b      	lsrs	r3, r5, #1
 8000fdc:	431e      	orrs	r6, r3
 8000fde:	07ed      	lsls	r5, r5, #31
 8000fe0:	e63c      	b.n	8000c5c <__aeabi_ddiv+0xf4>
 8000fe2:	f001 f8a9 	bl	8002138 <__clzsi2>
 8000fe6:	0001      	movs	r1, r0
 8000fe8:	0002      	movs	r2, r0
 8000fea:	3115      	adds	r1, #21
 8000fec:	3220      	adds	r2, #32
 8000fee:	291c      	cmp	r1, #28
 8000ff0:	dc00      	bgt.n	8000ff4 <__aeabi_ddiv+0x48c>
 8000ff2:	e72c      	b.n	8000e4e <__aeabi_ddiv+0x2e6>
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	3808      	subs	r0, #8
 8000ff8:	4083      	lsls	r3, r0
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	4698      	mov	r8, r3
 8000ffe:	e732      	b.n	8000e66 <__aeabi_ddiv+0x2fe>
 8001000:	f001 f89a 	bl	8002138 <__clzsi2>
 8001004:	0003      	movs	r3, r0
 8001006:	001a      	movs	r2, r3
 8001008:	3215      	adds	r2, #21
 800100a:	3020      	adds	r0, #32
 800100c:	2a1c      	cmp	r2, #28
 800100e:	dc00      	bgt.n	8001012 <__aeabi_ddiv+0x4aa>
 8001010:	e6ff      	b.n	8000e12 <__aeabi_ddiv+0x2aa>
 8001012:	4654      	mov	r4, sl
 8001014:	3b08      	subs	r3, #8
 8001016:	2100      	movs	r1, #0
 8001018:	409c      	lsls	r4, r3
 800101a:	e705      	b.n	8000e28 <__aeabi_ddiv+0x2c0>
 800101c:	1936      	adds	r6, r6, r4
 800101e:	3b01      	subs	r3, #1
 8001020:	42b4      	cmp	r4, r6
 8001022:	d900      	bls.n	8001026 <__aeabi_ddiv+0x4be>
 8001024:	e6a6      	b.n	8000d74 <__aeabi_ddiv+0x20c>
 8001026:	42b2      	cmp	r2, r6
 8001028:	d800      	bhi.n	800102c <__aeabi_ddiv+0x4c4>
 800102a:	e6a3      	b.n	8000d74 <__aeabi_ddiv+0x20c>
 800102c:	1e83      	subs	r3, r0, #2
 800102e:	1936      	adds	r6, r6, r4
 8001030:	e6a0      	b.n	8000d74 <__aeabi_ddiv+0x20c>
 8001032:	1909      	adds	r1, r1, r4
 8001034:	3d01      	subs	r5, #1
 8001036:	428c      	cmp	r4, r1
 8001038:	d900      	bls.n	800103c <__aeabi_ddiv+0x4d4>
 800103a:	e68d      	b.n	8000d58 <__aeabi_ddiv+0x1f0>
 800103c:	428a      	cmp	r2, r1
 800103e:	d800      	bhi.n	8001042 <__aeabi_ddiv+0x4da>
 8001040:	e68a      	b.n	8000d58 <__aeabi_ddiv+0x1f0>
 8001042:	1e85      	subs	r5, r0, #2
 8001044:	1909      	adds	r1, r1, r4
 8001046:	e687      	b.n	8000d58 <__aeabi_ddiv+0x1f0>
 8001048:	220f      	movs	r2, #15
 800104a:	402a      	ands	r2, r5
 800104c:	2a04      	cmp	r2, #4
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x4ea>
 8001050:	e6bc      	b.n	8000dcc <__aeabi_ddiv+0x264>
 8001052:	1d29      	adds	r1, r5, #4
 8001054:	42a9      	cmp	r1, r5
 8001056:	41ad      	sbcs	r5, r5
 8001058:	426d      	negs	r5, r5
 800105a:	08c9      	lsrs	r1, r1, #3
 800105c:	44a8      	add	r8, r5
 800105e:	e6b6      	b.n	8000dce <__aeabi_ddiv+0x266>
 8001060:	42af      	cmp	r7, r5
 8001062:	d900      	bls.n	8001066 <__aeabi_ddiv+0x4fe>
 8001064:	e662      	b.n	8000d2c <__aeabi_ddiv+0x1c4>
 8001066:	4281      	cmp	r1, r0
 8001068:	d804      	bhi.n	8001074 <__aeabi_ddiv+0x50c>
 800106a:	d000      	beq.n	800106e <__aeabi_ddiv+0x506>
 800106c:	e65e      	b.n	8000d2c <__aeabi_ddiv+0x1c4>
 800106e:	42ae      	cmp	r6, r5
 8001070:	d800      	bhi.n	8001074 <__aeabi_ddiv+0x50c>
 8001072:	e65b      	b.n	8000d2c <__aeabi_ddiv+0x1c4>
 8001074:	2302      	movs	r3, #2
 8001076:	425b      	negs	r3, r3
 8001078:	469c      	mov	ip, r3
 800107a:	9b00      	ldr	r3, [sp, #0]
 800107c:	44e0      	add	r8, ip
 800107e:	469c      	mov	ip, r3
 8001080:	4465      	add	r5, ip
 8001082:	429d      	cmp	r5, r3
 8001084:	419b      	sbcs	r3, r3
 8001086:	425b      	negs	r3, r3
 8001088:	191b      	adds	r3, r3, r4
 800108a:	18c0      	adds	r0, r0, r3
 800108c:	e64f      	b.n	8000d2e <__aeabi_ddiv+0x1c6>
 800108e:	42b2      	cmp	r2, r6
 8001090:	d800      	bhi.n	8001094 <__aeabi_ddiv+0x52c>
 8001092:	e612      	b.n	8000cba <__aeabi_ddiv+0x152>
 8001094:	1e83      	subs	r3, r0, #2
 8001096:	1936      	adds	r6, r6, r4
 8001098:	e60f      	b.n	8000cba <__aeabi_ddiv+0x152>
 800109a:	428a      	cmp	r2, r1
 800109c:	d800      	bhi.n	80010a0 <__aeabi_ddiv+0x538>
 800109e:	e5fa      	b.n	8000c96 <__aeabi_ddiv+0x12e>
 80010a0:	1e83      	subs	r3, r0, #2
 80010a2:	4698      	mov	r8, r3
 80010a4:	1909      	adds	r1, r1, r4
 80010a6:	e5f6      	b.n	8000c96 <__aeabi_ddiv+0x12e>
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <__aeabi_ddiv+0x5d4>)
 80010aa:	0028      	movs	r0, r5
 80010ac:	445b      	add	r3, fp
 80010ae:	4641      	mov	r1, r8
 80010b0:	409d      	lsls	r5, r3
 80010b2:	4099      	lsls	r1, r3
 80010b4:	40d0      	lsrs	r0, r2
 80010b6:	1e6b      	subs	r3, r5, #1
 80010b8:	419d      	sbcs	r5, r3
 80010ba:	4643      	mov	r3, r8
 80010bc:	4301      	orrs	r1, r0
 80010be:	4329      	orrs	r1, r5
 80010c0:	40d3      	lsrs	r3, r2
 80010c2:	074a      	lsls	r2, r1, #29
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x560>
 80010c6:	e755      	b.n	8000f74 <__aeabi_ddiv+0x40c>
 80010c8:	220f      	movs	r2, #15
 80010ca:	400a      	ands	r2, r1
 80010cc:	2a04      	cmp	r2, #4
 80010ce:	d000      	beq.n	80010d2 <__aeabi_ddiv+0x56a>
 80010d0:	e74a      	b.n	8000f68 <__aeabi_ddiv+0x400>
 80010d2:	e74f      	b.n	8000f74 <__aeabi_ddiv+0x40c>
 80010d4:	0015      	movs	r5, r2
 80010d6:	4286      	cmp	r6, r0
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x574>
 80010da:	e66d      	b.n	8000db8 <__aeabi_ddiv+0x250>
 80010dc:	9a00      	ldr	r2, [sp, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d000      	beq.n	80010e4 <__aeabi_ddiv+0x57c>
 80010e2:	e669      	b.n	8000db8 <__aeabi_ddiv+0x250>
 80010e4:	e66a      	b.n	8000dbc <__aeabi_ddiv+0x254>
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <__aeabi_ddiv+0x5d8>)
 80010e8:	445b      	add	r3, fp
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dc00      	bgt.n	80010f0 <__aeabi_ddiv+0x588>
 80010ee:	e713      	b.n	8000f18 <__aeabi_ddiv+0x3b0>
 80010f0:	2501      	movs	r5, #1
 80010f2:	2100      	movs	r1, #0
 80010f4:	44a8      	add	r8, r5
 80010f6:	e66a      	b.n	8000dce <__aeabi_ddiv+0x266>
 80010f8:	075d      	lsls	r5, r3, #29
 80010fa:	025b      	lsls	r3, r3, #9
 80010fc:	0b1a      	lsrs	r2, r3, #12
 80010fe:	08c9      	lsrs	r1, r1, #3
 8001100:	2300      	movs	r3, #0
 8001102:	430d      	orrs	r5, r1
 8001104:	e587      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8001106:	9900      	ldr	r1, [sp, #0]
 8001108:	3d02      	subs	r5, #2
 800110a:	004a      	lsls	r2, r1, #1
 800110c:	428a      	cmp	r2, r1
 800110e:	41bf      	sbcs	r7, r7
 8001110:	427f      	negs	r7, r7
 8001112:	193f      	adds	r7, r7, r4
 8001114:	19f6      	adds	r6, r6, r7
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	e7dd      	b.n	80010d6 <__aeabi_ddiv+0x56e>
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	4643      	mov	r3, r8
 800111e:	0312      	lsls	r2, r2, #12
 8001120:	431a      	orrs	r2, r3
 8001122:	0312      	lsls	r2, r2, #12
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8001126:	0b12      	lsrs	r2, r2, #12
 8001128:	e575      	b.n	8000c16 <__aeabi_ddiv+0xae>
 800112a:	9900      	ldr	r1, [sp, #0]
 800112c:	4299      	cmp	r1, r3
 800112e:	d3ea      	bcc.n	8001106 <__aeabi_ddiv+0x59e>
 8001130:	0015      	movs	r5, r2
 8001132:	e7d3      	b.n	80010dc <__aeabi_ddiv+0x574>
 8001134:	000007ff 	.word	0x000007ff
 8001138:	0000043e 	.word	0x0000043e
 800113c:	0000041e 	.word	0x0000041e
 8001140:	000003ff 	.word	0x000003ff

08001144 <__eqdf2>:
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	464e      	mov	r6, r9
 8001148:	4645      	mov	r5, r8
 800114a:	46de      	mov	lr, fp
 800114c:	4657      	mov	r7, sl
 800114e:	4690      	mov	r8, r2
 8001150:	b5e0      	push	{r5, r6, r7, lr}
 8001152:	0017      	movs	r7, r2
 8001154:	031a      	lsls	r2, r3, #12
 8001156:	0b12      	lsrs	r2, r2, #12
 8001158:	0005      	movs	r5, r0
 800115a:	4684      	mov	ip, r0
 800115c:	4819      	ldr	r0, [pc, #100]	; (80011c4 <__eqdf2+0x80>)
 800115e:	030e      	lsls	r6, r1, #12
 8001160:	004c      	lsls	r4, r1, #1
 8001162:	4691      	mov	r9, r2
 8001164:	005a      	lsls	r2, r3, #1
 8001166:	0fdb      	lsrs	r3, r3, #31
 8001168:	469b      	mov	fp, r3
 800116a:	0b36      	lsrs	r6, r6, #12
 800116c:	0d64      	lsrs	r4, r4, #21
 800116e:	0fc9      	lsrs	r1, r1, #31
 8001170:	0d52      	lsrs	r2, r2, #21
 8001172:	4284      	cmp	r4, r0
 8001174:	d019      	beq.n	80011aa <__eqdf2+0x66>
 8001176:	4282      	cmp	r2, r0
 8001178:	d010      	beq.n	800119c <__eqdf2+0x58>
 800117a:	2001      	movs	r0, #1
 800117c:	4294      	cmp	r4, r2
 800117e:	d10e      	bne.n	800119e <__eqdf2+0x5a>
 8001180:	454e      	cmp	r6, r9
 8001182:	d10c      	bne.n	800119e <__eqdf2+0x5a>
 8001184:	2001      	movs	r0, #1
 8001186:	45c4      	cmp	ip, r8
 8001188:	d109      	bne.n	800119e <__eqdf2+0x5a>
 800118a:	4559      	cmp	r1, fp
 800118c:	d017      	beq.n	80011be <__eqdf2+0x7a>
 800118e:	2c00      	cmp	r4, #0
 8001190:	d105      	bne.n	800119e <__eqdf2+0x5a>
 8001192:	0030      	movs	r0, r6
 8001194:	4328      	orrs	r0, r5
 8001196:	1e43      	subs	r3, r0, #1
 8001198:	4198      	sbcs	r0, r3
 800119a:	e000      	b.n	800119e <__eqdf2+0x5a>
 800119c:	2001      	movs	r0, #1
 800119e:	bcf0      	pop	{r4, r5, r6, r7}
 80011a0:	46bb      	mov	fp, r7
 80011a2:	46b2      	mov	sl, r6
 80011a4:	46a9      	mov	r9, r5
 80011a6:	46a0      	mov	r8, r4
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	0033      	movs	r3, r6
 80011ac:	2001      	movs	r0, #1
 80011ae:	432b      	orrs	r3, r5
 80011b0:	d1f5      	bne.n	800119e <__eqdf2+0x5a>
 80011b2:	42a2      	cmp	r2, r4
 80011b4:	d1f3      	bne.n	800119e <__eqdf2+0x5a>
 80011b6:	464b      	mov	r3, r9
 80011b8:	433b      	orrs	r3, r7
 80011ba:	d1f0      	bne.n	800119e <__eqdf2+0x5a>
 80011bc:	e7e2      	b.n	8001184 <__eqdf2+0x40>
 80011be:	2000      	movs	r0, #0
 80011c0:	e7ed      	b.n	800119e <__eqdf2+0x5a>
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	000007ff 	.word	0x000007ff

080011c8 <__gedf2>:
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	4647      	mov	r7, r8
 80011cc:	46ce      	mov	lr, r9
 80011ce:	0004      	movs	r4, r0
 80011d0:	0018      	movs	r0, r3
 80011d2:	0016      	movs	r6, r2
 80011d4:	031b      	lsls	r3, r3, #12
 80011d6:	0b1b      	lsrs	r3, r3, #12
 80011d8:	4d2d      	ldr	r5, [pc, #180]	; (8001290 <__gedf2+0xc8>)
 80011da:	004a      	lsls	r2, r1, #1
 80011dc:	4699      	mov	r9, r3
 80011de:	b580      	push	{r7, lr}
 80011e0:	0043      	lsls	r3, r0, #1
 80011e2:	030f      	lsls	r7, r1, #12
 80011e4:	46a4      	mov	ip, r4
 80011e6:	46b0      	mov	r8, r6
 80011e8:	0b3f      	lsrs	r7, r7, #12
 80011ea:	0d52      	lsrs	r2, r2, #21
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	0d5b      	lsrs	r3, r3, #21
 80011f0:	0fc0      	lsrs	r0, r0, #31
 80011f2:	42aa      	cmp	r2, r5
 80011f4:	d021      	beq.n	800123a <__gedf2+0x72>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d013      	beq.n	8001222 <__gedf2+0x5a>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d122      	bne.n	8001244 <__gedf2+0x7c>
 80011fe:	433c      	orrs	r4, r7
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <__gedf2+0x42>
 8001204:	464d      	mov	r5, r9
 8001206:	432e      	orrs	r6, r5
 8001208:	d022      	beq.n	8001250 <__gedf2+0x88>
 800120a:	2c00      	cmp	r4, #0
 800120c:	d010      	beq.n	8001230 <__gedf2+0x68>
 800120e:	4281      	cmp	r1, r0
 8001210:	d022      	beq.n	8001258 <__gedf2+0x90>
 8001212:	2002      	movs	r0, #2
 8001214:	3901      	subs	r1, #1
 8001216:	4008      	ands	r0, r1
 8001218:	3801      	subs	r0, #1
 800121a:	bcc0      	pop	{r6, r7}
 800121c:	46b9      	mov	r9, r7
 800121e:	46b0      	mov	r8, r6
 8001220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001222:	464d      	mov	r5, r9
 8001224:	432e      	orrs	r6, r5
 8001226:	d129      	bne.n	800127c <__gedf2+0xb4>
 8001228:	2a00      	cmp	r2, #0
 800122a:	d1f0      	bne.n	800120e <__gedf2+0x46>
 800122c:	433c      	orrs	r4, r7
 800122e:	d1ee      	bne.n	800120e <__gedf2+0x46>
 8001230:	2800      	cmp	r0, #0
 8001232:	d1f2      	bne.n	800121a <__gedf2+0x52>
 8001234:	2001      	movs	r0, #1
 8001236:	4240      	negs	r0, r0
 8001238:	e7ef      	b.n	800121a <__gedf2+0x52>
 800123a:	003d      	movs	r5, r7
 800123c:	4325      	orrs	r5, r4
 800123e:	d11d      	bne.n	800127c <__gedf2+0xb4>
 8001240:	4293      	cmp	r3, r2
 8001242:	d0ee      	beq.n	8001222 <__gedf2+0x5a>
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e2      	bne.n	800120e <__gedf2+0x46>
 8001248:	464c      	mov	r4, r9
 800124a:	4326      	orrs	r6, r4
 800124c:	d1df      	bne.n	800120e <__gedf2+0x46>
 800124e:	e7e0      	b.n	8001212 <__gedf2+0x4a>
 8001250:	2000      	movs	r0, #0
 8001252:	2c00      	cmp	r4, #0
 8001254:	d0e1      	beq.n	800121a <__gedf2+0x52>
 8001256:	e7dc      	b.n	8001212 <__gedf2+0x4a>
 8001258:	429a      	cmp	r2, r3
 800125a:	dc0a      	bgt.n	8001272 <__gedf2+0xaa>
 800125c:	dbe8      	blt.n	8001230 <__gedf2+0x68>
 800125e:	454f      	cmp	r7, r9
 8001260:	d8d7      	bhi.n	8001212 <__gedf2+0x4a>
 8001262:	d00e      	beq.n	8001282 <__gedf2+0xba>
 8001264:	2000      	movs	r0, #0
 8001266:	454f      	cmp	r7, r9
 8001268:	d2d7      	bcs.n	800121a <__gedf2+0x52>
 800126a:	2900      	cmp	r1, #0
 800126c:	d0e2      	beq.n	8001234 <__gedf2+0x6c>
 800126e:	0008      	movs	r0, r1
 8001270:	e7d3      	b.n	800121a <__gedf2+0x52>
 8001272:	4243      	negs	r3, r0
 8001274:	4158      	adcs	r0, r3
 8001276:	0040      	lsls	r0, r0, #1
 8001278:	3801      	subs	r0, #1
 800127a:	e7ce      	b.n	800121a <__gedf2+0x52>
 800127c:	2002      	movs	r0, #2
 800127e:	4240      	negs	r0, r0
 8001280:	e7cb      	b.n	800121a <__gedf2+0x52>
 8001282:	45c4      	cmp	ip, r8
 8001284:	d8c5      	bhi.n	8001212 <__gedf2+0x4a>
 8001286:	2000      	movs	r0, #0
 8001288:	45c4      	cmp	ip, r8
 800128a:	d2c6      	bcs.n	800121a <__gedf2+0x52>
 800128c:	e7ed      	b.n	800126a <__gedf2+0xa2>
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	000007ff 	.word	0x000007ff

08001294 <__ledf2>:
 8001294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001296:	4647      	mov	r7, r8
 8001298:	46ce      	mov	lr, r9
 800129a:	0004      	movs	r4, r0
 800129c:	0018      	movs	r0, r3
 800129e:	0016      	movs	r6, r2
 80012a0:	031b      	lsls	r3, r3, #12
 80012a2:	0b1b      	lsrs	r3, r3, #12
 80012a4:	4d2c      	ldr	r5, [pc, #176]	; (8001358 <__ledf2+0xc4>)
 80012a6:	004a      	lsls	r2, r1, #1
 80012a8:	4699      	mov	r9, r3
 80012aa:	b580      	push	{r7, lr}
 80012ac:	0043      	lsls	r3, r0, #1
 80012ae:	030f      	lsls	r7, r1, #12
 80012b0:	46a4      	mov	ip, r4
 80012b2:	46b0      	mov	r8, r6
 80012b4:	0b3f      	lsrs	r7, r7, #12
 80012b6:	0d52      	lsrs	r2, r2, #21
 80012b8:	0fc9      	lsrs	r1, r1, #31
 80012ba:	0d5b      	lsrs	r3, r3, #21
 80012bc:	0fc0      	lsrs	r0, r0, #31
 80012be:	42aa      	cmp	r2, r5
 80012c0:	d00d      	beq.n	80012de <__ledf2+0x4a>
 80012c2:	42ab      	cmp	r3, r5
 80012c4:	d010      	beq.n	80012e8 <__ledf2+0x54>
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d127      	bne.n	800131a <__ledf2+0x86>
 80012ca:	433c      	orrs	r4, r7
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d111      	bne.n	80012f4 <__ledf2+0x60>
 80012d0:	464d      	mov	r5, r9
 80012d2:	432e      	orrs	r6, r5
 80012d4:	d10e      	bne.n	80012f4 <__ledf2+0x60>
 80012d6:	2000      	movs	r0, #0
 80012d8:	2c00      	cmp	r4, #0
 80012da:	d015      	beq.n	8001308 <__ledf2+0x74>
 80012dc:	e00e      	b.n	80012fc <__ledf2+0x68>
 80012de:	003d      	movs	r5, r7
 80012e0:	4325      	orrs	r5, r4
 80012e2:	d110      	bne.n	8001306 <__ledf2+0x72>
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d118      	bne.n	800131a <__ledf2+0x86>
 80012e8:	464d      	mov	r5, r9
 80012ea:	432e      	orrs	r6, r5
 80012ec:	d10b      	bne.n	8001306 <__ledf2+0x72>
 80012ee:	2a00      	cmp	r2, #0
 80012f0:	d102      	bne.n	80012f8 <__ledf2+0x64>
 80012f2:	433c      	orrs	r4, r7
 80012f4:	2c00      	cmp	r4, #0
 80012f6:	d00b      	beq.n	8001310 <__ledf2+0x7c>
 80012f8:	4281      	cmp	r1, r0
 80012fa:	d014      	beq.n	8001326 <__ledf2+0x92>
 80012fc:	2002      	movs	r0, #2
 80012fe:	3901      	subs	r1, #1
 8001300:	4008      	ands	r0, r1
 8001302:	3801      	subs	r0, #1
 8001304:	e000      	b.n	8001308 <__ledf2+0x74>
 8001306:	2002      	movs	r0, #2
 8001308:	bcc0      	pop	{r6, r7}
 800130a:	46b9      	mov	r9, r7
 800130c:	46b0      	mov	r8, r6
 800130e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001310:	2800      	cmp	r0, #0
 8001312:	d1f9      	bne.n	8001308 <__ledf2+0x74>
 8001314:	2001      	movs	r0, #1
 8001316:	4240      	negs	r0, r0
 8001318:	e7f6      	b.n	8001308 <__ledf2+0x74>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1ec      	bne.n	80012f8 <__ledf2+0x64>
 800131e:	464c      	mov	r4, r9
 8001320:	4326      	orrs	r6, r4
 8001322:	d1e9      	bne.n	80012f8 <__ledf2+0x64>
 8001324:	e7ea      	b.n	80012fc <__ledf2+0x68>
 8001326:	429a      	cmp	r2, r3
 8001328:	dd04      	ble.n	8001334 <__ledf2+0xa0>
 800132a:	4243      	negs	r3, r0
 800132c:	4158      	adcs	r0, r3
 800132e:	0040      	lsls	r0, r0, #1
 8001330:	3801      	subs	r0, #1
 8001332:	e7e9      	b.n	8001308 <__ledf2+0x74>
 8001334:	429a      	cmp	r2, r3
 8001336:	dbeb      	blt.n	8001310 <__ledf2+0x7c>
 8001338:	454f      	cmp	r7, r9
 800133a:	d8df      	bhi.n	80012fc <__ledf2+0x68>
 800133c:	d006      	beq.n	800134c <__ledf2+0xb8>
 800133e:	2000      	movs	r0, #0
 8001340:	454f      	cmp	r7, r9
 8001342:	d2e1      	bcs.n	8001308 <__ledf2+0x74>
 8001344:	2900      	cmp	r1, #0
 8001346:	d0e5      	beq.n	8001314 <__ledf2+0x80>
 8001348:	0008      	movs	r0, r1
 800134a:	e7dd      	b.n	8001308 <__ledf2+0x74>
 800134c:	45c4      	cmp	ip, r8
 800134e:	d8d5      	bhi.n	80012fc <__ledf2+0x68>
 8001350:	2000      	movs	r0, #0
 8001352:	45c4      	cmp	ip, r8
 8001354:	d2d8      	bcs.n	8001308 <__ledf2+0x74>
 8001356:	e7f5      	b.n	8001344 <__ledf2+0xb0>
 8001358:	000007ff 	.word	0x000007ff

0800135c <__aeabi_dmul>:
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	4645      	mov	r5, r8
 8001360:	46de      	mov	lr, fp
 8001362:	4657      	mov	r7, sl
 8001364:	464e      	mov	r6, r9
 8001366:	b5e0      	push	{r5, r6, r7, lr}
 8001368:	001f      	movs	r7, r3
 800136a:	030b      	lsls	r3, r1, #12
 800136c:	0b1b      	lsrs	r3, r3, #12
 800136e:	469b      	mov	fp, r3
 8001370:	004d      	lsls	r5, r1, #1
 8001372:	0fcb      	lsrs	r3, r1, #31
 8001374:	0004      	movs	r4, r0
 8001376:	4691      	mov	r9, r2
 8001378:	4698      	mov	r8, r3
 800137a:	b087      	sub	sp, #28
 800137c:	0d6d      	lsrs	r5, r5, #21
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x26>
 8001380:	e1cd      	b.n	800171e <__aeabi_dmul+0x3c2>
 8001382:	4bce      	ldr	r3, [pc, #824]	; (80016bc <__aeabi_dmul+0x360>)
 8001384:	429d      	cmp	r5, r3
 8001386:	d100      	bne.n	800138a <__aeabi_dmul+0x2e>
 8001388:	e1e9      	b.n	800175e <__aeabi_dmul+0x402>
 800138a:	465a      	mov	r2, fp
 800138c:	0f43      	lsrs	r3, r0, #29
 800138e:	00d2      	lsls	r2, r2, #3
 8001390:	4313      	orrs	r3, r2
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	0412      	lsls	r2, r2, #16
 8001396:	431a      	orrs	r2, r3
 8001398:	00c3      	lsls	r3, r0, #3
 800139a:	469a      	mov	sl, r3
 800139c:	4bc8      	ldr	r3, [pc, #800]	; (80016c0 <__aeabi_dmul+0x364>)
 800139e:	4693      	mov	fp, r2
 80013a0:	469c      	mov	ip, r3
 80013a2:	2300      	movs	r3, #0
 80013a4:	2600      	movs	r6, #0
 80013a6:	4465      	add	r5, ip
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	033c      	lsls	r4, r7, #12
 80013ac:	007b      	lsls	r3, r7, #1
 80013ae:	4648      	mov	r0, r9
 80013b0:	0b24      	lsrs	r4, r4, #12
 80013b2:	0d5b      	lsrs	r3, r3, #21
 80013b4:	0fff      	lsrs	r7, r7, #31
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <__aeabi_dmul+0x60>
 80013ba:	e189      	b.n	80016d0 <__aeabi_dmul+0x374>
 80013bc:	4abf      	ldr	r2, [pc, #764]	; (80016bc <__aeabi_dmul+0x360>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <__aeabi_dmul+0x9a>
 80013c2:	0f42      	lsrs	r2, r0, #29
 80013c4:	00e4      	lsls	r4, r4, #3
 80013c6:	4322      	orrs	r2, r4
 80013c8:	2480      	movs	r4, #128	; 0x80
 80013ca:	0424      	lsls	r4, r4, #16
 80013cc:	4314      	orrs	r4, r2
 80013ce:	4abc      	ldr	r2, [pc, #752]	; (80016c0 <__aeabi_dmul+0x364>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	4694      	mov	ip, r2
 80013d4:	4642      	mov	r2, r8
 80013d6:	4463      	add	r3, ip
 80013d8:	195b      	adds	r3, r3, r5
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	9b01      	ldr	r3, [sp, #4]
 80013de:	407a      	eors	r2, r7
 80013e0:	3301      	adds	r3, #1
 80013e2:	00c0      	lsls	r0, r0, #3
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2e0a      	cmp	r6, #10
 80013ea:	dd1c      	ble.n	8001426 <__aeabi_dmul+0xca>
 80013ec:	003a      	movs	r2, r7
 80013ee:	2e0b      	cmp	r6, #11
 80013f0:	d05e      	beq.n	80014b0 <__aeabi_dmul+0x154>
 80013f2:	4647      	mov	r7, r8
 80013f4:	e056      	b.n	80014a4 <__aeabi_dmul+0x148>
 80013f6:	4649      	mov	r1, r9
 80013f8:	4bb0      	ldr	r3, [pc, #704]	; (80016bc <__aeabi_dmul+0x360>)
 80013fa:	4321      	orrs	r1, r4
 80013fc:	18eb      	adds	r3, r5, r3
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2900      	cmp	r1, #0
 8001402:	d12a      	bne.n	800145a <__aeabi_dmul+0xfe>
 8001404:	2080      	movs	r0, #128	; 0x80
 8001406:	2202      	movs	r2, #2
 8001408:	0100      	lsls	r0, r0, #4
 800140a:	002b      	movs	r3, r5
 800140c:	4684      	mov	ip, r0
 800140e:	4316      	orrs	r6, r2
 8001410:	4642      	mov	r2, r8
 8001412:	4463      	add	r3, ip
 8001414:	407a      	eors	r2, r7
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	2e0a      	cmp	r6, #10
 800141c:	dd00      	ble.n	8001420 <__aeabi_dmul+0xc4>
 800141e:	e231      	b.n	8001884 <__aeabi_dmul+0x528>
 8001420:	2000      	movs	r0, #0
 8001422:	2400      	movs	r4, #0
 8001424:	2102      	movs	r1, #2
 8001426:	2e02      	cmp	r6, #2
 8001428:	dc26      	bgt.n	8001478 <__aeabi_dmul+0x11c>
 800142a:	3e01      	subs	r6, #1
 800142c:	2e01      	cmp	r6, #1
 800142e:	d852      	bhi.n	80014d6 <__aeabi_dmul+0x17a>
 8001430:	2902      	cmp	r1, #2
 8001432:	d04c      	beq.n	80014ce <__aeabi_dmul+0x172>
 8001434:	2901      	cmp	r1, #1
 8001436:	d000      	beq.n	800143a <__aeabi_dmul+0xde>
 8001438:	e118      	b.n	800166c <__aeabi_dmul+0x310>
 800143a:	2300      	movs	r3, #0
 800143c:	2400      	movs	r4, #0
 800143e:	2500      	movs	r5, #0
 8001440:	051b      	lsls	r3, r3, #20
 8001442:	4323      	orrs	r3, r4
 8001444:	07d2      	lsls	r2, r2, #31
 8001446:	4313      	orrs	r3, r2
 8001448:	0028      	movs	r0, r5
 800144a:	0019      	movs	r1, r3
 800144c:	b007      	add	sp, #28
 800144e:	bcf0      	pop	{r4, r5, r6, r7}
 8001450:	46bb      	mov	fp, r7
 8001452:	46b2      	mov	sl, r6
 8001454:	46a9      	mov	r9, r5
 8001456:	46a0      	mov	r8, r4
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	2203      	movs	r2, #3
 800145e:	0109      	lsls	r1, r1, #4
 8001460:	002b      	movs	r3, r5
 8001462:	468c      	mov	ip, r1
 8001464:	4316      	orrs	r6, r2
 8001466:	4642      	mov	r2, r8
 8001468:	4463      	add	r3, ip
 800146a:	407a      	eors	r2, r7
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2e0a      	cmp	r6, #10
 8001472:	dd00      	ble.n	8001476 <__aeabi_dmul+0x11a>
 8001474:	e228      	b.n	80018c8 <__aeabi_dmul+0x56c>
 8001476:	2103      	movs	r1, #3
 8001478:	2501      	movs	r5, #1
 800147a:	40b5      	lsls	r5, r6
 800147c:	46ac      	mov	ip, r5
 800147e:	26a6      	movs	r6, #166	; 0xa6
 8001480:	4663      	mov	r3, ip
 8001482:	00f6      	lsls	r6, r6, #3
 8001484:	4035      	ands	r5, r6
 8001486:	4233      	tst	r3, r6
 8001488:	d10b      	bne.n	80014a2 <__aeabi_dmul+0x146>
 800148a:	2690      	movs	r6, #144	; 0x90
 800148c:	00b6      	lsls	r6, r6, #2
 800148e:	4233      	tst	r3, r6
 8001490:	d118      	bne.n	80014c4 <__aeabi_dmul+0x168>
 8001492:	3eb9      	subs	r6, #185	; 0xb9
 8001494:	3eff      	subs	r6, #255	; 0xff
 8001496:	421e      	tst	r6, r3
 8001498:	d01d      	beq.n	80014d6 <__aeabi_dmul+0x17a>
 800149a:	46a3      	mov	fp, r4
 800149c:	4682      	mov	sl, r0
 800149e:	9100      	str	r1, [sp, #0]
 80014a0:	e000      	b.n	80014a4 <__aeabi_dmul+0x148>
 80014a2:	0017      	movs	r7, r2
 80014a4:	9900      	ldr	r1, [sp, #0]
 80014a6:	003a      	movs	r2, r7
 80014a8:	2902      	cmp	r1, #2
 80014aa:	d010      	beq.n	80014ce <__aeabi_dmul+0x172>
 80014ac:	465c      	mov	r4, fp
 80014ae:	4650      	mov	r0, sl
 80014b0:	2903      	cmp	r1, #3
 80014b2:	d1bf      	bne.n	8001434 <__aeabi_dmul+0xd8>
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	031b      	lsls	r3, r3, #12
 80014b8:	431c      	orrs	r4, r3
 80014ba:	0324      	lsls	r4, r4, #12
 80014bc:	0005      	movs	r5, r0
 80014be:	4b7f      	ldr	r3, [pc, #508]	; (80016bc <__aeabi_dmul+0x360>)
 80014c0:	0b24      	lsrs	r4, r4, #12
 80014c2:	e7bd      	b.n	8001440 <__aeabi_dmul+0xe4>
 80014c4:	2480      	movs	r4, #128	; 0x80
 80014c6:	2200      	movs	r2, #0
 80014c8:	4b7c      	ldr	r3, [pc, #496]	; (80016bc <__aeabi_dmul+0x360>)
 80014ca:	0324      	lsls	r4, r4, #12
 80014cc:	e7b8      	b.n	8001440 <__aeabi_dmul+0xe4>
 80014ce:	2400      	movs	r4, #0
 80014d0:	2500      	movs	r5, #0
 80014d2:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <__aeabi_dmul+0x360>)
 80014d4:	e7b4      	b.n	8001440 <__aeabi_dmul+0xe4>
 80014d6:	4653      	mov	r3, sl
 80014d8:	041e      	lsls	r6, r3, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0c1f      	lsrs	r7, r3, #16
 80014de:	0033      	movs	r3, r6
 80014e0:	0c01      	lsrs	r1, r0, #16
 80014e2:	0400      	lsls	r0, r0, #16
 80014e4:	0c00      	lsrs	r0, r0, #16
 80014e6:	4343      	muls	r3, r0
 80014e8:	4698      	mov	r8, r3
 80014ea:	0003      	movs	r3, r0
 80014ec:	437b      	muls	r3, r7
 80014ee:	4699      	mov	r9, r3
 80014f0:	0033      	movs	r3, r6
 80014f2:	434b      	muls	r3, r1
 80014f4:	469c      	mov	ip, r3
 80014f6:	4643      	mov	r3, r8
 80014f8:	000d      	movs	r5, r1
 80014fa:	0c1b      	lsrs	r3, r3, #16
 80014fc:	469a      	mov	sl, r3
 80014fe:	437d      	muls	r5, r7
 8001500:	44cc      	add	ip, r9
 8001502:	44d4      	add	ip, sl
 8001504:	9500      	str	r5, [sp, #0]
 8001506:	45e1      	cmp	r9, ip
 8001508:	d904      	bls.n	8001514 <__aeabi_dmul+0x1b8>
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	025b      	lsls	r3, r3, #9
 800150e:	4699      	mov	r9, r3
 8001510:	444d      	add	r5, r9
 8001512:	9500      	str	r5, [sp, #0]
 8001514:	4663      	mov	r3, ip
 8001516:	0c1b      	lsrs	r3, r3, #16
 8001518:	001d      	movs	r5, r3
 800151a:	4663      	mov	r3, ip
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	469c      	mov	ip, r3
 8001520:	4643      	mov	r3, r8
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	0c1b      	lsrs	r3, r3, #16
 8001526:	4698      	mov	r8, r3
 8001528:	4663      	mov	r3, ip
 800152a:	4443      	add	r3, r8
 800152c:	9303      	str	r3, [sp, #12]
 800152e:	0c23      	lsrs	r3, r4, #16
 8001530:	4698      	mov	r8, r3
 8001532:	0033      	movs	r3, r6
 8001534:	0424      	lsls	r4, r4, #16
 8001536:	0c24      	lsrs	r4, r4, #16
 8001538:	4363      	muls	r3, r4
 800153a:	469c      	mov	ip, r3
 800153c:	0023      	movs	r3, r4
 800153e:	437b      	muls	r3, r7
 8001540:	4699      	mov	r9, r3
 8001542:	4643      	mov	r3, r8
 8001544:	435e      	muls	r6, r3
 8001546:	435f      	muls	r7, r3
 8001548:	444e      	add	r6, r9
 800154a:	4663      	mov	r3, ip
 800154c:	46b2      	mov	sl, r6
 800154e:	0c1e      	lsrs	r6, r3, #16
 8001550:	4456      	add	r6, sl
 8001552:	45b1      	cmp	r9, r6
 8001554:	d903      	bls.n	800155e <__aeabi_dmul+0x202>
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	4699      	mov	r9, r3
 800155c:	444f      	add	r7, r9
 800155e:	0c33      	lsrs	r3, r6, #16
 8001560:	4699      	mov	r9, r3
 8001562:	003b      	movs	r3, r7
 8001564:	444b      	add	r3, r9
 8001566:	9305      	str	r3, [sp, #20]
 8001568:	4663      	mov	r3, ip
 800156a:	46ac      	mov	ip, r5
 800156c:	041f      	lsls	r7, r3, #16
 800156e:	0c3f      	lsrs	r7, r7, #16
 8001570:	0436      	lsls	r6, r6, #16
 8001572:	19f6      	adds	r6, r6, r7
 8001574:	44b4      	add	ip, r6
 8001576:	4663      	mov	r3, ip
 8001578:	9304      	str	r3, [sp, #16]
 800157a:	465b      	mov	r3, fp
 800157c:	0c1b      	lsrs	r3, r3, #16
 800157e:	469c      	mov	ip, r3
 8001580:	465b      	mov	r3, fp
 8001582:	041f      	lsls	r7, r3, #16
 8001584:	0c3f      	lsrs	r7, r7, #16
 8001586:	003b      	movs	r3, r7
 8001588:	4343      	muls	r3, r0
 800158a:	4699      	mov	r9, r3
 800158c:	4663      	mov	r3, ip
 800158e:	4343      	muls	r3, r0
 8001590:	469a      	mov	sl, r3
 8001592:	464b      	mov	r3, r9
 8001594:	4660      	mov	r0, ip
 8001596:	0c1b      	lsrs	r3, r3, #16
 8001598:	469b      	mov	fp, r3
 800159a:	4348      	muls	r0, r1
 800159c:	4379      	muls	r1, r7
 800159e:	4451      	add	r1, sl
 80015a0:	4459      	add	r1, fp
 80015a2:	458a      	cmp	sl, r1
 80015a4:	d903      	bls.n	80015ae <__aeabi_dmul+0x252>
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	469a      	mov	sl, r3
 80015ac:	4450      	add	r0, sl
 80015ae:	0c0b      	lsrs	r3, r1, #16
 80015b0:	469a      	mov	sl, r3
 80015b2:	464b      	mov	r3, r9
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	0c1b      	lsrs	r3, r3, #16
 80015b8:	4699      	mov	r9, r3
 80015ba:	003b      	movs	r3, r7
 80015bc:	4363      	muls	r3, r4
 80015be:	0409      	lsls	r1, r1, #16
 80015c0:	4645      	mov	r5, r8
 80015c2:	4449      	add	r1, r9
 80015c4:	4699      	mov	r9, r3
 80015c6:	4663      	mov	r3, ip
 80015c8:	435c      	muls	r4, r3
 80015ca:	436b      	muls	r3, r5
 80015cc:	469c      	mov	ip, r3
 80015ce:	464b      	mov	r3, r9
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	4698      	mov	r8, r3
 80015d4:	436f      	muls	r7, r5
 80015d6:	193f      	adds	r7, r7, r4
 80015d8:	4447      	add	r7, r8
 80015da:	4450      	add	r0, sl
 80015dc:	42bc      	cmp	r4, r7
 80015de:	d903      	bls.n	80015e8 <__aeabi_dmul+0x28c>
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	4698      	mov	r8, r3
 80015e6:	44c4      	add	ip, r8
 80015e8:	9b04      	ldr	r3, [sp, #16]
 80015ea:	9d00      	ldr	r5, [sp, #0]
 80015ec:	4698      	mov	r8, r3
 80015ee:	4445      	add	r5, r8
 80015f0:	42b5      	cmp	r5, r6
 80015f2:	41b6      	sbcs	r6, r6
 80015f4:	4273      	negs	r3, r6
 80015f6:	4698      	mov	r8, r3
 80015f8:	464b      	mov	r3, r9
 80015fa:	041e      	lsls	r6, r3, #16
 80015fc:	9b05      	ldr	r3, [sp, #20]
 80015fe:	043c      	lsls	r4, r7, #16
 8001600:	4699      	mov	r9, r3
 8001602:	0c36      	lsrs	r6, r6, #16
 8001604:	19a4      	adds	r4, r4, r6
 8001606:	444c      	add	r4, r9
 8001608:	46a1      	mov	r9, r4
 800160a:	4683      	mov	fp, r0
 800160c:	186e      	adds	r6, r5, r1
 800160e:	44c1      	add	r9, r8
 8001610:	428e      	cmp	r6, r1
 8001612:	4189      	sbcs	r1, r1
 8001614:	44cb      	add	fp, r9
 8001616:	465d      	mov	r5, fp
 8001618:	4249      	negs	r1, r1
 800161a:	186d      	adds	r5, r5, r1
 800161c:	429c      	cmp	r4, r3
 800161e:	41a4      	sbcs	r4, r4
 8001620:	45c1      	cmp	r9, r8
 8001622:	419b      	sbcs	r3, r3
 8001624:	4583      	cmp	fp, r0
 8001626:	4180      	sbcs	r0, r0
 8001628:	428d      	cmp	r5, r1
 800162a:	4189      	sbcs	r1, r1
 800162c:	425b      	negs	r3, r3
 800162e:	4264      	negs	r4, r4
 8001630:	431c      	orrs	r4, r3
 8001632:	4240      	negs	r0, r0
 8001634:	9b03      	ldr	r3, [sp, #12]
 8001636:	4249      	negs	r1, r1
 8001638:	4301      	orrs	r1, r0
 800163a:	0270      	lsls	r0, r6, #9
 800163c:	0c3f      	lsrs	r7, r7, #16
 800163e:	4318      	orrs	r0, r3
 8001640:	19e4      	adds	r4, r4, r7
 8001642:	1e47      	subs	r7, r0, #1
 8001644:	41b8      	sbcs	r0, r7
 8001646:	1864      	adds	r4, r4, r1
 8001648:	4464      	add	r4, ip
 800164a:	0df6      	lsrs	r6, r6, #23
 800164c:	0261      	lsls	r1, r4, #9
 800164e:	4330      	orrs	r0, r6
 8001650:	0dec      	lsrs	r4, r5, #23
 8001652:	026e      	lsls	r6, r5, #9
 8001654:	430c      	orrs	r4, r1
 8001656:	4330      	orrs	r0, r6
 8001658:	01c9      	lsls	r1, r1, #7
 800165a:	d400      	bmi.n	800165e <__aeabi_dmul+0x302>
 800165c:	e0f1      	b.n	8001842 <__aeabi_dmul+0x4e6>
 800165e:	2101      	movs	r1, #1
 8001660:	0843      	lsrs	r3, r0, #1
 8001662:	4001      	ands	r1, r0
 8001664:	430b      	orrs	r3, r1
 8001666:	07e0      	lsls	r0, r4, #31
 8001668:	4318      	orrs	r0, r3
 800166a:	0864      	lsrs	r4, r4, #1
 800166c:	4915      	ldr	r1, [pc, #84]	; (80016c4 <__aeabi_dmul+0x368>)
 800166e:	9b02      	ldr	r3, [sp, #8]
 8001670:	468c      	mov	ip, r1
 8001672:	4463      	add	r3, ip
 8001674:	2b00      	cmp	r3, #0
 8001676:	dc00      	bgt.n	800167a <__aeabi_dmul+0x31e>
 8001678:	e097      	b.n	80017aa <__aeabi_dmul+0x44e>
 800167a:	0741      	lsls	r1, r0, #29
 800167c:	d009      	beq.n	8001692 <__aeabi_dmul+0x336>
 800167e:	210f      	movs	r1, #15
 8001680:	4001      	ands	r1, r0
 8001682:	2904      	cmp	r1, #4
 8001684:	d005      	beq.n	8001692 <__aeabi_dmul+0x336>
 8001686:	1d01      	adds	r1, r0, #4
 8001688:	4281      	cmp	r1, r0
 800168a:	4180      	sbcs	r0, r0
 800168c:	4240      	negs	r0, r0
 800168e:	1824      	adds	r4, r4, r0
 8001690:	0008      	movs	r0, r1
 8001692:	01e1      	lsls	r1, r4, #7
 8001694:	d506      	bpl.n	80016a4 <__aeabi_dmul+0x348>
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	00c9      	lsls	r1, r1, #3
 800169a:	468c      	mov	ip, r1
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <__aeabi_dmul+0x36c>)
 800169e:	401c      	ands	r4, r3
 80016a0:	9b02      	ldr	r3, [sp, #8]
 80016a2:	4463      	add	r3, ip
 80016a4:	4909      	ldr	r1, [pc, #36]	; (80016cc <__aeabi_dmul+0x370>)
 80016a6:	428b      	cmp	r3, r1
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dmul+0x350>
 80016aa:	e710      	b.n	80014ce <__aeabi_dmul+0x172>
 80016ac:	0761      	lsls	r1, r4, #29
 80016ae:	08c5      	lsrs	r5, r0, #3
 80016b0:	0264      	lsls	r4, r4, #9
 80016b2:	055b      	lsls	r3, r3, #21
 80016b4:	430d      	orrs	r5, r1
 80016b6:	0b24      	lsrs	r4, r4, #12
 80016b8:	0d5b      	lsrs	r3, r3, #21
 80016ba:	e6c1      	b.n	8001440 <__aeabi_dmul+0xe4>
 80016bc:	000007ff 	.word	0x000007ff
 80016c0:	fffffc01 	.word	0xfffffc01
 80016c4:	000003ff 	.word	0x000003ff
 80016c8:	feffffff 	.word	0xfeffffff
 80016cc:	000007fe 	.word	0x000007fe
 80016d0:	464b      	mov	r3, r9
 80016d2:	4323      	orrs	r3, r4
 80016d4:	d059      	beq.n	800178a <__aeabi_dmul+0x42e>
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d100      	bne.n	80016dc <__aeabi_dmul+0x380>
 80016da:	e0a3      	b.n	8001824 <__aeabi_dmul+0x4c8>
 80016dc:	0020      	movs	r0, r4
 80016de:	f000 fd2b 	bl	8002138 <__clzsi2>
 80016e2:	0001      	movs	r1, r0
 80016e4:	0003      	movs	r3, r0
 80016e6:	390b      	subs	r1, #11
 80016e8:	221d      	movs	r2, #29
 80016ea:	1a52      	subs	r2, r2, r1
 80016ec:	4649      	mov	r1, r9
 80016ee:	0018      	movs	r0, r3
 80016f0:	40d1      	lsrs	r1, r2
 80016f2:	464a      	mov	r2, r9
 80016f4:	3808      	subs	r0, #8
 80016f6:	4082      	lsls	r2, r0
 80016f8:	4084      	lsls	r4, r0
 80016fa:	0010      	movs	r0, r2
 80016fc:	430c      	orrs	r4, r1
 80016fe:	4a74      	ldr	r2, [pc, #464]	; (80018d0 <__aeabi_dmul+0x574>)
 8001700:	1aeb      	subs	r3, r5, r3
 8001702:	4694      	mov	ip, r2
 8001704:	4642      	mov	r2, r8
 8001706:	4463      	add	r3, ip
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	9b01      	ldr	r3, [sp, #4]
 800170c:	407a      	eors	r2, r7
 800170e:	3301      	adds	r3, #1
 8001710:	2100      	movs	r1, #0
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2e0a      	cmp	r6, #10
 8001718:	dd00      	ble.n	800171c <__aeabi_dmul+0x3c0>
 800171a:	e667      	b.n	80013ec <__aeabi_dmul+0x90>
 800171c:	e683      	b.n	8001426 <__aeabi_dmul+0xca>
 800171e:	465b      	mov	r3, fp
 8001720:	4303      	orrs	r3, r0
 8001722:	469a      	mov	sl, r3
 8001724:	d02a      	beq.n	800177c <__aeabi_dmul+0x420>
 8001726:	465b      	mov	r3, fp
 8001728:	2b00      	cmp	r3, #0
 800172a:	d06d      	beq.n	8001808 <__aeabi_dmul+0x4ac>
 800172c:	4658      	mov	r0, fp
 800172e:	f000 fd03 	bl	8002138 <__clzsi2>
 8001732:	0001      	movs	r1, r0
 8001734:	0003      	movs	r3, r0
 8001736:	390b      	subs	r1, #11
 8001738:	221d      	movs	r2, #29
 800173a:	1a52      	subs	r2, r2, r1
 800173c:	0021      	movs	r1, r4
 800173e:	0018      	movs	r0, r3
 8001740:	465d      	mov	r5, fp
 8001742:	40d1      	lsrs	r1, r2
 8001744:	3808      	subs	r0, #8
 8001746:	4085      	lsls	r5, r0
 8001748:	000a      	movs	r2, r1
 800174a:	4084      	lsls	r4, r0
 800174c:	432a      	orrs	r2, r5
 800174e:	4693      	mov	fp, r2
 8001750:	46a2      	mov	sl, r4
 8001752:	4d5f      	ldr	r5, [pc, #380]	; (80018d0 <__aeabi_dmul+0x574>)
 8001754:	2600      	movs	r6, #0
 8001756:	1aed      	subs	r5, r5, r3
 8001758:	2300      	movs	r3, #0
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	e625      	b.n	80013aa <__aeabi_dmul+0x4e>
 800175e:	465b      	mov	r3, fp
 8001760:	4303      	orrs	r3, r0
 8001762:	469a      	mov	sl, r3
 8001764:	d105      	bne.n	8001772 <__aeabi_dmul+0x416>
 8001766:	2300      	movs	r3, #0
 8001768:	469b      	mov	fp, r3
 800176a:	3302      	adds	r3, #2
 800176c:	2608      	movs	r6, #8
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	e61b      	b.n	80013aa <__aeabi_dmul+0x4e>
 8001772:	2303      	movs	r3, #3
 8001774:	4682      	mov	sl, r0
 8001776:	260c      	movs	r6, #12
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	e616      	b.n	80013aa <__aeabi_dmul+0x4e>
 800177c:	2300      	movs	r3, #0
 800177e:	469b      	mov	fp, r3
 8001780:	3301      	adds	r3, #1
 8001782:	2604      	movs	r6, #4
 8001784:	2500      	movs	r5, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	e60f      	b.n	80013aa <__aeabi_dmul+0x4e>
 800178a:	4642      	mov	r2, r8
 800178c:	3301      	adds	r3, #1
 800178e:	9501      	str	r5, [sp, #4]
 8001790:	431e      	orrs	r6, r3
 8001792:	9b01      	ldr	r3, [sp, #4]
 8001794:	407a      	eors	r2, r7
 8001796:	3301      	adds	r3, #1
 8001798:	2400      	movs	r4, #0
 800179a:	2000      	movs	r0, #0
 800179c:	2101      	movs	r1, #1
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	2e0a      	cmp	r6, #10
 80017a4:	dd00      	ble.n	80017a8 <__aeabi_dmul+0x44c>
 80017a6:	e621      	b.n	80013ec <__aeabi_dmul+0x90>
 80017a8:	e63d      	b.n	8001426 <__aeabi_dmul+0xca>
 80017aa:	2101      	movs	r1, #1
 80017ac:	1ac9      	subs	r1, r1, r3
 80017ae:	2938      	cmp	r1, #56	; 0x38
 80017b0:	dd00      	ble.n	80017b4 <__aeabi_dmul+0x458>
 80017b2:	e642      	b.n	800143a <__aeabi_dmul+0xde>
 80017b4:	291f      	cmp	r1, #31
 80017b6:	dd47      	ble.n	8001848 <__aeabi_dmul+0x4ec>
 80017b8:	261f      	movs	r6, #31
 80017ba:	0025      	movs	r5, r4
 80017bc:	4276      	negs	r6, r6
 80017be:	1af3      	subs	r3, r6, r3
 80017c0:	40dd      	lsrs	r5, r3
 80017c2:	002b      	movs	r3, r5
 80017c4:	2920      	cmp	r1, #32
 80017c6:	d005      	beq.n	80017d4 <__aeabi_dmul+0x478>
 80017c8:	4942      	ldr	r1, [pc, #264]	; (80018d4 <__aeabi_dmul+0x578>)
 80017ca:	9d02      	ldr	r5, [sp, #8]
 80017cc:	468c      	mov	ip, r1
 80017ce:	4465      	add	r5, ip
 80017d0:	40ac      	lsls	r4, r5
 80017d2:	4320      	orrs	r0, r4
 80017d4:	1e41      	subs	r1, r0, #1
 80017d6:	4188      	sbcs	r0, r1
 80017d8:	4318      	orrs	r0, r3
 80017da:	2307      	movs	r3, #7
 80017dc:	001d      	movs	r5, r3
 80017de:	2400      	movs	r4, #0
 80017e0:	4005      	ands	r5, r0
 80017e2:	4203      	tst	r3, r0
 80017e4:	d04a      	beq.n	800187c <__aeabi_dmul+0x520>
 80017e6:	230f      	movs	r3, #15
 80017e8:	2400      	movs	r4, #0
 80017ea:	4003      	ands	r3, r0
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d042      	beq.n	8001876 <__aeabi_dmul+0x51a>
 80017f0:	1d03      	adds	r3, r0, #4
 80017f2:	4283      	cmp	r3, r0
 80017f4:	4180      	sbcs	r0, r0
 80017f6:	4240      	negs	r0, r0
 80017f8:	1824      	adds	r4, r4, r0
 80017fa:	0018      	movs	r0, r3
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d53a      	bpl.n	8001876 <__aeabi_dmul+0x51a>
 8001800:	2301      	movs	r3, #1
 8001802:	2400      	movs	r4, #0
 8001804:	2500      	movs	r5, #0
 8001806:	e61b      	b.n	8001440 <__aeabi_dmul+0xe4>
 8001808:	f000 fc96 	bl	8002138 <__clzsi2>
 800180c:	0001      	movs	r1, r0
 800180e:	0003      	movs	r3, r0
 8001810:	3115      	adds	r1, #21
 8001812:	3320      	adds	r3, #32
 8001814:	291c      	cmp	r1, #28
 8001816:	dd8f      	ble.n	8001738 <__aeabi_dmul+0x3dc>
 8001818:	3808      	subs	r0, #8
 800181a:	2200      	movs	r2, #0
 800181c:	4084      	lsls	r4, r0
 800181e:	4692      	mov	sl, r2
 8001820:	46a3      	mov	fp, r4
 8001822:	e796      	b.n	8001752 <__aeabi_dmul+0x3f6>
 8001824:	f000 fc88 	bl	8002138 <__clzsi2>
 8001828:	0001      	movs	r1, r0
 800182a:	0003      	movs	r3, r0
 800182c:	3115      	adds	r1, #21
 800182e:	3320      	adds	r3, #32
 8001830:	291c      	cmp	r1, #28
 8001832:	dc00      	bgt.n	8001836 <__aeabi_dmul+0x4da>
 8001834:	e758      	b.n	80016e8 <__aeabi_dmul+0x38c>
 8001836:	0002      	movs	r2, r0
 8001838:	464c      	mov	r4, r9
 800183a:	3a08      	subs	r2, #8
 800183c:	2000      	movs	r0, #0
 800183e:	4094      	lsls	r4, r2
 8001840:	e75d      	b.n	80016fe <__aeabi_dmul+0x3a2>
 8001842:	9b01      	ldr	r3, [sp, #4]
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_dmul+0x310>
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <__aeabi_dmul+0x57c>)
 800184a:	0026      	movs	r6, r4
 800184c:	469c      	mov	ip, r3
 800184e:	0003      	movs	r3, r0
 8001850:	9d02      	ldr	r5, [sp, #8]
 8001852:	40cb      	lsrs	r3, r1
 8001854:	4465      	add	r5, ip
 8001856:	40ae      	lsls	r6, r5
 8001858:	431e      	orrs	r6, r3
 800185a:	0003      	movs	r3, r0
 800185c:	40ab      	lsls	r3, r5
 800185e:	1e58      	subs	r0, r3, #1
 8001860:	4183      	sbcs	r3, r0
 8001862:	0030      	movs	r0, r6
 8001864:	4318      	orrs	r0, r3
 8001866:	40cc      	lsrs	r4, r1
 8001868:	0743      	lsls	r3, r0, #29
 800186a:	d0c7      	beq.n	80017fc <__aeabi_dmul+0x4a0>
 800186c:	230f      	movs	r3, #15
 800186e:	4003      	ands	r3, r0
 8001870:	2b04      	cmp	r3, #4
 8001872:	d1bd      	bne.n	80017f0 <__aeabi_dmul+0x494>
 8001874:	e7c2      	b.n	80017fc <__aeabi_dmul+0x4a0>
 8001876:	0765      	lsls	r5, r4, #29
 8001878:	0264      	lsls	r4, r4, #9
 800187a:	0b24      	lsrs	r4, r4, #12
 800187c:	08c0      	lsrs	r0, r0, #3
 800187e:	2300      	movs	r3, #0
 8001880:	4305      	orrs	r5, r0
 8001882:	e5dd      	b.n	8001440 <__aeabi_dmul+0xe4>
 8001884:	2500      	movs	r5, #0
 8001886:	2302      	movs	r3, #2
 8001888:	2e0f      	cmp	r6, #15
 800188a:	d10c      	bne.n	80018a6 <__aeabi_dmul+0x54a>
 800188c:	2480      	movs	r4, #128	; 0x80
 800188e:	465b      	mov	r3, fp
 8001890:	0324      	lsls	r4, r4, #12
 8001892:	4223      	tst	r3, r4
 8001894:	d00e      	beq.n	80018b4 <__aeabi_dmul+0x558>
 8001896:	4221      	tst	r1, r4
 8001898:	d10c      	bne.n	80018b4 <__aeabi_dmul+0x558>
 800189a:	430c      	orrs	r4, r1
 800189c:	0324      	lsls	r4, r4, #12
 800189e:	003a      	movs	r2, r7
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <__aeabi_dmul+0x580>)
 80018a2:	0b24      	lsrs	r4, r4, #12
 80018a4:	e5cc      	b.n	8001440 <__aeabi_dmul+0xe4>
 80018a6:	2e0b      	cmp	r6, #11
 80018a8:	d000      	beq.n	80018ac <__aeabi_dmul+0x550>
 80018aa:	e5a2      	b.n	80013f2 <__aeabi_dmul+0x96>
 80018ac:	468b      	mov	fp, r1
 80018ae:	46aa      	mov	sl, r5
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	e5f7      	b.n	80014a4 <__aeabi_dmul+0x148>
 80018b4:	2480      	movs	r4, #128	; 0x80
 80018b6:	465b      	mov	r3, fp
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	431c      	orrs	r4, r3
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	4642      	mov	r2, r8
 80018c0:	4655      	mov	r5, sl
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <__aeabi_dmul+0x580>)
 80018c4:	0b24      	lsrs	r4, r4, #12
 80018c6:	e5bb      	b.n	8001440 <__aeabi_dmul+0xe4>
 80018c8:	464d      	mov	r5, r9
 80018ca:	0021      	movs	r1, r4
 80018cc:	2303      	movs	r3, #3
 80018ce:	e7db      	b.n	8001888 <__aeabi_dmul+0x52c>
 80018d0:	fffffc0d 	.word	0xfffffc0d
 80018d4:	0000043e 	.word	0x0000043e
 80018d8:	0000041e 	.word	0x0000041e
 80018dc:	000007ff 	.word	0x000007ff

080018e0 <__aeabi_dsub>:
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	4657      	mov	r7, sl
 80018e4:	464e      	mov	r6, r9
 80018e6:	4645      	mov	r5, r8
 80018e8:	46de      	mov	lr, fp
 80018ea:	b5e0      	push	{r5, r6, r7, lr}
 80018ec:	000d      	movs	r5, r1
 80018ee:	0004      	movs	r4, r0
 80018f0:	0019      	movs	r1, r3
 80018f2:	0010      	movs	r0, r2
 80018f4:	032b      	lsls	r3, r5, #12
 80018f6:	0a5b      	lsrs	r3, r3, #9
 80018f8:	0f62      	lsrs	r2, r4, #29
 80018fa:	431a      	orrs	r2, r3
 80018fc:	00e3      	lsls	r3, r4, #3
 80018fe:	030c      	lsls	r4, r1, #12
 8001900:	0a64      	lsrs	r4, r4, #9
 8001902:	0f47      	lsrs	r7, r0, #29
 8001904:	4327      	orrs	r7, r4
 8001906:	4cd0      	ldr	r4, [pc, #832]	; (8001c48 <__aeabi_dsub+0x368>)
 8001908:	006e      	lsls	r6, r5, #1
 800190a:	4691      	mov	r9, r2
 800190c:	b083      	sub	sp, #12
 800190e:	004a      	lsls	r2, r1, #1
 8001910:	00c0      	lsls	r0, r0, #3
 8001912:	4698      	mov	r8, r3
 8001914:	46a2      	mov	sl, r4
 8001916:	0d76      	lsrs	r6, r6, #21
 8001918:	0fed      	lsrs	r5, r5, #31
 800191a:	0d52      	lsrs	r2, r2, #21
 800191c:	0fc9      	lsrs	r1, r1, #31
 800191e:	9001      	str	r0, [sp, #4]
 8001920:	42a2      	cmp	r2, r4
 8001922:	d100      	bne.n	8001926 <__aeabi_dsub+0x46>
 8001924:	e0b9      	b.n	8001a9a <__aeabi_dsub+0x1ba>
 8001926:	2401      	movs	r4, #1
 8001928:	4061      	eors	r1, r4
 800192a:	468b      	mov	fp, r1
 800192c:	428d      	cmp	r5, r1
 800192e:	d100      	bne.n	8001932 <__aeabi_dsub+0x52>
 8001930:	e08d      	b.n	8001a4e <__aeabi_dsub+0x16e>
 8001932:	1ab4      	subs	r4, r6, r2
 8001934:	46a4      	mov	ip, r4
 8001936:	2c00      	cmp	r4, #0
 8001938:	dc00      	bgt.n	800193c <__aeabi_dsub+0x5c>
 800193a:	e0b7      	b.n	8001aac <__aeabi_dsub+0x1cc>
 800193c:	2a00      	cmp	r2, #0
 800193e:	d100      	bne.n	8001942 <__aeabi_dsub+0x62>
 8001940:	e0cb      	b.n	8001ada <__aeabi_dsub+0x1fa>
 8001942:	4ac1      	ldr	r2, [pc, #772]	; (8001c48 <__aeabi_dsub+0x368>)
 8001944:	4296      	cmp	r6, r2
 8001946:	d100      	bne.n	800194a <__aeabi_dsub+0x6a>
 8001948:	e186      	b.n	8001c58 <__aeabi_dsub+0x378>
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	0412      	lsls	r2, r2, #16
 800194e:	4317      	orrs	r7, r2
 8001950:	4662      	mov	r2, ip
 8001952:	2a38      	cmp	r2, #56	; 0x38
 8001954:	dd00      	ble.n	8001958 <__aeabi_dsub+0x78>
 8001956:	e1a4      	b.n	8001ca2 <__aeabi_dsub+0x3c2>
 8001958:	2a1f      	cmp	r2, #31
 800195a:	dd00      	ble.n	800195e <__aeabi_dsub+0x7e>
 800195c:	e21d      	b.n	8001d9a <__aeabi_dsub+0x4ba>
 800195e:	4661      	mov	r1, ip
 8001960:	2220      	movs	r2, #32
 8001962:	003c      	movs	r4, r7
 8001964:	1a52      	subs	r2, r2, r1
 8001966:	0001      	movs	r1, r0
 8001968:	4090      	lsls	r0, r2
 800196a:	4094      	lsls	r4, r2
 800196c:	1e42      	subs	r2, r0, #1
 800196e:	4190      	sbcs	r0, r2
 8001970:	4662      	mov	r2, ip
 8001972:	46a0      	mov	r8, r4
 8001974:	4664      	mov	r4, ip
 8001976:	40d7      	lsrs	r7, r2
 8001978:	464a      	mov	r2, r9
 800197a:	40e1      	lsrs	r1, r4
 800197c:	4644      	mov	r4, r8
 800197e:	1bd2      	subs	r2, r2, r7
 8001980:	4691      	mov	r9, r2
 8001982:	430c      	orrs	r4, r1
 8001984:	4304      	orrs	r4, r0
 8001986:	1b1c      	subs	r4, r3, r4
 8001988:	42a3      	cmp	r3, r4
 800198a:	4192      	sbcs	r2, r2
 800198c:	464b      	mov	r3, r9
 800198e:	4252      	negs	r2, r2
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	469a      	mov	sl, r3
 8001994:	4653      	mov	r3, sl
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	d400      	bmi.n	800199c <__aeabi_dsub+0xbc>
 800199a:	e12b      	b.n	8001bf4 <__aeabi_dsub+0x314>
 800199c:	4653      	mov	r3, sl
 800199e:	025a      	lsls	r2, r3, #9
 80019a0:	0a53      	lsrs	r3, r2, #9
 80019a2:	469a      	mov	sl, r3
 80019a4:	4653      	mov	r3, sl
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d100      	bne.n	80019ac <__aeabi_dsub+0xcc>
 80019aa:	e166      	b.n	8001c7a <__aeabi_dsub+0x39a>
 80019ac:	4650      	mov	r0, sl
 80019ae:	f000 fbc3 	bl	8002138 <__clzsi2>
 80019b2:	0003      	movs	r3, r0
 80019b4:	3b08      	subs	r3, #8
 80019b6:	2220      	movs	r2, #32
 80019b8:	0020      	movs	r0, r4
 80019ba:	1ad2      	subs	r2, r2, r3
 80019bc:	4651      	mov	r1, sl
 80019be:	40d0      	lsrs	r0, r2
 80019c0:	4099      	lsls	r1, r3
 80019c2:	0002      	movs	r2, r0
 80019c4:	409c      	lsls	r4, r3
 80019c6:	430a      	orrs	r2, r1
 80019c8:	429e      	cmp	r6, r3
 80019ca:	dd00      	ble.n	80019ce <__aeabi_dsub+0xee>
 80019cc:	e164      	b.n	8001c98 <__aeabi_dsub+0x3b8>
 80019ce:	1b9b      	subs	r3, r3, r6
 80019d0:	1c59      	adds	r1, r3, #1
 80019d2:	291f      	cmp	r1, #31
 80019d4:	dd00      	ble.n	80019d8 <__aeabi_dsub+0xf8>
 80019d6:	e0fe      	b.n	8001bd6 <__aeabi_dsub+0x2f6>
 80019d8:	2320      	movs	r3, #32
 80019da:	0010      	movs	r0, r2
 80019dc:	0026      	movs	r6, r4
 80019de:	1a5b      	subs	r3, r3, r1
 80019e0:	409c      	lsls	r4, r3
 80019e2:	4098      	lsls	r0, r3
 80019e4:	40ce      	lsrs	r6, r1
 80019e6:	40ca      	lsrs	r2, r1
 80019e8:	1e63      	subs	r3, r4, #1
 80019ea:	419c      	sbcs	r4, r3
 80019ec:	4330      	orrs	r0, r6
 80019ee:	4692      	mov	sl, r2
 80019f0:	2600      	movs	r6, #0
 80019f2:	4304      	orrs	r4, r0
 80019f4:	0763      	lsls	r3, r4, #29
 80019f6:	d009      	beq.n	8001a0c <__aeabi_dsub+0x12c>
 80019f8:	230f      	movs	r3, #15
 80019fa:	4023      	ands	r3, r4
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d005      	beq.n	8001a0c <__aeabi_dsub+0x12c>
 8001a00:	1d23      	adds	r3, r4, #4
 8001a02:	42a3      	cmp	r3, r4
 8001a04:	41a4      	sbcs	r4, r4
 8001a06:	4264      	negs	r4, r4
 8001a08:	44a2      	add	sl, r4
 8001a0a:	001c      	movs	r4, r3
 8001a0c:	4653      	mov	r3, sl
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	d400      	bmi.n	8001a14 <__aeabi_dsub+0x134>
 8001a12:	e0f2      	b.n	8001bfa <__aeabi_dsub+0x31a>
 8001a14:	4b8c      	ldr	r3, [pc, #560]	; (8001c48 <__aeabi_dsub+0x368>)
 8001a16:	3601      	adds	r6, #1
 8001a18:	429e      	cmp	r6, r3
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dsub+0x13e>
 8001a1c:	e10f      	b.n	8001c3e <__aeabi_dsub+0x35e>
 8001a1e:	4653      	mov	r3, sl
 8001a20:	498a      	ldr	r1, [pc, #552]	; (8001c4c <__aeabi_dsub+0x36c>)
 8001a22:	08e4      	lsrs	r4, r4, #3
 8001a24:	400b      	ands	r3, r1
 8001a26:	0019      	movs	r1, r3
 8001a28:	075b      	lsls	r3, r3, #29
 8001a2a:	4323      	orrs	r3, r4
 8001a2c:	0572      	lsls	r2, r6, #21
 8001a2e:	024c      	lsls	r4, r1, #9
 8001a30:	0b24      	lsrs	r4, r4, #12
 8001a32:	0d52      	lsrs	r2, r2, #21
 8001a34:	0512      	lsls	r2, r2, #20
 8001a36:	4322      	orrs	r2, r4
 8001a38:	07ed      	lsls	r5, r5, #31
 8001a3a:	432a      	orrs	r2, r5
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	0011      	movs	r1, r2
 8001a40:	b003      	add	sp, #12
 8001a42:	bcf0      	pop	{r4, r5, r6, r7}
 8001a44:	46bb      	mov	fp, r7
 8001a46:	46b2      	mov	sl, r6
 8001a48:	46a9      	mov	r9, r5
 8001a4a:	46a0      	mov	r8, r4
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	1ab4      	subs	r4, r6, r2
 8001a50:	46a4      	mov	ip, r4
 8001a52:	2c00      	cmp	r4, #0
 8001a54:	dd59      	ble.n	8001b0a <__aeabi_dsub+0x22a>
 8001a56:	2a00      	cmp	r2, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0x17c>
 8001a5a:	e0b0      	b.n	8001bbe <__aeabi_dsub+0x2de>
 8001a5c:	4556      	cmp	r6, sl
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x182>
 8001a60:	e0fa      	b.n	8001c58 <__aeabi_dsub+0x378>
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	0412      	lsls	r2, r2, #16
 8001a66:	4317      	orrs	r7, r2
 8001a68:	4662      	mov	r2, ip
 8001a6a:	2a38      	cmp	r2, #56	; 0x38
 8001a6c:	dd00      	ble.n	8001a70 <__aeabi_dsub+0x190>
 8001a6e:	e0d4      	b.n	8001c1a <__aeabi_dsub+0x33a>
 8001a70:	2a1f      	cmp	r2, #31
 8001a72:	dc00      	bgt.n	8001a76 <__aeabi_dsub+0x196>
 8001a74:	e1c0      	b.n	8001df8 <__aeabi_dsub+0x518>
 8001a76:	0039      	movs	r1, r7
 8001a78:	3a20      	subs	r2, #32
 8001a7a:	40d1      	lsrs	r1, r2
 8001a7c:	4662      	mov	r2, ip
 8001a7e:	2a20      	cmp	r2, #32
 8001a80:	d006      	beq.n	8001a90 <__aeabi_dsub+0x1b0>
 8001a82:	4664      	mov	r4, ip
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	1b12      	subs	r2, r2, r4
 8001a88:	003c      	movs	r4, r7
 8001a8a:	4094      	lsls	r4, r2
 8001a8c:	4304      	orrs	r4, r0
 8001a8e:	9401      	str	r4, [sp, #4]
 8001a90:	9c01      	ldr	r4, [sp, #4]
 8001a92:	1e62      	subs	r2, r4, #1
 8001a94:	4194      	sbcs	r4, r2
 8001a96:	430c      	orrs	r4, r1
 8001a98:	e0c3      	b.n	8001c22 <__aeabi_dsub+0x342>
 8001a9a:	003c      	movs	r4, r7
 8001a9c:	4304      	orrs	r4, r0
 8001a9e:	d02b      	beq.n	8001af8 <__aeabi_dsub+0x218>
 8001aa0:	468b      	mov	fp, r1
 8001aa2:	428d      	cmp	r5, r1
 8001aa4:	d02e      	beq.n	8001b04 <__aeabi_dsub+0x224>
 8001aa6:	4c6a      	ldr	r4, [pc, #424]	; (8001c50 <__aeabi_dsub+0x370>)
 8001aa8:	46a4      	mov	ip, r4
 8001aaa:	44b4      	add	ip, r6
 8001aac:	4664      	mov	r4, ip
 8001aae:	2c00      	cmp	r4, #0
 8001ab0:	d05f      	beq.n	8001b72 <__aeabi_dsub+0x292>
 8001ab2:	1b94      	subs	r4, r2, r6
 8001ab4:	46a4      	mov	ip, r4
 8001ab6:	2e00      	cmp	r6, #0
 8001ab8:	d000      	beq.n	8001abc <__aeabi_dsub+0x1dc>
 8001aba:	e120      	b.n	8001cfe <__aeabi_dsub+0x41e>
 8001abc:	464c      	mov	r4, r9
 8001abe:	431c      	orrs	r4, r3
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1e4>
 8001ac2:	e1c7      	b.n	8001e54 <__aeabi_dsub+0x574>
 8001ac4:	4661      	mov	r1, ip
 8001ac6:	1e4c      	subs	r4, r1, #1
 8001ac8:	2901      	cmp	r1, #1
 8001aca:	d100      	bne.n	8001ace <__aeabi_dsub+0x1ee>
 8001acc:	e223      	b.n	8001f16 <__aeabi_dsub+0x636>
 8001ace:	4d5e      	ldr	r5, [pc, #376]	; (8001c48 <__aeabi_dsub+0x368>)
 8001ad0:	45ac      	cmp	ip, r5
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dsub+0x1f6>
 8001ad4:	e1d8      	b.n	8001e88 <__aeabi_dsub+0x5a8>
 8001ad6:	46a4      	mov	ip, r4
 8001ad8:	e11a      	b.n	8001d10 <__aeabi_dsub+0x430>
 8001ada:	003a      	movs	r2, r7
 8001adc:	4302      	orrs	r2, r0
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dsub+0x202>
 8001ae0:	e0e4      	b.n	8001cac <__aeabi_dsub+0x3cc>
 8001ae2:	0022      	movs	r2, r4
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	2c01      	cmp	r4, #1
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dsub+0x20c>
 8001aea:	e1c3      	b.n	8001e74 <__aeabi_dsub+0x594>
 8001aec:	4956      	ldr	r1, [pc, #344]	; (8001c48 <__aeabi_dsub+0x368>)
 8001aee:	428c      	cmp	r4, r1
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dsub+0x214>
 8001af2:	e0b1      	b.n	8001c58 <__aeabi_dsub+0x378>
 8001af4:	4694      	mov	ip, r2
 8001af6:	e72b      	b.n	8001950 <__aeabi_dsub+0x70>
 8001af8:	2401      	movs	r4, #1
 8001afa:	4061      	eors	r1, r4
 8001afc:	468b      	mov	fp, r1
 8001afe:	428d      	cmp	r5, r1
 8001b00:	d000      	beq.n	8001b04 <__aeabi_dsub+0x224>
 8001b02:	e716      	b.n	8001932 <__aeabi_dsub+0x52>
 8001b04:	4952      	ldr	r1, [pc, #328]	; (8001c50 <__aeabi_dsub+0x370>)
 8001b06:	468c      	mov	ip, r1
 8001b08:	44b4      	add	ip, r6
 8001b0a:	4664      	mov	r4, ip
 8001b0c:	2c00      	cmp	r4, #0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x232>
 8001b10:	e0d3      	b.n	8001cba <__aeabi_dsub+0x3da>
 8001b12:	1b91      	subs	r1, r2, r6
 8001b14:	468c      	mov	ip, r1
 8001b16:	2e00      	cmp	r6, #0
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x23c>
 8001b1a:	e15e      	b.n	8001dda <__aeabi_dsub+0x4fa>
 8001b1c:	494a      	ldr	r1, [pc, #296]	; (8001c48 <__aeabi_dsub+0x368>)
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x244>
 8001b22:	e1be      	b.n	8001ea2 <__aeabi_dsub+0x5c2>
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	464c      	mov	r4, r9
 8001b28:	0409      	lsls	r1, r1, #16
 8001b2a:	430c      	orrs	r4, r1
 8001b2c:	46a1      	mov	r9, r4
 8001b2e:	4661      	mov	r1, ip
 8001b30:	2938      	cmp	r1, #56	; 0x38
 8001b32:	dd00      	ble.n	8001b36 <__aeabi_dsub+0x256>
 8001b34:	e1ba      	b.n	8001eac <__aeabi_dsub+0x5cc>
 8001b36:	291f      	cmp	r1, #31
 8001b38:	dd00      	ble.n	8001b3c <__aeabi_dsub+0x25c>
 8001b3a:	e227      	b.n	8001f8c <__aeabi_dsub+0x6ac>
 8001b3c:	2420      	movs	r4, #32
 8001b3e:	1a64      	subs	r4, r4, r1
 8001b40:	4649      	mov	r1, r9
 8001b42:	40a1      	lsls	r1, r4
 8001b44:	001e      	movs	r6, r3
 8001b46:	4688      	mov	r8, r1
 8001b48:	4661      	mov	r1, ip
 8001b4a:	40a3      	lsls	r3, r4
 8001b4c:	40ce      	lsrs	r6, r1
 8001b4e:	4641      	mov	r1, r8
 8001b50:	1e5c      	subs	r4, r3, #1
 8001b52:	41a3      	sbcs	r3, r4
 8001b54:	4331      	orrs	r1, r6
 8001b56:	4319      	orrs	r1, r3
 8001b58:	000c      	movs	r4, r1
 8001b5a:	4663      	mov	r3, ip
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	40d9      	lsrs	r1, r3
 8001b60:	187f      	adds	r7, r7, r1
 8001b62:	1824      	adds	r4, r4, r0
 8001b64:	4284      	cmp	r4, r0
 8001b66:	419b      	sbcs	r3, r3
 8001b68:	425b      	negs	r3, r3
 8001b6a:	469a      	mov	sl, r3
 8001b6c:	0016      	movs	r6, r2
 8001b6e:	44ba      	add	sl, r7
 8001b70:	e05d      	b.n	8001c2e <__aeabi_dsub+0x34e>
 8001b72:	4c38      	ldr	r4, [pc, #224]	; (8001c54 <__aeabi_dsub+0x374>)
 8001b74:	1c72      	adds	r2, r6, #1
 8001b76:	4222      	tst	r2, r4
 8001b78:	d000      	beq.n	8001b7c <__aeabi_dsub+0x29c>
 8001b7a:	e0df      	b.n	8001d3c <__aeabi_dsub+0x45c>
 8001b7c:	464a      	mov	r2, r9
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	2e00      	cmp	r6, #0
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x2a6>
 8001b84:	e15c      	b.n	8001e40 <__aeabi_dsub+0x560>
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dsub+0x2ac>
 8001b8a:	e1cf      	b.n	8001f2c <__aeabi_dsub+0x64c>
 8001b8c:	003a      	movs	r2, r7
 8001b8e:	4302      	orrs	r2, r0
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dsub+0x2b4>
 8001b92:	e17f      	b.n	8001e94 <__aeabi_dsub+0x5b4>
 8001b94:	1a1c      	subs	r4, r3, r0
 8001b96:	464a      	mov	r2, r9
 8001b98:	42a3      	cmp	r3, r4
 8001b9a:	4189      	sbcs	r1, r1
 8001b9c:	1bd2      	subs	r2, r2, r7
 8001b9e:	4249      	negs	r1, r1
 8001ba0:	1a52      	subs	r2, r2, r1
 8001ba2:	4692      	mov	sl, r2
 8001ba4:	0212      	lsls	r2, r2, #8
 8001ba6:	d400      	bmi.n	8001baa <__aeabi_dsub+0x2ca>
 8001ba8:	e20a      	b.n	8001fc0 <__aeabi_dsub+0x6e0>
 8001baa:	1ac4      	subs	r4, r0, r3
 8001bac:	42a0      	cmp	r0, r4
 8001bae:	4180      	sbcs	r0, r0
 8001bb0:	464b      	mov	r3, r9
 8001bb2:	4240      	negs	r0, r0
 8001bb4:	1aff      	subs	r7, r7, r3
 8001bb6:	1a3b      	subs	r3, r7, r0
 8001bb8:	469a      	mov	sl, r3
 8001bba:	465d      	mov	r5, fp
 8001bbc:	e71a      	b.n	80019f4 <__aeabi_dsub+0x114>
 8001bbe:	003a      	movs	r2, r7
 8001bc0:	4302      	orrs	r2, r0
 8001bc2:	d073      	beq.n	8001cac <__aeabi_dsub+0x3cc>
 8001bc4:	0022      	movs	r2, r4
 8001bc6:	3a01      	subs	r2, #1
 8001bc8:	2c01      	cmp	r4, #1
 8001bca:	d100      	bne.n	8001bce <__aeabi_dsub+0x2ee>
 8001bcc:	e0cb      	b.n	8001d66 <__aeabi_dsub+0x486>
 8001bce:	4554      	cmp	r4, sl
 8001bd0:	d042      	beq.n	8001c58 <__aeabi_dsub+0x378>
 8001bd2:	4694      	mov	ip, r2
 8001bd4:	e748      	b.n	8001a68 <__aeabi_dsub+0x188>
 8001bd6:	0010      	movs	r0, r2
 8001bd8:	3b1f      	subs	r3, #31
 8001bda:	40d8      	lsrs	r0, r3
 8001bdc:	2920      	cmp	r1, #32
 8001bde:	d003      	beq.n	8001be8 <__aeabi_dsub+0x308>
 8001be0:	2340      	movs	r3, #64	; 0x40
 8001be2:	1a5b      	subs	r3, r3, r1
 8001be4:	409a      	lsls	r2, r3
 8001be6:	4314      	orrs	r4, r2
 8001be8:	1e63      	subs	r3, r4, #1
 8001bea:	419c      	sbcs	r4, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	2600      	movs	r6, #0
 8001bf0:	469a      	mov	sl, r3
 8001bf2:	4304      	orrs	r4, r0
 8001bf4:	0763      	lsls	r3, r4, #29
 8001bf6:	d000      	beq.n	8001bfa <__aeabi_dsub+0x31a>
 8001bf8:	e6fe      	b.n	80019f8 <__aeabi_dsub+0x118>
 8001bfa:	4652      	mov	r2, sl
 8001bfc:	08e3      	lsrs	r3, r4, #3
 8001bfe:	0752      	lsls	r2, r2, #29
 8001c00:	4313      	orrs	r3, r2
 8001c02:	4652      	mov	r2, sl
 8001c04:	46b4      	mov	ip, r6
 8001c06:	08d2      	lsrs	r2, r2, #3
 8001c08:	490f      	ldr	r1, [pc, #60]	; (8001c48 <__aeabi_dsub+0x368>)
 8001c0a:	458c      	cmp	ip, r1
 8001c0c:	d02a      	beq.n	8001c64 <__aeabi_dsub+0x384>
 8001c0e:	0312      	lsls	r2, r2, #12
 8001c10:	0b14      	lsrs	r4, r2, #12
 8001c12:	4662      	mov	r2, ip
 8001c14:	0552      	lsls	r2, r2, #21
 8001c16:	0d52      	lsrs	r2, r2, #21
 8001c18:	e70c      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001c1a:	003c      	movs	r4, r7
 8001c1c:	4304      	orrs	r4, r0
 8001c1e:	1e62      	subs	r2, r4, #1
 8001c20:	4194      	sbcs	r4, r2
 8001c22:	18e4      	adds	r4, r4, r3
 8001c24:	429c      	cmp	r4, r3
 8001c26:	4192      	sbcs	r2, r2
 8001c28:	4252      	negs	r2, r2
 8001c2a:	444a      	add	r2, r9
 8001c2c:	4692      	mov	sl, r2
 8001c2e:	4653      	mov	r3, sl
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	d5df      	bpl.n	8001bf4 <__aeabi_dsub+0x314>
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__aeabi_dsub+0x368>)
 8001c36:	3601      	adds	r6, #1
 8001c38:	429e      	cmp	r6, r3
 8001c3a:	d000      	beq.n	8001c3e <__aeabi_dsub+0x35e>
 8001c3c:	e0a0      	b.n	8001d80 <__aeabi_dsub+0x4a0>
 8001c3e:	0032      	movs	r2, r6
 8001c40:	2400      	movs	r4, #0
 8001c42:	2300      	movs	r3, #0
 8001c44:	e6f6      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	000007ff 	.word	0x000007ff
 8001c4c:	ff7fffff 	.word	0xff7fffff
 8001c50:	fffff801 	.word	0xfffff801
 8001c54:	000007fe 	.word	0x000007fe
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	464a      	mov	r2, r9
 8001c5c:	0752      	lsls	r2, r2, #29
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	464a      	mov	r2, r9
 8001c62:	08d2      	lsrs	r2, r2, #3
 8001c64:	0019      	movs	r1, r3
 8001c66:	4311      	orrs	r1, r2
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x38c>
 8001c6a:	e1b5      	b.n	8001fd8 <__aeabi_dsub+0x6f8>
 8001c6c:	2480      	movs	r4, #128	; 0x80
 8001c6e:	0324      	lsls	r4, r4, #12
 8001c70:	4314      	orrs	r4, r2
 8001c72:	0324      	lsls	r4, r4, #12
 8001c74:	4ad5      	ldr	r2, [pc, #852]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001c76:	0b24      	lsrs	r4, r4, #12
 8001c78:	e6dc      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001c7a:	0020      	movs	r0, r4
 8001c7c:	f000 fa5c 	bl	8002138 <__clzsi2>
 8001c80:	0003      	movs	r3, r0
 8001c82:	3318      	adds	r3, #24
 8001c84:	2b1f      	cmp	r3, #31
 8001c86:	dc00      	bgt.n	8001c8a <__aeabi_dsub+0x3aa>
 8001c88:	e695      	b.n	80019b6 <__aeabi_dsub+0xd6>
 8001c8a:	0022      	movs	r2, r4
 8001c8c:	3808      	subs	r0, #8
 8001c8e:	4082      	lsls	r2, r0
 8001c90:	2400      	movs	r4, #0
 8001c92:	429e      	cmp	r6, r3
 8001c94:	dc00      	bgt.n	8001c98 <__aeabi_dsub+0x3b8>
 8001c96:	e69a      	b.n	80019ce <__aeabi_dsub+0xee>
 8001c98:	1af6      	subs	r6, r6, r3
 8001c9a:	4bcd      	ldr	r3, [pc, #820]	; (8001fd0 <__aeabi_dsub+0x6f0>)
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	4692      	mov	sl, r2
 8001ca0:	e6a8      	b.n	80019f4 <__aeabi_dsub+0x114>
 8001ca2:	003c      	movs	r4, r7
 8001ca4:	4304      	orrs	r4, r0
 8001ca6:	1e62      	subs	r2, r4, #1
 8001ca8:	4194      	sbcs	r4, r2
 8001caa:	e66c      	b.n	8001986 <__aeabi_dsub+0xa6>
 8001cac:	464a      	mov	r2, r9
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	0752      	lsls	r2, r2, #29
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	464a      	mov	r2, r9
 8001cb6:	08d2      	lsrs	r2, r2, #3
 8001cb8:	e7a6      	b.n	8001c08 <__aeabi_dsub+0x328>
 8001cba:	4cc6      	ldr	r4, [pc, #792]	; (8001fd4 <__aeabi_dsub+0x6f4>)
 8001cbc:	1c72      	adds	r2, r6, #1
 8001cbe:	4222      	tst	r2, r4
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dsub+0x3e4>
 8001cc2:	e0ac      	b.n	8001e1e <__aeabi_dsub+0x53e>
 8001cc4:	464a      	mov	r2, r9
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	2e00      	cmp	r6, #0
 8001cca:	d000      	beq.n	8001cce <__aeabi_dsub+0x3ee>
 8001ccc:	e105      	b.n	8001eda <__aeabi_dsub+0x5fa>
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x3f4>
 8001cd2:	e156      	b.n	8001f82 <__aeabi_dsub+0x6a2>
 8001cd4:	003a      	movs	r2, r7
 8001cd6:	4302      	orrs	r2, r0
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x3fc>
 8001cda:	e0db      	b.n	8001e94 <__aeabi_dsub+0x5b4>
 8001cdc:	181c      	adds	r4, r3, r0
 8001cde:	429c      	cmp	r4, r3
 8001ce0:	419b      	sbcs	r3, r3
 8001ce2:	444f      	add	r7, r9
 8001ce4:	46ba      	mov	sl, r7
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	449a      	add	sl, r3
 8001cea:	4653      	mov	r3, sl
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	d400      	bmi.n	8001cf2 <__aeabi_dsub+0x412>
 8001cf0:	e780      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001cf2:	4652      	mov	r2, sl
 8001cf4:	4bb6      	ldr	r3, [pc, #728]	; (8001fd0 <__aeabi_dsub+0x6f0>)
 8001cf6:	2601      	movs	r6, #1
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	4692      	mov	sl, r2
 8001cfc:	e77a      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001cfe:	4cb3      	ldr	r4, [pc, #716]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001d00:	42a2      	cmp	r2, r4
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x426>
 8001d04:	e0c0      	b.n	8001e88 <__aeabi_dsub+0x5a8>
 8001d06:	2480      	movs	r4, #128	; 0x80
 8001d08:	464d      	mov	r5, r9
 8001d0a:	0424      	lsls	r4, r4, #16
 8001d0c:	4325      	orrs	r5, r4
 8001d0e:	46a9      	mov	r9, r5
 8001d10:	4664      	mov	r4, ip
 8001d12:	2c38      	cmp	r4, #56	; 0x38
 8001d14:	dc53      	bgt.n	8001dbe <__aeabi_dsub+0x4de>
 8001d16:	4661      	mov	r1, ip
 8001d18:	2c1f      	cmp	r4, #31
 8001d1a:	dd00      	ble.n	8001d1e <__aeabi_dsub+0x43e>
 8001d1c:	e0cd      	b.n	8001eba <__aeabi_dsub+0x5da>
 8001d1e:	2520      	movs	r5, #32
 8001d20:	001e      	movs	r6, r3
 8001d22:	1b2d      	subs	r5, r5, r4
 8001d24:	464c      	mov	r4, r9
 8001d26:	40ab      	lsls	r3, r5
 8001d28:	40ac      	lsls	r4, r5
 8001d2a:	40ce      	lsrs	r6, r1
 8001d2c:	1e5d      	subs	r5, r3, #1
 8001d2e:	41ab      	sbcs	r3, r5
 8001d30:	4334      	orrs	r4, r6
 8001d32:	4323      	orrs	r3, r4
 8001d34:	464c      	mov	r4, r9
 8001d36:	40cc      	lsrs	r4, r1
 8001d38:	1b3f      	subs	r7, r7, r4
 8001d3a:	e045      	b.n	8001dc8 <__aeabi_dsub+0x4e8>
 8001d3c:	464a      	mov	r2, r9
 8001d3e:	1a1c      	subs	r4, r3, r0
 8001d40:	1bd1      	subs	r1, r2, r7
 8001d42:	42a3      	cmp	r3, r4
 8001d44:	4192      	sbcs	r2, r2
 8001d46:	4252      	negs	r2, r2
 8001d48:	4692      	mov	sl, r2
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	4651      	mov	r1, sl
 8001d4e:	1a52      	subs	r2, r2, r1
 8001d50:	4692      	mov	sl, r2
 8001d52:	0212      	lsls	r2, r2, #8
 8001d54:	d500      	bpl.n	8001d58 <__aeabi_dsub+0x478>
 8001d56:	e083      	b.n	8001e60 <__aeabi_dsub+0x580>
 8001d58:	4653      	mov	r3, sl
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	d000      	beq.n	8001d60 <__aeabi_dsub+0x480>
 8001d5e:	e621      	b.n	80019a4 <__aeabi_dsub+0xc4>
 8001d60:	2200      	movs	r2, #0
 8001d62:	2500      	movs	r5, #0
 8001d64:	e753      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001d66:	181c      	adds	r4, r3, r0
 8001d68:	429c      	cmp	r4, r3
 8001d6a:	419b      	sbcs	r3, r3
 8001d6c:	444f      	add	r7, r9
 8001d6e:	46ba      	mov	sl, r7
 8001d70:	425b      	negs	r3, r3
 8001d72:	449a      	add	sl, r3
 8001d74:	4653      	mov	r3, sl
 8001d76:	2601      	movs	r6, #1
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x49e>
 8001d7c:	e73a      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001d7e:	2602      	movs	r6, #2
 8001d80:	4652      	mov	r2, sl
 8001d82:	4b93      	ldr	r3, [pc, #588]	; (8001fd0 <__aeabi_dsub+0x6f0>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	401a      	ands	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	4021      	ands	r1, r4
 8001d8c:	0862      	lsrs	r2, r4, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	07dc      	lsls	r4, r3, #31
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	469a      	mov	sl, r3
 8001d96:	4314      	orrs	r4, r2
 8001d98:	e62c      	b.n	80019f4 <__aeabi_dsub+0x114>
 8001d9a:	0039      	movs	r1, r7
 8001d9c:	3a20      	subs	r2, #32
 8001d9e:	40d1      	lsrs	r1, r2
 8001da0:	4662      	mov	r2, ip
 8001da2:	2a20      	cmp	r2, #32
 8001da4:	d006      	beq.n	8001db4 <__aeabi_dsub+0x4d4>
 8001da6:	4664      	mov	r4, ip
 8001da8:	2240      	movs	r2, #64	; 0x40
 8001daa:	1b12      	subs	r2, r2, r4
 8001dac:	003c      	movs	r4, r7
 8001dae:	4094      	lsls	r4, r2
 8001db0:	4304      	orrs	r4, r0
 8001db2:	9401      	str	r4, [sp, #4]
 8001db4:	9c01      	ldr	r4, [sp, #4]
 8001db6:	1e62      	subs	r2, r4, #1
 8001db8:	4194      	sbcs	r4, r2
 8001dba:	430c      	orrs	r4, r1
 8001dbc:	e5e3      	b.n	8001986 <__aeabi_dsub+0xa6>
 8001dbe:	4649      	mov	r1, r9
 8001dc0:	4319      	orrs	r1, r3
 8001dc2:	000b      	movs	r3, r1
 8001dc4:	1e5c      	subs	r4, r3, #1
 8001dc6:	41a3      	sbcs	r3, r4
 8001dc8:	1ac4      	subs	r4, r0, r3
 8001dca:	42a0      	cmp	r0, r4
 8001dcc:	419b      	sbcs	r3, r3
 8001dce:	425b      	negs	r3, r3
 8001dd0:	1afb      	subs	r3, r7, r3
 8001dd2:	469a      	mov	sl, r3
 8001dd4:	465d      	mov	r5, fp
 8001dd6:	0016      	movs	r6, r2
 8001dd8:	e5dc      	b.n	8001994 <__aeabi_dsub+0xb4>
 8001dda:	4649      	mov	r1, r9
 8001ddc:	4319      	orrs	r1, r3
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x502>
 8001de0:	e0ae      	b.n	8001f40 <__aeabi_dsub+0x660>
 8001de2:	4661      	mov	r1, ip
 8001de4:	4664      	mov	r4, ip
 8001de6:	3901      	subs	r1, #1
 8001de8:	2c01      	cmp	r4, #1
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x50e>
 8001dec:	e0e0      	b.n	8001fb0 <__aeabi_dsub+0x6d0>
 8001dee:	4c77      	ldr	r4, [pc, #476]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001df0:	45a4      	cmp	ip, r4
 8001df2:	d056      	beq.n	8001ea2 <__aeabi_dsub+0x5c2>
 8001df4:	468c      	mov	ip, r1
 8001df6:	e69a      	b.n	8001b2e <__aeabi_dsub+0x24e>
 8001df8:	4661      	mov	r1, ip
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	003c      	movs	r4, r7
 8001dfe:	1a52      	subs	r2, r2, r1
 8001e00:	4094      	lsls	r4, r2
 8001e02:	0001      	movs	r1, r0
 8001e04:	4090      	lsls	r0, r2
 8001e06:	46a0      	mov	r8, r4
 8001e08:	4664      	mov	r4, ip
 8001e0a:	1e42      	subs	r2, r0, #1
 8001e0c:	4190      	sbcs	r0, r2
 8001e0e:	4662      	mov	r2, ip
 8001e10:	40e1      	lsrs	r1, r4
 8001e12:	4644      	mov	r4, r8
 8001e14:	40d7      	lsrs	r7, r2
 8001e16:	430c      	orrs	r4, r1
 8001e18:	4304      	orrs	r4, r0
 8001e1a:	44b9      	add	r9, r7
 8001e1c:	e701      	b.n	8001c22 <__aeabi_dsub+0x342>
 8001e1e:	496b      	ldr	r1, [pc, #428]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001e20:	428a      	cmp	r2, r1
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x546>
 8001e24:	e70c      	b.n	8001c40 <__aeabi_dsub+0x360>
 8001e26:	1818      	adds	r0, r3, r0
 8001e28:	4298      	cmp	r0, r3
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	444f      	add	r7, r9
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	07dc      	lsls	r4, r3, #31
 8001e34:	0840      	lsrs	r0, r0, #1
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	469a      	mov	sl, r3
 8001e3a:	0016      	movs	r6, r2
 8001e3c:	4304      	orrs	r4, r0
 8001e3e:	e6d9      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	d000      	beq.n	8001e46 <__aeabi_dsub+0x566>
 8001e44:	e081      	b.n	8001f4a <__aeabi_dsub+0x66a>
 8001e46:	003b      	movs	r3, r7
 8001e48:	4303      	orrs	r3, r0
 8001e4a:	d11d      	bne.n	8001e88 <__aeabi_dsub+0x5a8>
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	2500      	movs	r5, #0
 8001e50:	0312      	lsls	r2, r2, #12
 8001e52:	e70b      	b.n	8001c6c <__aeabi_dsub+0x38c>
 8001e54:	08c0      	lsrs	r0, r0, #3
 8001e56:	077b      	lsls	r3, r7, #29
 8001e58:	465d      	mov	r5, fp
 8001e5a:	4303      	orrs	r3, r0
 8001e5c:	08fa      	lsrs	r2, r7, #3
 8001e5e:	e6d3      	b.n	8001c08 <__aeabi_dsub+0x328>
 8001e60:	1ac4      	subs	r4, r0, r3
 8001e62:	42a0      	cmp	r0, r4
 8001e64:	4180      	sbcs	r0, r0
 8001e66:	464b      	mov	r3, r9
 8001e68:	4240      	negs	r0, r0
 8001e6a:	1aff      	subs	r7, r7, r3
 8001e6c:	1a3b      	subs	r3, r7, r0
 8001e6e:	469a      	mov	sl, r3
 8001e70:	465d      	mov	r5, fp
 8001e72:	e597      	b.n	80019a4 <__aeabi_dsub+0xc4>
 8001e74:	1a1c      	subs	r4, r3, r0
 8001e76:	464a      	mov	r2, r9
 8001e78:	42a3      	cmp	r3, r4
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	1bd7      	subs	r7, r2, r7
 8001e7e:	425b      	negs	r3, r3
 8001e80:	1afb      	subs	r3, r7, r3
 8001e82:	469a      	mov	sl, r3
 8001e84:	2601      	movs	r6, #1
 8001e86:	e585      	b.n	8001994 <__aeabi_dsub+0xb4>
 8001e88:	08c0      	lsrs	r0, r0, #3
 8001e8a:	077b      	lsls	r3, r7, #29
 8001e8c:	465d      	mov	r5, fp
 8001e8e:	4303      	orrs	r3, r0
 8001e90:	08fa      	lsrs	r2, r7, #3
 8001e92:	e6e7      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001e94:	464a      	mov	r2, r9
 8001e96:	08db      	lsrs	r3, r3, #3
 8001e98:	0752      	lsls	r2, r2, #29
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	464a      	mov	r2, r9
 8001e9e:	08d2      	lsrs	r2, r2, #3
 8001ea0:	e6b5      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001ea2:	08c0      	lsrs	r0, r0, #3
 8001ea4:	077b      	lsls	r3, r7, #29
 8001ea6:	4303      	orrs	r3, r0
 8001ea8:	08fa      	lsrs	r2, r7, #3
 8001eaa:	e6db      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001eac:	4649      	mov	r1, r9
 8001eae:	4319      	orrs	r1, r3
 8001eb0:	000b      	movs	r3, r1
 8001eb2:	1e59      	subs	r1, r3, #1
 8001eb4:	418b      	sbcs	r3, r1
 8001eb6:	001c      	movs	r4, r3
 8001eb8:	e653      	b.n	8001b62 <__aeabi_dsub+0x282>
 8001eba:	464d      	mov	r5, r9
 8001ebc:	3c20      	subs	r4, #32
 8001ebe:	40e5      	lsrs	r5, r4
 8001ec0:	2920      	cmp	r1, #32
 8001ec2:	d005      	beq.n	8001ed0 <__aeabi_dsub+0x5f0>
 8001ec4:	2440      	movs	r4, #64	; 0x40
 8001ec6:	1a64      	subs	r4, r4, r1
 8001ec8:	4649      	mov	r1, r9
 8001eca:	40a1      	lsls	r1, r4
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	4698      	mov	r8, r3
 8001ed0:	4643      	mov	r3, r8
 8001ed2:	1e5c      	subs	r4, r3, #1
 8001ed4:	41a3      	sbcs	r3, r4
 8001ed6:	432b      	orrs	r3, r5
 8001ed8:	e776      	b.n	8001dc8 <__aeabi_dsub+0x4e8>
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	d0e1      	beq.n	8001ea2 <__aeabi_dsub+0x5c2>
 8001ede:	003a      	movs	r2, r7
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	4302      	orrs	r2, r0
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dsub+0x608>
 8001ee6:	e6b8      	b.n	8001c5a <__aeabi_dsub+0x37a>
 8001ee8:	464a      	mov	r2, r9
 8001eea:	0752      	lsls	r2, r2, #29
 8001eec:	2480      	movs	r4, #128	; 0x80
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	464a      	mov	r2, r9
 8001ef2:	0324      	lsls	r4, r4, #12
 8001ef4:	08d2      	lsrs	r2, r2, #3
 8001ef6:	4222      	tst	r2, r4
 8001ef8:	d007      	beq.n	8001f0a <__aeabi_dsub+0x62a>
 8001efa:	08fe      	lsrs	r6, r7, #3
 8001efc:	4226      	tst	r6, r4
 8001efe:	d104      	bne.n	8001f0a <__aeabi_dsub+0x62a>
 8001f00:	465d      	mov	r5, fp
 8001f02:	0032      	movs	r2, r6
 8001f04:	08c3      	lsrs	r3, r0, #3
 8001f06:	077f      	lsls	r7, r7, #29
 8001f08:	433b      	orrs	r3, r7
 8001f0a:	0f59      	lsrs	r1, r3, #29
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	0749      	lsls	r1, r1, #29
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	430b      	orrs	r3, r1
 8001f14:	e6a6      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001f16:	1ac4      	subs	r4, r0, r3
 8001f18:	42a0      	cmp	r0, r4
 8001f1a:	4180      	sbcs	r0, r0
 8001f1c:	464b      	mov	r3, r9
 8001f1e:	4240      	negs	r0, r0
 8001f20:	1aff      	subs	r7, r7, r3
 8001f22:	1a3b      	subs	r3, r7, r0
 8001f24:	469a      	mov	sl, r3
 8001f26:	465d      	mov	r5, fp
 8001f28:	2601      	movs	r6, #1
 8001f2a:	e533      	b.n	8001994 <__aeabi_dsub+0xb4>
 8001f2c:	003b      	movs	r3, r7
 8001f2e:	4303      	orrs	r3, r0
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x654>
 8001f32:	e715      	b.n	8001d60 <__aeabi_dsub+0x480>
 8001f34:	08c0      	lsrs	r0, r0, #3
 8001f36:	077b      	lsls	r3, r7, #29
 8001f38:	465d      	mov	r5, fp
 8001f3a:	4303      	orrs	r3, r0
 8001f3c:	08fa      	lsrs	r2, r7, #3
 8001f3e:	e666      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001f40:	08c0      	lsrs	r0, r0, #3
 8001f42:	077b      	lsls	r3, r7, #29
 8001f44:	4303      	orrs	r3, r0
 8001f46:	08fa      	lsrs	r2, r7, #3
 8001f48:	e65e      	b.n	8001c08 <__aeabi_dsub+0x328>
 8001f4a:	003a      	movs	r2, r7
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	4302      	orrs	r2, r0
 8001f50:	d100      	bne.n	8001f54 <__aeabi_dsub+0x674>
 8001f52:	e682      	b.n	8001c5a <__aeabi_dsub+0x37a>
 8001f54:	464a      	mov	r2, r9
 8001f56:	0752      	lsls	r2, r2, #29
 8001f58:	2480      	movs	r4, #128	; 0x80
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	464a      	mov	r2, r9
 8001f5e:	0324      	lsls	r4, r4, #12
 8001f60:	08d2      	lsrs	r2, r2, #3
 8001f62:	4222      	tst	r2, r4
 8001f64:	d007      	beq.n	8001f76 <__aeabi_dsub+0x696>
 8001f66:	08fe      	lsrs	r6, r7, #3
 8001f68:	4226      	tst	r6, r4
 8001f6a:	d104      	bne.n	8001f76 <__aeabi_dsub+0x696>
 8001f6c:	465d      	mov	r5, fp
 8001f6e:	0032      	movs	r2, r6
 8001f70:	08c3      	lsrs	r3, r0, #3
 8001f72:	077f      	lsls	r7, r7, #29
 8001f74:	433b      	orrs	r3, r7
 8001f76:	0f59      	lsrs	r1, r3, #29
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	08db      	lsrs	r3, r3, #3
 8001f7c:	0749      	lsls	r1, r1, #29
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	e670      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001f82:	08c0      	lsrs	r0, r0, #3
 8001f84:	077b      	lsls	r3, r7, #29
 8001f86:	4303      	orrs	r3, r0
 8001f88:	08fa      	lsrs	r2, r7, #3
 8001f8a:	e640      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001f8c:	464c      	mov	r4, r9
 8001f8e:	3920      	subs	r1, #32
 8001f90:	40cc      	lsrs	r4, r1
 8001f92:	4661      	mov	r1, ip
 8001f94:	2920      	cmp	r1, #32
 8001f96:	d006      	beq.n	8001fa6 <__aeabi_dsub+0x6c6>
 8001f98:	4666      	mov	r6, ip
 8001f9a:	2140      	movs	r1, #64	; 0x40
 8001f9c:	1b89      	subs	r1, r1, r6
 8001f9e:	464e      	mov	r6, r9
 8001fa0:	408e      	lsls	r6, r1
 8001fa2:	4333      	orrs	r3, r6
 8001fa4:	4698      	mov	r8, r3
 8001fa6:	4643      	mov	r3, r8
 8001fa8:	1e59      	subs	r1, r3, #1
 8001faa:	418b      	sbcs	r3, r1
 8001fac:	431c      	orrs	r4, r3
 8001fae:	e5d8      	b.n	8001b62 <__aeabi_dsub+0x282>
 8001fb0:	181c      	adds	r4, r3, r0
 8001fb2:	4284      	cmp	r4, r0
 8001fb4:	4180      	sbcs	r0, r0
 8001fb6:	444f      	add	r7, r9
 8001fb8:	46ba      	mov	sl, r7
 8001fba:	4240      	negs	r0, r0
 8001fbc:	4482      	add	sl, r0
 8001fbe:	e6d9      	b.n	8001d74 <__aeabi_dsub+0x494>
 8001fc0:	4653      	mov	r3, sl
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x6e8>
 8001fc6:	e6cb      	b.n	8001d60 <__aeabi_dsub+0x480>
 8001fc8:	e614      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	000007ff 	.word	0x000007ff
 8001fd0:	ff7fffff 	.word	0xff7fffff
 8001fd4:	000007fe 	.word	0x000007fe
 8001fd8:	2300      	movs	r3, #0
 8001fda:	4a01      	ldr	r2, [pc, #4]	; (8001fe0 <__aeabi_dsub+0x700>)
 8001fdc:	001c      	movs	r4, r3
 8001fde:	e529      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001fe0:	000007ff 	.word	0x000007ff

08001fe4 <__aeabi_dcmpun>:
 8001fe4:	b570      	push	{r4, r5, r6, lr}
 8001fe6:	0005      	movs	r5, r0
 8001fe8:	480c      	ldr	r0, [pc, #48]	; (800201c <__aeabi_dcmpun+0x38>)
 8001fea:	031c      	lsls	r4, r3, #12
 8001fec:	0016      	movs	r6, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	030a      	lsls	r2, r1, #12
 8001ff2:	0049      	lsls	r1, r1, #1
 8001ff4:	0b12      	lsrs	r2, r2, #12
 8001ff6:	0d49      	lsrs	r1, r1, #21
 8001ff8:	0b24      	lsrs	r4, r4, #12
 8001ffa:	0d5b      	lsrs	r3, r3, #21
 8001ffc:	4281      	cmp	r1, r0
 8001ffe:	d008      	beq.n	8002012 <__aeabi_dcmpun+0x2e>
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <__aeabi_dcmpun+0x38>)
 8002002:	2000      	movs	r0, #0
 8002004:	4293      	cmp	r3, r2
 8002006:	d103      	bne.n	8002010 <__aeabi_dcmpun+0x2c>
 8002008:	0020      	movs	r0, r4
 800200a:	4330      	orrs	r0, r6
 800200c:	1e43      	subs	r3, r0, #1
 800200e:	4198      	sbcs	r0, r3
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	2001      	movs	r0, #1
 8002014:	432a      	orrs	r2, r5
 8002016:	d1fb      	bne.n	8002010 <__aeabi_dcmpun+0x2c>
 8002018:	e7f2      	b.n	8002000 <__aeabi_dcmpun+0x1c>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	000007ff 	.word	0x000007ff

08002020 <__aeabi_d2iz>:
 8002020:	000a      	movs	r2, r1
 8002022:	b530      	push	{r4, r5, lr}
 8002024:	4c13      	ldr	r4, [pc, #76]	; (8002074 <__aeabi_d2iz+0x54>)
 8002026:	0053      	lsls	r3, r2, #1
 8002028:	0309      	lsls	r1, r1, #12
 800202a:	0005      	movs	r5, r0
 800202c:	0b09      	lsrs	r1, r1, #12
 800202e:	2000      	movs	r0, #0
 8002030:	0d5b      	lsrs	r3, r3, #21
 8002032:	0fd2      	lsrs	r2, r2, #31
 8002034:	42a3      	cmp	r3, r4
 8002036:	dd04      	ble.n	8002042 <__aeabi_d2iz+0x22>
 8002038:	480f      	ldr	r0, [pc, #60]	; (8002078 <__aeabi_d2iz+0x58>)
 800203a:	4283      	cmp	r3, r0
 800203c:	dd02      	ble.n	8002044 <__aeabi_d2iz+0x24>
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <__aeabi_d2iz+0x5c>)
 8002040:	18d0      	adds	r0, r2, r3
 8002042:	bd30      	pop	{r4, r5, pc}
 8002044:	2080      	movs	r0, #128	; 0x80
 8002046:	0340      	lsls	r0, r0, #13
 8002048:	4301      	orrs	r1, r0
 800204a:	480d      	ldr	r0, [pc, #52]	; (8002080 <__aeabi_d2iz+0x60>)
 800204c:	1ac0      	subs	r0, r0, r3
 800204e:	281f      	cmp	r0, #31
 8002050:	dd08      	ble.n	8002064 <__aeabi_d2iz+0x44>
 8002052:	480c      	ldr	r0, [pc, #48]	; (8002084 <__aeabi_d2iz+0x64>)
 8002054:	1ac3      	subs	r3, r0, r3
 8002056:	40d9      	lsrs	r1, r3
 8002058:	000b      	movs	r3, r1
 800205a:	4258      	negs	r0, r3
 800205c:	2a00      	cmp	r2, #0
 800205e:	d1f0      	bne.n	8002042 <__aeabi_d2iz+0x22>
 8002060:	0018      	movs	r0, r3
 8002062:	e7ee      	b.n	8002042 <__aeabi_d2iz+0x22>
 8002064:	4c08      	ldr	r4, [pc, #32]	; (8002088 <__aeabi_d2iz+0x68>)
 8002066:	40c5      	lsrs	r5, r0
 8002068:	46a4      	mov	ip, r4
 800206a:	4463      	add	r3, ip
 800206c:	4099      	lsls	r1, r3
 800206e:	000b      	movs	r3, r1
 8002070:	432b      	orrs	r3, r5
 8002072:	e7f2      	b.n	800205a <__aeabi_d2iz+0x3a>
 8002074:	000003fe 	.word	0x000003fe
 8002078:	0000041d 	.word	0x0000041d
 800207c:	7fffffff 	.word	0x7fffffff
 8002080:	00000433 	.word	0x00000433
 8002084:	00000413 	.word	0x00000413
 8002088:	fffffbed 	.word	0xfffffbed

0800208c <__aeabi_i2d>:
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	2800      	cmp	r0, #0
 8002090:	d016      	beq.n	80020c0 <__aeabi_i2d+0x34>
 8002092:	17c3      	asrs	r3, r0, #31
 8002094:	18c5      	adds	r5, r0, r3
 8002096:	405d      	eors	r5, r3
 8002098:	0fc4      	lsrs	r4, r0, #31
 800209a:	0028      	movs	r0, r5
 800209c:	f000 f84c 	bl	8002138 <__clzsi2>
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <__aeabi_i2d+0x5c>)
 80020a2:	1a1b      	subs	r3, r3, r0
 80020a4:	280a      	cmp	r0, #10
 80020a6:	dc16      	bgt.n	80020d6 <__aeabi_i2d+0x4a>
 80020a8:	0002      	movs	r2, r0
 80020aa:	002e      	movs	r6, r5
 80020ac:	3215      	adds	r2, #21
 80020ae:	4096      	lsls	r6, r2
 80020b0:	220b      	movs	r2, #11
 80020b2:	1a12      	subs	r2, r2, r0
 80020b4:	40d5      	lsrs	r5, r2
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	032d      	lsls	r5, r5, #12
 80020ba:	0b2d      	lsrs	r5, r5, #12
 80020bc:	0d5b      	lsrs	r3, r3, #21
 80020be:	e003      	b.n	80020c8 <__aeabi_i2d+0x3c>
 80020c0:	2400      	movs	r4, #0
 80020c2:	2300      	movs	r3, #0
 80020c4:	2500      	movs	r5, #0
 80020c6:	2600      	movs	r6, #0
 80020c8:	051b      	lsls	r3, r3, #20
 80020ca:	432b      	orrs	r3, r5
 80020cc:	07e4      	lsls	r4, r4, #31
 80020ce:	4323      	orrs	r3, r4
 80020d0:	0030      	movs	r0, r6
 80020d2:	0019      	movs	r1, r3
 80020d4:	bd70      	pop	{r4, r5, r6, pc}
 80020d6:	380b      	subs	r0, #11
 80020d8:	4085      	lsls	r5, r0
 80020da:	055b      	lsls	r3, r3, #21
 80020dc:	032d      	lsls	r5, r5, #12
 80020de:	2600      	movs	r6, #0
 80020e0:	0b2d      	lsrs	r5, r5, #12
 80020e2:	0d5b      	lsrs	r3, r3, #21
 80020e4:	e7f0      	b.n	80020c8 <__aeabi_i2d+0x3c>
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	0000041e 	.word	0x0000041e

080020ec <__aeabi_ui2d>:
 80020ec:	b510      	push	{r4, lr}
 80020ee:	1e04      	subs	r4, r0, #0
 80020f0:	d010      	beq.n	8002114 <__aeabi_ui2d+0x28>
 80020f2:	f000 f821 	bl	8002138 <__clzsi2>
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <__aeabi_ui2d+0x48>)
 80020f8:	1a1b      	subs	r3, r3, r0
 80020fa:	280a      	cmp	r0, #10
 80020fc:	dc11      	bgt.n	8002122 <__aeabi_ui2d+0x36>
 80020fe:	220b      	movs	r2, #11
 8002100:	0021      	movs	r1, r4
 8002102:	1a12      	subs	r2, r2, r0
 8002104:	40d1      	lsrs	r1, r2
 8002106:	3015      	adds	r0, #21
 8002108:	030a      	lsls	r2, r1, #12
 800210a:	055b      	lsls	r3, r3, #21
 800210c:	4084      	lsls	r4, r0
 800210e:	0b12      	lsrs	r2, r2, #12
 8002110:	0d5b      	lsrs	r3, r3, #21
 8002112:	e001      	b.n	8002118 <__aeabi_ui2d+0x2c>
 8002114:	2300      	movs	r3, #0
 8002116:	2200      	movs	r2, #0
 8002118:	051b      	lsls	r3, r3, #20
 800211a:	4313      	orrs	r3, r2
 800211c:	0020      	movs	r0, r4
 800211e:	0019      	movs	r1, r3
 8002120:	bd10      	pop	{r4, pc}
 8002122:	0022      	movs	r2, r4
 8002124:	380b      	subs	r0, #11
 8002126:	4082      	lsls	r2, r0
 8002128:	055b      	lsls	r3, r3, #21
 800212a:	0312      	lsls	r2, r2, #12
 800212c:	2400      	movs	r4, #0
 800212e:	0b12      	lsrs	r2, r2, #12
 8002130:	0d5b      	lsrs	r3, r3, #21
 8002132:	e7f1      	b.n	8002118 <__aeabi_ui2d+0x2c>
 8002134:	0000041e 	.word	0x0000041e

08002138 <__clzsi2>:
 8002138:	211c      	movs	r1, #28
 800213a:	2301      	movs	r3, #1
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	4298      	cmp	r0, r3
 8002140:	d301      	bcc.n	8002146 <__clzsi2+0xe>
 8002142:	0c00      	lsrs	r0, r0, #16
 8002144:	3910      	subs	r1, #16
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	4298      	cmp	r0, r3
 800214a:	d301      	bcc.n	8002150 <__clzsi2+0x18>
 800214c:	0a00      	lsrs	r0, r0, #8
 800214e:	3908      	subs	r1, #8
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	4298      	cmp	r0, r3
 8002154:	d301      	bcc.n	800215a <__clzsi2+0x22>
 8002156:	0900      	lsrs	r0, r0, #4
 8002158:	3904      	subs	r1, #4
 800215a:	a202      	add	r2, pc, #8	; (adr r2, 8002164 <__clzsi2+0x2c>)
 800215c:	5c10      	ldrb	r0, [r2, r0]
 800215e:	1840      	adds	r0, r0, r1
 8002160:	4770      	bx	lr
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	02020304 	.word	0x02020304
 8002168:	01010101 	.word	0x01010101
	...

08002174 <TMC5160_Basic_Init>:
int SG2_trigger = 0;
int Driver_error = 0;
int Reset_error = 0;

void TMC5160_Basic_Init(CurrentConfig *Current)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	 I_RUN, Max run current = 20 = ~2.0A
	 I_HOLD, Max Hold current = 20 = ~2.0A
	*/


	uint32_t IHOLD_IRUN = 0x00070000; // standard IHOLD DELAY value
 800217c:	23e0      	movs	r3, #224	; 0xe0
 800217e:	02db      	lsls	r3, r3, #11
 8002180:	60fb      	str	r3, [r7, #12]
	//uint32_t GSTAT_VALUE = 0x00000000; //default value for GSTAT

	if(Current->IHOLD > 20) // set upper current limit ~2.0A
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b14      	cmp	r3, #20
 8002188:	d902      	bls.n	8002190 <TMC5160_Basic_Init+0x1c>
	{
		Current->IHOLD = 20;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2214      	movs	r2, #20
 800218e:	605a      	str	r2, [r3, #4]
	}

	if(Current->IRUN > 20) // set upper current limit ~2.0A
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b14      	cmp	r3, #20
 8002196:	d902      	bls.n	800219e <TMC5160_Basic_Init+0x2a>
	{
		Current->IRUN = 20;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2214      	movs	r2, #20
 800219c:	601a      	str	r2, [r3, #0]
	}

	IHOLD_IRUN += Current->IHOLD + (Current->IRUN <<8);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	18d3      	adds	r3, r2, r3
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	18d3      	adds	r3, r2, r3
 80021ae:	60fb      	str	r3, [r7, #12]

	TMC5160_SPIWrite(0x00, 0x00000008, 1); // writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 80021b0:	2201      	movs	r2, #1
 80021b2:	2108      	movs	r1, #8
 80021b4:	2000      	movs	r0, #0
 80021b6:	f000 fb85 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x00, 0x00000000, 0); // writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 fb80 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x01, 0x00000006, 1); // write 1 to clear GSTAT (clear GSTAT register)
 80021c4:	2201      	movs	r2, #1
 80021c6:	2106      	movs	r1, #6
 80021c8:	2001      	movs	r0, #1
 80021ca:	f000 fb7b 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x01, 0x00000000, 0); // read GSTAT (should be all 0)
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2001      	movs	r0, #1
 80021d4:	f000 fb76 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x35, 0x00000040, 1); //0x35(RAMP_STAT)
 80021d8:	2201      	movs	r2, #1
 80021da:	2140      	movs	r1, #64	; 0x40
 80021dc:	2035      	movs	r0, #53	; 0x35
 80021de:	f000 fb71 	bl	80028c4 <TMC5160_SPIWrite>
	{
		TMC5160_SPIWrite(0x01, 0x00000001, 1); // write 1 bit to GSTAT to clear all error flags
		// TODO: is clearing the flags enough? or poweqr cycle needed?
	}*/

	TMC5160_SPIWrite(0x03, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 1 = 0x03(SLAVECONF)
 80021e2:	2201      	movs	r2, #1
 80021e4:	2100      	movs	r1, #0
 80021e6:	2003      	movs	r0, #3
 80021e8:	f000 fb6c 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x05, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 2 = 0x05(X_COMPARE)
 80021ec:	2201      	movs	r2, #1
 80021ee:	2100      	movs	r1, #0
 80021f0:	2005      	movs	r0, #5
 80021f2:	f000 fb67 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x06, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 3 = 0x06(OTP_PROG)
 80021f6:	2201      	movs	r2, #1
 80021f8:	2100      	movs	r1, #0
 80021fa:	2006      	movs	r0, #6
 80021fc:	f000 fb62 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x08, 0x0000000F, 1); // writing value 0x0000000F = 15 = 0.0 to address 4 = 0x08(FACTORY_CONF)
 8002200:	2201      	movs	r2, #1
 8002202:	210f      	movs	r1, #15
 8002204:	2008      	movs	r0, #8
 8002206:	f000 fb5d 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x09, 0x00010606, 1); // writing value 0x00010606 = 67078 = 0.0 to address 5 = 0x09(SHORT_CONF)
 800220a:	4b53      	ldr	r3, [pc, #332]	; (8002358 <TMC5160_Basic_Init+0x1e4>)
 800220c:	2201      	movs	r2, #1
 800220e:	0019      	movs	r1, r3
 8002210:	2009      	movs	r0, #9
 8002212:	f000 fb57 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x0A, 0x00080400, 1); // writing value 0x00080400 = 525312 = 0.0 to address 6 = 0x0A(DRV_CONF)
 8002216:	4b51      	ldr	r3, [pc, #324]	; (800235c <TMC5160_Basic_Init+0x1e8>)
 8002218:	2201      	movs	r2, #1
 800221a:	0019      	movs	r1, r3
 800221c:	200a      	movs	r0, #10
 800221e:	f000 fb51 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x0B, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 7 = 0x0B(GLOBAL_SCALER)
 8002222:	2201      	movs	r2, #1
 8002224:	2100      	movs	r1, #0
 8002226:	200b      	movs	r0, #11
 8002228:	f000 fb4c 	bl	80028c4 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x10, IHOLD_IRUN, 1); // writing value 0x00070A03 = 461315 = 0.0 to address 8 = 0x10(IHOLD_IRUN)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	0019      	movs	r1, r3
 8002232:	2010      	movs	r0, #16
 8002234:	f000 fb46 	bl	80028c4 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x11, 0x0000000A, 1); // writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 8002238:	2201      	movs	r2, #1
 800223a:	210a      	movs	r1, #10
 800223c:	2011      	movs	r0, #17
 800223e:	f000 fb41 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x13, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 8002242:	2201      	movs	r2, #1
 8002244:	2100      	movs	r1, #0
 8002246:	2013      	movs	r0, #19
 8002248:	f000 fb3c 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x14, 0x00000000, 1); // writing value 0x00000010 = 16 = 0.0 to address 11 = 0x14(TCOOLTHRS)
 800224c:	2201      	movs	r2, #1
 800224e:	2100      	movs	r1, #0
 8002250:	2014      	movs	r0, #20
 8002252:	f000 fb37 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x15, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 12 = 0x15(THIGH)
 8002256:	2201      	movs	r2, #1
 8002258:	2100      	movs	r1, #0
 800225a:	2015      	movs	r0, #21
 800225c:	f000 fb32 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2C, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 23 = 0x2C(TZEROWAIT)
 8002260:	2201      	movs	r2, #1
 8002262:	2100      	movs	r1, #0
 8002264:	202c      	movs	r0, #44	; 0x2c
 8002266:	f000 fb2d 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x33, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 25 = 0x33(VDCMIN)
 800226a:	2201      	movs	r2, #1
 800226c:	2100      	movs	r1, #0
 800226e:	2033      	movs	r0, #51	; 0x33
 8002270:	f000 fb28 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x34, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 26 = 0x34(SW_MODE)
 8002274:	2201      	movs	r2, #1
 8002276:	2100      	movs	r1, #0
 8002278:	2034      	movs	r0, #52	; 0x34
 800227a:	f000 fb23 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x38, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 27 = 0x38(ENCMODE)
 800227e:	2201      	movs	r2, #1
 8002280:	2100      	movs	r1, #0
 8002282:	2038      	movs	r0, #56	; 0x38
 8002284:	f000 fb1e 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x39, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 28 = 0x39(X_ENC)
 8002288:	2201      	movs	r2, #1
 800228a:	2100      	movs	r1, #0
 800228c:	2039      	movs	r0, #57	; 0x39
 800228e:	f000 fb19 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x3A, 0x00010000, 1); // writing value 0x00010000 = 65536 = 0.0 to address 29 = 0x3A(ENC_CONST)
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	025b      	lsls	r3, r3, #9
 8002296:	2201      	movs	r2, #1
 8002298:	0019      	movs	r1, r3
 800229a:	203a      	movs	r0, #58	; 0x3a
 800229c:	f000 fb12 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x3D, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 30 = 0x3D(ENC_DEVIATION)
 80022a0:	2201      	movs	r2, #1
 80022a2:	2100      	movs	r1, #0
 80022a4:	203d      	movs	r0, #61	; 0x3d
 80022a6:	f000 fb0d 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x60, 0xAAAAB554, 1); // writing value 0xAAAAB554 = 0 = 0.0 to address 31 = 0x60(MSLUT[0])
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <TMC5160_Basic_Init+0x1ec>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	0019      	movs	r1, r3
 80022b0:	2060      	movs	r0, #96	; 0x60
 80022b2:	f000 fb07 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x61, 0x4A9554AA, 1); // writing value 0x4A9554AA = 1251300522 = 0.0 to address 32 = 0x61(MSLUT[1])
 80022b6:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <TMC5160_Basic_Init+0x1f0>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	0019      	movs	r1, r3
 80022bc:	2061      	movs	r0, #97	; 0x61
 80022be:	f000 fb01 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x62, 0x24492929, 1); // writing value 0x24492929 = 608774441 = 0.0 to address 33 = 0x62(MSLUT[2])
 80022c2:	4b29      	ldr	r3, [pc, #164]	; (8002368 <TMC5160_Basic_Init+0x1f4>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	0019      	movs	r1, r3
 80022c8:	2062      	movs	r0, #98	; 0x62
 80022ca:	f000 fafb 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x63, 0x10104222, 1); // writing value 0x10104222 = 269500962 = 0.0 to address 34 = 0x63(MSLUT[3])
 80022ce:	4b27      	ldr	r3, [pc, #156]	; (800236c <TMC5160_Basic_Init+0x1f8>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	0019      	movs	r1, r3
 80022d4:	2063      	movs	r0, #99	; 0x63
 80022d6:	f000 faf5 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x64, 0xFBFFFFFF, 1); // writing value 0xFBFFFFFF = 0 = 0.0 to address 35 = 0x64(MSLUT[4])
 80022da:	4b25      	ldr	r3, [pc, #148]	; (8002370 <TMC5160_Basic_Init+0x1fc>)
 80022dc:	2201      	movs	r2, #1
 80022de:	0019      	movs	r1, r3
 80022e0:	2064      	movs	r0, #100	; 0x64
 80022e2:	f000 faef 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x65, 0xB5BB777D, 1); // writing value 0xB5BB777D = 0 = 0.0 to address 36 = 0x65(MSLUT[5])
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <TMC5160_Basic_Init+0x200>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	0019      	movs	r1, r3
 80022ec:	2065      	movs	r0, #101	; 0x65
 80022ee:	f000 fae9 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x66, 0x49295556, 1); // writing value 0x49295556 = 1227445590 = 0.0 to address 37 = 0x66(MSLUT[6])
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <TMC5160_Basic_Init+0x204>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	0019      	movs	r1, r3
 80022f8:	2066      	movs	r0, #102	; 0x66
 80022fa:	f000 fae3 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x67, 0x00404222, 1); // writing value 0x00404222 = 4211234 = 0.0 to address 38 = 0x67(MSLUT[7])
 80022fe:	4b1f      	ldr	r3, [pc, #124]	; (800237c <TMC5160_Basic_Init+0x208>)
 8002300:	2201      	movs	r2, #1
 8002302:	0019      	movs	r1, r3
 8002304:	2067      	movs	r0, #103	; 0x67
 8002306:	f000 fadd 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x68, 0xFFFF8056, 1); // writing value 0xFFFF8056 = 0 = 0.0 to address 39 = 0x68(MSLUTSEL)
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <TMC5160_Basic_Init+0x20c>)
 800230c:	2201      	movs	r2, #1
 800230e:	0019      	movs	r1, r3
 8002310:	2068      	movs	r0, #104	; 0x68
 8002312:	f000 fad7 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x69, 0x00F70000, 1); // writing value 0x00F70000 = 16187392 = 0.0 to address 40 = 0x69(MSLUTSTART)
 8002316:	23f7      	movs	r3, #247	; 0xf7
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	2201      	movs	r2, #1
 800231c:	0019      	movs	r1, r3
 800231e:	2069      	movs	r0, #105	; 0x69
 8002320:	f000 fad0 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6C, 0x00410153, 1); // writing value 0x00410153 = 4260099 = 0.0 to address 41 = 0x6C(CHOPCONF)
 8002324:	4b17      	ldr	r3, [pc, #92]	; (8002384 <TMC5160_Basic_Init+0x210>)
 8002326:	2201      	movs	r2, #1
 8002328:	0019      	movs	r1, r3
 800232a:	206c      	movs	r0, #108	; 0x6c
 800232c:	f000 faca 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6D, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 42 = 0x6D(COOLCONF)
 8002330:	2201      	movs	r2, #1
 8002332:	2100      	movs	r1, #0
 8002334:	206d      	movs	r0, #109	; 0x6d
 8002336:	f000 fac5 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6E, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 43 = 0x6E(DCCTRL)
 800233a:	2201      	movs	r2, #1
 800233c:	2100      	movs	r1, #0
 800233e:	206e      	movs	r0, #110	; 0x6e
 8002340:	f000 fac0 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x70, 0xC40C001E, 1); // writing value 0xC40C001E = 0 = 0.0 to address 44 = 0x70(PWMCONF)
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <TMC5160_Basic_Init+0x214>)
 8002346:	2201      	movs	r2, #1
 8002348:	0019      	movs	r1, r3
 800234a:	2070      	movs	r0, #112	; 0x70
 800234c:	f000 faba 	bl	80028c4 <TMC5160_SPIWrite>

}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b004      	add	sp, #16
 8002356:	bd80      	pop	{r7, pc}
 8002358:	00010606 	.word	0x00010606
 800235c:	00080400 	.word	0x00080400
 8002360:	aaaab554 	.word	0xaaaab554
 8002364:	4a9554aa 	.word	0x4a9554aa
 8002368:	24492929 	.word	0x24492929
 800236c:	10104222 	.word	0x10104222
 8002370:	fbffffff 	.word	0xfbffffff
 8002374:	b5bb777d 	.word	0xb5bb777d
 8002378:	49295556 	.word	0x49295556
 800237c:	00404222 	.word	0x00404222
 8002380:	ffff8056 	.word	0xffff8056
 8002384:	00410153 	.word	0x00410153
 8002388:	c40c001e 	.word	0xc40c001e

0800238c <TMC5160_Init_Stallguard>:

	//TODO: finilize
}

void TMC5160_Init_Stallguard(int reset)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	if(reset == 0)//basic stall setup
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10f      	bne.n	80023ba <TMC5160_Init_Stallguard+0x2e>
	{
		uint32_t SGT = 1;
 800239a:	2301      	movs	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
		uint32_t COOLCONF = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]

		COOLCONF += (SGT <<16);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	041b      	lsls	r3, r3, #16
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	18d3      	adds	r3, r2, r3
 80023aa:	60bb      	str	r3, [r7, #8]

		//TODO: test COOLCONF register write to match register value

		//TMC5160_SPIWrite(0x6D, COOLCONF, 1); //0x6D(COOLCONF) //Stallguard Threshold
		TMC5160_SPIWrite(0x6D, 0x00010000, 1); //0x6D(COOLCONF) //Stallguard Threshold
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	025b      	lsls	r3, r3, #9
 80023b0:	2201      	movs	r2, #1
 80023b2:	0019      	movs	r1, r3
 80023b4:	206d      	movs	r0, #109	; 0x6d
 80023b6:	f000 fa85 	bl	80028c4 <TMC5160_SPIWrite>
	}

	if(reset == 1)//perform reset of stall, to allow movement again
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d104      	bne.n	80023ca <TMC5160_Init_Stallguard+0x3e>
	{
		TMC5160_SPIWrite(0x35, 0x00000040, 1); //0x35(RAMP_STAT)
 80023c0:	2201      	movs	r2, #1
 80023c2:	2140      	movs	r1, #64	; 0x40
 80023c4:	2035      	movs	r0, #53	; 0x35
 80023c6:	f000 fa7d 	bl	80028c4 <TMC5160_SPIWrite>
	// Apply load and monitor SG_RESULT
	// If SG_RESULT reaches 0 before "stall event" , increase SGT value (+63 highest) , if 0 is not reached lower SGT value (-64 lowest)

	// Sudden motor stops can cause for a stall event.
	// In this case , increase TCOOLTHRS to increase the duration before stallguard is activated
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b004      	add	sp, #16
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <TMC5160_Monitor_Stallguard>:

int TMC5160_Monitor_Stallguard(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
	uint32_t DRV_STATUS;
	int Stall_Flag = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]

	TMC5160_SPIWrite(0x6F, 0x00000000, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2100      	movs	r1, #0
 80023e2:	206f      	movs	r0, #111	; 0x6f
 80023e4:	f000 fa6e 	bl	80028c4 <TMC5160_SPIWrite>
	DRV_STATUS = TMC5160_SPIWrite(0x6F, 0x00000000, 0); //Read (DRV_STATUS)
 80023e8:	2200      	movs	r2, #0
 80023ea:	2100      	movs	r1, #0
 80023ec:	206f      	movs	r0, #111	; 0x6f
 80023ee:	f000 fa69 	bl	80028c4 <TMC5160_SPIWrite>
 80023f2:	0003      	movs	r3, r0
 80023f4:	60fb      	str	r3, [r7, #12]
	//T_STEP[x] = TMC5160_SPIWrite(0x12, 0x00000000, 0); // 0x12(TSTEP)

	Stall_Flag = (DRV_STATUS & (1 << 24)); //bit 24 of DRV_STATUS is Stallguard flag
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	045b      	lsls	r3, r3, #17
 80023fc:	4013      	ands	r3, r2
 80023fe:	607b      	str	r3, [r7, #4]
	Stall_Flag = (Stall_Flag >> 24); // bitshift stall flag is 0 or 1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	161b      	asrs	r3, r3, #24
 8002404:	607b      	str	r3, [r7, #4]

	if(Stall_Flag != 0) //stall detected -> stop motor
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <TMC5160_Monitor_Stallguard+0x3c>
	{
		TMC5160_Stop();
 800240c:	f000 f94c 	bl	80026a8 <TMC5160_Stop>
	}

	for(int y = 32; y > 10; y--) //clear other data
 8002410:	2320      	movs	r3, #32
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	e00b      	b.n	800242e <TMC5160_Monitor_Stallguard+0x5a>
	{
		DRV_STATUS &= ~(1 << y);
 8002416:	2201      	movs	r2, #1
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	409a      	lsls	r2, r3
 800241c:	0013      	movs	r3, r2
 800241e:	43db      	mvns	r3, r3
 8002420:	001a      	movs	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
	for(int y = 32; y > 10; y--) //clear other data
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	3b01      	subs	r3, #1
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b0a      	cmp	r3, #10
 8002432:	dcf0      	bgt.n	8002416 <TMC5160_Monitor_Stallguard+0x42>
	}

	SG_RESULTS[x] = DRV_STATUS; // see SG_RESULTS in explorer for tuning stallguard (SG_RESULT 0 = stall detected)
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <TMC5160_Monitor_Stallguard+0x94>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <TMC5160_Monitor_Stallguard+0x98>)
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	68f9      	ldr	r1, [r7, #12]
 800243e:	50d1      	str	r1, [r2, r3]
	x++;
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <TMC5160_Monitor_Stallguard+0x94>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <TMC5160_Monitor_Stallguard+0x94>)
 8002448:	601a      	str	r2, [r3, #0]

	if(x >= 1000) // stop stallguard demo or it will overflow
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <TMC5160_Monitor_Stallguard+0x94>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	23fa      	movs	r3, #250	; 0xfa
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	429a      	cmp	r2, r3
 8002454:	db02      	blt.n	800245c <TMC5160_Monitor_Stallguard+0x88>
	{
		x = 0;
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <TMC5160_Monitor_Stallguard+0x94>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
		//uncomment for stallguard demo
	    //HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,1); // LOW = ON
	    //TMC5160_Stop();
	}

	return Stall_Flag;
 800245c:	687b      	ldr	r3, [r7, #4]
}
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b004      	add	sp, #16
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	20001030 	.word	0x20001030
 800246c:	20000090 	.word	0x20000090

08002470 <TMC5160_Basic_Rotate>:

void TMC5160_Basic_Rotate(uint8_t Mode, RampConfig *Ramp) // 0 = Velocity Mode + , 1 = Velocity Mode -
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	0002      	movs	r2, r0
 8002478:	6039      	str	r1, [r7, #0]
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	701a      	strb	r2, [r3, #0]
	//Velocity mode , using VMAX and AMAX

	TMC5160_SPIWrite(0x11, 	0x0000000A, 1); 	// writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 800247e:	2201      	movs	r2, #1
 8002480:	210a      	movs	r1, #10
 8002482:	2011      	movs	r0, #17
 8002484:	f000 fa1e 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x13, 	0x000001F4, 1); 	// writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 8002488:	23fa      	movs	r3, #250	; 0xfa
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	2201      	movs	r2, #1
 800248e:	0019      	movs	r1, r3
 8002490:	2013      	movs	r0, #19
 8002492:	f000 fa17 	bl	80028c4 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x23, Ramp->VSTART, 1); 	// = 1000 = 0.0 to address 15 = 0x23(VSTART)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2201      	movs	r2, #1
 800249c:	0019      	movs	r1, r3
 800249e:	2023      	movs	r0, #35	; 0x23
 80024a0:	f000 fa10 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x26, Ramp->AMAX, 1); 		// = 12800 = 0.0 to address 18 = 0x26(AMAX)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	0019      	movs	r1, r3
 80024ac:	2026      	movs	r0, #38	; 0x26
 80024ae:	f000 fa09 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x27, Ramp->VMAX, 1); 		// = 51200 = 0.0 to address 19 = 0x27(VMAX)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2201      	movs	r2, #1
 80024b8:	0019      	movs	r1, r3
 80024ba:	2027      	movs	r0, #39	; 0x27
 80024bc:	f000 fa02 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2B, Ramp->VSTOP, 1); 	// = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2201      	movs	r2, #1
 80024c6:	0019      	movs	r1, r3
 80024c8:	202b      	movs	r0, #43	; 0x2b
 80024ca:	f000 f9fb 	bl	80028c4 <TMC5160_SPIWrite>

	if(Mode == 0)
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d105      	bne.n	80024e2 <TMC5160_Basic_Rotate+0x72>
	{
		TMC5160_SPIWrite(0x20, 	0x00000001, 1); 		// writing value 0x00000001 = 0 = 0.0 to address 13 = 0x20(RAMPMODE)VM +
 80024d6:	2201      	movs	r2, #1
 80024d8:	2101      	movs	r1, #1
 80024da:	2020      	movs	r0, #32
 80024dc:	f000 f9f2 	bl	80028c4 <TMC5160_SPIWrite>

	else if(Mode == 1)
	{
		TMC5160_SPIWrite(0x20, 	0x00000002, 1); 		// writing value 0x00000002 = 0 = 0.0 to address 13 = 0x20(RAMPMODE) VM -
	}
}
 80024e0:	e008      	b.n	80024f4 <TMC5160_Basic_Rotate+0x84>
	else if(Mode == 1)
 80024e2:	1dfb      	adds	r3, r7, #7
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d104      	bne.n	80024f4 <TMC5160_Basic_Rotate+0x84>
		TMC5160_SPIWrite(0x20, 	0x00000002, 1); 		// writing value 0x00000002 = 0 = 0.0 to address 13 = 0x20(RAMPMODE) VM -
 80024ea:	2201      	movs	r2, #1
 80024ec:	2102      	movs	r1, #2
 80024ee:	2020      	movs	r0, #32
 80024f0:	f000 f9e8 	bl	80028c4 <TMC5160_SPIWrite>
}
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b002      	add	sp, #8
 80024fa:	bd80      	pop	{r7, pc}

080024fc <TMC5160_Rotate_To>:


void TMC5160_Rotate_To(uint32_t Position, RampConfig *Ramp)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
	uint32_t Target_Angle = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
	uint32_t AMS_Angle = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
	uint32_t ENC_Angle = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
	uint32_t TMC_Angle = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]

	TMC5160_SPIWrite(0x11, 	0x0000000A, 1); 	// writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 8002516:	2201      	movs	r2, #1
 8002518:	210a      	movs	r1, #10
 800251a:	2011      	movs	r0, #17
 800251c:	f000 f9d2 	bl	80028c4 <TMC5160_SPIWrite>
	//TMC5160_SPIWrite(0x00, 	0x00000008, 1); 	// writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
	TMC5160_SPIWrite(0x13, 	0x000001F4, 1); 	// writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 8002520:	23fa      	movs	r3, #250	; 0xfa
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2201      	movs	r2, #1
 8002526:	0019      	movs	r1, r3
 8002528:	2013      	movs	r0, #19
 800252a:	f000 f9cb 	bl	80028c4 <TMC5160_SPIWrite>

	// setup for profile
	TMC5160_SPIWrite(0x23, Ramp->VSTART, 1); 	// = 1000 = 0.0 to address 15 = 0x23(VSTART)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2201      	movs	r2, #1
 8002534:	0019      	movs	r1, r3
 8002536:	2023      	movs	r0, #35	; 0x23
 8002538:	f000 f9c4 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x24, Ramp->A1, 1); 		// = 5600 = 0.0 to address 16 = 0x24(A1)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	0019      	movs	r1, r3
 8002544:	2024      	movs	r0, #36	; 0x24
 8002546:	f000 f9bd 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x25, Ramp->V1, 1); 		// = 12800 = 0.0 to address 17 = 0x25(V1)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2201      	movs	r2, #1
 8002550:	0019      	movs	r1, r3
 8002552:	2025      	movs	r0, #37	; 0x25
 8002554:	f000 f9b6 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x26, Ramp->AMAX, 1); 		// = 12800 = 0.0 to address 18 = 0x26(AMAX)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	0019      	movs	r1, r3
 8002560:	2026      	movs	r0, #38	; 0x26
 8002562:	f000 f9af 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x27, Ramp->VMAX, 1); 		// = 51200 = 0.0 to address 19 = 0x27(VMAX)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2201      	movs	r2, #1
 800256c:	0019      	movs	r1, r3
 800256e:	2027      	movs	r0, #39	; 0x27
 8002570:	f000 f9a8 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x28, Ramp->DMAX, 1); 		// = 700 = 0.0 to address 20 = 0x28(DMAX)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	2201      	movs	r2, #1
 800257a:	0019      	movs	r1, r3
 800257c:	2028      	movs	r0, #40	; 0x28
 800257e:	f000 f9a1 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2A, Ramp->D1, 1); 		// = 1400 = 0.0 to address 21 = 0x2A(D1)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2201      	movs	r2, #1
 8002588:	0019      	movs	r1, r3
 800258a:	202a      	movs	r0, #42	; 0x2a
 800258c:	f000 f99a 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2B, Ramp->VSTOP, 1); 	// = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	2201      	movs	r2, #1
 8002596:	0019      	movs	r1, r3
 8002598:	202b      	movs	r0, #43	; 0x2b
 800259a:	f000 f993 	bl	80028c4 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x20, 	0x00000000, 1); 	// writing value 0x00000000 = 0 = 0.0 to address 13 = 0x20(RAMPMODE) MTP
 800259e:	2201      	movs	r2, #1
 80025a0:	2100      	movs	r1, #0
 80025a2:	2020      	movs	r0, #32
 80025a4:	f000 f98e 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2D, Position, 1); 		// writing value to address 24 = 0x2D(XTARGET)  1 lap
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	0019      	movs	r1, r3
 80025ae:	202d      	movs	r0, #45	; 0x2d
 80025b0:	f000 f988 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x21,	0x00000000, 0);		// READ position register
 80025b4:	2200      	movs	r2, #0
 80025b6:	2100      	movs	r1, #0
 80025b8:	2021      	movs	r0, #33	; 0x21
 80025ba:	f000 f983 	bl	80028c4 <TMC5160_SPIWrite>

	/*Convert to Angle so we can compare to Hall Sensor*/

	if((int)Position < 0)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	da02      	bge.n	80025ca <TMC5160_Rotate_To+0xce>
	{
		Position = Position * (-1); 			// make positive for easier math
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	425b      	negs	r3, r3
 80025c8:	607b      	str	r3, [r7, #4]
	}

	if(Position == 0) 							// to fix the first reading when target position = 0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <TMC5160_Rotate_To+0xe0>
	{
		AMS_Angle = 1;
 80025d0:	2301      	movs	r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
		ENC_Angle = 1;
 80025d4:	2301      	movs	r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
		TMC_Angle = 1;
 80025d8:	2301      	movs	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
	}

    Target_Angle = ((Position / 256) * 1.8);	//convert target position to angle
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7ff fd83 	bl	80020ec <__aeabi_ui2d>
 80025e6:	4a15      	ldr	r2, [pc, #84]	; (800263c <TMC5160_Rotate_To+0x140>)
 80025e8:	4b15      	ldr	r3, [pc, #84]	; (8002640 <TMC5160_Rotate_To+0x144>)
 80025ea:	f7fe feb7 	bl	800135c <__aeabi_dmul>
 80025ee:	0002      	movs	r2, r0
 80025f0:	000b      	movs	r3, r1
 80025f2:	0010      	movs	r0, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	f7fd ff39 	bl	800046c <__aeabi_d2uiz>
 80025fa:	0003      	movs	r3, r0
 80025fc:	613b      	str	r3, [r7, #16]

	// enter loop to check if position is reached
	while(TMC_Angle != Target_Angle) //&& AMS_Angle != Target_Angle && ENC_Angle != Target_Angle
 80025fe:	e013      	b.n	8002628 <TMC5160_Rotate_To+0x12c>
	{
		TMC_Angle = TMC_Get_Position();
 8002600:	f000 f824 	bl	800264c <TMC_Get_Position>
 8002604:	0003      	movs	r3, r0
 8002606:	617b      	str	r3, [r7, #20]

		if(AMS_ENB == 1)// Hall sensor is enabled
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <TMC5160_Rotate_To+0x148>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d103      	bne.n	8002618 <TMC5160_Rotate_To+0x11c>
		{
			AMS_Angle = AMS5055_Get_Position();
 8002610:	f000 fa48 	bl	8002aa4 <AMS5055_Get_Position>
 8002614:	0003      	movs	r3, r0
 8002616:	60fb      	str	r3, [r7, #12]
		}

		if(ENC_ENB == 1)// Encoder is enabled
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <TMC5160_Rotate_To+0x14c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d103      	bne.n	8002628 <TMC5160_Rotate_To+0x12c>
		{
			ENC_Angle = ENC_Get_Position();
 8002620:	f000 fb76 	bl	8002d10 <ENC_Get_Position>
 8002624:	0003      	movs	r3, r0
 8002626:	60bb      	str	r3, [r7, #8]
	while(TMC_Angle != Target_Angle) //&& AMS_Angle != Target_Angle && ENC_Angle != Target_Angle
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d1e7      	bne.n	8002600 <TMC5160_Rotate_To+0x104>
		}
	}
 }
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	b006      	add	sp, #24
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	cccccccd 	.word	0xcccccccd
 8002640:	3ffccccc 	.word	0x3ffccccc
 8002644:	200031d4 	.word	0x200031d4
 8002648:	200031d8 	.word	0x200031d8

0800264c <TMC_Get_Position>:

uint16_t TMC_Get_Position()
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
	uint32_t AngleT = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]

	AngleT = TMC5160_SPIWrite(0x21, 0x00000000, 0); //read step counter from TMC5160
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	2021      	movs	r0, #33	; 0x21
 800265c:	f000 f932 	bl	80028c4 <TMC5160_SPIWrite>
 8002660:	0003      	movs	r3, r0
 8002662:	607b      	str	r3, [r7, #4]


	if((int)AngleT < 0)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	da02      	bge.n	8002670 <TMC_Get_Position+0x24>
	{
		AngleT = AngleT * (-1); // make positive for easier math
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	425b      	negs	r3, r3
 800266e:	607b      	str	r3, [r7, #4]
	}

	AngleT = ((AngleT / 256)* 1.8);//convert target position to angle
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff fd39 	bl	80020ec <__aeabi_ui2d>
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <TMC_Get_Position+0x54>)
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <TMC_Get_Position+0x58>)
 800267e:	f7fe fe6d 	bl	800135c <__aeabi_dmul>
 8002682:	0002      	movs	r2, r0
 8002684:	000b      	movs	r3, r1
 8002686:	0010      	movs	r0, r2
 8002688:	0019      	movs	r1, r3
 800268a:	f7fd feef 	bl	800046c <__aeabi_d2uiz>
 800268e:	0003      	movs	r3, r0
 8002690:	607b      	str	r3, [r7, #4]

	return AngleT;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	b29b      	uxth	r3, r3
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b002      	add	sp, #8
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	cccccccd 	.word	0xcccccccd
 80026a4:	3ffccccc 	.word	0x3ffccccc

080026a8 <TMC5160_Stop>:

void TMC5160_Stop(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	TMC5160_SPIWrite(0x27,0x00000000, 1); //set VMAX to 0
 80026ac:	2201      	movs	r2, #1
 80026ae:	2100      	movs	r1, #0
 80026b0:	2027      	movs	r0, #39	; 0x27
 80026b2:	f000 f907 	bl	80028c4 <TMC5160_SPIWrite>
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <Drive_Enable>:

void Drive_Enable(int state)
{
 80026bc:	b5b0      	push	{r4, r5, r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	uint32_t DRV_STATUS;
	uint32_t IOIN;
	uint16_t SG_RESULT = 0;
 80026c4:	2312      	movs	r3, #18
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	801a      	strh	r2, [r3, #0]
	uint16_t CS_ACTUAL = 0;
 80026cc:	2310      	movs	r3, #16
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	2200      	movs	r2, #0
 80026d2:	801a      	strh	r2, [r3, #0]
	int DRV_ENN = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]

	if(state == 1) // Enable driver
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d153      	bne.n	8002786 <Drive_Enable+0xca>
	{
		HAL_GPIO_WritePin(GPIOA, DRV_ENN_Pin, 0); // LOW = ON
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	0059      	lsls	r1, r3, #1
 80026e2:	2390      	movs	r3, #144	; 0x90
 80026e4:	05db      	lsls	r3, r3, #23
 80026e6:	2200      	movs	r2, #0
 80026e8:	0018      	movs	r0, r3
 80026ea:	f002 fc2e 	bl	8004f4a <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80026ee:	200a      	movs	r0, #10
 80026f0:	f001 f9a0 	bl	8003a34 <HAL_Delay>

		TMC5160_SPIWrite(0x04, 0x00000000, 0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2100      	movs	r1, #0
 80026f8:	2004      	movs	r0, #4
 80026fa:	f000 f8e3 	bl	80028c4 <TMC5160_SPIWrite>
		IOIN = TMC5160_SPIWrite(0x04, 0x00000000, 0); //Read (IOIN)
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	2004      	movs	r0, #4
 8002704:	f000 f8de 	bl	80028c4 <TMC5160_SPIWrite>
 8002708:	0003      	movs	r3, r0
 800270a:	60fb      	str	r3, [r7, #12]

		if(IOIN & (1 << 4))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2210      	movs	r2, #16
 8002710:	4013      	ands	r3, r2
 8002712:	d002      	beq.n	800271a <Drive_Enable+0x5e>
		{
			DRV_ENN = 1;
 8002714:	2301      	movs	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e001      	b.n	800271e <Drive_Enable+0x62>
		}

		else
		{
			DRV_ENN = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
		}

		if(DRV_ENN == 0) //if DRV_ENN == 0 power stage is on
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d12b      	bne.n	800277c <Drive_Enable+0xc0>
		{
			TMC5160_SPIWrite(0x6F, 0x00000000, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	2100      	movs	r1, #0
 8002728:	206f      	movs	r0, #111	; 0x6f
 800272a:	f000 f8cb 	bl	80028c4 <TMC5160_SPIWrite>
			DRV_STATUS = TMC5160_SPIWrite(0x6F, 0x00000000, 0); //Read (DRV_STATUS)
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	206f      	movs	r0, #111	; 0x6f
 8002734:	f000 f8c6 	bl	80028c4 <TMC5160_SPIWrite>
 8002738:	0003      	movs	r3, r0
 800273a:	60bb      	str	r3, [r7, #8]

			SG_RESULT = TMC5160_Check_SG_Result(DRV_STATUS);
 800273c:	2312      	movs	r3, #18
 800273e:	18fc      	adds	r4, r7, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f831 	bl	80027aa <TMC5160_Check_SG_Result>
 8002748:	0003      	movs	r3, r0
 800274a:	8023      	strh	r3, [r4, #0]
			CS_ACTUAL = TMC5160_Check_CS_Actual(DRV_STATUS);
 800274c:	2510      	movs	r5, #16
 800274e:	197c      	adds	r4, r7, r5
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	0018      	movs	r0, r3
 8002754:	f000 f86f 	bl	8002836 <TMC5160_Check_CS_Actual>
 8002758:	0003      	movs	r3, r0
 800275a:	8023      	strh	r3, [r4, #0]

			if(CS_ACTUAL == 0 || CS_ACTUAL >= 5)
 800275c:	197b      	adds	r3, r7, r5
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <Drive_Enable+0xb0>
 8002764:	197b      	adds	r3, r7, r5
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d90c      	bls.n	8002786 <Drive_Enable+0xca>
			{
				Drive_Enable(0); // power down and reset
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff ffa5 	bl	80026bc <Drive_Enable>
				TMC5160_Stop();
 8002772:	f7ff ff99 	bl	80026a8 <TMC5160_Stop>
				  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,0);
				  HAL_Delay(100);
				  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,1);
				  HAL_Delay(100);
				 */
				  HAL_NVIC_SystemReset();
 8002776:	f002 fa42 	bl	8004bfe <HAL_NVIC_SystemReset>
 800277a:	e004      	b.n	8002786 <Drive_Enable+0xca>
			}
		}

		else
		{
			Drive_Enable(0); // power down and reset
 800277c:	2000      	movs	r0, #0
 800277e:	f7ff ff9d 	bl	80026bc <Drive_Enable>
			HAL_NVIC_SystemReset();
 8002782:	f002 fa3c 	bl	8004bfe <HAL_NVIC_SystemReset>
		}
	}

	if(state == 0) // disable drive
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <Drive_Enable+0xe6>
	{
		HAL_GPIO_WritePin(GPIOA, DRV_ENN_Pin, 1); // HIGH = OFF
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	0059      	lsls	r1, r3, #1
 8002790:	2390      	movs	r3, #144	; 0x90
 8002792:	05db      	lsls	r3, r3, #23
 8002794:	2201      	movs	r2, #1
 8002796:	0018      	movs	r0, r3
 8002798:	f002 fbd7 	bl	8004f4a <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800279c:	200a      	movs	r0, #10
 800279e:	f001 f949 	bl	8003a34 <HAL_Delay>
	}
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b006      	add	sp, #24
 80027a8:	bdb0      	pop	{r4, r5, r7, pc}

080027aa <TMC5160_Check_SG_Result>:

uint16_t TMC5160_Check_SG_Result(uint32_t DRV_STATUS_Register)
{
 80027aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ac:	b087      	sub	sp, #28
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
	uint16_t SG_RESULT = 0;
 80027b2:	2316      	movs	r3, #22
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2200      	movs	r2, #0
 80027b8:	801a      	strh	r2, [r3, #0]
	int x,y = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]

	//check for SG_Result
	for(x = 0; x <10; x++)
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	e02e      	b.n	8002822 <TMC5160_Check_SG_Result+0x78>
	{
		if(DRV_STATUS_Register & (1 << x))
 80027c4:	2201      	movs	r2, #1
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	409a      	lsls	r2, r3
 80027ca:	0013      	movs	r3, r2
 80027cc:	001a      	movs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4013      	ands	r3, r2
 80027d2:	d020      	beq.n	8002816 <TMC5160_Check_SG_Result+0x6c>
		{
			SG_RESULT += (pow(2,y));
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff fc59 	bl	800208c <__aeabi_i2d>
 80027da:	0002      	movs	r2, r0
 80027dc:	000b      	movs	r3, r1
 80027de:	2000      	movs	r0, #0
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	05c9      	lsls	r1, r1, #23
 80027e4:	f003 fcfe 	bl	80061e4 <pow>
 80027e8:	0004      	movs	r4, r0
 80027ea:	000d      	movs	r5, r1
 80027ec:	2616      	movs	r6, #22
 80027ee:	19bb      	adds	r3, r7, r6
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff fc4a 	bl	800208c <__aeabi_i2d>
 80027f8:	0002      	movs	r2, r0
 80027fa:	000b      	movs	r3, r1
 80027fc:	0020      	movs	r0, r4
 80027fe:	0029      	movs	r1, r5
 8002800:	f7fd fe52 	bl	80004a8 <__aeabi_dadd>
 8002804:	0002      	movs	r2, r0
 8002806:	000b      	movs	r3, r1
 8002808:	19bc      	adds	r4, r7, r6
 800280a:	0010      	movs	r0, r2
 800280c:	0019      	movs	r1, r3
 800280e:	f7fd fe2d 	bl	800046c <__aeabi_d2uiz>
 8002812:	0003      	movs	r3, r0
 8002814:	8023      	strh	r3, [r4, #0]
		}

		y++;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3301      	adds	r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
	for(x = 0; x <10; x++)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	3301      	adds	r3, #1
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b09      	cmp	r3, #9
 8002826:	ddcd      	ble.n	80027c4 <TMC5160_Check_SG_Result+0x1a>
	}

	return SG_RESULT;
 8002828:	2316      	movs	r3, #22
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	881b      	ldrh	r3, [r3, #0]
}
 800282e:	0018      	movs	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	b007      	add	sp, #28
 8002834:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002836 <TMC5160_Check_CS_Actual>:

uint16_t TMC5160_Check_CS_Actual(uint32_t DRV_STATUS_Register)
{
 8002836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002838:	b087      	sub	sp, #28
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
	uint16_t CS_ACTUAL = 0;
 800283e:	2316      	movs	r3, #22
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	2200      	movs	r2, #0
 8002844:	801a      	strh	r2, [r3, #0]
	int x,y = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]

	//check for CS_actual
	for(x = 16; x <21; x++)
 800284a:	2310      	movs	r3, #16
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	e02e      	b.n	80028ae <TMC5160_Check_CS_Actual+0x78>
	{
		if(DRV_STATUS_Register & (1 << x))
 8002850:	2201      	movs	r2, #1
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	409a      	lsls	r2, r3
 8002856:	0013      	movs	r3, r2
 8002858:	001a      	movs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4013      	ands	r3, r2
 800285e:	d020      	beq.n	80028a2 <TMC5160_Check_CS_Actual+0x6c>
		{
			CS_ACTUAL += (pow(2,y));
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff fc13 	bl	800208c <__aeabi_i2d>
 8002866:	0002      	movs	r2, r0
 8002868:	000b      	movs	r3, r1
 800286a:	2000      	movs	r0, #0
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	05c9      	lsls	r1, r1, #23
 8002870:	f003 fcb8 	bl	80061e4 <pow>
 8002874:	0004      	movs	r4, r0
 8002876:	000d      	movs	r5, r1
 8002878:	2616      	movs	r6, #22
 800287a:	19bb      	adds	r3, r7, r6
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	0018      	movs	r0, r3
 8002880:	f7ff fc04 	bl	800208c <__aeabi_i2d>
 8002884:	0002      	movs	r2, r0
 8002886:	000b      	movs	r3, r1
 8002888:	0020      	movs	r0, r4
 800288a:	0029      	movs	r1, r5
 800288c:	f7fd fe0c 	bl	80004a8 <__aeabi_dadd>
 8002890:	0002      	movs	r2, r0
 8002892:	000b      	movs	r3, r1
 8002894:	19bc      	adds	r4, r7, r6
 8002896:	0010      	movs	r0, r2
 8002898:	0019      	movs	r1, r3
 800289a:	f7fd fde7 	bl	800046c <__aeabi_d2uiz>
 800289e:	0003      	movs	r3, r0
 80028a0:	8023      	strh	r3, [r4, #0]
		}

		y++;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3301      	adds	r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
	for(x = 16; x <21; x++)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	3301      	adds	r3, #1
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b14      	cmp	r3, #20
 80028b2:	ddcd      	ble.n	8002850 <TMC5160_Check_CS_Actual+0x1a>
	}

	return CS_ACTUAL;
 80028b4:	2316      	movs	r3, #22
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	881b      	ldrh	r3, [r3, #0]
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b007      	add	sp, #28
 80028c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028c4 <TMC5160_SPIWrite>:


uint32_t TMC5160_SPIWrite(uint8_t Address, uint32_t Value, int Action)  // 1 = write 0 = read
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b08d      	sub	sp, #52	; 0x34
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	240f      	movs	r4, #15
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	1c02      	adds	r2, r0, #0
 80028d4:	701a      	strb	r2, [r3, #0]

	uint8_t SPI2TxData[5];  //TX data array SPI2
	uint8_t SPI2RxData[5];  //RX data array SPI2
	uint32_t SPI2Rx = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,0); // set TMC CS low
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	015b      	lsls	r3, r3, #5
 80028de:	4843      	ldr	r0, [pc, #268]	; (80029ec <TMC5160_SPIWrite+0x128>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	0019      	movs	r1, r3
 80028e4:	f002 fb31 	bl	8004f4a <HAL_GPIO_WritePin>

	  if (Action == 1) //Write
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d107      	bne.n	80028fe <TMC5160_SPIWrite+0x3a>
	  {
		SPI2TxData[0] = Address + 0x80;
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	3b80      	subs	r3, #128	; 0x80
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	231c      	movs	r3, #28
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e005      	b.n	800290a <TMC5160_SPIWrite+0x46>
	  }

	  else //Read
	  {
		SPI2TxData[0] = Address;
 80028fe:	231c      	movs	r3, #28
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	220f      	movs	r2, #15
 8002904:	18ba      	adds	r2, r7, r2
 8002906:	7812      	ldrb	r2, [r2, #0]
 8002908:	701a      	strb	r2, [r3, #0]
	  }

	  SPI2TxData[1] = Value >> 24;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	0e1b      	lsrs	r3, r3, #24
 800290e:	b2da      	uxtb	r2, r3
 8002910:	211c      	movs	r1, #28
 8002912:	187b      	adds	r3, r7, r1
 8002914:	705a      	strb	r2, [r3, #1]
	  SPI2TxData[2] = Value >> 16;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	b2da      	uxtb	r2, r3
 800291c:	187b      	adds	r3, r7, r1
 800291e:	709a      	strb	r2, [r3, #2]
	  SPI2TxData[3] = Value >> 8;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	b2da      	uxtb	r2, r3
 8002926:	187b      	adds	r3, r7, r1
 8002928:	70da      	strb	r2, [r3, #3]
	  SPI2TxData[4] = Value;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	187b      	adds	r3, r7, r1
 8002930:	711a      	strb	r2, [r3, #4]

	  HAL_SPI_TransmitReceive(&hspi2, SPI2TxData, SPI2RxData, 0x05, 100);
 8002932:	2414      	movs	r4, #20
 8002934:	193a      	adds	r2, r7, r4
 8002936:	1879      	adds	r1, r7, r1
 8002938:	482d      	ldr	r0, [pc, #180]	; (80029f0 <TMC5160_SPIWrite+0x12c>)
 800293a:	2364      	movs	r3, #100	; 0x64
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2305      	movs	r3, #5
 8002940:	f003 f8d6 	bl	8005af0 <HAL_SPI_TransmitReceive>

	  SPI2Rx += (SPI2RxData[1] << 24);
 8002944:	193b      	adds	r3, r7, r4
 8002946:	785b      	ldrb	r3, [r3, #1]
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	001a      	movs	r2, r3
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	189b      	adds	r3, r3, r2
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[2] << 16);
 8002952:	193b      	adds	r3, r7, r4
 8002954:	789b      	ldrb	r3, [r3, #2]
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	001a      	movs	r2, r3
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	189b      	adds	r3, r3, r2
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[3] << 8);
 8002960:	193b      	adds	r3, r7, r4
 8002962:	78db      	ldrb	r3, [r3, #3]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	001a      	movs	r2, r3
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	189b      	adds	r3, r3, r2
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[4] << 0);
 800296e:	193b      	adds	r3, r7, r4
 8002970:	791b      	ldrb	r3, [r3, #4]
 8002972:	001a      	movs	r2, r3
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	189b      	adds	r3, r3, r2
 8002978:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,1); // set TMC CS high
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	015b      	lsls	r3, r3, #5
 800297e:	481b      	ldr	r0, [pc, #108]	; (80029ec <TMC5160_SPIWrite+0x128>)
 8002980:	2201      	movs	r2, #1
 8002982:	0019      	movs	r1, r3
 8002984:	f002 fae1 	bl	8004f4a <HAL_GPIO_WritePin>

	  if(Driver_error == 0)
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <TMC5160_SPIWrite+0x130>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d128      	bne.n	80029e2 <TMC5160_SPIWrite+0x11e>
	  {
		// check SPI error frame for issues:
		if (SPI2RxData[0] & (1 << 3)) // standstill
 8002990:	193b      	adds	r3, r7, r4
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	001a      	movs	r2, r3
 8002996:	2308      	movs	r3, #8
 8002998:	4013      	ands	r3, r2
 800299a:	d002      	beq.n	80029a2 <TMC5160_SPIWrite+0xde>
		{
			Standstill = 1; // no action needed
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <TMC5160_SPIWrite+0x134>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
		}

		if (SPI2RxData[0] & (1 << 2)) // SG2 trigger
 80029a2:	2314      	movs	r3, #20
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	001a      	movs	r2, r3
 80029aa:	2304      	movs	r3, #4
 80029ac:	4013      	ands	r3, r2
 80029ae:	d002      	beq.n	80029b6 <TMC5160_SPIWrite+0xf2>
		{
			SG2_trigger = 1; // no action needed
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <TMC5160_SPIWrite+0x138>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
		}

		if (SPI2RxData[0] & (1 << 1)) //Driver error
 80029b6:	2314      	movs	r3, #20
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	001a      	movs	r2, r3
 80029be:	2302      	movs	r3, #2
 80029c0:	4013      	ands	r3, r2
 80029c2:	d004      	beq.n	80029ce <TMC5160_SPIWrite+0x10a>
		{
			Driver_error = 1; // possible action needed
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <TMC5160_SPIWrite+0x130>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
			TMC5160_Fault_monitor(); //check the critical error
 80029ca:	f000 f81b 	bl	8002a04 <TMC5160_Fault_monitor>
		}

		if (SPI2RxData[0] & (1 << 0)) //Reset Flag
 80029ce:	2314      	movs	r3, #20
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	001a      	movs	r2, r3
 80029d6:	2301      	movs	r3, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	d002      	beq.n	80029e2 <TMC5160_SPIWrite+0x11e>
		{
			Reset_error = 1; // no action needed
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <TMC5160_SPIWrite+0x13c>)
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
		}
	  }

	  return SPI2Rx;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b00b      	add	sp, #44	; 0x2c
 80029ea:	bd90      	pop	{r4, r7, pc}
 80029ec:	48000400 	.word	0x48000400
 80029f0:	20001110 	.word	0x20001110
 80029f4:	2000103c 	.word	0x2000103c
 80029f8:	20001034 	.word	0x20001034
 80029fc:	20001038 	.word	0x20001038
 8002a00:	20001040 	.word	0x20001040

08002a04 <TMC5160_Fault_monitor>:

void TMC5160_Fault_monitor(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
	uint32_t DRV_STATUS;
	int Critical_error = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]

	TMC5160_SPIWrite(0x6F, 0x00000000, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	206f      	movs	r0, #111	; 0x6f
 8002a14:	f7ff ff56 	bl	80028c4 <TMC5160_SPIWrite>
	DRV_STATUS = TMC5160_SPIWrite(0x6F, 0x00000000, 0); //Read (DRV_STATUS)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	206f      	movs	r0, #111	; 0x6f
 8002a1e:	f7ff ff51 	bl	80028c4 <TMC5160_SPIWrite>
 8002a22:	0003      	movs	r3, r0
 8002a24:	603b      	str	r3, [r7, #0]

	TMC5160_SPIWrite(0x01, 0x00000006, 1); // write 1 to clear GSTAT (clear GSTAT register)
 8002a26:	2201      	movs	r2, #1
 8002a28:	2106      	movs	r1, #6
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f7ff ff4a 	bl	80028c4 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x01, 0x00000000, 0); // read GSTAT (should be all 0)
 8002a30:	2200      	movs	r2, #0
 8002a32:	2100      	movs	r1, #0
 8002a34:	2001      	movs	r0, #1
 8002a36:	f7ff ff45 	bl	80028c4 <TMC5160_SPIWrite>
	// check if critical error
	//bits 31 t/m 25  , 13 en 12

	//DRV_STATUS & (1 << 31) || DRV_STATUS & (1 << 30) || DRV_STATUS & (1 << 29) ||

	if(DRV_STATUS & (1 << 28) || DRV_STATUS & (1 << 27) || DRV_STATUS & (1 << 26) || DRV_STATUS & (1 << 25) || DRV_STATUS & (1 << 13) || DRV_STATUS & (1 << 12))
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	055b      	lsls	r3, r3, #21
 8002a40:	4013      	ands	r3, r2
 8002a42:	d118      	bne.n	8002a76 <TMC5160_Fault_monitor+0x72>
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	051b      	lsls	r3, r3, #20
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d113      	bne.n	8002a76 <TMC5160_Fault_monitor+0x72>
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	04db      	lsls	r3, r3, #19
 8002a54:	4013      	ands	r3, r2
 8002a56:	d10e      	bne.n	8002a76 <TMC5160_Fault_monitor+0x72>
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	049b      	lsls	r3, r3, #18
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d109      	bne.n	8002a76 <TMC5160_Fault_monitor+0x72>
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	019b      	lsls	r3, r3, #6
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d104      	bne.n	8002a76 <TMC5160_Fault_monitor+0x72>
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	015b      	lsls	r3, r3, #5
 8002a72:	4013      	ands	r3, r2
 8002a74:	d001      	beq.n	8002a7a <TMC5160_Fault_monitor+0x76>
	{
		Critical_error = 1;
 8002a76:	2301      	movs	r3, #1
 8002a78:	607b      	str	r3, [r7, #4]
	}

	if (Critical_error == 1) {
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d107      	bne.n	8002a90 <TMC5160_Fault_monitor+0x8c>
		HAL_Delay(300);
		HAL_GPIO_WritePin(GPIOB, EXT_OUT_2_Pin, 1);
		HAL_Delay(300);
		*/

		TMC5160_Stop();
 8002a80:	f7ff fe12 	bl	80026a8 <TMC5160_Stop>
		Drive_Enable(0);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7ff fe19 	bl	80026bc <Drive_Enable>

		HAL_NVIC_SystemReset(); // TODO: risky should not be in final code
 8002a8a:	f002 f8b8 	bl	8004bfe <HAL_NVIC_SystemReset>

	else
	{
		Driver_error = 0;
	}
}
 8002a8e:	e002      	b.n	8002a96 <TMC5160_Fault_monitor+0x92>
		Driver_error = 0;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <TMC5160_Fault_monitor+0x9c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b002      	add	sp, #8
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	2000103c 	.word	0x2000103c

08002aa4 <AMS5055_Get_Position>:
{
	AMSoffset = AMS5055_Get_Position();  // Angle read when standstill is offset
}

uint16_t AMS5055_Get_Position(void)
{
 8002aa4:	b5b0      	push	{r4, r5, r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
	uint16_t Angle = 0;
 8002aaa:	230e      	movs	r3, #14
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2200      	movs	r2, #0
 8002ab0:	801a      	strh	r2, [r3, #0]
	int AlarmLo = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
	int AlarmHi = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]

	AMS5055_SPIWriteInt(ANGULAR_DATA,1);
 8002aba:	4b3c      	ldr	r3, [pc, #240]	; (8002bac <AMS5055_Get_Position+0x108>)
 8002abc:	2101      	movs	r1, #1
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 f8b8 	bl	8002c34 <AMS5055_SPIWriteInt>

	while(AMS_Ready != 1) //wacht op INT
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	; (8002bb0 <AMS5055_Get_Position+0x10c>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d1fb      	bne.n	8002ac6 <AMS5055_Get_Position+0x22>
	{
	}

	Angle = AMS5055_SPIWriteInt(NOP,1);
 8002ace:	250e      	movs	r5, #14
 8002ad0:	197c      	adds	r4, r7, r5
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f000 f8ad 	bl	8002c34 <AMS5055_SPIWriteInt>
 8002ada:	0003      	movs	r3, r0
 8002adc:	8023      	strh	r3, [r4, #0]

	AlarmHi = (Angle >> 12) & 0x01; // AlamHi = b14
 8002ade:	0029      	movs	r1, r5
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	0b1b      	lsrs	r3, r3, #12
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	001a      	movs	r2, r3
 8002aea:	2301      	movs	r3, #1
 8002aec:	4013      	ands	r3, r2
 8002aee:	607b      	str	r3, [r7, #4]
	AlarmLo = (Angle >> 13) & 0x01; // AlarmLo = b15
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	0b5b      	lsrs	r3, r3, #13
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	001a      	movs	r2, r3
 8002afa:	2301      	movs	r3, #1
 8002afc:	4013      	ands	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
		//magnetic field too strong , lower AGC ?
	}

	// remove first 2 and last 2 bits

	Angle &= ~(1 << 14);
 8002b00:	000c      	movs	r4, r1
 8002b02:	193b      	adds	r3, r7, r4
 8002b04:	193a      	adds	r2, r7, r4
 8002b06:	8812      	ldrh	r2, [r2, #0]
 8002b08:	492a      	ldr	r1, [pc, #168]	; (8002bb4 <AMS5055_Get_Position+0x110>)
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	801a      	strh	r2, [r3, #0]
	Angle &= ~(1 << 15);
 8002b0e:	193b      	adds	r3, r7, r4
 8002b10:	193a      	adds	r2, r7, r4
 8002b12:	8812      	ldrh	r2, [r2, #0]
 8002b14:	0452      	lsls	r2, r2, #17
 8002b16:	0c52      	lsrs	r2, r2, #17
 8002b18:	801a      	strh	r2, [r3, #0]
	Angle = (Angle >> 2);
 8002b1a:	193b      	adds	r3, r7, r4
 8002b1c:	193a      	adds	r2, r7, r4
 8002b1e:	8812      	ldrh	r2, [r2, #0]
 8002b20:	0892      	lsrs	r2, r2, #2
 8002b22:	801a      	strh	r2, [r3, #0]

	Angle = ((Angle * 360) / 4095); //12 bit resolution
 8002b24:	193b      	adds	r3, r7, r4
 8002b26:	881a      	ldrh	r2, [r3, #0]
 8002b28:	0013      	movs	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	189b      	adds	r3, r3, r2
 8002b2e:	011a      	lsls	r2, r3, #4
 8002b30:	1ad2      	subs	r2, r2, r3
 8002b32:	00d3      	lsls	r3, r2, #3
 8002b34:	001a      	movs	r2, r3
 8002b36:	0013      	movs	r3, r2
 8002b38:	491f      	ldr	r1, [pc, #124]	; (8002bb8 <AMS5055_Get_Position+0x114>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7fd fb6c 	bl	8000218 <__divsi3>
 8002b40:	0003      	movs	r3, r0
 8002b42:	001a      	movs	r2, r3
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	801a      	strh	r2, [r3, #0]

	Angle = Angle - AMSoffset;  // AMS is not calibrated, so angle needs to be fixed
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <AMS5055_Get_Position+0x118>)
 8002b4a:	881a      	ldrh	r2, [r3, #0]
 8002b4c:	193b      	adds	r3, r7, r4
 8002b4e:	1939      	adds	r1, r7, r4
 8002b50:	8809      	ldrh	r1, [r1, #0]
 8002b52:	1a8a      	subs	r2, r1, r2
 8002b54:	801a      	strh	r2, [r3, #0]
	if((int)Angle <= 0)
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <AMS5055_Get_Position+0xc6>
	{
		Angle = Angle + 360;
 8002b5e:	193b      	adds	r3, r7, r4
 8002b60:	193a      	adds	r2, r7, r4
 8002b62:	8812      	ldrh	r2, [r2, #0]
 8002b64:	3269      	adds	r2, #105	; 0x69
 8002b66:	32ff      	adds	r2, #255	; 0xff
 8002b68:	801a      	strh	r2, [r3, #0]
	}

	Angles[Ax] = Angle;
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <AMS5055_Get_Position+0x11c>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <AMS5055_Get_Position+0x120>)
 8002b70:	0052      	lsls	r2, r2, #1
 8002b72:	210e      	movs	r1, #14
 8002b74:	1879      	adds	r1, r7, r1
 8002b76:	8809      	ldrh	r1, [r1, #0]
 8002b78:	52d1      	strh	r1, [r2, r3]

	if (Ax >= 4100)
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <AMS5055_Get_Position+0x11c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <AMS5055_Get_Position+0x124>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	dd03      	ble.n	8002b8c <AMS5055_Get_Position+0xe8>
	{
		Ax = 0;
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <AMS5055_Get_Position+0x11c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e007      	b.n	8002b9c <AMS5055_Get_Position+0xf8>
	}

	else
	{
		Ax++;
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <AMS5055_Get_Position+0x11c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <AMS5055_Get_Position+0x11c>)
 8002b94:	601a      	str	r2, [r3, #0]
		AMS_Ready = 0;
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <AMS5055_Get_Position+0x10c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
	}

	//return Angles[Ax-1];
	return Angle;
 8002b9c:	230e      	movs	r3, #14
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	881b      	ldrh	r3, [r3, #0]
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b004      	add	sp, #16
 8002ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	00003fff 	.word	0x00003fff
 8002bb0:	200031d0 	.word	0x200031d0
 8002bb4:	ffffbfff 	.word	0xffffbfff
 8002bb8:	00000fff 	.word	0x00000fff
 8002bbc:	2000008c 	.word	0x2000008c
 8002bc0:	200031cc 	.word	0x200031cc
 8002bc4:	200011c4 	.word	0x200011c4
 8002bc8:	00001003 	.word	0x00001003

08002bcc <AMSParity>:

uint8_t AMSParity(uint16_t value)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	1dbb      	adds	r3, r7, #6
 8002bd6:	801a      	strh	r2, [r3, #0]
	uint8_t cnt = 0;
 8002bd8:	230f      	movs	r3, #15
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8002be0:	230e      	movs	r3, #14
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e015      	b.n	8002c16 <AMSParity+0x4a>
	{
		if (value & 0x1)
 8002bea:	1dbb      	adds	r3, r7, #6
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d005      	beq.n	8002c00 <AMSParity+0x34>
		{
			cnt++;
 8002bf4:	210f      	movs	r1, #15
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	187b      	adds	r3, r7, r1
 8002bfc:	3201      	adds	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
		}

		value >>= 1;
 8002c00:	1dbb      	adds	r3, r7, #6
 8002c02:	1dba      	adds	r2, r7, #6
 8002c04:	8812      	ldrh	r2, [r2, #0]
 8002c06:	0852      	lsrs	r2, r2, #1
 8002c08:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 16; i++)
 8002c0a:	210e      	movs	r1, #14
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	781a      	ldrb	r2, [r3, #0]
 8002c10:	187b      	adds	r3, r7, r1
 8002c12:	3201      	adds	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	230e      	movs	r3, #14
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b0f      	cmp	r3, #15
 8002c1e:	d9e4      	bls.n	8002bea <AMSParity+0x1e>
	}
	return cnt & 0x1;
 8002c20:	230f      	movs	r3, #15
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2201      	movs	r2, #1
 8002c28:	4013      	ands	r3, r2
 8002c2a:	b2db      	uxtb	r3, r3
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b004      	add	sp, #16
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <AMS5055_SPIWriteInt>:

uint16_t AMS5055_SPIWriteInt(uint16_t Address, int Action)
{
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	1dbb      	adds	r3, r7, #6
 8002c40:	801a      	strh	r2, [r3, #0]
	*/

	uint8_t SPI1TxData[2];	//TX data array SPI1
	uint8_t SPI1RxData[2];	//RX data array SPI1

	uint16_t SPI1Rx = 0;
 8002c42:	2314      	movs	r3, #20
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	2200      	movs	r2, #0
 8002c48:	801a      	strh	r2, [r3, #0]
	uint16_t SPI1Tx = 0;
 8002c4a:	2416      	movs	r4, #22
 8002c4c:	193b      	adds	r3, r7, r4
 8002c4e:	2200      	movs	r2, #0
 8002c50:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low
 8002c52:	2390      	movs	r3, #144	; 0x90
 8002c54:	05db      	lsls	r3, r3, #23
 8002c56:	2200      	movs	r2, #0
 8002c58:	2110      	movs	r1, #16
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f002 f975 	bl	8004f4a <HAL_GPIO_WritePin>


	  SPI1Tx = (Address << 1);
 8002c60:	0021      	movs	r1, r4
 8002c62:	187a      	adds	r2, r7, r1
 8002c64:	1dbb      	adds	r3, r7, #6
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	18db      	adds	r3, r3, r3
 8002c6a:	8013      	strh	r3, [r2, #0]

	  if (Action == 1) //READ
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <AMS5055_SPIWriteInt+0x4a>
	  {
		  SPI1Tx = SPI1Tx | 0x8000;
 8002c72:	187b      	adds	r3, r7, r1
 8002c74:	187a      	adds	r2, r7, r1
 8002c76:	8812      	ldrh	r2, [r2, #0]
 8002c78:	4923      	ldr	r1, [pc, #140]	; (8002d08 <AMS5055_SPIWriteInt+0xd4>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	801a      	strh	r2, [r3, #0]
	  }

	  SPI1Tx = SPI1Tx | AMSParity(SPI1Tx);
 8002c7e:	2416      	movs	r4, #22
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7ff ffa1 	bl	8002bcc <AMSParity>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	b299      	uxth	r1, r3
 8002c8e:	193b      	adds	r3, r7, r4
 8002c90:	193a      	adds	r2, r7, r4
 8002c92:	8812      	ldrh	r2, [r2, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	801a      	strh	r2, [r3, #0]

	 // HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low

	  SPI1TxData[0] = SPI1Tx >> 8;
 8002c98:	0021      	movs	r1, r4
 8002c9a:	193b      	adds	r3, r7, r4
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	2010      	movs	r0, #16
 8002ca6:	183b      	adds	r3, r7, r0
 8002ca8:	701a      	strb	r2, [r3, #0]
	  SPI1TxData[1] = SPI1Tx;
 8002caa:	187b      	adds	r3, r7, r1
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	183b      	adds	r3, r7, r0
 8002cb2:	705a      	strb	r2, [r3, #1]

	  HAL_SPI_TransmitReceive(&hspi1, SPI1TxData, SPI1RxData, 0x02, 100);
 8002cb4:	240c      	movs	r4, #12
 8002cb6:	193a      	adds	r2, r7, r4
 8002cb8:	1839      	adds	r1, r7, r0
 8002cba:	4814      	ldr	r0, [pc, #80]	; (8002d0c <AMS5055_SPIWriteInt+0xd8>)
 8002cbc:	2364      	movs	r3, #100	; 0x64
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f002 ff15 	bl	8005af0 <HAL_SPI_TransmitReceive>
	//HAL_SPI_TransmitReceive(&hspi1, SPI1Tx, SPI1Rx, 0x02, 100);

	  //HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high

	  SPI1Rx += (SPI1RxData[0] << 8);	//<< 8
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	b299      	uxth	r1, r3
 8002cd0:	2014      	movs	r0, #20
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	183a      	adds	r2, r7, r0
 8002cd6:	8812      	ldrh	r2, [r2, #0]
 8002cd8:	188a      	adds	r2, r1, r2
 8002cda:	801a      	strh	r2, [r3, #0]
	  SPI1Rx += (SPI1RxData[1] << 0);	//<< 0
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	785b      	ldrb	r3, [r3, #1]
 8002ce0:	b299      	uxth	r1, r3
 8002ce2:	183b      	adds	r3, r7, r0
 8002ce4:	0004      	movs	r4, r0
 8002ce6:	183a      	adds	r2, r7, r0
 8002ce8:	8812      	ldrh	r2, [r2, #0]
 8002cea:	188a      	adds	r2, r1, r2
 8002cec:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high
 8002cee:	2390      	movs	r3, #144	; 0x90
 8002cf0:	05db      	lsls	r3, r3, #23
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	2110      	movs	r1, #16
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f002 f927 	bl	8004f4a <HAL_GPIO_WritePin>

	  return SPI1Rx;
 8002cfc:	193b      	adds	r3, r7, r4
 8002cfe:	881b      	ldrh	r3, [r3, #0]
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b007      	add	sp, #28
 8002d06:	bd90      	pop	{r4, r7, pc}
 8002d08:	ffff8000 	.word	0xffff8000
 8002d0c:	200010ac 	.word	0x200010ac

08002d10 <ENC_Get_Position>:

uint16_t ENC_Get_Position(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
	uint32_t Enc_Position = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 8002d16:	2200      	movs	r2, #0
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2039      	movs	r0, #57	; 0x39
 8002d1c:	f7ff fdd2 	bl	80028c4 <TMC5160_SPIWrite>
 8002d20:	0003      	movs	r3, r0
 8002d22:	607b      	str	r3, [r7, #4]

	if((int)Enc_Position <= 0)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	dc02      	bgt.n	8002d30 <ENC_Get_Position+0x20>
	{
		Enc_Position = Enc_Position * (-1);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	425b      	negs	r3, r3
 8002d2e:	607b      	str	r3, [r7, #4]
	}

	Enc_Position = ((Enc_Position / 256)* 1.8);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7ff f9d9 	bl	80020ec <__aeabi_ui2d>
 8002d3a:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <ENC_Get_Position+0x50>)
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <ENC_Get_Position+0x54>)
 8002d3e:	f7fe fb0d 	bl	800135c <__aeabi_dmul>
 8002d42:	0002      	movs	r2, r0
 8002d44:	000b      	movs	r3, r1
 8002d46:	0010      	movs	r0, r2
 8002d48:	0019      	movs	r1, r3
 8002d4a:	f7fd fb8f 	bl	800046c <__aeabi_d2uiz>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	607b      	str	r3, [r7, #4]

	return Enc_Position;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	b29b      	uxth	r3, r3
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b002      	add	sp, #8
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	cccccccd 	.word	0xcccccccd
 8002d64:	3ffccccc 	.word	0x3ffccccc

08002d68 <Read_IN>:
	 HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,0);
	}
}

int Read_IN(int port)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	int val = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]

	if(port == 1)//Read IN1 (5 to 24V = 1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d106      	bne.n	8002d88 <Read_IN+0x20>
	{
		val = HAL_GPIO_ReadPin(GPIOB, REFL_UC_Pin);
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <Read_IN+0x40>)
 8002d7c:	2140      	movs	r1, #64	; 0x40
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f002 f8c6 	bl	8004f10 <HAL_GPIO_ReadPin>
 8002d84:	0003      	movs	r3, r0
 8002d86:	60fb      	str	r3, [r7, #12]
	}

	if(port == 2)//Read IN1 (5 to 24V = 1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d106      	bne.n	8002d9c <Read_IN+0x34>
	{
		val = HAL_GPIO_ReadPin(GPIOB, REFR_UC_Pin);
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <Read_IN+0x40>)
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	0018      	movs	r0, r3
 8002d94:	f002 f8bc 	bl	8004f10 <HAL_GPIO_ReadPin>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	60fb      	str	r3, [r7, #12]

	}

	return val;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
}
 8002d9e:	0018      	movs	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b004      	add	sp, #16
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	48000400 	.word	0x48000400

08002dac <HAL_CAN_RxFifo0MsgPendingCallback>:
int PLC_Init = 0;


/*  CAN RECEIVE INTERRUPT */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CANRxHeader, CANRxData);
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	2100      	movs	r1, #0
 8002dbc:	f001 fae2 	bl	8004384 <HAL_CAN_GetRxMessage>

	if (CANRxData[0] == 0x01)
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d102      	bne.n	8002dce <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Datacheck = 1;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
	}
}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	20001198 	.word	0x20001198
 8002ddc:	20001174 	.word	0x20001174
 8002de0:	200011a0 	.word	0x200011a0

08002de4 <HAL_GPIO_EXTI_Callback>:

/* AMS INTERRUPT */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	0002      	movs	r2, r0
 8002dec:	1dbb      	adds	r3, r7, #6
 8002dee:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == AMS_INT_Pin && AMS_Ready == 0)
 8002df0:	1dbb      	adds	r3, r7, #6
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d106      	bne.n	8002e06 <HAL_GPIO_EXTI_Callback+0x22>
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <HAL_GPIO_EXTI_Callback+0x22>
	{
		AMS_Ready = 1;
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
	}
}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b002      	add	sp, #8
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	200031d0 	.word	0x200031d0

08002e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8002e18:	f000 fda8 	bl	800396c <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_Delay(1000); //delay to allow caps to charge
 8002e1c:	23fa      	movs	r3, #250	; 0xfa
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 fe07 	bl	8003a34 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e26:	f000 f9cf 	bl	80031c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e2a:	f000 fb55 	bl	80034d8 <MX_GPIO_Init>
  MX_ADC_Init();
 8002e2e:	f000 fa0f 	bl	8003250 <MX_ADC_Init>
  MX_CAN_Init();
 8002e32:	f000 fa69 	bl	8003308 <MX_CAN_Init>
  MX_SPI1_Init();
 8002e36:	f000 fad3 	bl	80033e0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002e3a:	f000 fb0f 	bl	800345c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,1); // make sure raspi waits
 8002e3e:	4bcf      	ldr	r3, [pc, #828]	; (800317c <main+0x368>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	2120      	movs	r1, #32
 8002e44:	0018      	movs	r0, r3
 8002e46:	f002 f880 	bl	8004f4a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002e4a:	2064      	movs	r0, #100	; 0x64
 8002e4c:	f000 fdf2 	bl	8003a34 <HAL_Delay>

  TMC5160_Stop();
 8002e50:	f7ff fc2a 	bl	80026a8 <TMC5160_Stop>
  Drive_Enable(0);
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7ff fc31 	bl	80026bc <Drive_Enable>

  Ramp1.VSTART 	= 10;		//Motor Start speed
 8002e5a:	4bc9      	ldr	r3, [pc, #804]	; (8003180 <main+0x36c>)
 8002e5c:	220a      	movs	r2, #10
 8002e5e:	601a      	str	r2, [r3, #0]
  Ramp1.A1 		= 1000;		//Motor Accelaration from Vstart to speed V1
 8002e60:	4bc7      	ldr	r3, [pc, #796]	; (8003180 <main+0x36c>)
 8002e62:	22fa      	movs	r2, #250	; 0xfa
 8002e64:	0092      	lsls	r2, r2, #2
 8002e66:	605a      	str	r2, [r3, #4]
  Ramp1.V1 		= 10000;	//Motor Speed limit V1
 8002e68:	4bc5      	ldr	r3, [pc, #788]	; (8003180 <main+0x36c>)
 8002e6a:	4ac6      	ldr	r2, [pc, #792]	; (8003184 <main+0x370>)
 8002e6c:	609a      	str	r2, [r3, #8]
  Ramp1.AMAX 	= 51200;	//Motor Accelaration from speed V1 to speed Vmax
 8002e6e:	4bc4      	ldr	r3, [pc, #784]	; (8003180 <main+0x36c>)
 8002e70:	22c8      	movs	r2, #200	; 0xc8
 8002e72:	0212      	lsls	r2, r2, #8
 8002e74:	60da      	str	r2, [r3, #12]
  Ramp1.VMAX 	= 51200;	//Motor Max speed limit
 8002e76:	4bc2      	ldr	r3, [pc, #776]	; (8003180 <main+0x36c>)
 8002e78:	22c8      	movs	r2, #200	; 0xc8
 8002e7a:	0212      	lsls	r2, r2, #8
 8002e7c:	611a      	str	r2, [r3, #16]
  Ramp1.DMAX 	= 700;		//Motor Decelaration speed from speed VMAX to V1
 8002e7e:	4bc0      	ldr	r3, [pc, #768]	; (8003180 <main+0x36c>)
 8002e80:	22af      	movs	r2, #175	; 0xaf
 8002e82:	0092      	lsls	r2, r2, #2
 8002e84:	615a      	str	r2, [r3, #20]
  Ramp1.D1 		= 1400; 	//Motor Decelaration speed from V1 to VStop
 8002e86:	4bbe      	ldr	r3, [pc, #760]	; (8003180 <main+0x36c>)
 8002e88:	22af      	movs	r2, #175	; 0xaf
 8002e8a:	00d2      	lsls	r2, r2, #3
 8002e8c:	619a      	str	r2, [r3, #24]
  Ramp1.VSTOP 	= 13;		//Motor Stop speed
 8002e8e:	4bbc      	ldr	r3, [pc, #752]	; (8003180 <main+0x36c>)
 8002e90:	220d      	movs	r2, #13
 8002e92:	61da      	str	r2, [r3, #28]

  CurrentSetting1.IHOLD = 3;
 8002e94:	4bbc      	ldr	r3, [pc, #752]	; (8003188 <main+0x374>)
 8002e96:	2203      	movs	r2, #3
 8002e98:	605a      	str	r2, [r3, #4]
  CurrentSetting1.IRUN 	= 1;
 8002e9a:	4bbb      	ldr	r3, [pc, #748]	; (8003188 <main+0x374>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  TMC5160_Basic_Init(&CurrentSetting1); 	//TMC5160 basic init
 8002ea0:	4bb9      	ldr	r3, [pc, #740]	; (8003188 <main+0x374>)
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7ff f966 	bl	8002174 <TMC5160_Basic_Init>

  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,0); // make sure PLC waits
 8002ea8:	4bb4      	ldr	r3, [pc, #720]	; (800317c <main+0x368>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2110      	movs	r1, #16
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f002 f84b 	bl	8004f4a <HAL_GPIO_WritePin>

  Drive_Enable(1); // enable driver
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	f7ff fc01 	bl	80026bc <Drive_Enable>

  TMC5160_Basic_Rotate(1, &Ramp1);
 8002eba:	4bb1      	ldr	r3, [pc, #708]	; (8003180 <main+0x36c>)
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f7ff fad6 	bl	8002470 <TMC5160_Basic_Rotate>
  HAL_Delay(50);
 8002ec4:	2032      	movs	r0, #50	; 0x32
 8002ec6:	f000 fdb5 	bl	8003a34 <HAL_Delay>
  TMC5160_Init_Stallguard(0);
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f7ff fa5e 	bl	800238c <TMC5160_Init_Stallguard>


  while(stall == 0 && stallcounter < 35) //wait for stepper to reach closed position
 8002ed0:	e015      	b.n	8002efe <main+0xea>
  {
		//TMC5160_Monitor_Stallguard();
	    HAL_Delay(10);
 8002ed2:	200a      	movs	r0, #10
 8002ed4:	f000 fdae 	bl	8003a34 <HAL_Delay>
		stallcounter++;
 8002ed8:	4bac      	ldr	r3, [pc, #688]	; (800318c <main+0x378>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	4bab      	ldr	r3, [pc, #684]	; (800318c <main+0x378>)
 8002ee0:	601a      	str	r2, [r3, #0]

		if (TMC5160_Monitor_Stallguard() == 1) // stall event
 8002ee2:	f7ff fa77 	bl	80023d4 <TMC5160_Monitor_Stallguard>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d108      	bne.n	8002efe <main+0xea>
		{
			Drive_Enable(0);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7ff fbe5 	bl	80026bc <Drive_Enable>
			TMC5160_Init_Stallguard(1); // clear stall flag
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	f7ff fa4a 	bl	800238c <TMC5160_Init_Stallguard>
			// enter breakpoint if motor needs to start movement here again, if no breakpoint is added, motor will not stall!
			stall = 1;
 8002ef8:	4ba5      	ldr	r3, [pc, #660]	; (8003190 <main+0x37c>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
  while(stall == 0 && stallcounter < 35) //wait for stepper to reach closed position
 8002efe:	4ba4      	ldr	r3, [pc, #656]	; (8003190 <main+0x37c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <main+0xfa>
 8002f06:	4ba1      	ldr	r3, [pc, #644]	; (800318c <main+0x378>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b22      	cmp	r3, #34	; 0x22
 8002f0c:	d9e1      	bls.n	8002ed2 <main+0xbe>
		}
  }

  if (stall == 0)
 8002f0e:	4ba0      	ldr	r3, [pc, #640]	; (8003190 <main+0x37c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d108      	bne.n	8002f28 <main+0x114>
  {
	  Drive_Enable(0);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7ff fbd0 	bl	80026bc <Drive_Enable>
	  HAL_Delay(100);
 8002f1c:	2064      	movs	r0, #100	; 0x64
 8002f1e:	f000 fd89 	bl	8003a34 <HAL_Delay>
	  TMC5160_Init_Stallguard(1); // clear stall flag
 8002f22:	2001      	movs	r0, #1
 8002f24:	f7ff fa32 	bl	800238c <TMC5160_Init_Stallguard>
  }

  TMC5160_SPIWrite(0x21, 0x00000000, 1);// writing value to address 24 = 0x2D(XTARGET)  1 lap
 8002f28:	2201      	movs	r2, #1
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2021      	movs	r0, #33	; 0x21
 8002f2e:	f7ff fcc9 	bl	80028c4 <TMC5160_SPIWrite>
  TMC5160_Rotate_To(0, &Ramp1);
 8002f32:	4b93      	ldr	r3, [pc, #588]	; (8003180 <main+0x36c>)
 8002f34:	0019      	movs	r1, r3
 8002f36:	2000      	movs	r0, #0
 8002f38:	f7ff fae0 	bl	80024fc <TMC5160_Rotate_To>

  HAL_Delay(1500);
 8002f3c:	4b95      	ldr	r3, [pc, #596]	; (8003194 <main+0x380>)
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 fd78 	bl	8003a34 <HAL_Delay>

  Open = 0;
 8002f44:	4b94      	ldr	r3, [pc, #592]	; (8003198 <main+0x384>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
  open_pos = 0;
 8002f4a:	4b94      	ldr	r3, [pc, #592]	; (800319c <main+0x388>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	801a      	strh	r2, [r3, #0]
  closed_pos = 13900;
 8002f50:	4b93      	ldr	r3, [pc, #588]	; (80031a0 <main+0x38c>)
 8002f52:	4a94      	ldr	r2, [pc, #592]	; (80031a4 <main+0x390>)
 8002f54:	801a      	strh	r2, [r3, #0]

  Drive_Enable(1); // enable driver
 8002f56:	2001      	movs	r0, #1
 8002f58:	f7ff fbb0 	bl	80026bc <Drive_Enable>
  TMC5160_Rotate_To(closed_pos,&Ramp1); // close
 8002f5c:	4b90      	ldr	r3, [pc, #576]	; (80031a0 <main+0x38c>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	001a      	movs	r2, r3
 8002f62:	4b87      	ldr	r3, [pc, #540]	; (8003180 <main+0x36c>)
 8002f64:	0019      	movs	r1, r3
 8002f66:	0010      	movs	r0, r2
 8002f68:	f7ff fac8 	bl	80024fc <TMC5160_Rotate_To>
  Open = 1;
 8002f6c:	4b8a      	ldr	r3, [pc, #552]	; (8003198 <main+0x384>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
  Drive_Enable(0); // disable driver
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7ff fba2 	bl	80026bc <Drive_Enable>

  for(m = 0; m < NumberofMarbles; m++) //Clear Array, and make sure all are 0
 8002f78:	4b8b      	ldr	r3, [pc, #556]	; (80031a8 <main+0x394>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e009      	b.n	8002f94 <main+0x180>
  {
	  Marbles[m] = 0;
 8002f80:	4b89      	ldr	r3, [pc, #548]	; (80031a8 <main+0x394>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a89      	ldr	r2, [pc, #548]	; (80031ac <main+0x398>)
 8002f86:	2100      	movs	r1, #0
 8002f88:	54d1      	strb	r1, [r2, r3]
  for(m = 0; m < NumberofMarbles; m++) //Clear Array, and make sure all are 0
 8002f8a:	4b87      	ldr	r3, [pc, #540]	; (80031a8 <main+0x394>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	4b85      	ldr	r3, [pc, #532]	; (80031a8 <main+0x394>)
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	4b84      	ldr	r3, [pc, #528]	; (80031a8 <main+0x394>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2214      	movs	r2, #20
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	dbf0      	blt.n	8002f80 <main+0x16c>
  }

  HAL_Delay(5000);
 8002f9e:	4b84      	ldr	r3, [pc, #528]	; (80031b0 <main+0x39c>)
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 fd47 	bl	8003a34 <HAL_Delay>

  while(Raspi_Init == 0) //wait for raspi init
 8002fa6:	e030      	b.n	800300a <main+0x1f6>
  {
	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,0);
 8002fa8:	4b74      	ldr	r3, [pc, #464]	; (800317c <main+0x368>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	2120      	movs	r1, #32
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f001 ffcb 	bl	8004f4a <HAL_GPIO_WritePin>
  	  HAL_Delay(100);
 8002fb4:	2064      	movs	r0, #100	; 0x64
 8002fb6:	f000 fd3d 	bl	8003a34 <HAL_Delay>
  	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,1);
 8002fba:	4b70      	ldr	r3, [pc, #448]	; (800317c <main+0x368>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	2120      	movs	r1, #32
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f001 ffc2 	bl	8004f4a <HAL_GPIO_WritePin>

  	  if(Read_IN(2) == 1) //Wait for RASPI signal to start
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f7ff fece 	bl	8002d68 <Read_IN>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d11b      	bne.n	800300a <main+0x1f6>
  	  {
  	  	  while(Read_IN(2) == 0) //Wait for RASPI signal to start
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	f7ff fec7 	bl	8002d68 <Read_IN>
 8002fda:	1e03      	subs	r3, r0, #0
 8002fdc:	d0fa      	beq.n	8002fd4 <main+0x1c0>
  	  	  {
  	  	  }

  		  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,0);
 8002fde:	4b67      	ldr	r3, [pc, #412]	; (800317c <main+0x368>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2120      	movs	r1, #32
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f001 ffb0 	bl	8004f4a <HAL_GPIO_WritePin>
  	  	  HAL_Delay(100);
 8002fea:	2064      	movs	r0, #100	; 0x64
 8002fec:	f000 fd22 	bl	8003a34 <HAL_Delay>
  	  	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,1);
 8002ff0:	4b62      	ldr	r3, [pc, #392]	; (800317c <main+0x368>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f001 ffa7 	bl	8004f4a <HAL_GPIO_WritePin>

  	  	  HAL_Delay(3000);
 8002ffc:	4b6d      	ldr	r3, [pc, #436]	; (80031b4 <main+0x3a0>)
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 fd18 	bl	8003a34 <HAL_Delay>
  	  	  Raspi_Init = 1;
 8003004:	4b6c      	ldr	r3, [pc, #432]	; (80031b8 <main+0x3a4>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]
  while(Raspi_Init == 0) //wait for raspi init
 800300a:	4b6b      	ldr	r3, [pc, #428]	; (80031b8 <main+0x3a4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ca      	beq.n	8002fa8 <main+0x194>
  	  }
  }

  while(PLC_Init == 0)
 8003012:	e022      	b.n	800305a <main+0x246>
  {
	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,1);
 8003014:	4b59      	ldr	r3, [pc, #356]	; (800317c <main+0x368>)
 8003016:	2201      	movs	r2, #1
 8003018:	2110      	movs	r1, #16
 800301a:	0018      	movs	r0, r3
 800301c:	f001 ff95 	bl	8004f4a <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8003020:	2064      	movs	r0, #100	; 0x64
 8003022:	f000 fd07 	bl	8003a34 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,0);
 8003026:	4b55      	ldr	r3, [pc, #340]	; (800317c <main+0x368>)
 8003028:	2200      	movs	r2, #0
 800302a:	2110      	movs	r1, #16
 800302c:	0018      	movs	r0, r3
 800302e:	f001 ff8c 	bl	8004f4a <HAL_GPIO_WritePin>

  	  if(Read_IN(1) == 1) //Wait for PLC signal that marble is in place
 8003032:	2001      	movs	r0, #1
 8003034:	f7ff fe98 	bl	8002d68 <Read_IN>
 8003038:	0003      	movs	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d10d      	bne.n	800305a <main+0x246>
  	  {
  		  while(Read_IN(1) == 0) // wait for it to toggle low
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	2001      	movs	r0, #1
 8003042:	f7ff fe91 	bl	8002d68 <Read_IN>
 8003046:	1e03      	subs	r3, r0, #0
 8003048:	d0fa      	beq.n	8003040 <main+0x22c>
  		  {
  		  }

  		  HAL_Delay(1000);
 800304a:	23fa      	movs	r3, #250	; 0xfa
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	0018      	movs	r0, r3
 8003050:	f000 fcf0 	bl	8003a34 <HAL_Delay>
  		  PLC_Init = 1;
 8003054:	4b59      	ldr	r3, [pc, #356]	; (80031bc <main+0x3a8>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]
  while(PLC_Init == 0)
 800305a:	4b58      	ldr	r3, [pc, #352]	; (80031bc <main+0x3a8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0d8      	beq.n	8003014 <main+0x200>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	  while(Read_IN(1) == 1) //Wait for PLC signal that marble is in place
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	2001      	movs	r0, #1
 8003066:	f7ff fe7f 	bl	8002d68 <Read_IN>
 800306a:	0003      	movs	r3, r0
 800306c:	2b01      	cmp	r3, #1
 800306e:	d0f9      	beq.n	8003064 <main+0x250>
  	  {
  	  }

	  // signal Raspi to start
	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,0);
 8003070:	4b42      	ldr	r3, [pc, #264]	; (800317c <main+0x368>)
 8003072:	2200      	movs	r2, #0
 8003074:	2120      	movs	r1, #32
 8003076:	0018      	movs	r0, r3
 8003078:	f001 ff67 	bl	8004f4a <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800307c:	2064      	movs	r0, #100	; 0x64
 800307e:	f000 fcd9 	bl	8003a34 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,1);
 8003082:	4b3e      	ldr	r3, [pc, #248]	; (800317c <main+0x368>)
 8003084:	2201      	movs	r2, #1
 8003086:	2120      	movs	r1, #32
 8003088:	0018      	movs	r0, r3
 800308a:	f001 ff5e 	bl	8004f4a <HAL_GPIO_WritePin>


	  while(Read_IN(2) == 1) //Wait for Raspi signal marble is measured
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	2002      	movs	r0, #2
 8003092:	f7ff fe69 	bl	8002d68 <Read_IN>
 8003096:	0003      	movs	r3, r0
 8003098:	2b01      	cmp	r3, #1
 800309a:	d0f9      	beq.n	8003090 <main+0x27c>
	  {
	  }

	  HAL_Delay(1500); // do not change (for receiving pulses)
 800309c:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <main+0x380>)
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 fcc8 	bl	8003a34 <HAL_Delay>

	  if(Read_IN(2) == 0)  // 2 Pulses for Glass
 80030a4:	2002      	movs	r0, #2
 80030a6:	f7ff fe5f 	bl	8002d68 <Read_IN>
 80030aa:	1e03      	subs	r3, r0, #0
 80030ac:	d102      	bne.n	80030b4 <main+0x2a0>
	  {
		  Reading_Marble = 1; // Glass
 80030ae:	4b44      	ldr	r3, [pc, #272]	; (80031c0 <main+0x3ac>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
	  }

	  HAL_Delay(4000); // delay to add more time to sequence
 80030b4:	23fa      	movs	r3, #250	; 0xfa
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 fcbb 	bl	8003a34 <HAL_Delay>

	  Marbles[0] = Reading_Marble;
 80030be:	4b40      	ldr	r3, [pc, #256]	; (80031c0 <main+0x3ac>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	4b39      	ldr	r3, [pc, #228]	; (80031ac <main+0x398>)
 80030c6:	701a      	strb	r2, [r3, #0]

	  Current_Marble = Marbles[1]; // place to kick, number of holes after seek camera
 80030c8:	4b38      	ldr	r3, [pc, #224]	; (80031ac <main+0x398>)
 80030ca:	785b      	ldrb	r3, [r3, #1]
 80030cc:	001a      	movs	r2, r3
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <main+0x3b0>)
 80030d0:	601a      	str	r2, [r3, #0]

	  if(Current_Marble == 0) // perform movement to sort Metal marble
 80030d2:	4b3c      	ldr	r3, [pc, #240]	; (80031c4 <main+0x3b0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11a      	bne.n	8003110 <main+0x2fc>
	  {
		  if(Open == 0) // if nog niet open -> doe open
 80030da:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <main+0x384>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d130      	bne.n	8003144 <main+0x330>
		  {
			  Drive_Enable(1); // enable driver
 80030e2:	2001      	movs	r0, #1
 80030e4:	f7ff faea 	bl	80026bc <Drive_Enable>
			  TMC5160_Rotate_To(open_pos,&Ramp1); // close
 80030e8:	4b2c      	ldr	r3, [pc, #176]	; (800319c <main+0x388>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	001a      	movs	r2, r3
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <main+0x36c>)
 80030f0:	0019      	movs	r1, r3
 80030f2:	0010      	movs	r0, r2
 80030f4:	f7ff fa02 	bl	80024fc <TMC5160_Rotate_To>
			  HAL_Delay(500);
 80030f8:	23fa      	movs	r3, #250	; 0xfa
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 fc99 	bl	8003a34 <HAL_Delay>
			  Open = 1;
 8003102:	4b25      	ldr	r3, [pc, #148]	; (8003198 <main+0x384>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]
			  Drive_Enable(0); // enable driver
 8003108:	2000      	movs	r0, #0
 800310a:	f7ff fad7 	bl	80026bc <Drive_Enable>
 800310e:	e019      	b.n	8003144 <main+0x330>
		  }
	  }

	  else
	  {
		  if (Open == 1) // if open -> doe dicht
 8003110:	4b21      	ldr	r3, [pc, #132]	; (8003198 <main+0x384>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d115      	bne.n	8003144 <main+0x330>
		  {
			  Drive_Enable(1); // enable driver
 8003118:	2001      	movs	r0, #1
 800311a:	f7ff facf 	bl	80026bc <Drive_Enable>
			  TMC5160_Rotate_To(closed_pos,&Ramp1); // close
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <main+0x38c>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	001a      	movs	r2, r3
 8003124:	4b16      	ldr	r3, [pc, #88]	; (8003180 <main+0x36c>)
 8003126:	0019      	movs	r1, r3
 8003128:	0010      	movs	r0, r2
 800312a:	f7ff f9e7 	bl	80024fc <TMC5160_Rotate_To>
			  HAL_Delay(500);
 800312e:	23fa      	movs	r3, #250	; 0xfa
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	0018      	movs	r0, r3
 8003134:	f000 fc7e 	bl	8003a34 <HAL_Delay>
			  Open = 0;
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <main+0x384>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
			  Drive_Enable(0); // enable driver
 800313e:	2000      	movs	r0, #0
 8003140:	f7ff fabc 	bl	80026bc <Drive_Enable>
		  }
	  }

	  //Toggle_OUT(1,100); //signal PLC to continue
	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,1);
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <main+0x368>)
 8003146:	2201      	movs	r2, #1
 8003148:	2110      	movs	r1, #16
 800314a:	0018      	movs	r0, r3
 800314c:	f001 fefd 	bl	8004f4a <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8003150:	23fa      	movs	r3, #250	; 0xfa
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	0018      	movs	r0, r3
 8003156:	f000 fc6d 	bl	8003a34 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,0);
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <main+0x368>)
 800315c:	2200      	movs	r2, #0
 800315e:	2110      	movs	r1, #16
 8003160:	0018      	movs	r0, r3
 8003162:	f001 fef2 	bl	8004f4a <HAL_GPIO_WritePin>

	  Marbles[1] = Marbles[0]; // move marble 1 place
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <main+0x398>)
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <main+0x398>)
 800316c:	705a      	strb	r2, [r3, #1]
	  Marbles[0] = 0;
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <main+0x398>)
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]
	  for(m = (NumberofMarbles-1); m > 0; m--) //Move every Marble 1 space in the array
	  {
	  	 Marbles[m] = Marbles[m-1];
	  }*/

	  Reading_Marble = 0;
 8003174:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <main+0x3ac>)
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
  	  while(Read_IN(1) == 1) //Wait for PLC signal that marble is in place
 800317a:	e772      	b.n	8003062 <main+0x24e>
 800317c:	48000400 	.word	0x48000400
 8003180:	200011a4 	.word	0x200011a4
 8003184:	00002710 	.word	0x00002710
 8003188:	20001190 	.word	0x20001190
 800318c:	20003204 	.word	0x20003204
 8003190:	20003200 	.word	0x20003200
 8003194:	000005dc 	.word	0x000005dc
 8003198:	200031fc 	.word	0x200031fc
 800319c:	20003208 	.word	0x20003208
 80031a0:	2000320a 	.word	0x2000320a
 80031a4:	0000364c 	.word	0x0000364c
 80031a8:	200031e4 	.word	0x200031e4
 80031ac:	200031e8 	.word	0x200031e8
 80031b0:	00001388 	.word	0x00001388
 80031b4:	00000bb8 	.word	0x00000bb8
 80031b8:	2000320c 	.word	0x2000320c
 80031bc:	20003210 	.word	0x20003210
 80031c0:	200031e0 	.word	0x200031e0
 80031c4:	200031dc 	.word	0x200031dc

080031c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b093      	sub	sp, #76	; 0x4c
 80031cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ce:	2414      	movs	r4, #20
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	0018      	movs	r0, r3
 80031d4:	2334      	movs	r3, #52	; 0x34
 80031d6:	001a      	movs	r2, r3
 80031d8:	2100      	movs	r1, #0
 80031da:	f002 ffd1 	bl	8006180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	0018      	movs	r0, r3
 80031e2:	2310      	movs	r3, #16
 80031e4:	001a      	movs	r2, r3
 80031e6:	2100      	movs	r1, #0
 80031e8:	f002 ffca 	bl	8006180 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80031ec:	0021      	movs	r1, r4
 80031ee:	187b      	adds	r3, r7, r1
 80031f0:	2211      	movs	r2, #17
 80031f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	2201      	movs	r2, #1
 80031f8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80031fa:	187b      	adds	r3, r7, r1
 80031fc:	2201      	movs	r2, #1
 80031fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003200:	187b      	adds	r3, r7, r1
 8003202:	2210      	movs	r2, #16
 8003204:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003206:	187b      	adds	r3, r7, r1
 8003208:	2200      	movs	r2, #0
 800320a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800320c:	187b      	adds	r3, r7, r1
 800320e:	0018      	movs	r0, r3
 8003210:	f001 fed4 	bl	8004fbc <HAL_RCC_OscConfig>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d001      	beq.n	800321c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8003218:	f000 f9fc 	bl	8003614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	2207      	movs	r2, #7
 8003220:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	2201      	movs	r2, #1
 8003226:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	2200      	movs	r2, #0
 8003232:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	2100      	movs	r1, #0
 8003238:	0018      	movs	r0, r3
 800323a:	f002 fa45 	bl	80056c8 <HAL_RCC_ClockConfig>
 800323e:	1e03      	subs	r3, r0, #0
 8003240:	d001      	beq.n	8003246 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8003242:	f000 f9e7 	bl	8003614 <Error_Handler>
  }
}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b013      	add	sp, #76	; 0x4c
 800324c:	bd90      	pop	{r4, r7, pc}
	...

08003250 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003256:	1d3b      	adds	r3, r7, #4
 8003258:	0018      	movs	r0, r3
 800325a:	230c      	movs	r3, #12
 800325c:	001a      	movs	r2, r3
 800325e:	2100      	movs	r1, #0
 8003260:	f002 ff8e 	bl	8006180 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003264:	4b26      	ldr	r3, [pc, #152]	; (8003300 <MX_ADC_Init+0xb0>)
 8003266:	4a27      	ldr	r2, [pc, #156]	; (8003304 <MX_ADC_Init+0xb4>)
 8003268:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <MX_ADC_Init+0xb0>)
 800326c:	2200      	movs	r2, #0
 800326e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003270:	4b23      	ldr	r3, [pc, #140]	; (8003300 <MX_ADC_Init+0xb0>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003276:	4b22      	ldr	r3, [pc, #136]	; (8003300 <MX_ADC_Init+0xb0>)
 8003278:	2200      	movs	r2, #0
 800327a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <MX_ADC_Init+0xb0>)
 800327e:	2201      	movs	r2, #1
 8003280:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003282:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <MX_ADC_Init+0xb0>)
 8003284:	2204      	movs	r2, #4
 8003286:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <MX_ADC_Init+0xb0>)
 800328a:	2200      	movs	r2, #0
 800328c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <MX_ADC_Init+0xb0>)
 8003290:	2200      	movs	r2, #0
 8003292:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003294:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <MX_ADC_Init+0xb0>)
 8003296:	2200      	movs	r2, #0
 8003298:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800329a:	4b19      	ldr	r3, [pc, #100]	; (8003300 <MX_ADC_Init+0xb0>)
 800329c:	2200      	movs	r2, #0
 800329e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032a0:	4b17      	ldr	r3, [pc, #92]	; (8003300 <MX_ADC_Init+0xb0>)
 80032a2:	22c2      	movs	r2, #194	; 0xc2
 80032a4:	32ff      	adds	r2, #255	; 0xff
 80032a6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <MX_ADC_Init+0xb0>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80032ae:	4b14      	ldr	r3, [pc, #80]	; (8003300 <MX_ADC_Init+0xb0>)
 80032b0:	2224      	movs	r2, #36	; 0x24
 80032b2:	2100      	movs	r1, #0
 80032b4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <MX_ADC_Init+0xb0>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80032bc:	4b10      	ldr	r3, [pc, #64]	; (8003300 <MX_ADC_Init+0xb0>)
 80032be:	0018      	movs	r0, r3
 80032c0:	f000 fbdc 	bl	8003a7c <HAL_ADC_Init>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d001      	beq.n	80032cc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80032c8:	f000 f9a4 	bl	8003614 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	0152      	lsls	r2, r2, #5
 80032d8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	2280      	movs	r2, #128	; 0x80
 80032de:	0552      	lsls	r2, r2, #21
 80032e0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80032e2:	1d3a      	adds	r2, r7, #4
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <MX_ADC_Init+0xb0>)
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 fd07 	bl	8003cfc <HAL_ADC_ConfigChannel>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d001      	beq.n	80032f6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80032f2:	f000 f98f 	bl	8003614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b004      	add	sp, #16
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	20001044 	.word	0x20001044
 8003304:	40012400 	.word	0x40012400

08003308 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN_Init 0 */
  HAL_GPIO_WritePin(GPIOA,CAN_STB_Pin,0); // Set STB pin LOW for normal operation
 800330e:	2390      	movs	r3, #144	; 0x90
 8003310:	05db      	lsls	r3, r3, #23
 8003312:	2200      	movs	r2, #0
 8003314:	2104      	movs	r1, #4
 8003316:	0018      	movs	r0, r3
 8003318:	f001 fe17 	bl	8004f4a <HAL_GPIO_WritePin>
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800331c:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <MX_CAN_Init+0xd0>)
 800331e:	4a2f      	ldr	r2, [pc, #188]	; (80033dc <MX_CAN_Init+0xd4>)
 8003320:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8003322:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <MX_CAN_Init+0xd0>)
 8003324:	2210      	movs	r2, #16
 8003326:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <MX_CAN_Init+0xd0>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800332e:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <MX_CAN_Init+0xd0>)
 8003330:	2200      	movs	r2, #0
 8003332:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003334:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <MX_CAN_Init+0xd0>)
 8003336:	2280      	movs	r2, #128	; 0x80
 8003338:	0252      	lsls	r2, r2, #9
 800333a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800333c:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <MX_CAN_Init+0xd0>)
 800333e:	2200      	movs	r2, #0
 8003340:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003342:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <MX_CAN_Init+0xd0>)
 8003344:	2200      	movs	r2, #0
 8003346:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003348:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <MX_CAN_Init+0xd0>)
 800334a:	2200      	movs	r2, #0
 800334c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800334e:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <MX_CAN_Init+0xd0>)
 8003350:	2200      	movs	r2, #0
 8003352:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003354:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <MX_CAN_Init+0xd0>)
 8003356:	2200      	movs	r2, #0
 8003358:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800335a:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <MX_CAN_Init+0xd0>)
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003360:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <MX_CAN_Init+0xd0>)
 8003362:	2200      	movs	r2, #0
 8003364:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003366:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <MX_CAN_Init+0xd0>)
 8003368:	0018      	movs	r0, r3
 800336a:	f000 fdd5 	bl	8003f18 <HAL_CAN_Init>
 800336e:	1e03      	subs	r3, r0, #0
 8003370:	d001      	beq.n	8003376 <MX_CAN_Init+0x6e>
  {
    Error_Handler();
 8003372:	f000 f94f 	bl	8003614 <Error_Handler>

  /* CAN filter */

  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 8003376:	003b      	movs	r3, r7
 8003378:	2201      	movs	r2, #1
 800337a:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 10;
 800337c:	003b      	movs	r3, r7
 800337e:	220a      	movs	r2, #10
 8003380:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003382:	003b      	movs	r3, r7
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x0000;
 8003388:	003b      	movs	r3, r7
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800338e:	003b      	movs	r3, r7
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003394:	003b      	movs	r3, r7
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800339a:	003b      	movs	r3, r7
 800339c:	2200      	movs	r2, #0
 800339e:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80033a0:	003b      	movs	r3, r7
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80033a6:	003b      	movs	r3, r7
 80033a8:	2201      	movs	r2, #1
 80033aa:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 0;
 80033ac:	003b      	movs	r3, r7
 80033ae:	2200      	movs	r2, #0
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80033b2:	003a      	movs	r2, r7
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <MX_CAN_Init+0xd0>)
 80033b6:	0011      	movs	r1, r2
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 feab 	bl	8004114 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <MX_CAN_Init+0xd0>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f000 ff99 	bl	80042f8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80033c6:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <MX_CAN_Init+0xd0>)
 80033c8:	2102      	movs	r1, #2
 80033ca:	0018      	movs	r0, r3
 80033cc:	f001 f8f6 	bl	80045bc <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b00a      	add	sp, #40	; 0x28
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20001084 	.word	0x20001084
 80033dc:	40006400 	.word	0x40006400

080033e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <MX_SPI1_Init+0x74>)
 80033e6:	4a1c      	ldr	r2, [pc, #112]	; (8003458 <MX_SPI1_Init+0x78>)
 80033e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <MX_SPI1_Init+0x74>)
 80033ec:	2282      	movs	r2, #130	; 0x82
 80033ee:	0052      	lsls	r2, r2, #1
 80033f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033f2:	4b18      	ldr	r3, [pc, #96]	; (8003454 <MX_SPI1_Init+0x74>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <MX_SPI1_Init+0x74>)
 80033fa:	22e0      	movs	r2, #224	; 0xe0
 80033fc:	00d2      	lsls	r2, r2, #3
 80033fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <MX_SPI1_Init+0x74>)
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <MX_SPI1_Init+0x74>)
 8003408:	2201      	movs	r2, #1
 800340a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <MX_SPI1_Init+0x74>)
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	0092      	lsls	r2, r2, #2
 8003412:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <MX_SPI1_Init+0x74>)
 8003416:	2200      	movs	r2, #0
 8003418:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <MX_SPI1_Init+0x74>)
 800341c:	2200      	movs	r2, #0
 800341e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <MX_SPI1_Init+0x74>)
 8003422:	2200      	movs	r2, #0
 8003424:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <MX_SPI1_Init+0x74>)
 8003428:	2200      	movs	r2, #0
 800342a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <MX_SPI1_Init+0x74>)
 800342e:	2207      	movs	r2, #7
 8003430:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <MX_SPI1_Init+0x74>)
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <MX_SPI1_Init+0x74>)
 800343a:	2200      	movs	r2, #0
 800343c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <MX_SPI1_Init+0x74>)
 8003440:	0018      	movs	r0, r3
 8003442:	f002 fa9d 	bl	8005980 <HAL_SPI_Init>
 8003446:	1e03      	subs	r3, r0, #0
 8003448:	d001      	beq.n	800344e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800344a:	f000 f8e3 	bl	8003614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	200010ac 	.word	0x200010ac
 8003458:	40013000 	.word	0x40013000

0800345c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <MX_SPI2_Init+0x74>)
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <MX_SPI2_Init+0x78>)
 8003464:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <MX_SPI2_Init+0x74>)
 8003468:	2282      	movs	r2, #130	; 0x82
 800346a:	0052      	lsls	r2, r2, #1
 800346c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <MX_SPI2_Init+0x74>)
 8003470:	2200      	movs	r2, #0
 8003472:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003474:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <MX_SPI2_Init+0x74>)
 8003476:	22e0      	movs	r2, #224	; 0xe0
 8003478:	00d2      	lsls	r2, r2, #3
 800347a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800347c:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <MX_SPI2_Init+0x74>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003482:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <MX_SPI2_Init+0x74>)
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <MX_SPI2_Init+0x74>)
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <MX_SPI2_Init+0x74>)
 8003492:	2200      	movs	r2, #0
 8003494:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <MX_SPI2_Init+0x74>)
 8003498:	2200      	movs	r2, #0
 800349a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <MX_SPI2_Init+0x74>)
 800349e:	2200      	movs	r2, #0
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <MX_SPI2_Init+0x74>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <MX_SPI2_Init+0x74>)
 80034aa:	2207      	movs	r2, #7
 80034ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <MX_SPI2_Init+0x74>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <MX_SPI2_Init+0x74>)
 80034b6:	2208      	movs	r2, #8
 80034b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80034ba:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <MX_SPI2_Init+0x74>)
 80034bc:	0018      	movs	r0, r3
 80034be:	f002 fa5f 	bl	8005980 <HAL_SPI_Init>
 80034c2:	1e03      	subs	r3, r0, #0
 80034c4:	d001      	beq.n	80034ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80034c6:	f000 f8a5 	bl	8003614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20001110 	.word	0x20001110
 80034d4:	40003800 	.word	0x40003800

080034d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b089      	sub	sp, #36	; 0x24
 80034dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034de:	240c      	movs	r4, #12
 80034e0:	193b      	adds	r3, r7, r4
 80034e2:	0018      	movs	r0, r3
 80034e4:	2314      	movs	r3, #20
 80034e6:	001a      	movs	r2, r3
 80034e8:	2100      	movs	r1, #0
 80034ea:	f002 fe49 	bl	8006180 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034ee:	4b46      	ldr	r3, [pc, #280]	; (8003608 <MX_GPIO_Init+0x130>)
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	4b45      	ldr	r3, [pc, #276]	; (8003608 <MX_GPIO_Init+0x130>)
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	03c9      	lsls	r1, r1, #15
 80034f8:	430a      	orrs	r2, r1
 80034fa:	615a      	str	r2, [r3, #20]
 80034fc:	4b42      	ldr	r3, [pc, #264]	; (8003608 <MX_GPIO_Init+0x130>)
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	03db      	lsls	r3, r3, #15
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800350a:	4b3f      	ldr	r3, [pc, #252]	; (8003608 <MX_GPIO_Init+0x130>)
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <MX_GPIO_Init+0x130>)
 8003510:	2180      	movs	r1, #128	; 0x80
 8003512:	0289      	lsls	r1, r1, #10
 8003514:	430a      	orrs	r2, r1
 8003516:	615a      	str	r2, [r3, #20]
 8003518:	4b3b      	ldr	r3, [pc, #236]	; (8003608 <MX_GPIO_Init+0x130>)
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	029b      	lsls	r3, r3, #10
 8003520:	4013      	ands	r3, r2
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003526:	4b38      	ldr	r3, [pc, #224]	; (8003608 <MX_GPIO_Init+0x130>)
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	4b37      	ldr	r3, [pc, #220]	; (8003608 <MX_GPIO_Init+0x130>)
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	02c9      	lsls	r1, r1, #11
 8003530:	430a      	orrs	r2, r1
 8003532:	615a      	str	r2, [r3, #20]
 8003534:	4b34      	ldr	r3, [pc, #208]	; (8003608 <MX_GPIO_Init+0x130>)
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	02db      	lsls	r3, r3, #11
 800353c:	4013      	ands	r3, r2
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin, GPIO_PIN_RESET);
 8003542:	238a      	movs	r3, #138	; 0x8a
 8003544:	0059      	lsls	r1, r3, #1
 8003546:	2390      	movs	r3, #144	; 0x90
 8003548:	05db      	lsls	r3, r3, #23
 800354a:	2200      	movs	r2, #0
 800354c:	0018      	movs	r0, r3
 800354e:	f001 fcfc 	bl	8004f4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin, GPIO_PIN_RESET);
 8003552:	492e      	ldr	r1, [pc, #184]	; (800360c <MX_GPIO_Init+0x134>)
 8003554:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <MX_GPIO_Init+0x138>)
 8003556:	2200      	movs	r2, #0
 8003558:	0018      	movs	r0, r3
 800355a:	f001 fcf6 	bl	8004f4a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_STB_Pin AMS_CS_Pin DRV_ENN_Pin */
  GPIO_InitStruct.Pin = CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin;
 800355e:	193b      	adds	r3, r7, r4
 8003560:	228a      	movs	r2, #138	; 0x8a
 8003562:	0052      	lsls	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003566:	193b      	adds	r3, r7, r4
 8003568:	2201      	movs	r2, #1
 800356a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	193b      	adds	r3, r7, r4
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003572:	193b      	adds	r3, r7, r4
 8003574:	2200      	movs	r2, #0
 8003576:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003578:	193a      	adds	r2, r7, r4
 800357a:	2390      	movs	r3, #144	; 0x90
 800357c:	05db      	lsls	r3, r3, #23
 800357e:	0011      	movs	r1, r2
 8003580:	0018      	movs	r0, r3
 8003582:	f001 fb4d 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_INT_Pin */
  GPIO_InitStruct.Pin = AMS_INT_Pin;
 8003586:	0021      	movs	r1, r4
 8003588:	187b      	adds	r3, r7, r1
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800358e:	187b      	adds	r3, r7, r1
 8003590:	2288      	movs	r2, #136	; 0x88
 8003592:	0352      	lsls	r2, r2, #13
 8003594:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	000c      	movs	r4, r1
 8003598:	193b      	adds	r3, r7, r4
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AMS_INT_GPIO_Port, &GPIO_InitStruct);
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <MX_GPIO_Init+0x138>)
 80035a2:	0019      	movs	r1, r3
 80035a4:	0010      	movs	r0, r2
 80035a6:	f001 fb3b 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC_CS_Pin EXT_OUT_1_Pin EXT_OUT_2_Pin */
  GPIO_InitStruct.Pin = TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin;
 80035aa:	193b      	adds	r3, r7, r4
 80035ac:	4a17      	ldr	r2, [pc, #92]	; (800360c <MX_GPIO_Init+0x134>)
 80035ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b0:	193b      	adds	r3, r7, r4
 80035b2:	2201      	movs	r2, #1
 80035b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	193b      	adds	r3, r7, r4
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035bc:	193b      	adds	r3, r7, r4
 80035be:	2200      	movs	r2, #0
 80035c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c2:	193b      	adds	r3, r7, r4
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <MX_GPIO_Init+0x138>)
 80035c6:	0019      	movs	r1, r3
 80035c8:	0010      	movs	r0, r2
 80035ca:	f001 fb29 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : REFL_UC_Pin REFR_UC_Pin */
  GPIO_InitStruct.Pin = REFL_UC_Pin|REFR_UC_Pin;
 80035ce:	0021      	movs	r1, r4
 80035d0:	187b      	adds	r3, r7, r1
 80035d2:	22c0      	movs	r2, #192	; 0xc0
 80035d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035d6:	187b      	adds	r3, r7, r1
 80035d8:	2200      	movs	r2, #0
 80035da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035dc:	187b      	adds	r3, r7, r1
 80035de:	2202      	movs	r2, #2
 80035e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e2:	187b      	adds	r3, r7, r1
 80035e4:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <MX_GPIO_Init+0x138>)
 80035e6:	0019      	movs	r1, r3
 80035e8:	0010      	movs	r0, r2
 80035ea:	f001 fb19 	bl	8004c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80035ee:	2200      	movs	r2, #0
 80035f0:	2100      	movs	r1, #0
 80035f2:	2005      	movs	r0, #5
 80035f4:	f001 fade 	bl	8004bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80035f8:	2005      	movs	r0, #5
 80035fa:	f001 faf0 	bl	8004bde <HAL_NVIC_EnableIRQ>

}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b009      	add	sp, #36	; 0x24
 8003604:	bd90      	pop	{r4, r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	40021000 	.word	0x40021000
 800360c:	00001030 	.word	0x00001030
 8003610:	48000400 	.word	0x48000400

08003614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003618:	b672      	cpsid	i
}
 800361a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800361c:	e7fe      	b.n	800361c <Error_Handler+0x8>
	...

08003620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_MspInit+0x44>)
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <HAL_MspInit+0x44>)
 800362c:	2101      	movs	r1, #1
 800362e:	430a      	orrs	r2, r1
 8003630:	619a      	str	r2, [r3, #24]
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_MspInit+0x44>)
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2201      	movs	r2, #1
 8003638:	4013      	ands	r3, r2
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_MspInit+0x44>)
 8003640:	69da      	ldr	r2, [r3, #28]
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <HAL_MspInit+0x44>)
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	0549      	lsls	r1, r1, #21
 8003648:	430a      	orrs	r2, r1
 800364a:	61da      	str	r2, [r3, #28]
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_MspInit+0x44>)
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	055b      	lsls	r3, r3, #21
 8003654:	4013      	ands	r3, r2
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	b002      	add	sp, #8
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	40021000 	.word	0x40021000

08003668 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b08b      	sub	sp, #44	; 0x2c
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	2414      	movs	r4, #20
 8003672:	193b      	adds	r3, r7, r4
 8003674:	0018      	movs	r0, r3
 8003676:	2314      	movs	r3, #20
 8003678:	001a      	movs	r2, r3
 800367a:	2100      	movs	r1, #0
 800367c:	f002 fd80 	bl	8006180 <memset>
  if(hadc->Instance==ADC1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a19      	ldr	r2, [pc, #100]	; (80036ec <HAL_ADC_MspInit+0x84>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d12b      	bne.n	80036e2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800368a:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <HAL_ADC_MspInit+0x88>)
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <HAL_ADC_MspInit+0x88>)
 8003690:	2180      	movs	r1, #128	; 0x80
 8003692:	0089      	lsls	r1, r1, #2
 8003694:	430a      	orrs	r2, r1
 8003696:	619a      	str	r2, [r3, #24]
 8003698:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <HAL_ADC_MspInit+0x88>)
 800369a:	699a      	ldr	r2, [r3, #24]
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_ADC_MspInit+0x88>)
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <HAL_ADC_MspInit+0x88>)
 80036ac:	2180      	movs	r1, #128	; 0x80
 80036ae:	0289      	lsls	r1, r1, #10
 80036b0:	430a      	orrs	r2, r1
 80036b2:	615a      	str	r2, [r3, #20]
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <HAL_ADC_MspInit+0x88>)
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	4013      	ands	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = AIN_MCU_Pin;
 80036c2:	193b      	adds	r3, r7, r4
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	2203      	movs	r2, #3
 80036cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	193b      	adds	r3, r7, r4
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AIN_MCU_GPIO_Port, &GPIO_InitStruct);
 80036d4:	193a      	adds	r2, r7, r4
 80036d6:	2390      	movs	r3, #144	; 0x90
 80036d8:	05db      	lsls	r3, r3, #23
 80036da:	0011      	movs	r1, r2
 80036dc:	0018      	movs	r0, r3
 80036de:	f001 fa9f 	bl	8004c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b00b      	add	sp, #44	; 0x2c
 80036e8:	bd90      	pop	{r4, r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	40012400 	.word	0x40012400
 80036f0:	40021000 	.word	0x40021000

080036f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b08b      	sub	sp, #44	; 0x2c
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fc:	2414      	movs	r4, #20
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	0018      	movs	r0, r3
 8003702:	2314      	movs	r3, #20
 8003704:	001a      	movs	r2, r3
 8003706:	2100      	movs	r1, #0
 8003708:	f002 fd3a 	bl	8006180 <memset>
  if(hcan->Instance==CAN)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a20      	ldr	r2, [pc, #128]	; (8003794 <HAL_CAN_MspInit+0xa0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d13a      	bne.n	800378c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_CAN_MspInit+0xa4>)
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_CAN_MspInit+0xa4>)
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	0489      	lsls	r1, r1, #18
 8003720:	430a      	orrs	r2, r1
 8003722:	61da      	str	r2, [r3, #28]
 8003724:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <HAL_CAN_MspInit+0xa4>)
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	049b      	lsls	r3, r3, #18
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003732:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_CAN_MspInit+0xa4>)
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	4b18      	ldr	r3, [pc, #96]	; (8003798 <HAL_CAN_MspInit+0xa4>)
 8003738:	2180      	movs	r1, #128	; 0x80
 800373a:	02c9      	lsls	r1, r1, #11
 800373c:	430a      	orrs	r2, r1
 800373e:	615a      	str	r2, [r3, #20]
 8003740:	4b15      	ldr	r3, [pc, #84]	; (8003798 <HAL_CAN_MspInit+0xa4>)
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	02db      	lsls	r3, r3, #11
 8003748:	4013      	ands	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800374e:	193b      	adds	r3, r7, r4
 8003750:	22c0      	movs	r2, #192	; 0xc0
 8003752:	0092      	lsls	r2, r2, #2
 8003754:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003756:	0021      	movs	r1, r4
 8003758:	187b      	adds	r3, r7, r1
 800375a:	2202      	movs	r2, #2
 800375c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375e:	187b      	adds	r3, r7, r1
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003764:	187b      	adds	r3, r7, r1
 8003766:	2203      	movs	r2, #3
 8003768:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800376a:	187b      	adds	r3, r7, r1
 800376c:	2204      	movs	r2, #4
 800376e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003770:	187b      	adds	r3, r7, r1
 8003772:	4a0a      	ldr	r2, [pc, #40]	; (800379c <HAL_CAN_MspInit+0xa8>)
 8003774:	0019      	movs	r1, r3
 8003776:	0010      	movs	r0, r2
 8003778:	f001 fa52 	bl	8004c20 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800377c:	2200      	movs	r2, #0
 800377e:	2100      	movs	r1, #0
 8003780:	201e      	movs	r0, #30
 8003782:	f001 fa17 	bl	8004bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8003786:	201e      	movs	r0, #30
 8003788:	f001 fa29 	bl	8004bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b00b      	add	sp, #44	; 0x2c
 8003792:	bd90      	pop	{r4, r7, pc}
 8003794:	40006400 	.word	0x40006400
 8003798:	40021000 	.word	0x40021000
 800379c:	48000400 	.word	0x48000400

080037a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b08d      	sub	sp, #52	; 0x34
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a8:	241c      	movs	r4, #28
 80037aa:	193b      	adds	r3, r7, r4
 80037ac:	0018      	movs	r0, r3
 80037ae:	2314      	movs	r3, #20
 80037b0:	001a      	movs	r2, r3
 80037b2:	2100      	movs	r1, #0
 80037b4:	f002 fce4 	bl	8006180 <memset>
  if(hspi->Instance==SPI1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a39      	ldr	r2, [pc, #228]	; (80038a4 <HAL_SPI_MspInit+0x104>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d133      	bne.n	800382a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037c2:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <HAL_SPI_MspInit+0x108>)
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	4b38      	ldr	r3, [pc, #224]	; (80038a8 <HAL_SPI_MspInit+0x108>)
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	0149      	lsls	r1, r1, #5
 80037cc:	430a      	orrs	r2, r1
 80037ce:	619a      	str	r2, [r3, #24]
 80037d0:	4b35      	ldr	r3, [pc, #212]	; (80038a8 <HAL_SPI_MspInit+0x108>)
 80037d2:	699a      	ldr	r2, [r3, #24]
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	015b      	lsls	r3, r3, #5
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037de:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <HAL_SPI_MspInit+0x108>)
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	4b31      	ldr	r3, [pc, #196]	; (80038a8 <HAL_SPI_MspInit+0x108>)
 80037e4:	2180      	movs	r1, #128	; 0x80
 80037e6:	0289      	lsls	r1, r1, #10
 80037e8:	430a      	orrs	r2, r1
 80037ea:	615a      	str	r2, [r3, #20]
 80037ec:	4b2e      	ldr	r3, [pc, #184]	; (80038a8 <HAL_SPI_MspInit+0x108>)
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	029b      	lsls	r3, r3, #10
 80037f4:	4013      	ands	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AMS_SCK_Pin|AMS_MISO_Pin|AMS_MOSI_Pin;
 80037fa:	0021      	movs	r1, r4
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	22e0      	movs	r2, #224	; 0xe0
 8003800:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	187b      	adds	r3, r7, r1
 8003804:	2202      	movs	r2, #2
 8003806:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	187b      	adds	r3, r7, r1
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800380e:	187b      	adds	r3, r7, r1
 8003810:	2203      	movs	r2, #3
 8003812:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003814:	187b      	adds	r3, r7, r1
 8003816:	2200      	movs	r2, #0
 8003818:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381a:	187a      	adds	r2, r7, r1
 800381c:	2390      	movs	r3, #144	; 0x90
 800381e:	05db      	lsls	r3, r3, #23
 8003820:	0011      	movs	r1, r2
 8003822:	0018      	movs	r0, r3
 8003824:	f001 f9fc 	bl	8004c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003828:	e037      	b.n	800389a <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1f      	ldr	r2, [pc, #124]	; (80038ac <HAL_SPI_MspInit+0x10c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d132      	bne.n	800389a <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <HAL_SPI_MspInit+0x108>)
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_SPI_MspInit+0x108>)
 800383a:	2180      	movs	r1, #128	; 0x80
 800383c:	01c9      	lsls	r1, r1, #7
 800383e:	430a      	orrs	r2, r1
 8003840:	61da      	str	r2, [r3, #28]
 8003842:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_SPI_MspInit+0x108>)
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	01db      	lsls	r3, r3, #7
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003850:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_SPI_MspInit+0x108>)
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <HAL_SPI_MspInit+0x108>)
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	02c9      	lsls	r1, r1, #11
 800385a:	430a      	orrs	r2, r1
 800385c:	615a      	str	r2, [r3, #20]
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_SPI_MspInit+0x108>)
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	02db      	lsls	r3, r3, #11
 8003866:	4013      	ands	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMC_SCK_Pin|TMC_MISO_Pin|TMC_MOSI_Pin;
 800386c:	211c      	movs	r1, #28
 800386e:	187b      	adds	r3, r7, r1
 8003870:	22e0      	movs	r2, #224	; 0xe0
 8003872:	0212      	lsls	r2, r2, #8
 8003874:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003876:	187b      	adds	r3, r7, r1
 8003878:	2202      	movs	r2, #2
 800387a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387c:	187b      	adds	r3, r7, r1
 800387e:	2200      	movs	r2, #0
 8003880:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003882:	187b      	adds	r3, r7, r1
 8003884:	2203      	movs	r2, #3
 8003886:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003888:	187b      	adds	r3, r7, r1
 800388a:	2200      	movs	r2, #0
 800388c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800388e:	187b      	adds	r3, r7, r1
 8003890:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <HAL_SPI_MspInit+0x110>)
 8003892:	0019      	movs	r1, r3
 8003894:	0010      	movs	r0, r2
 8003896:	f001 f9c3 	bl	8004c20 <HAL_GPIO_Init>
}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b00d      	add	sp, #52	; 0x34
 80038a0:	bd90      	pop	{r4, r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	40013000 	.word	0x40013000
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40003800 	.word	0x40003800
 80038b0:	48000400 	.word	0x48000400

080038b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038b8:	e7fe      	b.n	80038b8 <NMI_Handler+0x4>

080038ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038be:	e7fe      	b.n	80038be <HardFault_Handler+0x4>

080038c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038d8:	f000 f890 	bl	80039fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AMS_INT_Pin);
 80038e6:	2001      	movs	r0, #1
 80038e8:	f001 fb4c 	bl	8004f84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <CEC_CAN_IRQHandler+0x14>)
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 fe88 	bl	8004610 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	20001084 	.word	0x20001084

0800390c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003918:	480d      	ldr	r0, [pc, #52]	; (8003950 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800391a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800391c:	480d      	ldr	r0, [pc, #52]	; (8003954 <LoopForever+0x6>)
  ldr r1, =_edata
 800391e:	490e      	ldr	r1, [pc, #56]	; (8003958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003920:	4a0e      	ldr	r2, [pc, #56]	; (800395c <LoopForever+0xe>)
  movs r3, #0
 8003922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003924:	e002      	b.n	800392c <LoopCopyDataInit>

08003926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800392a:	3304      	adds	r3, #4

0800392c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800392c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800392e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003930:	d3f9      	bcc.n	8003926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003932:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003934:	4c0b      	ldr	r4, [pc, #44]	; (8003964 <LoopForever+0x16>)
  movs r3, #0
 8003936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003938:	e001      	b.n	800393e <LoopFillZerobss>

0800393a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800393a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800393c:	3204      	adds	r2, #4

0800393e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800393e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003940:	d3fb      	bcc.n	800393a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003942:	f7ff ffe3 	bl	800390c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003946:	f002 fc29 	bl	800619c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800394a:	f7ff fa63 	bl	8002e14 <main>

0800394e <LoopForever>:

LoopForever:
    b LoopForever
 800394e:	e7fe      	b.n	800394e <LoopForever>
  ldr   r0, =_estack
 8003950:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003958:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800395c:	080070c0 	.word	0x080070c0
  ldr r2, =_sbss
 8003960:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003964:	20003350 	.word	0x20003350

08003968 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003968:	e7fe      	b.n	8003968 <ADC1_COMP_IRQHandler>
	...

0800396c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <HAL_Init+0x24>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_Init+0x24>)
 8003976:	2110      	movs	r1, #16
 8003978:	430a      	orrs	r2, r1
 800397a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800397c:	2003      	movs	r0, #3
 800397e:	f000 f809 	bl	8003994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003982:	f7ff fe4d 	bl	8003620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	40022000 	.word	0x40022000

08003994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800399c:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <HAL_InitTick+0x5c>)
 800399e:	681c      	ldr	r4, [r3, #0]
 80039a0:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_InitTick+0x60>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	0019      	movs	r1, r3
 80039a6:	23fa      	movs	r3, #250	; 0xfa
 80039a8:	0098      	lsls	r0, r3, #2
 80039aa:	f7fc fbab 	bl	8000104 <__udivsi3>
 80039ae:	0003      	movs	r3, r0
 80039b0:	0019      	movs	r1, r3
 80039b2:	0020      	movs	r0, r4
 80039b4:	f7fc fba6 	bl	8000104 <__udivsi3>
 80039b8:	0003      	movs	r3, r0
 80039ba:	0018      	movs	r0, r3
 80039bc:	f001 f923 	bl	8004c06 <HAL_SYSTICK_Config>
 80039c0:	1e03      	subs	r3, r0, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e00f      	b.n	80039e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d80b      	bhi.n	80039e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	2301      	movs	r3, #1
 80039d2:	425b      	negs	r3, r3
 80039d4:	2200      	movs	r2, #0
 80039d6:	0018      	movs	r0, r3
 80039d8:	f001 f8ec 	bl	8004bb4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_InitTick+0x64>)
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e000      	b.n	80039e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b003      	add	sp, #12
 80039ee:	bd90      	pop	{r4, r7, pc}
 80039f0:	20000000 	.word	0x20000000
 80039f4:	20000008 	.word	0x20000008
 80039f8:	20000004 	.word	0x20000004

080039fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_IncTick+0x1c>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	001a      	movs	r2, r3
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_IncTick+0x20>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	18d2      	adds	r2, r2, r3
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_IncTick+0x20>)
 8003a0e:	601a      	str	r2, [r3, #0]
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	20000008 	.word	0x20000008
 8003a1c:	20003214 	.word	0x20003214

08003a20 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  return uwTick;
 8003a24:	4b02      	ldr	r3, [pc, #8]	; (8003a30 <HAL_GetTick+0x10>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	20003214 	.word	0x20003214

08003a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a3c:	f7ff fff0 	bl	8003a20 <HAL_GetTick>
 8003a40:	0003      	movs	r3, r0
 8003a42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	d005      	beq.n	8003a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_Delay+0x44>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	001a      	movs	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	f7ff ffe0 	bl	8003a20 <HAL_GetTick>
 8003a60:	0002      	movs	r2, r0
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d8f7      	bhi.n	8003a5c <HAL_Delay+0x28>
  {
  }
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	20000008 	.word	0x20000008

08003a7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a84:	230f      	movs	r3, #15
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e125      	b.n	8003ce6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2234      	movs	r2, #52	; 0x34
 8003aac:	2100      	movs	r1, #0
 8003aae:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f7ff fdd8 	bl	8003668 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	2210      	movs	r2, #16
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d000      	beq.n	8003ac4 <HAL_ADC_Init+0x48>
 8003ac2:	e103      	b.n	8003ccc <HAL_ADC_Init+0x250>
 8003ac4:	230f      	movs	r3, #15
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d000      	beq.n	8003ad0 <HAL_ADC_Init+0x54>
 8003ace:	e0fd      	b.n	8003ccc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003ada:	d000      	beq.n	8003ade <HAL_ADC_Init+0x62>
 8003adc:	e0f6      	b.n	8003ccc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	4a83      	ldr	r2, [pc, #524]	; (8003cf0 <HAL_ADC_Init+0x274>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2203      	movs	r2, #3
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d112      	bne.n	8003b22 <HAL_ADC_Init+0xa6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2201      	movs	r2, #1
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d009      	beq.n	8003b1e <HAL_ADC_Init+0xa2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	401a      	ands	r2, r3
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d101      	bne.n	8003b22 <HAL_ADC_Init+0xa6>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <HAL_ADC_Init+0xa8>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d116      	bne.n	8003b56 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2218      	movs	r2, #24
 8003b30:	4393      	bics	r3, r2
 8003b32:	0019      	movs	r1, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	0899      	lsrs	r1, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4964      	ldr	r1, [pc, #400]	; (8003cf4 <HAL_ADC_Init+0x278>)
 8003b62:	400a      	ands	r2, r1
 8003b64:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	7e1b      	ldrb	r3, [r3, #24]
 8003b6a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	7e5b      	ldrb	r3, [r3, #25]
 8003b70:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b72:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	7e9b      	ldrb	r3, [r3, #26]
 8003b78:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003b7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d002      	beq.n	8003b8a <HAL_ADC_Init+0x10e>
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	015b      	lsls	r3, r3, #5
 8003b88:	e000      	b.n	8003b8c <HAL_ADC_Init+0x110>
 8003b8a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003b8c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003b92:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_ADC_Init+0x124>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	e000      	b.n	8003ba2 <HAL_ADC_Init+0x126>
 8003ba0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003ba2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2124      	movs	r1, #36	; 0x24
 8003ba8:	5c5b      	ldrb	r3, [r3, r1]
 8003baa:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003bac:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	7edb      	ldrb	r3, [r3, #27]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d115      	bne.n	8003be8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	7e9b      	ldrb	r3, [r3, #26]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d105      	bne.n	8003bd0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2280      	movs	r2, #128	; 0x80
 8003bc8:	0252      	lsls	r2, r2, #9
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	e00b      	b.n	8003be8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	2201      	movs	r2, #1
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	23c2      	movs	r3, #194	; 0xc2
 8003bee:	33ff      	adds	r3, #255	; 0xff
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d007      	beq.n	8003c04 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68d9      	ldr	r1, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	055b      	lsls	r3, r3, #21
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d01b      	beq.n	8003c58 <HAL_ADC_Init+0x1dc>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d017      	beq.n	8003c58 <HAL_ADC_Init+0x1dc>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d013      	beq.n	8003c58 <HAL_ADC_Init+0x1dc>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d00f      	beq.n	8003c58 <HAL_ADC_Init+0x1dc>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d00b      	beq.n	8003c58 <HAL_ADC_Init+0x1dc>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d007      	beq.n	8003c58 <HAL_ADC_Init+0x1dc>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	2b06      	cmp	r3, #6
 8003c4e:	d003      	beq.n	8003c58 <HAL_ADC_Init+0x1dc>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	2b07      	cmp	r3, #7
 8003c56:	d112      	bne.n	8003c7e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2107      	movs	r1, #7
 8003c64:	438a      	bics	r2, r1
 8003c66:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6959      	ldr	r1, [r3, #20]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	2207      	movs	r2, #7
 8003c74:	401a      	ands	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <HAL_ADC_Init+0x27c>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d10b      	bne.n	8003ca6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	2203      	movs	r2, #3
 8003c9a:	4393      	bics	r3, r2
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003ca4:	e01c      	b.n	8003ce0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003caa:	2212      	movs	r2, #18
 8003cac:	4393      	bics	r3, r2
 8003cae:	2210      	movs	r2, #16
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	2201      	movs	r2, #1
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003cc2:	230f      	movs	r3, #15
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003cca:	e009      	b.n	8003ce0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003cd8:	230f      	movs	r3, #15
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003ce0:	230f      	movs	r3, #15
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	781b      	ldrb	r3, [r3, #0]
}
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b004      	add	sp, #16
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	fffffefd 	.word	0xfffffefd
 8003cf4:	fffe0219 	.word	0xfffe0219
 8003cf8:	833fffe7 	.word	0x833fffe7

08003cfc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d06:	230f      	movs	r3, #15
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d16:	2380      	movs	r3, #128	; 0x80
 8003d18:	055b      	lsls	r3, r3, #21
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d011      	beq.n	8003d42 <HAL_ADC_ConfigChannel+0x46>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d00d      	beq.n	8003d42 <HAL_ADC_ConfigChannel+0x46>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d009      	beq.n	8003d42 <HAL_ADC_ConfigChannel+0x46>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d005      	beq.n	8003d42 <HAL_ADC_ConfigChannel+0x46>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d001      	beq.n	8003d42 <HAL_ADC_ConfigChannel+0x46>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2234      	movs	r2, #52	; 0x34
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x54>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e0d0      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x1f6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2234      	movs	r2, #52	; 0x34
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2204      	movs	r2, #4
 8003d60:	4013      	ands	r3, r2
 8003d62:	d000      	beq.n	8003d66 <HAL_ADC_ConfigChannel+0x6a>
 8003d64:	e0b4      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4a64      	ldr	r2, [pc, #400]	; (8003efc <HAL_ADC_ConfigChannel+0x200>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d100      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x76>
 8003d70:	e082      	b.n	8003e78 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	055b      	lsls	r3, r3, #21
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d037      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0x108>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d033      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0x108>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d02f      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0x108>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d02b      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0x108>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d027      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0x108>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	2b05      	cmp	r3, #5
 8003dba:	d023      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0x108>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d01f      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0x108>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	2b07      	cmp	r3, #7
 8003dca:	d01b      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	2107      	movs	r1, #7
 8003dd8:	400b      	ands	r3, r1
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d012      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2107      	movs	r1, #7
 8003dea:	438a      	bics	r2, r1
 8003dec:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6959      	ldr	r1, [r3, #20]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2207      	movs	r2, #7
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d007      	beq.n	8003e1c <HAL_ADC_ConfigChannel+0x120>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b11      	cmp	r3, #17
 8003e12:	d003      	beq.n	8003e1c <HAL_ADC_ConfigChannel+0x120>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b12      	cmp	r3, #18
 8003e1a:	d163      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003e1c:	4b38      	ldr	r3, [pc, #224]	; (8003f00 <HAL_ADC_ConfigChannel+0x204>)
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d009      	beq.n	8003e3c <HAL_ADC_ConfigChannel+0x140>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b11      	cmp	r3, #17
 8003e2e:	d102      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x13a>
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	03db      	lsls	r3, r3, #15
 8003e34:	e004      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x144>
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	045b      	lsls	r3, r3, #17
 8003e3a:	e001      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x144>
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	041b      	lsls	r3, r3, #16
 8003e40:	4a2f      	ldr	r2, [pc, #188]	; (8003f00 <HAL_ADC_ConfigChannel+0x204>)
 8003e42:	430b      	orrs	r3, r1
 8003e44:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d14a      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e4e:	4b2d      	ldr	r3, [pc, #180]	; (8003f04 <HAL_ADC_ConfigChannel+0x208>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	492d      	ldr	r1, [pc, #180]	; (8003f08 <HAL_ADC_ConfigChannel+0x20c>)
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7fc f955 	bl	8000104 <__udivsi3>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	001a      	movs	r2, r3
 8003e5e:	0013      	movs	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e68:	e002      	b.n	8003e70 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f9      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x16e>
 8003e76:	e035      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2101      	movs	r1, #1
 8003e84:	4099      	lsls	r1, r3
 8003e86:	000b      	movs	r3, r1
 8003e88:	43d9      	mvns	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	400a      	ands	r2, r1
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d007      	beq.n	8003eaa <HAL_ADC_ConfigChannel+0x1ae>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b11      	cmp	r3, #17
 8003ea0:	d003      	beq.n	8003eaa <HAL_ADC_ConfigChannel+0x1ae>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b12      	cmp	r3, #18
 8003ea8:	d11c      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <HAL_ADC_ConfigChannel+0x204>)
 8003eac:	6819      	ldr	r1, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d007      	beq.n	8003ec6 <HAL_ADC_ConfigChannel+0x1ca>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b11      	cmp	r3, #17
 8003ebc:	d101      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x1c6>
 8003ebe:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <HAL_ADC_ConfigChannel+0x210>)
 8003ec0:	e002      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x1cc>
 8003ec2:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_ADC_ConfigChannel+0x214>)
 8003ec4:	e000      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x1cc>
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <HAL_ADC_ConfigChannel+0x218>)
 8003ec8:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <HAL_ADC_ConfigChannel+0x204>)
 8003eca:	400b      	ands	r3, r1
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e009      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003edc:	230f      	movs	r3, #15
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2234      	movs	r2, #52	; 0x34
 8003ee8:	2100      	movs	r1, #0
 8003eea:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003eec:	230f      	movs	r3, #15
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	781b      	ldrb	r3, [r3, #0]
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	00001001 	.word	0x00001001
 8003f00:	40012708 	.word	0x40012708
 8003f04:	20000000 	.word	0x20000000
 8003f08:	000f4240 	.word	0x000f4240
 8003f0c:	ffbfffff 	.word	0xffbfffff
 8003f10:	feffffff 	.word	0xfeffffff
 8003f14:	ff7fffff 	.word	0xff7fffff

08003f18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e0f0      	b.n	800410c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	5c9b      	ldrb	r3, [r3, r2]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7ff fbdb 	bl	80036f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2101      	movs	r1, #1
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f4e:	f7ff fd67 	bl	8003a20 <HAL_GetTick>
 8003f52:	0003      	movs	r3, r0
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f56:	e013      	b.n	8003f80 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f58:	f7ff fd62 	bl	8003a20 <HAL_GetTick>
 8003f5c:	0002      	movs	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b0a      	cmp	r3, #10
 8003f64:	d90c      	bls.n	8003f80 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	2280      	movs	r2, #128	; 0x80
 8003f6c:	0292      	lsls	r2, r2, #10
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	2105      	movs	r1, #5
 8003f7a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0c5      	b.n	800410c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d0e5      	beq.n	8003f58 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2102      	movs	r1, #2
 8003f98:	438a      	bics	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f9c:	f7ff fd40 	bl	8003a20 <HAL_GetTick>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fa4:	e013      	b.n	8003fce <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fa6:	f7ff fd3b 	bl	8003a20 <HAL_GetTick>
 8003faa:	0002      	movs	r2, r0
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b0a      	cmp	r3, #10
 8003fb2:	d90c      	bls.n	8003fce <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	2280      	movs	r2, #128	; 0x80
 8003fba:	0292      	lsls	r2, r2, #10
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	2105      	movs	r1, #5
 8003fc8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e09e      	b.n	800410c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d1e5      	bne.n	8003fa6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	7e1b      	ldrb	r3, [r3, #24]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d108      	bne.n	8003ff4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2180      	movs	r1, #128	; 0x80
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e007      	b.n	8004004 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2180      	movs	r1, #128	; 0x80
 8004000:	438a      	bics	r2, r1
 8004002:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	7e5b      	ldrb	r3, [r3, #25]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d108      	bne.n	800401e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2140      	movs	r1, #64	; 0x40
 8004018:	430a      	orrs	r2, r1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e007      	b.n	800402e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2140      	movs	r1, #64	; 0x40
 800402a:	438a      	bics	r2, r1
 800402c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	7e9b      	ldrb	r3, [r3, #26]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d108      	bne.n	8004048 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2120      	movs	r1, #32
 8004042:	430a      	orrs	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e007      	b.n	8004058 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2120      	movs	r1, #32
 8004054:	438a      	bics	r2, r1
 8004056:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7edb      	ldrb	r3, [r3, #27]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d108      	bne.n	8004072 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2110      	movs	r1, #16
 800406c:	438a      	bics	r2, r1
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	e007      	b.n	8004082 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2110      	movs	r1, #16
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	7f1b      	ldrb	r3, [r3, #28]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d108      	bne.n	800409c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2108      	movs	r1, #8
 8004096:	430a      	orrs	r2, r1
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e007      	b.n	80040ac <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2108      	movs	r1, #8
 80040a8:	438a      	bics	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	7f5b      	ldrb	r3, [r3, #29]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d108      	bne.n	80040c6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2104      	movs	r1, #4
 80040c0:	430a      	orrs	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e007      	b.n	80040d6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2104      	movs	r1, #4
 80040d2:	438a      	bics	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	0011      	movs	r1, r2
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	1e5a      	subs	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	2101      	movs	r1, #1
 8004108:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b004      	add	sp, #16
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004124:	2013      	movs	r0, #19
 8004126:	183b      	adds	r3, r7, r0
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	2120      	movs	r1, #32
 800412c:	5c52      	ldrb	r2, [r2, r1]
 800412e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8004130:	0002      	movs	r2, r0
 8004132:	18bb      	adds	r3, r7, r2
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d004      	beq.n	8004144 <HAL_CAN_ConfigFilter+0x30>
 800413a:	18bb      	adds	r3, r7, r2
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d000      	beq.n	8004144 <HAL_CAN_ConfigFilter+0x30>
 8004142:	e0cd      	b.n	80042e0 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	58d3      	ldr	r3, [r2, r3]
 800414c:	2201      	movs	r2, #1
 800414e:	431a      	orrs	r2, r3
 8004150:	0011      	movs	r1, r2
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	221f      	movs	r2, #31
 8004160:	4013      	ands	r3, r2
 8004162:	2201      	movs	r2, #1
 8004164:	409a      	lsls	r2, r3
 8004166:	0013      	movs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	2387      	movs	r3, #135	; 0x87
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	58d3      	ldr	r3, [r2, r3]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	43d2      	mvns	r2, r2
 8004176:	401a      	ands	r2, r3
 8004178:	0011      	movs	r1, r2
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	2387      	movs	r3, #135	; 0x87
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d129      	bne.n	80041de <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	2383      	movs	r3, #131	; 0x83
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	58d3      	ldr	r3, [r2, r3]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	43d2      	mvns	r2, r2
 8004196:	401a      	ands	r2, r3
 8004198:	0011      	movs	r1, r2
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	2383      	movs	r3, #131	; 0x83
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80041b4:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	3248      	adds	r2, #72	; 0x48
 80041ba:	00d2      	lsls	r2, r2, #3
 80041bc:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	041b      	lsls	r3, r3, #16
 80041ca:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041d2:	6979      	ldr	r1, [r7, #20]
 80041d4:	3348      	adds	r3, #72	; 0x48
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	18cb      	adds	r3, r1, r3
 80041da:	3304      	adds	r3, #4
 80041dc:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d128      	bne.n	8004238 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	2383      	movs	r3, #131	; 0x83
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	58d2      	ldr	r2, [r2, r3]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	0011      	movs	r1, r2
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	2383      	movs	r3, #131	; 0x83
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	041b      	lsls	r3, r3, #16
 8004208:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800420e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3248      	adds	r2, #72	; 0x48
 8004214:	00d2      	lsls	r2, r2, #3
 8004216:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800422a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800422c:	6979      	ldr	r1, [r7, #20]
 800422e:	3348      	adds	r3, #72	; 0x48
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	18cb      	adds	r3, r1, r3
 8004234:	3304      	adds	r3, #4
 8004236:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10c      	bne.n	800425a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	2381      	movs	r3, #129	; 0x81
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	58d3      	ldr	r3, [r2, r3]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	43d2      	mvns	r2, r2
 800424c:	401a      	ands	r2, r3
 800424e:	0011      	movs	r1, r2
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	2381      	movs	r3, #129	; 0x81
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	50d1      	str	r1, [r2, r3]
 8004258:	e00a      	b.n	8004270 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	2381      	movs	r3, #129	; 0x81
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	58d2      	ldr	r2, [r2, r3]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	431a      	orrs	r2, r3
 8004266:	0011      	movs	r1, r2
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	2381      	movs	r3, #129	; 0x81
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10c      	bne.n	8004292 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	2385      	movs	r3, #133	; 0x85
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	58d3      	ldr	r3, [r2, r3]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	43d2      	mvns	r2, r2
 8004284:	401a      	ands	r2, r3
 8004286:	0011      	movs	r1, r2
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	2385      	movs	r3, #133	; 0x85
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	50d1      	str	r1, [r2, r3]
 8004290:	e00a      	b.n	80042a8 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	2385      	movs	r3, #133	; 0x85
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	58d2      	ldr	r2, [r2, r3]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	431a      	orrs	r2, r3
 800429e:	0011      	movs	r1, r2
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	2385      	movs	r3, #133	; 0x85
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d10a      	bne.n	80042c6 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	2387      	movs	r3, #135	; 0x87
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	58d2      	ldr	r2, [r2, r3]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	0011      	movs	r1, r2
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	2387      	movs	r3, #135	; 0x87
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	58d3      	ldr	r3, [r2, r3]
 80042ce:	2201      	movs	r2, #1
 80042d0:	4393      	bics	r3, r2
 80042d2:	0019      	movs	r1, r3
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e007      	b.n	80042f0 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	2280      	movs	r2, #128	; 0x80
 80042e6:	02d2      	lsls	r2, r2, #11
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
  }
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b006      	add	sp, #24
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	5c9b      	ldrb	r3, [r3, r2]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d12f      	bne.n	800436c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	2102      	movs	r1, #2
 8004312:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2101      	movs	r1, #1
 8004320:	438a      	bics	r2, r1
 8004322:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004324:	f7ff fb7c 	bl	8003a20 <HAL_GetTick>
 8004328:	0003      	movs	r3, r0
 800432a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800432c:	e013      	b.n	8004356 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800432e:	f7ff fb77 	bl	8003a20 <HAL_GetTick>
 8004332:	0002      	movs	r2, r0
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b0a      	cmp	r3, #10
 800433a:	d90c      	bls.n	8004356 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2280      	movs	r2, #128	; 0x80
 8004342:	0292      	lsls	r2, r2, #10
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	2105      	movs	r1, #5
 8004350:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e012      	b.n	800437c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	4013      	ands	r3, r2
 8004360:	d1e5      	bne.n	800432e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e007      	b.n	800437c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	2280      	movs	r2, #128	; 0x80
 8004372:	0312      	lsls	r2, r2, #12
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
  }
}
 800437c:	0018      	movs	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	b004      	add	sp, #16
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004392:	2017      	movs	r0, #23
 8004394:	183b      	adds	r3, r7, r0
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	2120      	movs	r1, #32
 800439a:	5c52      	ldrb	r2, [r2, r1]
 800439c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800439e:	0002      	movs	r2, r0
 80043a0:	18bb      	adds	r3, r7, r2
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d004      	beq.n	80043b2 <HAL_CAN_GetRxMessage+0x2e>
 80043a8:	18bb      	adds	r3, r7, r2
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d000      	beq.n	80043b2 <HAL_CAN_GetRxMessage+0x2e>
 80043b0:	e0f8      	b.n	80045a4 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10e      	bne.n	80043d6 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2203      	movs	r2, #3
 80043c0:	4013      	ands	r3, r2
 80043c2:	d117      	bne.n	80043f4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	0392      	lsls	r2, r2, #14
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e0ee      	b.n	80045b4 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	2203      	movs	r2, #3
 80043de:	4013      	ands	r3, r2
 80043e0:	d108      	bne.n	80043f4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	2280      	movs	r2, #128	; 0x80
 80043e8:	0392      	lsls	r2, r2, #14
 80043ea:	431a      	orrs	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0df      	b.n	80045b4 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	321b      	adds	r2, #27
 80043fc:	0112      	lsls	r2, r2, #4
 80043fe:	58d3      	ldr	r3, [r2, r3]
 8004400:	2204      	movs	r2, #4
 8004402:	401a      	ands	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	321b      	adds	r2, #27
 8004418:	0112      	lsls	r2, r2, #4
 800441a:	58d3      	ldr	r3, [r2, r3]
 800441c:	0d5b      	lsrs	r3, r3, #21
 800441e:	055b      	lsls	r3, r3, #21
 8004420:	0d5a      	lsrs	r2, r3, #21
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e00a      	b.n	800443e <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	321b      	adds	r2, #27
 8004430:	0112      	lsls	r2, r2, #4
 8004432:	58d3      	ldr	r3, [r2, r3]
 8004434:	08db      	lsrs	r3, r3, #3
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	08da      	lsrs	r2, r3, #3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	321b      	adds	r2, #27
 8004446:	0112      	lsls	r2, r2, #4
 8004448:	58d3      	ldr	r3, [r2, r3]
 800444a:	2202      	movs	r2, #2
 800444c:	401a      	ands	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	331b      	adds	r3, #27
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	18d3      	adds	r3, r2, r3
 800445e:	3304      	adds	r3, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	220f      	movs	r2, #15
 8004464:	401a      	ands	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	331b      	adds	r3, #27
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	18d3      	adds	r3, r2, r3
 8004476:	3304      	adds	r3, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	22ff      	movs	r2, #255	; 0xff
 800447e:	401a      	ands	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	331b      	adds	r3, #27
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	18d3      	adds	r3, r2, r3
 8004490:	3304      	adds	r3, #4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	0c1a      	lsrs	r2, r3, #16
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6819      	ldr	r1, [r3, #0]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	23dc      	movs	r3, #220	; 0xdc
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	188a      	adds	r2, r1, r2
 80044ac:	18d3      	adds	r3, r2, r3
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6819      	ldr	r1, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	23dc      	movs	r3, #220	; 0xdc
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	0112      	lsls	r2, r2, #4
 80044c2:	188a      	adds	r2, r1, r2
 80044c4:	18d3      	adds	r3, r2, r3
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	0a1a      	lsrs	r2, r3, #8
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6819      	ldr	r1, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	23dc      	movs	r3, #220	; 0xdc
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	0112      	lsls	r2, r2, #4
 80044de:	188a      	adds	r2, r1, r2
 80044e0:	18d3      	adds	r3, r2, r3
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	0c1a      	lsrs	r2, r3, #16
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	3302      	adds	r3, #2
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6819      	ldr	r1, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	23dc      	movs	r3, #220	; 0xdc
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	0112      	lsls	r2, r2, #4
 80044fa:	188a      	adds	r2, r1, r2
 80044fc:	18d3      	adds	r3, r2, r3
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	0e1a      	lsrs	r2, r3, #24
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	3303      	adds	r3, #3
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6819      	ldr	r1, [r3, #0]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	23de      	movs	r3, #222	; 0xde
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	0112      	lsls	r2, r2, #4
 8004516:	188a      	adds	r2, r1, r2
 8004518:	18d3      	adds	r3, r2, r3
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	3304      	adds	r3, #4
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6819      	ldr	r1, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	23de      	movs	r3, #222	; 0xde
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	0112      	lsls	r2, r2, #4
 8004530:	188a      	adds	r2, r1, r2
 8004532:	18d3      	adds	r3, r2, r3
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	0a1a      	lsrs	r2, r3, #8
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	3305      	adds	r3, #5
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	23de      	movs	r3, #222	; 0xde
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	188a      	adds	r2, r1, r2
 800454e:	18d3      	adds	r3, r2, r3
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	0c1a      	lsrs	r2, r3, #16
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	3306      	adds	r3, #6
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	23de      	movs	r3, #222	; 0xde
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	0112      	lsls	r2, r2, #4
 8004568:	188a      	adds	r2, r1, r2
 800456a:	18d3      	adds	r3, r2, r3
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	0e1a      	lsrs	r2, r3, #24
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	3307      	adds	r3, #7
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d108      	bne.n	8004590 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2120      	movs	r1, #32
 800458a:	430a      	orrs	r2, r1
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	e007      	b.n	80045a0 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2120      	movs	r1, #32
 800459c:	430a      	orrs	r2, r1
 800459e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e007      	b.n	80045b4 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2280      	movs	r2, #128	; 0x80
 80045aa:	02d2      	lsls	r2, r2, #11
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
  }
}
 80045b4:	0018      	movs	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b006      	add	sp, #24
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80045c6:	200f      	movs	r0, #15
 80045c8:	183b      	adds	r3, r7, r0
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	2120      	movs	r1, #32
 80045ce:	5c52      	ldrb	r2, [r2, r1]
 80045d0:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80045d2:	0002      	movs	r2, r0
 80045d4:	18bb      	adds	r3, r7, r2
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d003      	beq.n	80045e4 <HAL_CAN_ActivateNotification+0x28>
 80045dc:	18bb      	adds	r3, r7, r2
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d109      	bne.n	80045f8 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6959      	ldr	r1, [r3, #20]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e007      	b.n	8004608 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	2280      	movs	r2, #128	; 0x80
 80045fe:	02d2      	lsls	r2, r2, #11
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
  }
}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	b004      	add	sp, #16
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	2201      	movs	r2, #1
 8004650:	4013      	ands	r3, r2
 8004652:	d100      	bne.n	8004656 <HAL_CAN_IRQHandler+0x46>
 8004654:	e084      	b.n	8004760 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2201      	movs	r2, #1
 800465a:	4013      	ands	r3, r2
 800465c:	d024      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2201      	movs	r2, #1
 8004664:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2202      	movs	r2, #2
 800466a:	4013      	ands	r3, r2
 800466c:	d004      	beq.n	8004678 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0018      	movs	r0, r3
 8004672:	f000 f981 	bl	8004978 <HAL_CAN_TxMailbox0CompleteCallback>
 8004676:	e017      	b.n	80046a8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2204      	movs	r2, #4
 800467c:	4013      	ands	r3, r2
 800467e:	d005      	beq.n	800468c <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	2280      	movs	r2, #128	; 0x80
 8004684:	0112      	lsls	r2, r2, #4
 8004686:	4313      	orrs	r3, r2
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
 800468a:	e00d      	b.n	80046a8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2208      	movs	r2, #8
 8004690:	4013      	ands	r3, r2
 8004692:	d005      	beq.n	80046a0 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	2280      	movs	r2, #128	; 0x80
 8004698:	0152      	lsls	r2, r2, #5
 800469a:	4313      	orrs	r3, r2
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
 800469e:	e003      	b.n	80046a8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	0018      	movs	r0, r3
 80046a4:	f000 f980 	bl	80049a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4013      	ands	r3, r2
 80046b0:	d028      	beq.n	8004704 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2280      	movs	r2, #128	; 0x80
 80046b8:	0052      	lsls	r2, r2, #1
 80046ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4013      	ands	r3, r2
 80046c4:	d004      	beq.n	80046d0 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 f95d 	bl	8004988 <HAL_CAN_TxMailbox1CompleteCallback>
 80046ce:	e019      	b.n	8004704 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4013      	ands	r3, r2
 80046d8:	d005      	beq.n	80046e6 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	2280      	movs	r2, #128	; 0x80
 80046de:	0192      	lsls	r2, r2, #6
 80046e0:	4313      	orrs	r3, r2
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
 80046e4:	e00e      	b.n	8004704 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	4013      	ands	r3, r2
 80046ee:	d005      	beq.n	80046fc <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	01d2      	lsls	r2, r2, #7
 80046f6:	4313      	orrs	r3, r2
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
 80046fa:	e003      	b.n	8004704 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	0018      	movs	r0, r3
 8004700:	f000 f95a 	bl	80049b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	025b      	lsls	r3, r3, #9
 800470a:	4013      	ands	r3, r2
 800470c:	d028      	beq.n	8004760 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	0252      	lsls	r2, r2, #9
 8004716:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	029b      	lsls	r3, r3, #10
 800471e:	4013      	ands	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	0018      	movs	r0, r3
 8004726:	f000 f937 	bl	8004998 <HAL_CAN_TxMailbox2CompleteCallback>
 800472a:	e019      	b.n	8004760 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	02db      	lsls	r3, r3, #11
 8004732:	4013      	ands	r3, r2
 8004734:	d005      	beq.n	8004742 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	2280      	movs	r2, #128	; 0x80
 800473a:	0212      	lsls	r2, r2, #8
 800473c:	4313      	orrs	r3, r2
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
 8004740:	e00e      	b.n	8004760 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	031b      	lsls	r3, r3, #12
 8004748:	4013      	ands	r3, r2
 800474a:	d005      	beq.n	8004758 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	2280      	movs	r2, #128	; 0x80
 8004750:	0252      	lsls	r2, r2, #9
 8004752:	4313      	orrs	r3, r2
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
 8004756:	e003      	b.n	8004760 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	0018      	movs	r0, r3
 800475c:	f000 f934 	bl	80049c8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	2208      	movs	r2, #8
 8004764:	4013      	ands	r3, r2
 8004766:	d00c      	beq.n	8004782 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2210      	movs	r2, #16
 800476c:	4013      	ands	r3, r2
 800476e:	d008      	beq.n	8004782 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	0092      	lsls	r2, r2, #2
 8004776:	4313      	orrs	r3, r2
 8004778:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2210      	movs	r2, #16
 8004780:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	2204      	movs	r2, #4
 8004786:	4013      	ands	r3, r2
 8004788:	d00b      	beq.n	80047a2 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2208      	movs	r2, #8
 800478e:	4013      	ands	r3, r2
 8004790:	d007      	beq.n	80047a2 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2208      	movs	r2, #8
 8004798:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f000 f91b 	bl	80049d8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	2202      	movs	r2, #2
 80047a6:	4013      	ands	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2203      	movs	r2, #3
 80047b2:	4013      	ands	r3, r2
 80047b4:	d003      	beq.n	80047be <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fe faf7 	bl	8002dac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	2240      	movs	r2, #64	; 0x40
 80047c2:	4013      	ands	r3, r2
 80047c4:	d00c      	beq.n	80047e0 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2210      	movs	r2, #16
 80047ca:	4013      	ands	r3, r2
 80047cc:	d008      	beq.n	80047e0 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	2280      	movs	r2, #128	; 0x80
 80047d2:	00d2      	lsls	r2, r2, #3
 80047d4:	4313      	orrs	r3, r2
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2210      	movs	r2, #16
 80047de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	2220      	movs	r2, #32
 80047e4:	4013      	ands	r3, r2
 80047e6:	d00b      	beq.n	8004800 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2208      	movs	r2, #8
 80047ec:	4013      	ands	r3, r2
 80047ee:	d007      	beq.n	8004800 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2208      	movs	r2, #8
 80047f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 f8fc 	bl	80049f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	2210      	movs	r2, #16
 8004804:	4013      	ands	r3, r2
 8004806:	d009      	beq.n	800481c <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2203      	movs	r2, #3
 8004810:	4013      	ands	r3, r2
 8004812:	d003      	beq.n	800481c <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	0018      	movs	r0, r3
 8004818:	f000 f8e6 	bl	80049e8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800481c:	6a3a      	ldr	r2, [r7, #32]
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	029b      	lsls	r3, r3, #10
 8004822:	4013      	ands	r3, r2
 8004824:	d00b      	beq.n	800483e <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2210      	movs	r2, #16
 800482a:	4013      	ands	r3, r2
 800482c:	d007      	beq.n	800483e <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2210      	movs	r2, #16
 8004834:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	f000 f8e5 	bl	8004a08 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800483e:	6a3a      	ldr	r2, [r7, #32]
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	025b      	lsls	r3, r3, #9
 8004844:	4013      	ands	r3, r2
 8004846:	d00b      	beq.n	8004860 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	2208      	movs	r2, #8
 800484c:	4013      	ands	r3, r2
 800484e:	d007      	beq.n	8004860 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2208      	movs	r2, #8
 8004856:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	0018      	movs	r0, r3
 800485c:	f000 f8dc 	bl	8004a18 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	4013      	ands	r3, r2
 8004868:	d100      	bne.n	800486c <HAL_CAN_IRQHandler+0x25c>
 800486a:	e074      	b.n	8004956 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2204      	movs	r2, #4
 8004870:	4013      	ands	r3, r2
 8004872:	d100      	bne.n	8004876 <HAL_CAN_IRQHandler+0x266>
 8004874:	e06b      	b.n	800494e <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004876:	6a3a      	ldr	r2, [r7, #32]
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	4013      	ands	r3, r2
 800487e:	d007      	beq.n	8004890 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004886:	d003      	beq.n	8004890 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	2201      	movs	r2, #1
 800488c:	4313      	orrs	r3, r2
 800488e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004890:	6a3a      	ldr	r2, [r7, #32]
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4013      	ands	r3, r2
 8004898:	d007      	beq.n	80048aa <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2202      	movs	r2, #2
 800489e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80048a0:	d003      	beq.n	80048aa <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	2202      	movs	r2, #2
 80048a6:	4313      	orrs	r3, r2
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80048aa:	6a3a      	ldr	r2, [r7, #32]
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4013      	ands	r3, r2
 80048b2:	d007      	beq.n	80048c4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2204      	movs	r2, #4
 80048b8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80048ba:	d003      	beq.n	80048c4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	2204      	movs	r2, #4
 80048c0:	4313      	orrs	r3, r2
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	4013      	ands	r3, r2
 80048cc:	d03f      	beq.n	800494e <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2270      	movs	r2, #112	; 0x70
 80048d2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80048d4:	d03b      	beq.n	800494e <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2270      	movs	r2, #112	; 0x70
 80048da:	4013      	ands	r3, r2
 80048dc:	2b60      	cmp	r3, #96	; 0x60
 80048de:	d027      	beq.n	8004930 <HAL_CAN_IRQHandler+0x320>
 80048e0:	d82c      	bhi.n	800493c <HAL_CAN_IRQHandler+0x32c>
 80048e2:	2b50      	cmp	r3, #80	; 0x50
 80048e4:	d01f      	beq.n	8004926 <HAL_CAN_IRQHandler+0x316>
 80048e6:	d829      	bhi.n	800493c <HAL_CAN_IRQHandler+0x32c>
 80048e8:	2b40      	cmp	r3, #64	; 0x40
 80048ea:	d017      	beq.n	800491c <HAL_CAN_IRQHandler+0x30c>
 80048ec:	d826      	bhi.n	800493c <HAL_CAN_IRQHandler+0x32c>
 80048ee:	2b30      	cmp	r3, #48	; 0x30
 80048f0:	d00f      	beq.n	8004912 <HAL_CAN_IRQHandler+0x302>
 80048f2:	d823      	bhi.n	800493c <HAL_CAN_IRQHandler+0x32c>
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d002      	beq.n	80048fe <HAL_CAN_IRQHandler+0x2ee>
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d005      	beq.n	8004908 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80048fc:	e01e      	b.n	800493c <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	2208      	movs	r2, #8
 8004902:	4313      	orrs	r3, r2
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004906:	e01a      	b.n	800493e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	2210      	movs	r2, #16
 800490c:	4313      	orrs	r3, r2
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004910:	e015      	b.n	800493e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	2220      	movs	r2, #32
 8004916:	4313      	orrs	r3, r2
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800491a:	e010      	b.n	800493e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	2240      	movs	r2, #64	; 0x40
 8004920:	4313      	orrs	r3, r2
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004924:	e00b      	b.n	800493e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	2280      	movs	r2, #128	; 0x80
 800492a:	4313      	orrs	r3, r2
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800492e:	e006      	b.n	800493e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	2280      	movs	r2, #128	; 0x80
 8004934:	0052      	lsls	r2, r2, #1
 8004936:	4313      	orrs	r3, r2
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800493a:	e000      	b.n	800493e <HAL_CAN_IRQHandler+0x32e>
            break;
 800493c:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699a      	ldr	r2, [r3, #24]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2170      	movs	r1, #112	; 0x70
 800494a:	438a      	bics	r2, r1
 800494c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2204      	movs	r2, #4
 8004954:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	2b00      	cmp	r3, #0
 800495a:	d009      	beq.n	8004970 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	0018      	movs	r0, r3
 800496c:	f000 f85c 	bl	8004a28 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	46bd      	mov	sp, r7
 8004974:	b00a      	add	sp, #40	; 0x28
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004980:	46c0      	nop			; (mov r8, r8)
 8004982:	46bd      	mov	sp, r7
 8004984:	b002      	add	sp, #8
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	b002      	add	sp, #8
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80049a0:	46c0      	nop			; (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b002      	add	sp, #8
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b002      	add	sp, #8
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80049d0:	46c0      	nop			; (mov r8, r8)
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b002      	add	sp, #8
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b002      	add	sp, #8
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004a10:	46c0      	nop			; (mov r8, r8)
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b002      	add	sp, #8
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004a20:	46c0      	nop			; (mov r8, r8)
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b002      	add	sp, #8
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004a30:	46c0      	nop			; (mov r8, r8)
 8004a32:	46bd      	mov	sp, r7
 8004a34:	b002      	add	sp, #8
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	0002      	movs	r2, r0
 8004a40:	1dfb      	adds	r3, r7, #7
 8004a42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a44:	1dfb      	adds	r3, r7, #7
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b7f      	cmp	r3, #127	; 0x7f
 8004a4a:	d809      	bhi.n	8004a60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a4c:	1dfb      	adds	r3, r7, #7
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	001a      	movs	r2, r3
 8004a52:	231f      	movs	r3, #31
 8004a54:	401a      	ands	r2, r3
 8004a56:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <__NVIC_EnableIRQ+0x30>)
 8004a58:	2101      	movs	r1, #1
 8004a5a:	4091      	lsls	r1, r2
 8004a5c:	000a      	movs	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]
  }
}
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b002      	add	sp, #8
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	e000e100 	.word	0xe000e100

08004a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	0002      	movs	r2, r0
 8004a74:	6039      	str	r1, [r7, #0]
 8004a76:	1dfb      	adds	r3, r7, #7
 8004a78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a7a:	1dfb      	adds	r3, r7, #7
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a80:	d828      	bhi.n	8004ad4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a82:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <__NVIC_SetPriority+0xd4>)
 8004a84:	1dfb      	adds	r3, r7, #7
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	b25b      	sxtb	r3, r3
 8004a8a:	089b      	lsrs	r3, r3, #2
 8004a8c:	33c0      	adds	r3, #192	; 0xc0
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	589b      	ldr	r3, [r3, r2]
 8004a92:	1dfa      	adds	r2, r7, #7
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	0011      	movs	r1, r2
 8004a98:	2203      	movs	r2, #3
 8004a9a:	400a      	ands	r2, r1
 8004a9c:	00d2      	lsls	r2, r2, #3
 8004a9e:	21ff      	movs	r1, #255	; 0xff
 8004aa0:	4091      	lsls	r1, r2
 8004aa2:	000a      	movs	r2, r1
 8004aa4:	43d2      	mvns	r2, r2
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	22ff      	movs	r2, #255	; 0xff
 8004ab0:	401a      	ands	r2, r3
 8004ab2:	1dfb      	adds	r3, r7, #7
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	2303      	movs	r3, #3
 8004aba:	4003      	ands	r3, r0
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ac0:	481f      	ldr	r0, [pc, #124]	; (8004b40 <__NVIC_SetPriority+0xd4>)
 8004ac2:	1dfb      	adds	r3, r7, #7
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	089b      	lsrs	r3, r3, #2
 8004aca:	430a      	orrs	r2, r1
 8004acc:	33c0      	adds	r3, #192	; 0xc0
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004ad2:	e031      	b.n	8004b38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <__NVIC_SetPriority+0xd8>)
 8004ad6:	1dfb      	adds	r3, r7, #7
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	0019      	movs	r1, r3
 8004adc:	230f      	movs	r3, #15
 8004ade:	400b      	ands	r3, r1
 8004ae0:	3b08      	subs	r3, #8
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	3306      	adds	r3, #6
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	18d3      	adds	r3, r2, r3
 8004aea:	3304      	adds	r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	1dfa      	adds	r2, r7, #7
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	0011      	movs	r1, r2
 8004af4:	2203      	movs	r2, #3
 8004af6:	400a      	ands	r2, r1
 8004af8:	00d2      	lsls	r2, r2, #3
 8004afa:	21ff      	movs	r1, #255	; 0xff
 8004afc:	4091      	lsls	r1, r2
 8004afe:	000a      	movs	r2, r1
 8004b00:	43d2      	mvns	r2, r2
 8004b02:	401a      	ands	r2, r3
 8004b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	22ff      	movs	r2, #255	; 0xff
 8004b0c:	401a      	ands	r2, r3
 8004b0e:	1dfb      	adds	r3, r7, #7
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	0018      	movs	r0, r3
 8004b14:	2303      	movs	r3, #3
 8004b16:	4003      	ands	r3, r0
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b1c:	4809      	ldr	r0, [pc, #36]	; (8004b44 <__NVIC_SetPriority+0xd8>)
 8004b1e:	1dfb      	adds	r3, r7, #7
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	001c      	movs	r4, r3
 8004b24:	230f      	movs	r3, #15
 8004b26:	4023      	ands	r3, r4
 8004b28:	3b08      	subs	r3, #8
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	3306      	adds	r3, #6
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	18c3      	adds	r3, r0, r3
 8004b34:	3304      	adds	r3, #4
 8004b36:	601a      	str	r2, [r3, #0]
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b003      	add	sp, #12
 8004b3e:	bd90      	pop	{r4, r7, pc}
 8004b40:	e000e100 	.word	0xe000e100
 8004b44:	e000ed00 	.word	0xe000ed00

08004b48 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b4c:	f3bf 8f4f 	dsb	sy
}
 8004b50:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b52:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <__NVIC_SystemReset+0x1c>)
 8004b54:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <__NVIC_SystemReset+0x20>)
 8004b56:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b58:	f3bf 8f4f 	dsb	sy
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	e7fd      	b.n	8004b5e <__NVIC_SystemReset+0x16>
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	e000ed00 	.word	0xe000ed00
 8004b68:	05fa0004 	.word	0x05fa0004

08004b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	1e5a      	subs	r2, r3, #1
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	045b      	lsls	r3, r3, #17
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d301      	bcc.n	8004b84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b80:	2301      	movs	r3, #1
 8004b82:	e010      	b.n	8004ba6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b84:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <SysTick_Config+0x44>)
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	3a01      	subs	r2, #1
 8004b8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	425b      	negs	r3, r3
 8004b90:	2103      	movs	r1, #3
 8004b92:	0018      	movs	r0, r3
 8004b94:	f7ff ff6a 	bl	8004a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <SysTick_Config+0x44>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b9e:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <SysTick_Config+0x44>)
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b002      	add	sp, #8
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	e000e010 	.word	0xe000e010

08004bb4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	210f      	movs	r1, #15
 8004bc0:	187b      	adds	r3, r7, r1
 8004bc2:	1c02      	adds	r2, r0, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	187b      	adds	r3, r7, r1
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	b25b      	sxtb	r3, r3
 8004bce:	0011      	movs	r1, r2
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f7ff ff4b 	bl	8004a6c <__NVIC_SetPriority>
}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b004      	add	sp, #16
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	0002      	movs	r2, r0
 8004be6:	1dfb      	adds	r3, r7, #7
 8004be8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bea:	1dfb      	adds	r3, r7, #7
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	b25b      	sxtb	r3, r3
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f7ff ff21 	bl	8004a38 <__NVIC_EnableIRQ>
}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b002      	add	sp, #8
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004c02:	f7ff ffa1 	bl	8004b48 <__NVIC_SystemReset>

08004c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7ff ffab 	bl	8004b6c <SysTick_Config>
 8004c16:	0003      	movs	r3, r0
}
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b002      	add	sp, #8
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c2e:	e155      	b.n	8004edc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2101      	movs	r1, #1
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4091      	lsls	r1, r2
 8004c3a:	000a      	movs	r2, r1
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d100      	bne.n	8004c48 <HAL_GPIO_Init+0x28>
 8004c46:	e146      	b.n	8004ed6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d005      	beq.n	8004c60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2203      	movs	r2, #3
 8004c5a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d130      	bne.n	8004cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	409a      	lsls	r2, r3
 8004c6e:	0013      	movs	r3, r2
 8004c70:	43da      	mvns	r2, r3
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4013      	ands	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	409a      	lsls	r2, r3
 8004c82:	0013      	movs	r3, r2
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c96:	2201      	movs	r2, #1
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	0013      	movs	r3, r2
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	091b      	lsrs	r3, r3, #4
 8004cac:	2201      	movs	r2, #1
 8004cae:	401a      	ands	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	0013      	movs	r3, r2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d017      	beq.n	8004cfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	2203      	movs	r2, #3
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	0013      	movs	r3, r2
 8004cde:	43da      	mvns	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	0013      	movs	r3, r2
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2203      	movs	r2, #3
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d123      	bne.n	8004d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	08da      	lsrs	r2, r3, #3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3208      	adds	r2, #8
 8004d12:	0092      	lsls	r2, r2, #2
 8004d14:	58d3      	ldr	r3, [r2, r3]
 8004d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2207      	movs	r2, #7
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	220f      	movs	r2, #15
 8004d22:	409a      	lsls	r2, r3
 8004d24:	0013      	movs	r3, r2
 8004d26:	43da      	mvns	r2, r3
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2107      	movs	r1, #7
 8004d36:	400b      	ands	r3, r1
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	409a      	lsls	r2, r3
 8004d3c:	0013      	movs	r3, r2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	08da      	lsrs	r2, r3, #3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3208      	adds	r2, #8
 8004d4c:	0092      	lsls	r2, r2, #2
 8004d4e:	6939      	ldr	r1, [r7, #16]
 8004d50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	0013      	movs	r3, r2
 8004d62:	43da      	mvns	r2, r3
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	4013      	ands	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2203      	movs	r2, #3
 8004d70:	401a      	ands	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	409a      	lsls	r2, r3
 8004d78:	0013      	movs	r3, r2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	23c0      	movs	r3, #192	; 0xc0
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d100      	bne.n	8004d94 <HAL_GPIO_Init+0x174>
 8004d92:	e0a0      	b.n	8004ed6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d94:	4b57      	ldr	r3, [pc, #348]	; (8004ef4 <HAL_GPIO_Init+0x2d4>)
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	4b56      	ldr	r3, [pc, #344]	; (8004ef4 <HAL_GPIO_Init+0x2d4>)
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	619a      	str	r2, [r3, #24]
 8004da0:	4b54      	ldr	r3, [pc, #336]	; (8004ef4 <HAL_GPIO_Init+0x2d4>)
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	2201      	movs	r2, #1
 8004da6:	4013      	ands	r3, r2
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004dac:	4a52      	ldr	r2, [pc, #328]	; (8004ef8 <HAL_GPIO_Init+0x2d8>)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	089b      	lsrs	r3, r3, #2
 8004db2:	3302      	adds	r3, #2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	589b      	ldr	r3, [r3, r2]
 8004db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	220f      	movs	r2, #15
 8004dc4:	409a      	lsls	r2, r3
 8004dc6:	0013      	movs	r3, r2
 8004dc8:	43da      	mvns	r2, r3
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	2390      	movs	r3, #144	; 0x90
 8004dd4:	05db      	lsls	r3, r3, #23
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d019      	beq.n	8004e0e <HAL_GPIO_Init+0x1ee>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a47      	ldr	r2, [pc, #284]	; (8004efc <HAL_GPIO_Init+0x2dc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d013      	beq.n	8004e0a <HAL_GPIO_Init+0x1ea>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a46      	ldr	r2, [pc, #280]	; (8004f00 <HAL_GPIO_Init+0x2e0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00d      	beq.n	8004e06 <HAL_GPIO_Init+0x1e6>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a45      	ldr	r2, [pc, #276]	; (8004f04 <HAL_GPIO_Init+0x2e4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d007      	beq.n	8004e02 <HAL_GPIO_Init+0x1e2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a44      	ldr	r2, [pc, #272]	; (8004f08 <HAL_GPIO_Init+0x2e8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d101      	bne.n	8004dfe <HAL_GPIO_Init+0x1de>
 8004dfa:	2304      	movs	r3, #4
 8004dfc:	e008      	b.n	8004e10 <HAL_GPIO_Init+0x1f0>
 8004dfe:	2305      	movs	r3, #5
 8004e00:	e006      	b.n	8004e10 <HAL_GPIO_Init+0x1f0>
 8004e02:	2303      	movs	r3, #3
 8004e04:	e004      	b.n	8004e10 <HAL_GPIO_Init+0x1f0>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e002      	b.n	8004e10 <HAL_GPIO_Init+0x1f0>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <HAL_GPIO_Init+0x1f0>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	2103      	movs	r1, #3
 8004e14:	400a      	ands	r2, r1
 8004e16:	0092      	lsls	r2, r2, #2
 8004e18:	4093      	lsls	r3, r2
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e20:	4935      	ldr	r1, [pc, #212]	; (8004ef8 <HAL_GPIO_Init+0x2d8>)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	089b      	lsrs	r3, r3, #2
 8004e26:	3302      	adds	r3, #2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e2e:	4b37      	ldr	r3, [pc, #220]	; (8004f0c <HAL_GPIO_Init+0x2ec>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	43da      	mvns	r2, r3
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	025b      	lsls	r3, r3, #9
 8004e46:	4013      	ands	r3, r2
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004e52:	4b2e      	ldr	r3, [pc, #184]	; (8004f0c <HAL_GPIO_Init+0x2ec>)
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004e58:	4b2c      	ldr	r3, [pc, #176]	; (8004f0c <HAL_GPIO_Init+0x2ec>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	43da      	mvns	r2, r3
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4013      	ands	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	029b      	lsls	r3, r3, #10
 8004e70:	4013      	ands	r3, r2
 8004e72:	d003      	beq.n	8004e7c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e7c:	4b23      	ldr	r3, [pc, #140]	; (8004f0c <HAL_GPIO_Init+0x2ec>)
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e82:	4b22      	ldr	r3, [pc, #136]	; (8004f0c <HAL_GPIO_Init+0x2ec>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	035b      	lsls	r3, r3, #13
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d003      	beq.n	8004ea6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004ea6:	4b19      	ldr	r3, [pc, #100]	; (8004f0c <HAL_GPIO_Init+0x2ec>)
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004eac:	4b17      	ldr	r3, [pc, #92]	; (8004f0c <HAL_GPIO_Init+0x2ec>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	43da      	mvns	r2, r3
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	039b      	lsls	r3, r3, #14
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <HAL_GPIO_Init+0x2ec>)
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	40da      	lsrs	r2, r3
 8004ee4:	1e13      	subs	r3, r2, #0
 8004ee6:	d000      	beq.n	8004eea <HAL_GPIO_Init+0x2ca>
 8004ee8:	e6a2      	b.n	8004c30 <HAL_GPIO_Init+0x10>
  } 
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46c0      	nop			; (mov r8, r8)
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b006      	add	sp, #24
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40010000 	.word	0x40010000
 8004efc:	48000400 	.word	0x48000400
 8004f00:	48000800 	.word	0x48000800
 8004f04:	48000c00 	.word	0x48000c00
 8004f08:	48001000 	.word	0x48001000
 8004f0c:	40010400 	.word	0x40010400

08004f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	000a      	movs	r2, r1
 8004f1a:	1cbb      	adds	r3, r7, #2
 8004f1c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	1cba      	adds	r2, r7, #2
 8004f24:	8812      	ldrh	r2, [r2, #0]
 8004f26:	4013      	ands	r3, r2
 8004f28:	d004      	beq.n	8004f34 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004f2a:	230f      	movs	r3, #15
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	2201      	movs	r2, #1
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	e003      	b.n	8004f3c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f34:	230f      	movs	r3, #15
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004f3c:	230f      	movs	r3, #15
 8004f3e:	18fb      	adds	r3, r7, r3
 8004f40:	781b      	ldrb	r3, [r3, #0]
  }
 8004f42:	0018      	movs	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b004      	add	sp, #16
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	0008      	movs	r0, r1
 8004f54:	0011      	movs	r1, r2
 8004f56:	1cbb      	adds	r3, r7, #2
 8004f58:	1c02      	adds	r2, r0, #0
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	1c7b      	adds	r3, r7, #1
 8004f5e:	1c0a      	adds	r2, r1, #0
 8004f60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f62:	1c7b      	adds	r3, r7, #1
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f6a:	1cbb      	adds	r3, r7, #2
 8004f6c:	881a      	ldrh	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f72:	e003      	b.n	8004f7c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f74:	1cbb      	adds	r3, r7, #2
 8004f76:	881a      	ldrh	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b002      	add	sp, #8
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	1dbb      	adds	r3, r7, #6
 8004f8e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f90:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	1dba      	adds	r2, r7, #6
 8004f96:	8812      	ldrh	r2, [r2, #0]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d008      	beq.n	8004fae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f9c:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004f9e:	1dba      	adds	r2, r7, #6
 8004fa0:	8812      	ldrh	r2, [r2, #0]
 8004fa2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fa4:	1dbb      	adds	r3, r7, #6
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f7fd ff1b 	bl	8002de4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b002      	add	sp, #8
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	40010400 	.word	0x40010400

08004fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f000 fb76 	bl	80056bc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d100      	bne.n	8004fdc <HAL_RCC_OscConfig+0x20>
 8004fda:	e08e      	b.n	80050fa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004fdc:	4bc5      	ldr	r3, [pc, #788]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	220c      	movs	r2, #12
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d00e      	beq.n	8005006 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fe8:	4bc2      	ldr	r3, [pc, #776]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	220c      	movs	r2, #12
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d117      	bne.n	8005024 <HAL_RCC_OscConfig+0x68>
 8004ff4:	4bbf      	ldr	r3, [pc, #764]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	23c0      	movs	r3, #192	; 0xc0
 8004ffa:	025b      	lsls	r3, r3, #9
 8004ffc:	401a      	ands	r2, r3
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	025b      	lsls	r3, r3, #9
 8005002:	429a      	cmp	r2, r3
 8005004:	d10e      	bne.n	8005024 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005006:	4bbb      	ldr	r3, [pc, #748]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	2380      	movs	r3, #128	; 0x80
 800500c:	029b      	lsls	r3, r3, #10
 800500e:	4013      	ands	r3, r2
 8005010:	d100      	bne.n	8005014 <HAL_RCC_OscConfig+0x58>
 8005012:	e071      	b.n	80050f8 <HAL_RCC_OscConfig+0x13c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d000      	beq.n	800501e <HAL_RCC_OscConfig+0x62>
 800501c:	e06c      	b.n	80050f8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	f000 fb4c 	bl	80056bc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d107      	bne.n	800503c <HAL_RCC_OscConfig+0x80>
 800502c:	4bb1      	ldr	r3, [pc, #708]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4bb0      	ldr	r3, [pc, #704]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005032:	2180      	movs	r1, #128	; 0x80
 8005034:	0249      	lsls	r1, r1, #9
 8005036:	430a      	orrs	r2, r1
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e02f      	b.n	800509c <HAL_RCC_OscConfig+0xe0>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10c      	bne.n	800505e <HAL_RCC_OscConfig+0xa2>
 8005044:	4bab      	ldr	r3, [pc, #684]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	4baa      	ldr	r3, [pc, #680]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800504a:	49ab      	ldr	r1, [pc, #684]	; (80052f8 <HAL_RCC_OscConfig+0x33c>)
 800504c:	400a      	ands	r2, r1
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	4ba8      	ldr	r3, [pc, #672]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	4ba7      	ldr	r3, [pc, #668]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005056:	49a9      	ldr	r1, [pc, #676]	; (80052fc <HAL_RCC_OscConfig+0x340>)
 8005058:	400a      	ands	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	e01e      	b.n	800509c <HAL_RCC_OscConfig+0xe0>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b05      	cmp	r3, #5
 8005064:	d10e      	bne.n	8005084 <HAL_RCC_OscConfig+0xc8>
 8005066:	4ba3      	ldr	r3, [pc, #652]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4ba2      	ldr	r3, [pc, #648]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800506c:	2180      	movs	r1, #128	; 0x80
 800506e:	02c9      	lsls	r1, r1, #11
 8005070:	430a      	orrs	r2, r1
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	4b9f      	ldr	r3, [pc, #636]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	4b9e      	ldr	r3, [pc, #632]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800507a:	2180      	movs	r1, #128	; 0x80
 800507c:	0249      	lsls	r1, r1, #9
 800507e:	430a      	orrs	r2, r1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e00b      	b.n	800509c <HAL_RCC_OscConfig+0xe0>
 8005084:	4b9b      	ldr	r3, [pc, #620]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4b9a      	ldr	r3, [pc, #616]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800508a:	499b      	ldr	r1, [pc, #620]	; (80052f8 <HAL_RCC_OscConfig+0x33c>)
 800508c:	400a      	ands	r2, r1
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	4b98      	ldr	r3, [pc, #608]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b97      	ldr	r3, [pc, #604]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005096:	4999      	ldr	r1, [pc, #612]	; (80052fc <HAL_RCC_OscConfig+0x340>)
 8005098:	400a      	ands	r2, r1
 800509a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d014      	beq.n	80050ce <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a4:	f7fe fcbc 	bl	8003a20 <HAL_GetTick>
 80050a8:	0003      	movs	r3, r0
 80050aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ae:	f7fe fcb7 	bl	8003a20 <HAL_GetTick>
 80050b2:	0002      	movs	r2, r0
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b64      	cmp	r3, #100	; 0x64
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e2fd      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c0:	4b8c      	ldr	r3, [pc, #560]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	029b      	lsls	r3, r3, #10
 80050c8:	4013      	ands	r3, r2
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCC_OscConfig+0xf2>
 80050cc:	e015      	b.n	80050fa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ce:	f7fe fca7 	bl	8003a20 <HAL_GetTick>
 80050d2:	0003      	movs	r3, r0
 80050d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fe fca2 	bl	8003a20 <HAL_GetTick>
 80050dc:	0002      	movs	r2, r0
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e2e8      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ea:	4b82      	ldr	r3, [pc, #520]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	029b      	lsls	r3, r3, #10
 80050f2:	4013      	ands	r3, r2
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x11c>
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2202      	movs	r2, #2
 8005100:	4013      	ands	r3, r2
 8005102:	d100      	bne.n	8005106 <HAL_RCC_OscConfig+0x14a>
 8005104:	e06c      	b.n	80051e0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005106:	4b7b      	ldr	r3, [pc, #492]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	220c      	movs	r2, #12
 800510c:	4013      	ands	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005110:	4b78      	ldr	r3, [pc, #480]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	220c      	movs	r2, #12
 8005116:	4013      	ands	r3, r2
 8005118:	2b08      	cmp	r3, #8
 800511a:	d11f      	bne.n	800515c <HAL_RCC_OscConfig+0x1a0>
 800511c:	4b75      	ldr	r3, [pc, #468]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	23c0      	movs	r3, #192	; 0xc0
 8005122:	025b      	lsls	r3, r3, #9
 8005124:	401a      	ands	r2, r3
 8005126:	2380      	movs	r3, #128	; 0x80
 8005128:	021b      	lsls	r3, r3, #8
 800512a:	429a      	cmp	r2, r3
 800512c:	d116      	bne.n	800515c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512e:	4b71      	ldr	r3, [pc, #452]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2202      	movs	r2, #2
 8005134:	4013      	ands	r3, r2
 8005136:	d005      	beq.n	8005144 <HAL_RCC_OscConfig+0x188>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d001      	beq.n	8005144 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e2bb      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005144:	4b6b      	ldr	r3, [pc, #428]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	22f8      	movs	r2, #248	; 0xf8
 800514a:	4393      	bics	r3, r2
 800514c:	0019      	movs	r1, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00da      	lsls	r2, r3, #3
 8005154:	4b67      	ldr	r3, [pc, #412]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005156:	430a      	orrs	r2, r1
 8005158:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515a:	e041      	b.n	80051e0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d024      	beq.n	80051ae <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005164:	4b63      	ldr	r3, [pc, #396]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b62      	ldr	r3, [pc, #392]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800516a:	2101      	movs	r1, #1
 800516c:	430a      	orrs	r2, r1
 800516e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005170:	f7fe fc56 	bl	8003a20 <HAL_GetTick>
 8005174:	0003      	movs	r3, r0
 8005176:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800517a:	f7fe fc51 	bl	8003a20 <HAL_GetTick>
 800517e:	0002      	movs	r2, r0
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e297      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518c:	4b59      	ldr	r3, [pc, #356]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2202      	movs	r2, #2
 8005192:	4013      	ands	r3, r2
 8005194:	d0f1      	beq.n	800517a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005196:	4b57      	ldr	r3, [pc, #348]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	22f8      	movs	r2, #248	; 0xf8
 800519c:	4393      	bics	r3, r2
 800519e:	0019      	movs	r1, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	00da      	lsls	r2, r3, #3
 80051a6:	4b53      	ldr	r3, [pc, #332]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 80051a8:	430a      	orrs	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	e018      	b.n	80051e0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ae:	4b51      	ldr	r3, [pc, #324]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	4b50      	ldr	r3, [pc, #320]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 80051b4:	2101      	movs	r1, #1
 80051b6:	438a      	bics	r2, r1
 80051b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ba:	f7fe fc31 	bl	8003a20 <HAL_GetTick>
 80051be:	0003      	movs	r3, r0
 80051c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051c4:	f7fe fc2c 	bl	8003a20 <HAL_GetTick>
 80051c8:	0002      	movs	r2, r0
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e272      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d6:	4b47      	ldr	r3, [pc, #284]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2202      	movs	r2, #2
 80051dc:	4013      	ands	r3, r2
 80051de:	d1f1      	bne.n	80051c4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2208      	movs	r2, #8
 80051e6:	4013      	ands	r3, r2
 80051e8:	d036      	beq.n	8005258 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d019      	beq.n	8005226 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f2:	4b40      	ldr	r3, [pc, #256]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 80051f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051f6:	4b3f      	ldr	r3, [pc, #252]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 80051f8:	2101      	movs	r1, #1
 80051fa:	430a      	orrs	r2, r1
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fe:	f7fe fc0f 	bl	8003a20 <HAL_GetTick>
 8005202:	0003      	movs	r3, r0
 8005204:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005208:	f7fe fc0a 	bl	8003a20 <HAL_GetTick>
 800520c:	0002      	movs	r2, r0
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e250      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521a:	4b36      	ldr	r3, [pc, #216]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	2202      	movs	r2, #2
 8005220:	4013      	ands	r3, r2
 8005222:	d0f1      	beq.n	8005208 <HAL_RCC_OscConfig+0x24c>
 8005224:	e018      	b.n	8005258 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005226:	4b33      	ldr	r3, [pc, #204]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800522a:	4b32      	ldr	r3, [pc, #200]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800522c:	2101      	movs	r1, #1
 800522e:	438a      	bics	r2, r1
 8005230:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005232:	f7fe fbf5 	bl	8003a20 <HAL_GetTick>
 8005236:	0003      	movs	r3, r0
 8005238:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800523c:	f7fe fbf0 	bl	8003a20 <HAL_GetTick>
 8005240:	0002      	movs	r2, r0
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e236      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800524e:	4b29      	ldr	r3, [pc, #164]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2202      	movs	r2, #2
 8005254:	4013      	ands	r3, r2
 8005256:	d1f1      	bne.n	800523c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2204      	movs	r2, #4
 800525e:	4013      	ands	r3, r2
 8005260:	d100      	bne.n	8005264 <HAL_RCC_OscConfig+0x2a8>
 8005262:	e0b5      	b.n	80053d0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005264:	201f      	movs	r0, #31
 8005266:	183b      	adds	r3, r7, r0
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800526c:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	055b      	lsls	r3, r3, #21
 8005274:	4013      	ands	r3, r2
 8005276:	d110      	bne.n	800529a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005278:	4b1e      	ldr	r3, [pc, #120]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	4b1d      	ldr	r3, [pc, #116]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 800527e:	2180      	movs	r1, #128	; 0x80
 8005280:	0549      	lsls	r1, r1, #21
 8005282:	430a      	orrs	r2, r1
 8005284:	61da      	str	r2, [r3, #28]
 8005286:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	055b      	lsls	r3, r3, #21
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005294:	183b      	adds	r3, r7, r0
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800529a:	4b19      	ldr	r3, [pc, #100]	; (8005300 <HAL_RCC_OscConfig+0x344>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	4013      	ands	r3, r2
 80052a4:	d11a      	bne.n	80052dc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052a6:	4b16      	ldr	r3, [pc, #88]	; (8005300 <HAL_RCC_OscConfig+0x344>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b15      	ldr	r3, [pc, #84]	; (8005300 <HAL_RCC_OscConfig+0x344>)
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	0049      	lsls	r1, r1, #1
 80052b0:	430a      	orrs	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052b4:	f7fe fbb4 	bl	8003a20 <HAL_GetTick>
 80052b8:	0003      	movs	r3, r0
 80052ba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052be:	f7fe fbaf 	bl	8003a20 <HAL_GetTick>
 80052c2:	0002      	movs	r2, r0
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b64      	cmp	r3, #100	; 0x64
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e1f5      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <HAL_RCC_OscConfig+0x344>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	4013      	ands	r3, r2
 80052da:	d0f0      	beq.n	80052be <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d10f      	bne.n	8005304 <HAL_RCC_OscConfig+0x348>
 80052e4:	4b03      	ldr	r3, [pc, #12]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 80052e6:	6a1a      	ldr	r2, [r3, #32]
 80052e8:	4b02      	ldr	r3, [pc, #8]	; (80052f4 <HAL_RCC_OscConfig+0x338>)
 80052ea:	2101      	movs	r1, #1
 80052ec:	430a      	orrs	r2, r1
 80052ee:	621a      	str	r2, [r3, #32]
 80052f0:	e036      	b.n	8005360 <HAL_RCC_OscConfig+0x3a4>
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	40021000 	.word	0x40021000
 80052f8:	fffeffff 	.word	0xfffeffff
 80052fc:	fffbffff 	.word	0xfffbffff
 8005300:	40007000 	.word	0x40007000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10c      	bne.n	8005326 <HAL_RCC_OscConfig+0x36a>
 800530c:	4bca      	ldr	r3, [pc, #808]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 800530e:	6a1a      	ldr	r2, [r3, #32]
 8005310:	4bc9      	ldr	r3, [pc, #804]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005312:	2101      	movs	r1, #1
 8005314:	438a      	bics	r2, r1
 8005316:	621a      	str	r2, [r3, #32]
 8005318:	4bc7      	ldr	r3, [pc, #796]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 800531a:	6a1a      	ldr	r2, [r3, #32]
 800531c:	4bc6      	ldr	r3, [pc, #792]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 800531e:	2104      	movs	r1, #4
 8005320:	438a      	bics	r2, r1
 8005322:	621a      	str	r2, [r3, #32]
 8005324:	e01c      	b.n	8005360 <HAL_RCC_OscConfig+0x3a4>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b05      	cmp	r3, #5
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x38c>
 800532e:	4bc2      	ldr	r3, [pc, #776]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005330:	6a1a      	ldr	r2, [r3, #32]
 8005332:	4bc1      	ldr	r3, [pc, #772]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005334:	2104      	movs	r1, #4
 8005336:	430a      	orrs	r2, r1
 8005338:	621a      	str	r2, [r3, #32]
 800533a:	4bbf      	ldr	r3, [pc, #764]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 800533c:	6a1a      	ldr	r2, [r3, #32]
 800533e:	4bbe      	ldr	r3, [pc, #760]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005340:	2101      	movs	r1, #1
 8005342:	430a      	orrs	r2, r1
 8005344:	621a      	str	r2, [r3, #32]
 8005346:	e00b      	b.n	8005360 <HAL_RCC_OscConfig+0x3a4>
 8005348:	4bbb      	ldr	r3, [pc, #748]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	4bba      	ldr	r3, [pc, #744]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 800534e:	2101      	movs	r1, #1
 8005350:	438a      	bics	r2, r1
 8005352:	621a      	str	r2, [r3, #32]
 8005354:	4bb8      	ldr	r3, [pc, #736]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	4bb7      	ldr	r3, [pc, #732]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 800535a:	2104      	movs	r1, #4
 800535c:	438a      	bics	r2, r1
 800535e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d014      	beq.n	8005392 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005368:	f7fe fb5a 	bl	8003a20 <HAL_GetTick>
 800536c:	0003      	movs	r3, r0
 800536e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005370:	e009      	b.n	8005386 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7fe fb55 	bl	8003a20 <HAL_GetTick>
 8005376:	0002      	movs	r2, r0
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	4aaf      	ldr	r2, [pc, #700]	; (800563c <HAL_RCC_OscConfig+0x680>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e19a      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005386:	4bac      	ldr	r3, [pc, #688]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	2202      	movs	r2, #2
 800538c:	4013      	ands	r3, r2
 800538e:	d0f0      	beq.n	8005372 <HAL_RCC_OscConfig+0x3b6>
 8005390:	e013      	b.n	80053ba <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005392:	f7fe fb45 	bl	8003a20 <HAL_GetTick>
 8005396:	0003      	movs	r3, r0
 8005398:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800539a:	e009      	b.n	80053b0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fe fb40 	bl	8003a20 <HAL_GetTick>
 80053a0:	0002      	movs	r2, r0
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	4aa5      	ldr	r2, [pc, #660]	; (800563c <HAL_RCC_OscConfig+0x680>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e185      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b0:	4ba1      	ldr	r3, [pc, #644]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	2202      	movs	r2, #2
 80053b6:	4013      	ands	r3, r2
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053ba:	231f      	movs	r3, #31
 80053bc:	18fb      	adds	r3, r7, r3
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d105      	bne.n	80053d0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c4:	4b9c      	ldr	r3, [pc, #624]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	4b9b      	ldr	r3, [pc, #620]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80053ca:	499d      	ldr	r1, [pc, #628]	; (8005640 <HAL_RCC_OscConfig+0x684>)
 80053cc:	400a      	ands	r2, r1
 80053ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2210      	movs	r2, #16
 80053d6:	4013      	ands	r3, r2
 80053d8:	d063      	beq.n	80054a2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d12a      	bne.n	8005438 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80053e2:	4b95      	ldr	r3, [pc, #596]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80053e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e6:	4b94      	ldr	r3, [pc, #592]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80053e8:	2104      	movs	r1, #4
 80053ea:	430a      	orrs	r2, r1
 80053ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80053ee:	4b92      	ldr	r3, [pc, #584]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80053f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053f2:	4b91      	ldr	r3, [pc, #580]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80053f4:	2101      	movs	r1, #1
 80053f6:	430a      	orrs	r2, r1
 80053f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053fa:	f7fe fb11 	bl	8003a20 <HAL_GetTick>
 80053fe:	0003      	movs	r3, r0
 8005400:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005404:	f7fe fb0c 	bl	8003a20 <HAL_GetTick>
 8005408:	0002      	movs	r2, r0
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e152      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005416:	4b88      	ldr	r3, [pc, #544]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	2202      	movs	r2, #2
 800541c:	4013      	ands	r3, r2
 800541e:	d0f1      	beq.n	8005404 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005420:	4b85      	ldr	r3, [pc, #532]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005424:	22f8      	movs	r2, #248	; 0xf8
 8005426:	4393      	bics	r3, r2
 8005428:	0019      	movs	r1, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	00da      	lsls	r2, r3, #3
 8005430:	4b81      	ldr	r3, [pc, #516]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005432:	430a      	orrs	r2, r1
 8005434:	635a      	str	r2, [r3, #52]	; 0x34
 8005436:	e034      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	3305      	adds	r3, #5
 800543e:	d111      	bne.n	8005464 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005440:	4b7d      	ldr	r3, [pc, #500]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005444:	4b7c      	ldr	r3, [pc, #496]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005446:	2104      	movs	r1, #4
 8005448:	438a      	bics	r2, r1
 800544a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800544c:	4b7a      	ldr	r3, [pc, #488]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 800544e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005450:	22f8      	movs	r2, #248	; 0xf8
 8005452:	4393      	bics	r3, r2
 8005454:	0019      	movs	r1, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	00da      	lsls	r2, r3, #3
 800545c:	4b76      	ldr	r3, [pc, #472]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 800545e:	430a      	orrs	r2, r1
 8005460:	635a      	str	r2, [r3, #52]	; 0x34
 8005462:	e01e      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005464:	4b74      	ldr	r3, [pc, #464]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005468:	4b73      	ldr	r3, [pc, #460]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 800546a:	2104      	movs	r1, #4
 800546c:	430a      	orrs	r2, r1
 800546e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005470:	4b71      	ldr	r3, [pc, #452]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005474:	4b70      	ldr	r3, [pc, #448]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005476:	2101      	movs	r1, #1
 8005478:	438a      	bics	r2, r1
 800547a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800547c:	f7fe fad0 	bl	8003a20 <HAL_GetTick>
 8005480:	0003      	movs	r3, r0
 8005482:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005484:	e008      	b.n	8005498 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005486:	f7fe facb 	bl	8003a20 <HAL_GetTick>
 800548a:	0002      	movs	r2, r0
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e111      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005498:	4b67      	ldr	r3, [pc, #412]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	2202      	movs	r2, #2
 800549e:	4013      	ands	r3, r2
 80054a0:	d1f1      	bne.n	8005486 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2220      	movs	r2, #32
 80054a8:	4013      	ands	r3, r2
 80054aa:	d05c      	beq.n	8005566 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80054ac:	4b62      	ldr	r3, [pc, #392]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	220c      	movs	r2, #12
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b0c      	cmp	r3, #12
 80054b6:	d00e      	beq.n	80054d6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80054b8:	4b5f      	ldr	r3, [pc, #380]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	220c      	movs	r2, #12
 80054be:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d114      	bne.n	80054ee <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80054c4:	4b5c      	ldr	r3, [pc, #368]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	23c0      	movs	r3, #192	; 0xc0
 80054ca:	025b      	lsls	r3, r3, #9
 80054cc:	401a      	ands	r2, r3
 80054ce:	23c0      	movs	r3, #192	; 0xc0
 80054d0:	025b      	lsls	r3, r3, #9
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d10b      	bne.n	80054ee <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80054d6:	4b58      	ldr	r3, [pc, #352]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80054d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	025b      	lsls	r3, r3, #9
 80054de:	4013      	ands	r3, r2
 80054e0:	d040      	beq.n	8005564 <HAL_RCC_OscConfig+0x5a8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d03c      	beq.n	8005564 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e0e6      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01b      	beq.n	800552e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80054f6:	4b50      	ldr	r3, [pc, #320]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80054f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fa:	4b4f      	ldr	r3, [pc, #316]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80054fc:	2180      	movs	r1, #128	; 0x80
 80054fe:	0249      	lsls	r1, r1, #9
 8005500:	430a      	orrs	r2, r1
 8005502:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fe fa8c 	bl	8003a20 <HAL_GetTick>
 8005508:	0003      	movs	r3, r0
 800550a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800550e:	f7fe fa87 	bl	8003a20 <HAL_GetTick>
 8005512:	0002      	movs	r2, r0
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e0cd      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005520:	4b45      	ldr	r3, [pc, #276]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	025b      	lsls	r3, r3, #9
 8005528:	4013      	ands	r3, r2
 800552a:	d0f0      	beq.n	800550e <HAL_RCC_OscConfig+0x552>
 800552c:	e01b      	b.n	8005566 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800552e:	4b42      	ldr	r3, [pc, #264]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005532:	4b41      	ldr	r3, [pc, #260]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005534:	4943      	ldr	r1, [pc, #268]	; (8005644 <HAL_RCC_OscConfig+0x688>)
 8005536:	400a      	ands	r2, r1
 8005538:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553a:	f7fe fa71 	bl	8003a20 <HAL_GetTick>
 800553e:	0003      	movs	r3, r0
 8005540:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005544:	f7fe fa6c 	bl	8003a20 <HAL_GetTick>
 8005548:	0002      	movs	r2, r0
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e0b2      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005556:	4b38      	ldr	r3, [pc, #224]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	025b      	lsls	r3, r3, #9
 800555e:	4013      	ands	r3, r2
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x588>
 8005562:	e000      	b.n	8005566 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005564:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	2b00      	cmp	r3, #0
 800556c:	d100      	bne.n	8005570 <HAL_RCC_OscConfig+0x5b4>
 800556e:	e0a4      	b.n	80056ba <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005570:	4b31      	ldr	r3, [pc, #196]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	220c      	movs	r2, #12
 8005576:	4013      	ands	r3, r2
 8005578:	2b08      	cmp	r3, #8
 800557a:	d100      	bne.n	800557e <HAL_RCC_OscConfig+0x5c2>
 800557c:	e078      	b.n	8005670 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	2b02      	cmp	r3, #2
 8005584:	d14c      	bne.n	8005620 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005586:	4b2c      	ldr	r3, [pc, #176]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b2b      	ldr	r3, [pc, #172]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 800558c:	492e      	ldr	r1, [pc, #184]	; (8005648 <HAL_RCC_OscConfig+0x68c>)
 800558e:	400a      	ands	r2, r1
 8005590:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005592:	f7fe fa45 	bl	8003a20 <HAL_GetTick>
 8005596:	0003      	movs	r3, r0
 8005598:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800559c:	f7fe fa40 	bl	8003a20 <HAL_GetTick>
 80055a0:	0002      	movs	r2, r0
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e086      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055ae:	4b22      	ldr	r3, [pc, #136]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	2380      	movs	r3, #128	; 0x80
 80055b4:	049b      	lsls	r3, r3, #18
 80055b6:	4013      	ands	r3, r2
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055ba:	4b1f      	ldr	r3, [pc, #124]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	220f      	movs	r2, #15
 80055c0:	4393      	bics	r3, r2
 80055c2:	0019      	movs	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c8:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80055ca:	430a      	orrs	r2, r1
 80055cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80055ce:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	4a1e      	ldr	r2, [pc, #120]	; (800564c <HAL_RCC_OscConfig+0x690>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	0019      	movs	r1, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	431a      	orrs	r2, r3
 80055e2:	4b15      	ldr	r3, [pc, #84]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80055e4:	430a      	orrs	r2, r1
 80055e6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e8:	4b13      	ldr	r3, [pc, #76]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4b12      	ldr	r3, [pc, #72]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 80055ee:	2180      	movs	r1, #128	; 0x80
 80055f0:	0449      	lsls	r1, r1, #17
 80055f2:	430a      	orrs	r2, r1
 80055f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f6:	f7fe fa13 	bl	8003a20 <HAL_GetTick>
 80055fa:	0003      	movs	r3, r0
 80055fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005600:	f7fe fa0e 	bl	8003a20 <HAL_GetTick>
 8005604:	0002      	movs	r2, r0
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e054      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005612:	4b09      	ldr	r3, [pc, #36]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	2380      	movs	r3, #128	; 0x80
 8005618:	049b      	lsls	r3, r3, #18
 800561a:	4013      	ands	r3, r2
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x644>
 800561e:	e04c      	b.n	80056ba <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005620:	4b05      	ldr	r3, [pc, #20]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	4b04      	ldr	r3, [pc, #16]	; (8005638 <HAL_RCC_OscConfig+0x67c>)
 8005626:	4908      	ldr	r1, [pc, #32]	; (8005648 <HAL_RCC_OscConfig+0x68c>)
 8005628:	400a      	ands	r2, r1
 800562a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fe f9f8 	bl	8003a20 <HAL_GetTick>
 8005630:	0003      	movs	r3, r0
 8005632:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005634:	e015      	b.n	8005662 <HAL_RCC_OscConfig+0x6a6>
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	40021000 	.word	0x40021000
 800563c:	00001388 	.word	0x00001388
 8005640:	efffffff 	.word	0xefffffff
 8005644:	fffeffff 	.word	0xfffeffff
 8005648:	feffffff 	.word	0xfeffffff
 800564c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005650:	f7fe f9e6 	bl	8003a20 <HAL_GetTick>
 8005654:	0002      	movs	r2, r0
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e02c      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005662:	4b18      	ldr	r3, [pc, #96]	; (80056c4 <HAL_RCC_OscConfig+0x708>)
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	049b      	lsls	r3, r3, #18
 800566a:	4013      	ands	r3, r2
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0x694>
 800566e:	e024      	b.n	80056ba <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e01f      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800567c:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <HAL_RCC_OscConfig+0x708>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005682:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <HAL_RCC_OscConfig+0x708>)
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	23c0      	movs	r3, #192	; 0xc0
 800568c:	025b      	lsls	r3, r3, #9
 800568e:	401a      	ands	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005694:	429a      	cmp	r2, r3
 8005696:	d10e      	bne.n	80056b6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	220f      	movs	r2, #15
 800569c:	401a      	ands	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d107      	bne.n	80056b6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	23f0      	movs	r3, #240	; 0xf0
 80056aa:	039b      	lsls	r3, r3, #14
 80056ac:	401a      	ands	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d001      	beq.n	80056ba <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	0018      	movs	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	b008      	add	sp, #32
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40021000 	.word	0x40021000

080056c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e0bf      	b.n	800585c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056dc:	4b61      	ldr	r3, [pc, #388]	; (8005864 <HAL_RCC_ClockConfig+0x19c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2201      	movs	r2, #1
 80056e2:	4013      	ands	r3, r2
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d911      	bls.n	800570e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ea:	4b5e      	ldr	r3, [pc, #376]	; (8005864 <HAL_RCC_ClockConfig+0x19c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2201      	movs	r2, #1
 80056f0:	4393      	bics	r3, r2
 80056f2:	0019      	movs	r1, r3
 80056f4:	4b5b      	ldr	r3, [pc, #364]	; (8005864 <HAL_RCC_ClockConfig+0x19c>)
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fc:	4b59      	ldr	r3, [pc, #356]	; (8005864 <HAL_RCC_ClockConfig+0x19c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2201      	movs	r2, #1
 8005702:	4013      	ands	r3, r2
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d001      	beq.n	800570e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e0a6      	b.n	800585c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2202      	movs	r2, #2
 8005714:	4013      	ands	r3, r2
 8005716:	d015      	beq.n	8005744 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2204      	movs	r2, #4
 800571e:	4013      	ands	r3, r2
 8005720:	d006      	beq.n	8005730 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005722:	4b51      	ldr	r3, [pc, #324]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4b50      	ldr	r3, [pc, #320]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 8005728:	21e0      	movs	r1, #224	; 0xe0
 800572a:	00c9      	lsls	r1, r1, #3
 800572c:	430a      	orrs	r2, r1
 800572e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005730:	4b4d      	ldr	r3, [pc, #308]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	22f0      	movs	r2, #240	; 0xf0
 8005736:	4393      	bics	r3, r2
 8005738:	0019      	movs	r1, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	4b4a      	ldr	r3, [pc, #296]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 8005740:	430a      	orrs	r2, r1
 8005742:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2201      	movs	r2, #1
 800574a:	4013      	ands	r3, r2
 800574c:	d04c      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d107      	bne.n	8005766 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005756:	4b44      	ldr	r3, [pc, #272]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	2380      	movs	r3, #128	; 0x80
 800575c:	029b      	lsls	r3, r3, #10
 800575e:	4013      	ands	r3, r2
 8005760:	d120      	bne.n	80057a4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e07a      	b.n	800585c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b02      	cmp	r3, #2
 800576c:	d107      	bne.n	800577e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576e:	4b3e      	ldr	r3, [pc, #248]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	2380      	movs	r3, #128	; 0x80
 8005774:	049b      	lsls	r3, r3, #18
 8005776:	4013      	ands	r3, r2
 8005778:	d114      	bne.n	80057a4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e06e      	b.n	800585c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b03      	cmp	r3, #3
 8005784:	d107      	bne.n	8005796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005786:	4b38      	ldr	r3, [pc, #224]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 8005788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800578a:	2380      	movs	r3, #128	; 0x80
 800578c:	025b      	lsls	r3, r3, #9
 800578e:	4013      	ands	r3, r2
 8005790:	d108      	bne.n	80057a4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e062      	b.n	800585c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005796:	4b34      	ldr	r3, [pc, #208]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2202      	movs	r2, #2
 800579c:	4013      	ands	r3, r2
 800579e:	d101      	bne.n	80057a4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e05b      	b.n	800585c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057a4:	4b30      	ldr	r3, [pc, #192]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2203      	movs	r2, #3
 80057aa:	4393      	bics	r3, r2
 80057ac:	0019      	movs	r1, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	4b2d      	ldr	r3, [pc, #180]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057b8:	f7fe f932 	bl	8003a20 <HAL_GetTick>
 80057bc:	0003      	movs	r3, r0
 80057be:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057c0:	e009      	b.n	80057d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c2:	f7fe f92d 	bl	8003a20 <HAL_GetTick>
 80057c6:	0002      	movs	r2, r0
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	4a27      	ldr	r2, [pc, #156]	; (800586c <HAL_RCC_ClockConfig+0x1a4>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e042      	b.n	800585c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	220c      	movs	r2, #12
 80057dc:	401a      	ands	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d1ec      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057e8:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <HAL_RCC_ClockConfig+0x19c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2201      	movs	r2, #1
 80057ee:	4013      	ands	r3, r2
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d211      	bcs.n	800581a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f6:	4b1b      	ldr	r3, [pc, #108]	; (8005864 <HAL_RCC_ClockConfig+0x19c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2201      	movs	r2, #1
 80057fc:	4393      	bics	r3, r2
 80057fe:	0019      	movs	r1, r3
 8005800:	4b18      	ldr	r3, [pc, #96]	; (8005864 <HAL_RCC_ClockConfig+0x19c>)
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005808:	4b16      	ldr	r3, [pc, #88]	; (8005864 <HAL_RCC_ClockConfig+0x19c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2201      	movs	r2, #1
 800580e:	4013      	ands	r3, r2
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d001      	beq.n	800581a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e020      	b.n	800585c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2204      	movs	r2, #4
 8005820:	4013      	ands	r3, r2
 8005822:	d009      	beq.n	8005838 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005824:	4b10      	ldr	r3, [pc, #64]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	4a11      	ldr	r2, [pc, #68]	; (8005870 <HAL_RCC_ClockConfig+0x1a8>)
 800582a:	4013      	ands	r3, r2
 800582c:	0019      	movs	r1, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 8005834:	430a      	orrs	r2, r1
 8005836:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005838:	f000 f820 	bl	800587c <HAL_RCC_GetSysClockFreq>
 800583c:	0001      	movs	r1, r0
 800583e:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <HAL_RCC_ClockConfig+0x1a0>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	091b      	lsrs	r3, r3, #4
 8005844:	220f      	movs	r2, #15
 8005846:	4013      	ands	r3, r2
 8005848:	4a0a      	ldr	r2, [pc, #40]	; (8005874 <HAL_RCC_ClockConfig+0x1ac>)
 800584a:	5cd3      	ldrb	r3, [r2, r3]
 800584c:	000a      	movs	r2, r1
 800584e:	40da      	lsrs	r2, r3
 8005850:	4b09      	ldr	r3, [pc, #36]	; (8005878 <HAL_RCC_ClockConfig+0x1b0>)
 8005852:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005854:	2003      	movs	r0, #3
 8005856:	f7fe f89d 	bl	8003994 <HAL_InitTick>
  
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	0018      	movs	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	b004      	add	sp, #16
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40022000 	.word	0x40022000
 8005868:	40021000 	.word	0x40021000
 800586c:	00001388 	.word	0x00001388
 8005870:	fffff8ff 	.word	0xfffff8ff
 8005874:	08007078 	.word	0x08007078
 8005878:	20000000 	.word	0x20000000

0800587c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b08f      	sub	sp, #60	; 0x3c
 8005880:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005882:	2314      	movs	r3, #20
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	4a38      	ldr	r2, [pc, #224]	; (8005968 <HAL_RCC_GetSysClockFreq+0xec>)
 8005888:	ca13      	ldmia	r2!, {r0, r1, r4}
 800588a:	c313      	stmia	r3!, {r0, r1, r4}
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005890:	1d3b      	adds	r3, r7, #4
 8005892:	4a36      	ldr	r2, [pc, #216]	; (800596c <HAL_RCC_GetSysClockFreq+0xf0>)
 8005894:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005896:	c313      	stmia	r3!, {r0, r1, r4}
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058a0:	2300      	movs	r3, #0
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a4:	2300      	movs	r3, #0
 80058a6:	637b      	str	r3, [r7, #52]	; 0x34
 80058a8:	2300      	movs	r3, #0
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80058b0:	4b2f      	ldr	r3, [pc, #188]	; (8005970 <HAL_RCC_GetSysClockFreq+0xf4>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	220c      	movs	r2, #12
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b0c      	cmp	r3, #12
 80058be:	d047      	beq.n	8005950 <HAL_RCC_GetSysClockFreq+0xd4>
 80058c0:	d849      	bhi.n	8005956 <HAL_RCC_GetSysClockFreq+0xda>
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d002      	beq.n	80058cc <HAL_RCC_GetSysClockFreq+0x50>
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d003      	beq.n	80058d2 <HAL_RCC_GetSysClockFreq+0x56>
 80058ca:	e044      	b.n	8005956 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058cc:	4b29      	ldr	r3, [pc, #164]	; (8005974 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058d0:	e044      	b.n	800595c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	0c9b      	lsrs	r3, r3, #18
 80058d6:	220f      	movs	r2, #15
 80058d8:	4013      	ands	r3, r2
 80058da:	2214      	movs	r2, #20
 80058dc:	18ba      	adds	r2, r7, r2
 80058de:	5cd3      	ldrb	r3, [r2, r3]
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80058e2:	4b23      	ldr	r3, [pc, #140]	; (8005970 <HAL_RCC_GetSysClockFreq+0xf4>)
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	220f      	movs	r2, #15
 80058e8:	4013      	ands	r3, r2
 80058ea:	1d3a      	adds	r2, r7, #4
 80058ec:	5cd3      	ldrb	r3, [r2, r3]
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f2:	23c0      	movs	r3, #192	; 0xc0
 80058f4:	025b      	lsls	r3, r3, #9
 80058f6:	401a      	ands	r2, r3
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	025b      	lsls	r3, r3, #9
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d109      	bne.n	8005914 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005902:	481c      	ldr	r0, [pc, #112]	; (8005974 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005904:	f7fa fbfe 	bl	8000104 <__udivsi3>
 8005908:	0003      	movs	r3, r0
 800590a:	001a      	movs	r2, r3
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	4353      	muls	r3, r2
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
 8005912:	e01a      	b.n	800594a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005916:	23c0      	movs	r3, #192	; 0xc0
 8005918:	025b      	lsls	r3, r3, #9
 800591a:	401a      	ands	r2, r3
 800591c:	23c0      	movs	r3, #192	; 0xc0
 800591e:	025b      	lsls	r3, r3, #9
 8005920:	429a      	cmp	r2, r3
 8005922:	d109      	bne.n	8005938 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005926:	4814      	ldr	r0, [pc, #80]	; (8005978 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005928:	f7fa fbec 	bl	8000104 <__udivsi3>
 800592c:	0003      	movs	r3, r0
 800592e:	001a      	movs	r2, r3
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	4353      	muls	r3, r2
 8005934:	637b      	str	r3, [r7, #52]	; 0x34
 8005936:	e008      	b.n	800594a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800593a:	4810      	ldr	r0, [pc, #64]	; (800597c <HAL_RCC_GetSysClockFreq+0x100>)
 800593c:	f7fa fbe2 	bl	8000104 <__udivsi3>
 8005940:	0003      	movs	r3, r0
 8005942:	001a      	movs	r2, r3
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	4353      	muls	r3, r2
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800594e:	e005      	b.n	800595c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005952:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005954:	e002      	b.n	800595c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005956:	4b09      	ldr	r3, [pc, #36]	; (800597c <HAL_RCC_GetSysClockFreq+0x100>)
 8005958:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800595a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b00f      	add	sp, #60	; 0x3c
 8005964:	bd90      	pop	{r4, r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	08007018 	.word	0x08007018
 800596c:	08007028 	.word	0x08007028
 8005970:	40021000 	.word	0x40021000
 8005974:	00b71b00 	.word	0x00b71b00
 8005978:	02dc6c00 	.word	0x02dc6c00
 800597c:	007a1200 	.word	0x007a1200

08005980 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e0a8      	b.n	8005ae4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	2382      	movs	r3, #130	; 0x82
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d009      	beq.n	80059ba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	61da      	str	r2, [r3, #28]
 80059ac:	e005      	b.n	80059ba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	225d      	movs	r2, #93	; 0x5d
 80059c4:	5c9b      	ldrb	r3, [r3, r2]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d107      	bne.n	80059dc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	225c      	movs	r2, #92	; 0x5c
 80059d0:	2100      	movs	r1, #0
 80059d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	0018      	movs	r0, r3
 80059d8:	f7fd fee2 	bl	80037a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	225d      	movs	r2, #93	; 0x5d
 80059e0:	2102      	movs	r1, #2
 80059e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2140      	movs	r1, #64	; 0x40
 80059f0:	438a      	bics	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	23e0      	movs	r3, #224	; 0xe0
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d902      	bls.n	8005a06 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e002      	b.n	8005a0c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a06:	2380      	movs	r3, #128	; 0x80
 8005a08:	015b      	lsls	r3, r3, #5
 8005a0a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	23f0      	movs	r3, #240	; 0xf0
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d008      	beq.n	8005a2a <HAL_SPI_Init+0xaa>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	23e0      	movs	r3, #224	; 0xe0
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d002      	beq.n	8005a2a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	2382      	movs	r3, #130	; 0x82
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	401a      	ands	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6899      	ldr	r1, [r3, #8]
 8005a38:	2384      	movs	r3, #132	; 0x84
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	400b      	ands	r3, r1
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2102      	movs	r1, #2
 8005a46:	400b      	ands	r3, r1
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	2101      	movs	r1, #1
 8005a50:	400b      	ands	r3, r1
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6999      	ldr	r1, [r3, #24]
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	400b      	ands	r3, r1
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	2138      	movs	r1, #56	; 0x38
 8005a66:	400b      	ands	r3, r1
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	2180      	movs	r1, #128	; 0x80
 8005a70:	400b      	ands	r3, r1
 8005a72:	431a      	orrs	r2, r3
 8005a74:	0011      	movs	r1, r2
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a7a:	2380      	movs	r3, #128	; 0x80
 8005a7c:	019b      	lsls	r3, r3, #6
 8005a7e:	401a      	ands	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	0c1b      	lsrs	r3, r3, #16
 8005a8e:	2204      	movs	r2, #4
 8005a90:	401a      	ands	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	2110      	movs	r1, #16
 8005a98:	400b      	ands	r3, r1
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa0:	2108      	movs	r1, #8
 8005aa2:	400b      	ands	r3, r1
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68d9      	ldr	r1, [r3, #12]
 8005aaa:	23f0      	movs	r3, #240	; 0xf0
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	400b      	ands	r3, r1
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	0011      	movs	r1, r2
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	015b      	lsls	r3, r3, #5
 8005aba:	401a      	ands	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4907      	ldr	r1, [pc, #28]	; (8005aec <HAL_SPI_Init+0x16c>)
 8005ad0:	400a      	ands	r2, r1
 8005ad2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	225d      	movs	r2, #93	; 0x5d
 8005ade:	2101      	movs	r1, #1
 8005ae0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b004      	add	sp, #16
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	fffff7ff 	.word	0xfffff7ff

08005af0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	001a      	movs	r2, r3
 8005afe:	1cbb      	adds	r3, r7, #2
 8005b00:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b02:	2301      	movs	r3, #1
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b06:	2323      	movs	r3, #35	; 0x23
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	225c      	movs	r2, #92	; 0x5c
 8005b12:	5c9b      	ldrb	r3, [r3, r2]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x2c>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e1b5      	b.n	8005e88 <HAL_SPI_TransmitReceive+0x398>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	225c      	movs	r2, #92	; 0x5c
 8005b20:	2101      	movs	r1, #1
 8005b22:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b24:	f7fd ff7c 	bl	8003a20 <HAL_GetTick>
 8005b28:	0003      	movs	r3, r0
 8005b2a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b2c:	201b      	movs	r0, #27
 8005b2e:	183b      	adds	r3, r7, r0
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	215d      	movs	r1, #93	; 0x5d
 8005b34:	5c52      	ldrb	r2, [r2, r1]
 8005b36:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005b3e:	2312      	movs	r3, #18
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	1cba      	adds	r2, r7, #2
 8005b44:	8812      	ldrh	r2, [r2, #0]
 8005b46:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b48:	183b      	adds	r3, r7, r0
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d011      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0x84>
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	2382      	movs	r3, #130	; 0x82
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d107      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x7a>
 8005b62:	183b      	adds	r3, r7, r0
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d004      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005b6a:	2323      	movs	r3, #35	; 0x23
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	2202      	movs	r2, #2
 8005b70:	701a      	strb	r2, [r3, #0]
    goto error;
 8005b72:	e17e      	b.n	8005e72 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d006      	beq.n	8005b88 <HAL_SPI_TransmitReceive+0x98>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_SPI_TransmitReceive+0x98>
 8005b80:	1cbb      	adds	r3, r7, #2
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d104      	bne.n	8005b92 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005b88:	2323      	movs	r3, #35	; 0x23
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005b90:	e16f      	b.n	8005e72 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	225d      	movs	r2, #93	; 0x5d
 8005b96:	5c9b      	ldrb	r3, [r3, r2]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d003      	beq.n	8005ba6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	225d      	movs	r2, #93	; 0x5d
 8005ba2:	2105      	movs	r1, #5
 8005ba4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1cba      	adds	r2, r7, #2
 8005bb6:	2146      	movs	r1, #70	; 0x46
 8005bb8:	8812      	ldrh	r2, [r2, #0]
 8005bba:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	1cba      	adds	r2, r7, #2
 8005bc0:	2144      	movs	r1, #68	; 0x44
 8005bc2:	8812      	ldrh	r2, [r2, #0]
 8005bc4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1cba      	adds	r2, r7, #2
 8005bd0:	8812      	ldrh	r2, [r2, #0]
 8005bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	1cba      	adds	r2, r7, #2
 8005bd8:	8812      	ldrh	r2, [r2, #0]
 8005bda:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	23e0      	movs	r3, #224	; 0xe0
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d908      	bls.n	8005c06 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	49a4      	ldr	r1, [pc, #656]	; (8005e90 <HAL_SPI_TransmitReceive+0x3a0>)
 8005c00:	400a      	ands	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]
 8005c04:	e008      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2180      	movs	r1, #128	; 0x80
 8005c12:	0149      	lsls	r1, r1, #5
 8005c14:	430a      	orrs	r2, r1
 8005c16:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2240      	movs	r2, #64	; 0x40
 8005c20:	4013      	ands	r3, r2
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d007      	beq.n	8005c36 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2140      	movs	r1, #64	; 0x40
 8005c32:	430a      	orrs	r2, r1
 8005c34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	23e0      	movs	r3, #224	; 0xe0
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d800      	bhi.n	8005c44 <HAL_SPI_TransmitReceive+0x154>
 8005c42:	e07f      	b.n	8005d44 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <HAL_SPI_TransmitReceive+0x168>
 8005c4c:	2312      	movs	r3, #18
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d000      	beq.n	8005c58 <HAL_SPI_TransmitReceive+0x168>
 8005c56:	e069      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	881a      	ldrh	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	1c9a      	adds	r2, r3, #2
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c7c:	e056      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2202      	movs	r2, #2
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_SPI_TransmitReceive+0x1d4>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d016      	beq.n	8005cc4 <HAL_SPI_TransmitReceive+0x1d4>
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d113      	bne.n	8005cc4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	881a      	ldrh	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	1c9a      	adds	r2, r3, #2
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d11c      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x21c>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2246      	movs	r2, #70	; 0x46
 8005cd6:	5a9b      	ldrh	r3, [r3, r2]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d016      	beq.n	8005d0c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	b292      	uxth	r2, r2
 8005cea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	1c9a      	adds	r2, r3, #2
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2246      	movs	r2, #70	; 0x46
 8005cfa:	5a9b      	ldrh	r3, [r3, r2]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b299      	uxth	r1, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2246      	movs	r2, #70	; 0x46
 8005d06:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d0c:	f7fd fe88 	bl	8003a20 <HAL_GetTick>
 8005d10:	0002      	movs	r2, r0
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d807      	bhi.n	8005d2c <HAL_SPI_TransmitReceive+0x23c>
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	3301      	adds	r3, #1
 8005d20:	d004      	beq.n	8005d2c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005d22:	2323      	movs	r3, #35	; 0x23
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	2203      	movs	r2, #3
 8005d28:	701a      	strb	r2, [r3, #0]
        goto error;
 8005d2a:	e0a2      	b.n	8005e72 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1a3      	bne.n	8005c7e <HAL_SPI_TransmitReceive+0x18e>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2246      	movs	r2, #70	; 0x46
 8005d3a:	5a9b      	ldrh	r3, [r3, r2]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d19d      	bne.n	8005c7e <HAL_SPI_TransmitReceive+0x18e>
 8005d42:	e085      	b.n	8005e50 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <HAL_SPI_TransmitReceive+0x268>
 8005d4c:	2312      	movs	r3, #18
 8005d4e:	18fb      	adds	r3, r7, r3
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d000      	beq.n	8005d58 <HAL_SPI_TransmitReceive+0x268>
 8005d56:	e070      	b.n	8005e3a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	7812      	ldrb	r2, [r2, #0]
 8005d64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d7e:	e05c      	b.n	8005e3a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2202      	movs	r2, #2
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d11c      	bne.n	8005dc8 <HAL_SPI_TransmitReceive+0x2d8>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d017      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x2d8>
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d114      	bne.n	8005dc8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	330c      	adds	r3, #12
 8005da8:	7812      	ldrb	r2, [r2, #0]
 8005daa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d11e      	bne.n	8005e14 <HAL_SPI_TransmitReceive+0x324>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2246      	movs	r2, #70	; 0x46
 8005dda:	5a9b      	ldrh	r3, [r3, r2]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d018      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	001a      	movs	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	7812      	ldrb	r2, [r2, #0]
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2246      	movs	r2, #70	; 0x46
 8005e02:	5a9b      	ldrh	r3, [r3, r2]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b299      	uxth	r1, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2246      	movs	r2, #70	; 0x46
 8005e0e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e10:	2301      	movs	r3, #1
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e14:	f7fd fe04 	bl	8003a20 <HAL_GetTick>
 8005e18:	0002      	movs	r2, r0
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d802      	bhi.n	8005e2a <HAL_SPI_TransmitReceive+0x33a>
 8005e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e26:	3301      	adds	r3, #1
 8005e28:	d102      	bne.n	8005e30 <HAL_SPI_TransmitReceive+0x340>
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005e30:	2323      	movs	r3, #35	; 0x23
 8005e32:	18fb      	adds	r3, r7, r3
 8005e34:	2203      	movs	r2, #3
 8005e36:	701a      	strb	r2, [r3, #0]
        goto error;
 8005e38:	e01b      	b.n	8005e72 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d19d      	bne.n	8005d80 <HAL_SPI_TransmitReceive+0x290>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2246      	movs	r2, #70	; 0x46
 8005e48:	5a9b      	ldrh	r3, [r3, r2]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d197      	bne.n	8005d80 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	0018      	movs	r0, r3
 8005e58:	f000 f94c 	bl	80060f4 <SPI_EndRxTxTransaction>
 8005e5c:	1e03      	subs	r3, r0, #0
 8005e5e:	d007      	beq.n	8005e70 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005e60:	2323      	movs	r3, #35	; 0x23
 8005e62:	18fb      	adds	r3, r7, r3
 8005e64:	2201      	movs	r2, #1
 8005e66:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	661a      	str	r2, [r3, #96]	; 0x60
 8005e6e:	e000      	b.n	8005e72 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005e70:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	225d      	movs	r2, #93	; 0x5d
 8005e76:	2101      	movs	r1, #1
 8005e78:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	225c      	movs	r2, #92	; 0x5c
 8005e7e:	2100      	movs	r1, #0
 8005e80:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005e82:	2323      	movs	r3, #35	; 0x23
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	781b      	ldrb	r3, [r3, #0]
}
 8005e88:	0018      	movs	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b00a      	add	sp, #40	; 0x28
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	ffffefff 	.word	0xffffefff

08005e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	603b      	str	r3, [r7, #0]
 8005ea0:	1dfb      	adds	r3, r7, #7
 8005ea2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ea4:	f7fd fdbc 	bl	8003a20 <HAL_GetTick>
 8005ea8:	0002      	movs	r2, r0
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	1a9b      	subs	r3, r3, r2
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	18d3      	adds	r3, r2, r3
 8005eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005eb4:	f7fd fdb4 	bl	8003a20 <HAL_GetTick>
 8005eb8:	0003      	movs	r3, r0
 8005eba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ebc:	4b3a      	ldr	r3, [pc, #232]	; (8005fa8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	015b      	lsls	r3, r3, #5
 8005ec2:	0d1b      	lsrs	r3, r3, #20
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	4353      	muls	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eca:	e058      	b.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	d055      	beq.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ed2:	f7fd fda5 	bl	8003a20 <HAL_GetTick>
 8005ed6:	0002      	movs	r2, r0
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d902      	bls.n	8005ee8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d142      	bne.n	8005f6e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	21e0      	movs	r1, #224	; 0xe0
 8005ef4:	438a      	bics	r2, r1
 8005ef6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	2382      	movs	r3, #130	; 0x82
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d113      	bne.n	8005f2c <SPI_WaitFlagStateUntilTimeout+0x98>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d005      	beq.n	8005f1c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	2380      	movs	r3, #128	; 0x80
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d107      	bne.n	8005f2c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2140      	movs	r1, #64	; 0x40
 8005f28:	438a      	bics	r2, r1
 8005f2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f30:	2380      	movs	r3, #128	; 0x80
 8005f32:	019b      	lsls	r3, r3, #6
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d110      	bne.n	8005f5a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	491a      	ldr	r1, [pc, #104]	; (8005fac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005f44:	400a      	ands	r2, r1
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2180      	movs	r1, #128	; 0x80
 8005f54:	0189      	lsls	r1, r1, #6
 8005f56:	430a      	orrs	r2, r1
 8005f58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	225d      	movs	r2, #93	; 0x5d
 8005f5e:	2101      	movs	r1, #1
 8005f60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	225c      	movs	r2, #92	; 0x5c
 8005f66:	2100      	movs	r1, #0
 8005f68:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e017      	b.n	8005f9e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	425a      	negs	r2, r3
 8005f8e:	4153      	adcs	r3, r2
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	001a      	movs	r2, r3
 8005f94:	1dfb      	adds	r3, r7, #7
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d197      	bne.n	8005ecc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	b008      	add	sp, #32
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	20000000 	.word	0x20000000
 8005fac:	ffffdfff 	.word	0xffffdfff

08005fb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08a      	sub	sp, #40	; 0x28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005fbe:	2317      	movs	r3, #23
 8005fc0:	18fb      	adds	r3, r7, r3
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005fc6:	f7fd fd2b 	bl	8003a20 <HAL_GetTick>
 8005fca:	0002      	movs	r2, r0
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	1a9b      	subs	r3, r3, r2
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	18d3      	adds	r3, r2, r3
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005fd6:	f7fd fd23 	bl	8003a20 <HAL_GetTick>
 8005fda:	0003      	movs	r3, r0
 8005fdc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fe6:	4b41      	ldr	r3, [pc, #260]	; (80060ec <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	0013      	movs	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	189b      	adds	r3, r3, r2
 8005ff0:	00da      	lsls	r2, r3, #3
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	0d1b      	lsrs	r3, r3, #20
 8005ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff8:	4353      	muls	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ffc:	e068      	b.n	80060d0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	23c0      	movs	r3, #192	; 0xc0
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	429a      	cmp	r2, r3
 8006006:	d10a      	bne.n	800601e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d107      	bne.n	800601e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	2117      	movs	r1, #23
 8006016:	187b      	adds	r3, r7, r1
 8006018:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800601a:	187b      	adds	r3, r7, r1
 800601c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	3301      	adds	r3, #1
 8006022:	d055      	beq.n	80060d0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006024:	f7fd fcfc 	bl	8003a20 <HAL_GetTick>
 8006028:	0002      	movs	r2, r0
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006030:	429a      	cmp	r2, r3
 8006032:	d902      	bls.n	800603a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d142      	bne.n	80060c0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	21e0      	movs	r1, #224	; 0xe0
 8006046:	438a      	bics	r2, r1
 8006048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	2382      	movs	r3, #130	; 0x82
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	429a      	cmp	r2, r3
 8006054:	d113      	bne.n	800607e <SPI_WaitFifoStateUntilTimeout+0xce>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	2380      	movs	r3, #128	; 0x80
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	429a      	cmp	r2, r3
 8006060:	d005      	beq.n	800606e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	2380      	movs	r3, #128	; 0x80
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	429a      	cmp	r2, r3
 800606c:	d107      	bne.n	800607e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2140      	movs	r1, #64	; 0x40
 800607a:	438a      	bics	r2, r1
 800607c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	019b      	lsls	r3, r3, #6
 8006086:	429a      	cmp	r2, r3
 8006088:	d110      	bne.n	80060ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4916      	ldr	r1, [pc, #88]	; (80060f0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006096:	400a      	ands	r2, r1
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2180      	movs	r1, #128	; 0x80
 80060a6:	0189      	lsls	r1, r1, #6
 80060a8:	430a      	orrs	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	225d      	movs	r2, #93	; 0x5d
 80060b0:	2101      	movs	r1, #1
 80060b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	225c      	movs	r2, #92	; 0x5c
 80060b8:	2100      	movs	r1, #0
 80060ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e010      	b.n	80060e2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	4013      	ands	r3, r2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d18e      	bne.n	8005ffe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	0018      	movs	r0, r3
 80060e4:	46bd      	mov	sp, r7
 80060e6:	b00a      	add	sp, #40	; 0x28
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	20000000 	.word	0x20000000
 80060f0:	ffffdfff 	.word	0xffffdfff

080060f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	23c0      	movs	r3, #192	; 0xc0
 8006104:	0159      	lsls	r1, r3, #5
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	0013      	movs	r3, r2
 800610e:	2200      	movs	r2, #0
 8006110:	f7ff ff4e 	bl	8005fb0 <SPI_WaitFifoStateUntilTimeout>
 8006114:	1e03      	subs	r3, r0, #0
 8006116:	d007      	beq.n	8006128 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800611c:	2220      	movs	r2, #32
 800611e:	431a      	orrs	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e027      	b.n	8006178 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	0013      	movs	r3, r2
 8006132:	2200      	movs	r2, #0
 8006134:	2180      	movs	r1, #128	; 0x80
 8006136:	f7ff fead 	bl	8005e94 <SPI_WaitFlagStateUntilTimeout>
 800613a:	1e03      	subs	r3, r0, #0
 800613c:	d007      	beq.n	800614e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006142:	2220      	movs	r2, #32
 8006144:	431a      	orrs	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e014      	b.n	8006178 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	23c0      	movs	r3, #192	; 0xc0
 8006152:	00d9      	lsls	r1, r3, #3
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	0013      	movs	r3, r2
 800615c:	2200      	movs	r2, #0
 800615e:	f7ff ff27 	bl	8005fb0 <SPI_WaitFifoStateUntilTimeout>
 8006162:	1e03      	subs	r3, r0, #0
 8006164:	d007      	beq.n	8006176 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616a:	2220      	movs	r2, #32
 800616c:	431a      	orrs	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e000      	b.n	8006178 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	0018      	movs	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	b004      	add	sp, #16
 800617e:	bd80      	pop	{r7, pc}

08006180 <memset>:
 8006180:	0003      	movs	r3, r0
 8006182:	1882      	adds	r2, r0, r2
 8006184:	4293      	cmp	r3, r2
 8006186:	d100      	bne.n	800618a <memset+0xa>
 8006188:	4770      	bx	lr
 800618a:	7019      	strb	r1, [r3, #0]
 800618c:	3301      	adds	r3, #1
 800618e:	e7f9      	b.n	8006184 <memset+0x4>

08006190 <__errno>:
 8006190:	4b01      	ldr	r3, [pc, #4]	; (8006198 <__errno+0x8>)
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	4770      	bx	lr
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	20000058 	.word	0x20000058

0800619c <__libc_init_array>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	2600      	movs	r6, #0
 80061a0:	4c0c      	ldr	r4, [pc, #48]	; (80061d4 <__libc_init_array+0x38>)
 80061a2:	4d0d      	ldr	r5, [pc, #52]	; (80061d8 <__libc_init_array+0x3c>)
 80061a4:	1b64      	subs	r4, r4, r5
 80061a6:	10a4      	asrs	r4, r4, #2
 80061a8:	42a6      	cmp	r6, r4
 80061aa:	d109      	bne.n	80061c0 <__libc_init_array+0x24>
 80061ac:	2600      	movs	r6, #0
 80061ae:	f000 ff25 	bl	8006ffc <_init>
 80061b2:	4c0a      	ldr	r4, [pc, #40]	; (80061dc <__libc_init_array+0x40>)
 80061b4:	4d0a      	ldr	r5, [pc, #40]	; (80061e0 <__libc_init_array+0x44>)
 80061b6:	1b64      	subs	r4, r4, r5
 80061b8:	10a4      	asrs	r4, r4, #2
 80061ba:	42a6      	cmp	r6, r4
 80061bc:	d105      	bne.n	80061ca <__libc_init_array+0x2e>
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	00b3      	lsls	r3, r6, #2
 80061c2:	58eb      	ldr	r3, [r5, r3]
 80061c4:	4798      	blx	r3
 80061c6:	3601      	adds	r6, #1
 80061c8:	e7ee      	b.n	80061a8 <__libc_init_array+0xc>
 80061ca:	00b3      	lsls	r3, r6, #2
 80061cc:	58eb      	ldr	r3, [r5, r3]
 80061ce:	4798      	blx	r3
 80061d0:	3601      	adds	r6, #1
 80061d2:	e7f2      	b.n	80061ba <__libc_init_array+0x1e>
 80061d4:	080070b8 	.word	0x080070b8
 80061d8:	080070b8 	.word	0x080070b8
 80061dc:	080070bc 	.word	0x080070bc
 80061e0:	080070b8 	.word	0x080070b8

080061e4 <pow>:
 80061e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061e6:	0014      	movs	r4, r2
 80061e8:	001d      	movs	r5, r3
 80061ea:	9000      	str	r0, [sp, #0]
 80061ec:	9101      	str	r1, [sp, #4]
 80061ee:	f000 f86f 	bl	80062d0 <__ieee754_pow>
 80061f2:	0022      	movs	r2, r4
 80061f4:	0006      	movs	r6, r0
 80061f6:	000f      	movs	r7, r1
 80061f8:	002b      	movs	r3, r5
 80061fa:	0020      	movs	r0, r4
 80061fc:	0029      	movs	r1, r5
 80061fe:	f7fb fef1 	bl	8001fe4 <__aeabi_dcmpun>
 8006202:	2800      	cmp	r0, #0
 8006204:	d13f      	bne.n	8006286 <pow+0xa2>
 8006206:	9800      	ldr	r0, [sp, #0]
 8006208:	9901      	ldr	r1, [sp, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	2300      	movs	r3, #0
 800620e:	f7fa f8ff 	bl	8000410 <__aeabi_dcmpeq>
 8006212:	2800      	cmp	r0, #0
 8006214:	d019      	beq.n	800624a <pow+0x66>
 8006216:	2200      	movs	r2, #0
 8006218:	2300      	movs	r3, #0
 800621a:	0020      	movs	r0, r4
 800621c:	0029      	movs	r1, r5
 800621e:	f7fa f8f7 	bl	8000410 <__aeabi_dcmpeq>
 8006222:	2800      	cmp	r0, #0
 8006224:	d146      	bne.n	80062b4 <pow+0xd0>
 8006226:	0020      	movs	r0, r4
 8006228:	0029      	movs	r1, r5
 800622a:	f000 f849 	bl	80062c0 <finite>
 800622e:	2800      	cmp	r0, #0
 8006230:	d029      	beq.n	8006286 <pow+0xa2>
 8006232:	2200      	movs	r2, #0
 8006234:	2300      	movs	r3, #0
 8006236:	0020      	movs	r0, r4
 8006238:	0029      	movs	r1, r5
 800623a:	f7fa f8ef 	bl	800041c <__aeabi_dcmplt>
 800623e:	2800      	cmp	r0, #0
 8006240:	d021      	beq.n	8006286 <pow+0xa2>
 8006242:	f7ff ffa5 	bl	8006190 <__errno>
 8006246:	2322      	movs	r3, #34	; 0x22
 8006248:	e01c      	b.n	8006284 <pow+0xa0>
 800624a:	0030      	movs	r0, r6
 800624c:	0039      	movs	r1, r7
 800624e:	f000 f837 	bl	80062c0 <finite>
 8006252:	2800      	cmp	r0, #0
 8006254:	d11b      	bne.n	800628e <pow+0xaa>
 8006256:	9800      	ldr	r0, [sp, #0]
 8006258:	9901      	ldr	r1, [sp, #4]
 800625a:	f000 f831 	bl	80062c0 <finite>
 800625e:	2800      	cmp	r0, #0
 8006260:	d015      	beq.n	800628e <pow+0xaa>
 8006262:	0020      	movs	r0, r4
 8006264:	0029      	movs	r1, r5
 8006266:	f000 f82b 	bl	80062c0 <finite>
 800626a:	2800      	cmp	r0, #0
 800626c:	d00f      	beq.n	800628e <pow+0xaa>
 800626e:	0032      	movs	r2, r6
 8006270:	003b      	movs	r3, r7
 8006272:	0030      	movs	r0, r6
 8006274:	0039      	movs	r1, r7
 8006276:	f7fb feb5 	bl	8001fe4 <__aeabi_dcmpun>
 800627a:	2800      	cmp	r0, #0
 800627c:	d0e1      	beq.n	8006242 <pow+0x5e>
 800627e:	f7ff ff87 	bl	8006190 <__errno>
 8006282:	2321      	movs	r3, #33	; 0x21
 8006284:	6003      	str	r3, [r0, #0]
 8006286:	0030      	movs	r0, r6
 8006288:	0039      	movs	r1, r7
 800628a:	b003      	add	sp, #12
 800628c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800628e:	2200      	movs	r2, #0
 8006290:	2300      	movs	r3, #0
 8006292:	0030      	movs	r0, r6
 8006294:	0039      	movs	r1, r7
 8006296:	f7fa f8bb 	bl	8000410 <__aeabi_dcmpeq>
 800629a:	2800      	cmp	r0, #0
 800629c:	d0f3      	beq.n	8006286 <pow+0xa2>
 800629e:	9800      	ldr	r0, [sp, #0]
 80062a0:	9901      	ldr	r1, [sp, #4]
 80062a2:	f000 f80d 	bl	80062c0 <finite>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d0ed      	beq.n	8006286 <pow+0xa2>
 80062aa:	0020      	movs	r0, r4
 80062ac:	0029      	movs	r1, r5
 80062ae:	f000 f807 	bl	80062c0 <finite>
 80062b2:	e7c4      	b.n	800623e <pow+0x5a>
 80062b4:	2600      	movs	r6, #0
 80062b6:	4f01      	ldr	r7, [pc, #4]	; (80062bc <pow+0xd8>)
 80062b8:	e7e5      	b.n	8006286 <pow+0xa2>
 80062ba:	46c0      	nop			; (mov r8, r8)
 80062bc:	3ff00000 	.word	0x3ff00000

080062c0 <finite>:
 80062c0:	4b02      	ldr	r3, [pc, #8]	; (80062cc <finite+0xc>)
 80062c2:	0048      	lsls	r0, r1, #1
 80062c4:	0840      	lsrs	r0, r0, #1
 80062c6:	18c0      	adds	r0, r0, r3
 80062c8:	0fc0      	lsrs	r0, r0, #31
 80062ca:	4770      	bx	lr
 80062cc:	80100000 	.word	0x80100000

080062d0 <__ieee754_pow>:
 80062d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d2:	b095      	sub	sp, #84	; 0x54
 80062d4:	9202      	str	r2, [sp, #8]
 80062d6:	9303      	str	r3, [sp, #12]
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	9a03      	ldr	r2, [sp, #12]
 80062dc:	9304      	str	r3, [sp, #16]
 80062de:	9b02      	ldr	r3, [sp, #8]
 80062e0:	0056      	lsls	r6, r2, #1
 80062e2:	001a      	movs	r2, r3
 80062e4:	0876      	lsrs	r6, r6, #1
 80062e6:	0007      	movs	r7, r0
 80062e8:	000d      	movs	r5, r1
 80062ea:	4332      	orrs	r2, r6
 80062ec:	d119      	bne.n	8006322 <__ieee754_pow+0x52>
 80062ee:	2180      	movs	r1, #128	; 0x80
 80062f0:	0309      	lsls	r1, r1, #12
 80062f2:	4069      	eors	r1, r5
 80062f4:	0002      	movs	r2, r0
 80062f6:	000b      	movs	r3, r1
 80062f8:	1892      	adds	r2, r2, r2
 80062fa:	415b      	adcs	r3, r3
 80062fc:	4989      	ldr	r1, [pc, #548]	; (8006524 <__ieee754_pow+0x254>)
 80062fe:	428b      	cmp	r3, r1
 8006300:	d806      	bhi.n	8006310 <__ieee754_pow+0x40>
 8006302:	d001      	beq.n	8006308 <__ieee754_pow+0x38>
 8006304:	f000 fcb6 	bl	8006c74 <__ieee754_pow+0x9a4>
 8006308:	2a00      	cmp	r2, #0
 800630a:	d101      	bne.n	8006310 <__ieee754_pow+0x40>
 800630c:	f000 fcb2 	bl	8006c74 <__ieee754_pow+0x9a4>
 8006310:	9a02      	ldr	r2, [sp, #8]
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	0038      	movs	r0, r7
 8006316:	0029      	movs	r1, r5
 8006318:	f7fa f8c6 	bl	80004a8 <__aeabi_dadd>
 800631c:	9000      	str	r0, [sp, #0]
 800631e:	9101      	str	r1, [sp, #4]
 8006320:	e0ad      	b.n	800647e <__ieee754_pow+0x1ae>
 8006322:	4a81      	ldr	r2, [pc, #516]	; (8006528 <__ieee754_pow+0x258>)
 8006324:	004c      	lsls	r4, r1, #1
 8006326:	9108      	str	r1, [sp, #32]
 8006328:	9000      	str	r0, [sp, #0]
 800632a:	0864      	lsrs	r4, r4, #1
 800632c:	4294      	cmp	r4, r2
 800632e:	dc08      	bgt.n	8006342 <__ieee754_pow+0x72>
 8006330:	d101      	bne.n	8006336 <__ieee754_pow+0x66>
 8006332:	2800      	cmp	r0, #0
 8006334:	d1ec      	bne.n	8006310 <__ieee754_pow+0x40>
 8006336:	4a7c      	ldr	r2, [pc, #496]	; (8006528 <__ieee754_pow+0x258>)
 8006338:	4296      	cmp	r6, r2
 800633a:	dc02      	bgt.n	8006342 <__ieee754_pow+0x72>
 800633c:	d10c      	bne.n	8006358 <__ieee754_pow+0x88>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <__ieee754_pow+0x88>
 8006342:	4b7a      	ldr	r3, [pc, #488]	; (800652c <__ieee754_pow+0x25c>)
 8006344:	18eb      	adds	r3, r5, r3
 8006346:	433b      	orrs	r3, r7
 8006348:	d1e2      	bne.n	8006310 <__ieee754_pow+0x40>
 800634a:	2180      	movs	r1, #128	; 0x80
 800634c:	9803      	ldr	r0, [sp, #12]
 800634e:	0309      	lsls	r1, r1, #12
 8006350:	4048      	eors	r0, r1
 8006352:	0003      	movs	r3, r0
 8006354:	9a02      	ldr	r2, [sp, #8]
 8006356:	e7cf      	b.n	80062f8 <__ieee754_pow+0x28>
 8006358:	2200      	movs	r2, #0
 800635a:	9206      	str	r2, [sp, #24]
 800635c:	2d00      	cmp	r5, #0
 800635e:	da69      	bge.n	8006434 <__ieee754_pow+0x164>
 8006360:	4a73      	ldr	r2, [pc, #460]	; (8006530 <__ieee754_pow+0x260>)
 8006362:	4296      	cmp	r6, r2
 8006364:	dc64      	bgt.n	8006430 <__ieee754_pow+0x160>
 8006366:	4a73      	ldr	r2, [pc, #460]	; (8006534 <__ieee754_pow+0x264>)
 8006368:	4296      	cmp	r6, r2
 800636a:	dd11      	ble.n	8006390 <__ieee754_pow+0xc0>
 800636c:	4972      	ldr	r1, [pc, #456]	; (8006538 <__ieee754_pow+0x268>)
 800636e:	1532      	asrs	r2, r6, #20
 8006370:	1852      	adds	r2, r2, r1
 8006372:	2a14      	cmp	r2, #20
 8006374:	dd3c      	ble.n	80063f0 <__ieee754_pow+0x120>
 8006376:	2134      	movs	r1, #52	; 0x34
 8006378:	1a89      	subs	r1, r1, r2
 800637a:	9a02      	ldr	r2, [sp, #8]
 800637c:	40ca      	lsrs	r2, r1
 800637e:	0010      	movs	r0, r2
 8006380:	4088      	lsls	r0, r1
 8006382:	4298      	cmp	r0, r3
 8006384:	d104      	bne.n	8006390 <__ieee754_pow+0xc0>
 8006386:	2101      	movs	r1, #1
 8006388:	400a      	ands	r2, r1
 800638a:	1849      	adds	r1, r1, r1
 800638c:	1a8a      	subs	r2, r1, r2
 800638e:	9206      	str	r2, [sp, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d03c      	beq.n	800640e <__ieee754_pow+0x13e>
 8006394:	0038      	movs	r0, r7
 8006396:	0029      	movs	r1, r5
 8006398:	f000 fca4 	bl	8006ce4 <fabs>
 800639c:	9000      	str	r0, [sp, #0]
 800639e:	9101      	str	r1, [sp, #4]
 80063a0:	2f00      	cmp	r7, #0
 80063a2:	d000      	beq.n	80063a6 <__ieee754_pow+0xd6>
 80063a4:	e094      	b.n	80064d0 <__ieee754_pow+0x200>
 80063a6:	2c00      	cmp	r4, #0
 80063a8:	d005      	beq.n	80063b6 <__ieee754_pow+0xe6>
 80063aa:	4a64      	ldr	r2, [pc, #400]	; (800653c <__ieee754_pow+0x26c>)
 80063ac:	00ab      	lsls	r3, r5, #2
 80063ae:	089b      	lsrs	r3, r3, #2
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d000      	beq.n	80063b6 <__ieee754_pow+0xe6>
 80063b4:	e08c      	b.n	80064d0 <__ieee754_pow+0x200>
 80063b6:	9b04      	ldr	r3, [sp, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	da07      	bge.n	80063cc <__ieee754_pow+0xfc>
 80063bc:	9a00      	ldr	r2, [sp, #0]
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	2000      	movs	r0, #0
 80063c2:	495e      	ldr	r1, [pc, #376]	; (800653c <__ieee754_pow+0x26c>)
 80063c4:	f7fa fbd0 	bl	8000b68 <__aeabi_ddiv>
 80063c8:	9000      	str	r0, [sp, #0]
 80063ca:	9101      	str	r1, [sp, #4]
 80063cc:	9b08      	ldr	r3, [sp, #32]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	da55      	bge.n	800647e <__ieee754_pow+0x1ae>
 80063d2:	4b56      	ldr	r3, [pc, #344]	; (800652c <__ieee754_pow+0x25c>)
 80063d4:	18e4      	adds	r4, r4, r3
 80063d6:	9b06      	ldr	r3, [sp, #24]
 80063d8:	431c      	orrs	r4, r3
 80063da:	d000      	beq.n	80063de <__ieee754_pow+0x10e>
 80063dc:	e06c      	b.n	80064b8 <__ieee754_pow+0x1e8>
 80063de:	9a00      	ldr	r2, [sp, #0]
 80063e0:	9b01      	ldr	r3, [sp, #4]
 80063e2:	0010      	movs	r0, r2
 80063e4:	0019      	movs	r1, r3
 80063e6:	f7fb fa7b 	bl	80018e0 <__aeabi_dsub>
 80063ea:	0002      	movs	r2, r0
 80063ec:	000b      	movs	r3, r1
 80063ee:	e01c      	b.n	800642a <__ieee754_pow+0x15a>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1cf      	bne.n	8006394 <__ieee754_pow+0xc4>
 80063f4:	3314      	adds	r3, #20
 80063f6:	1a9a      	subs	r2, r3, r2
 80063f8:	0033      	movs	r3, r6
 80063fa:	4113      	asrs	r3, r2
 80063fc:	0019      	movs	r1, r3
 80063fe:	4091      	lsls	r1, r2
 8006400:	42b1      	cmp	r1, r6
 8006402:	d104      	bne.n	800640e <__ieee754_pow+0x13e>
 8006404:	2201      	movs	r2, #1
 8006406:	4013      	ands	r3, r2
 8006408:	1892      	adds	r2, r2, r2
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	9306      	str	r3, [sp, #24]
 800640e:	4b4b      	ldr	r3, [pc, #300]	; (800653c <__ieee754_pow+0x26c>)
 8006410:	429e      	cmp	r6, r3
 8006412:	d138      	bne.n	8006486 <__ieee754_pow+0x1b6>
 8006414:	0038      	movs	r0, r7
 8006416:	0029      	movs	r1, r5
 8006418:	9b04      	ldr	r3, [sp, #16]
 800641a:	9000      	str	r0, [sp, #0]
 800641c:	9101      	str	r1, [sp, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	da2d      	bge.n	800647e <__ieee754_pow+0x1ae>
 8006422:	003a      	movs	r2, r7
 8006424:	002b      	movs	r3, r5
 8006426:	2000      	movs	r0, #0
 8006428:	4944      	ldr	r1, [pc, #272]	; (800653c <__ieee754_pow+0x26c>)
 800642a:	f7fa fb9d 	bl	8000b68 <__aeabi_ddiv>
 800642e:	e775      	b.n	800631c <__ieee754_pow+0x4c>
 8006430:	2202      	movs	r2, #2
 8006432:	9206      	str	r2, [sp, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1ad      	bne.n	8006394 <__ieee754_pow+0xc4>
 8006438:	4b3b      	ldr	r3, [pc, #236]	; (8006528 <__ieee754_pow+0x258>)
 800643a:	429e      	cmp	r6, r3
 800643c:	d1e7      	bne.n	800640e <__ieee754_pow+0x13e>
 800643e:	4b3b      	ldr	r3, [pc, #236]	; (800652c <__ieee754_pow+0x25c>)
 8006440:	18e3      	adds	r3, r4, r3
 8006442:	433b      	orrs	r3, r7
 8006444:	d101      	bne.n	800644a <__ieee754_pow+0x17a>
 8006446:	f000 fc15 	bl	8006c74 <__ieee754_pow+0x9a4>
 800644a:	4b3a      	ldr	r3, [pc, #232]	; (8006534 <__ieee754_pow+0x264>)
 800644c:	429c      	cmp	r4, r3
 800644e:	dd09      	ble.n	8006464 <__ieee754_pow+0x194>
 8006450:	9b04      	ldr	r3, [sp, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	da01      	bge.n	800645a <__ieee754_pow+0x18a>
 8006456:	f000 fc11 	bl	8006c7c <__ieee754_pow+0x9ac>
 800645a:	9b02      	ldr	r3, [sp, #8]
 800645c:	9c03      	ldr	r4, [sp, #12]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	9401      	str	r4, [sp, #4]
 8006462:	e00c      	b.n	800647e <__ieee754_pow+0x1ae>
 8006464:	9b04      	ldr	r3, [sp, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	db01      	blt.n	800646e <__ieee754_pow+0x19e>
 800646a:	f000 fc07 	bl	8006c7c <__ieee754_pow+0x9ac>
 800646e:	2280      	movs	r2, #128	; 0x80
 8006470:	0612      	lsls	r2, r2, #24
 8006472:	4694      	mov	ip, r2
 8006474:	9b02      	ldr	r3, [sp, #8]
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	9b03      	ldr	r3, [sp, #12]
 800647a:	4463      	add	r3, ip
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	9800      	ldr	r0, [sp, #0]
 8006480:	9901      	ldr	r1, [sp, #4]
 8006482:	b015      	add	sp, #84	; 0x54
 8006484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006486:	2380      	movs	r3, #128	; 0x80
 8006488:	9a04      	ldr	r2, [sp, #16]
 800648a:	05db      	lsls	r3, r3, #23
 800648c:	429a      	cmp	r2, r3
 800648e:	d106      	bne.n	800649e <__ieee754_pow+0x1ce>
 8006490:	003a      	movs	r2, r7
 8006492:	002b      	movs	r3, r5
 8006494:	0038      	movs	r0, r7
 8006496:	0029      	movs	r1, r5
 8006498:	f7fa ff60 	bl	800135c <__aeabi_dmul>
 800649c:	e73e      	b.n	800631c <__ieee754_pow+0x4c>
 800649e:	4b28      	ldr	r3, [pc, #160]	; (8006540 <__ieee754_pow+0x270>)
 80064a0:	9a04      	ldr	r2, [sp, #16]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d000      	beq.n	80064a8 <__ieee754_pow+0x1d8>
 80064a6:	e775      	b.n	8006394 <__ieee754_pow+0xc4>
 80064a8:	2d00      	cmp	r5, #0
 80064aa:	da00      	bge.n	80064ae <__ieee754_pow+0x1de>
 80064ac:	e772      	b.n	8006394 <__ieee754_pow+0xc4>
 80064ae:	0038      	movs	r0, r7
 80064b0:	0029      	movs	r1, r5
 80064b2:	f000 fcb7 	bl	8006e24 <__ieee754_sqrt>
 80064b6:	e731      	b.n	800631c <__ieee754_pow+0x4c>
 80064b8:	9b06      	ldr	r3, [sp, #24]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d1df      	bne.n	800647e <__ieee754_pow+0x1ae>
 80064be:	9800      	ldr	r0, [sp, #0]
 80064c0:	2180      	movs	r1, #128	; 0x80
 80064c2:	0002      	movs	r2, r0
 80064c4:	9801      	ldr	r0, [sp, #4]
 80064c6:	0609      	lsls	r1, r1, #24
 80064c8:	1843      	adds	r3, r0, r1
 80064ca:	9200      	str	r2, [sp, #0]
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	e7d6      	b.n	800647e <__ieee754_pow+0x1ae>
 80064d0:	0feb      	lsrs	r3, r5, #31
 80064d2:	3b01      	subs	r3, #1
 80064d4:	930e      	str	r3, [sp, #56]	; 0x38
 80064d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064d8:	9b06      	ldr	r3, [sp, #24]
 80064da:	4313      	orrs	r3, r2
 80064dc:	d104      	bne.n	80064e8 <__ieee754_pow+0x218>
 80064de:	003a      	movs	r2, r7
 80064e0:	002b      	movs	r3, r5
 80064e2:	0038      	movs	r0, r7
 80064e4:	0029      	movs	r1, r5
 80064e6:	e77e      	b.n	80063e6 <__ieee754_pow+0x116>
 80064e8:	4b16      	ldr	r3, [pc, #88]	; (8006544 <__ieee754_pow+0x274>)
 80064ea:	429e      	cmp	r6, r3
 80064ec:	dc00      	bgt.n	80064f0 <__ieee754_pow+0x220>
 80064ee:	e0f1      	b.n	80066d4 <__ieee754_pow+0x404>
 80064f0:	4b15      	ldr	r3, [pc, #84]	; (8006548 <__ieee754_pow+0x278>)
 80064f2:	429e      	cmp	r6, r3
 80064f4:	dd09      	ble.n	800650a <__ieee754_pow+0x23a>
 80064f6:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <__ieee754_pow+0x264>)
 80064f8:	429c      	cmp	r4, r3
 80064fa:	dc0c      	bgt.n	8006516 <__ieee754_pow+0x246>
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	da0c      	bge.n	800651c <__ieee754_pow+0x24c>
 8006502:	2000      	movs	r0, #0
 8006504:	f000 fc86 	bl	8006e14 <__math_oflow>
 8006508:	e708      	b.n	800631c <__ieee754_pow+0x4c>
 800650a:	4b10      	ldr	r3, [pc, #64]	; (800654c <__ieee754_pow+0x27c>)
 800650c:	429c      	cmp	r4, r3
 800650e:	ddf5      	ble.n	80064fc <__ieee754_pow+0x22c>
 8006510:	4b0a      	ldr	r3, [pc, #40]	; (800653c <__ieee754_pow+0x26c>)
 8006512:	429c      	cmp	r4, r3
 8006514:	dd1c      	ble.n	8006550 <__ieee754_pow+0x280>
 8006516:	9b04      	ldr	r3, [sp, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	dcf2      	bgt.n	8006502 <__ieee754_pow+0x232>
 800651c:	2000      	movs	r0, #0
 800651e:	f000 fc72 	bl	8006e06 <__math_uflow>
 8006522:	e6fb      	b.n	800631c <__ieee754_pow+0x4c>
 8006524:	fff00000 	.word	0xfff00000
 8006528:	7ff00000 	.word	0x7ff00000
 800652c:	c0100000 	.word	0xc0100000
 8006530:	433fffff 	.word	0x433fffff
 8006534:	3fefffff 	.word	0x3fefffff
 8006538:	fffffc01 	.word	0xfffffc01
 800653c:	3ff00000 	.word	0x3ff00000
 8006540:	3fe00000 	.word	0x3fe00000
 8006544:	41e00000 	.word	0x41e00000
 8006548:	43f00000 	.word	0x43f00000
 800654c:	3feffffe 	.word	0x3feffffe
 8006550:	2200      	movs	r2, #0
 8006552:	9800      	ldr	r0, [sp, #0]
 8006554:	9901      	ldr	r1, [sp, #4]
 8006556:	4b53      	ldr	r3, [pc, #332]	; (80066a4 <__ieee754_pow+0x3d4>)
 8006558:	f7fb f9c2 	bl	80018e0 <__aeabi_dsub>
 800655c:	22c0      	movs	r2, #192	; 0xc0
 800655e:	4b52      	ldr	r3, [pc, #328]	; (80066a8 <__ieee754_pow+0x3d8>)
 8006560:	05d2      	lsls	r2, r2, #23
 8006562:	0004      	movs	r4, r0
 8006564:	000d      	movs	r5, r1
 8006566:	f7fa fef9 	bl	800135c <__aeabi_dmul>
 800656a:	4a50      	ldr	r2, [pc, #320]	; (80066ac <__ieee754_pow+0x3dc>)
 800656c:	0006      	movs	r6, r0
 800656e:	000f      	movs	r7, r1
 8006570:	0020      	movs	r0, r4
 8006572:	0029      	movs	r1, r5
 8006574:	4b4e      	ldr	r3, [pc, #312]	; (80066b0 <__ieee754_pow+0x3e0>)
 8006576:	f7fa fef1 	bl	800135c <__aeabi_dmul>
 800657a:	2200      	movs	r2, #0
 800657c:	9000      	str	r0, [sp, #0]
 800657e:	9101      	str	r1, [sp, #4]
 8006580:	4b4c      	ldr	r3, [pc, #304]	; (80066b4 <__ieee754_pow+0x3e4>)
 8006582:	0020      	movs	r0, r4
 8006584:	0029      	movs	r1, r5
 8006586:	f7fa fee9 	bl	800135c <__aeabi_dmul>
 800658a:	0002      	movs	r2, r0
 800658c:	000b      	movs	r3, r1
 800658e:	484a      	ldr	r0, [pc, #296]	; (80066b8 <__ieee754_pow+0x3e8>)
 8006590:	494a      	ldr	r1, [pc, #296]	; (80066bc <__ieee754_pow+0x3ec>)
 8006592:	f7fb f9a5 	bl	80018e0 <__aeabi_dsub>
 8006596:	0022      	movs	r2, r4
 8006598:	002b      	movs	r3, r5
 800659a:	f7fa fedf 	bl	800135c <__aeabi_dmul>
 800659e:	0002      	movs	r2, r0
 80065a0:	000b      	movs	r3, r1
 80065a2:	2000      	movs	r0, #0
 80065a4:	4946      	ldr	r1, [pc, #280]	; (80066c0 <__ieee754_pow+0x3f0>)
 80065a6:	f7fb f99b 	bl	80018e0 <__aeabi_dsub>
 80065aa:	0022      	movs	r2, r4
 80065ac:	002b      	movs	r3, r5
 80065ae:	9004      	str	r0, [sp, #16]
 80065b0:	9105      	str	r1, [sp, #20]
 80065b2:	0020      	movs	r0, r4
 80065b4:	0029      	movs	r1, r5
 80065b6:	f7fa fed1 	bl	800135c <__aeabi_dmul>
 80065ba:	0002      	movs	r2, r0
 80065bc:	000b      	movs	r3, r1
 80065be:	9804      	ldr	r0, [sp, #16]
 80065c0:	9905      	ldr	r1, [sp, #20]
 80065c2:	f7fa fecb 	bl	800135c <__aeabi_dmul>
 80065c6:	4a3f      	ldr	r2, [pc, #252]	; (80066c4 <__ieee754_pow+0x3f4>)
 80065c8:	4b37      	ldr	r3, [pc, #220]	; (80066a8 <__ieee754_pow+0x3d8>)
 80065ca:	f7fa fec7 	bl	800135c <__aeabi_dmul>
 80065ce:	0002      	movs	r2, r0
 80065d0:	000b      	movs	r3, r1
 80065d2:	9800      	ldr	r0, [sp, #0]
 80065d4:	9901      	ldr	r1, [sp, #4]
 80065d6:	f7fb f983 	bl	80018e0 <__aeabi_dsub>
 80065da:	0002      	movs	r2, r0
 80065dc:	000b      	movs	r3, r1
 80065de:	0004      	movs	r4, r0
 80065e0:	000d      	movs	r5, r1
 80065e2:	0030      	movs	r0, r6
 80065e4:	0039      	movs	r1, r7
 80065e6:	f7f9 ff5f 	bl	80004a8 <__aeabi_dadd>
 80065ea:	2000      	movs	r0, #0
 80065ec:	0032      	movs	r2, r6
 80065ee:	003b      	movs	r3, r7
 80065f0:	9004      	str	r0, [sp, #16]
 80065f2:	9105      	str	r1, [sp, #20]
 80065f4:	f7fb f974 	bl	80018e0 <__aeabi_dsub>
 80065f8:	0002      	movs	r2, r0
 80065fa:	000b      	movs	r3, r1
 80065fc:	0020      	movs	r0, r4
 80065fe:	0029      	movs	r1, r5
 8006600:	f7fb f96e 	bl	80018e0 <__aeabi_dsub>
 8006604:	9b06      	ldr	r3, [sp, #24]
 8006606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006608:	3b01      	subs	r3, #1
 800660a:	0006      	movs	r6, r0
 800660c:	000f      	movs	r7, r1
 800660e:	4313      	orrs	r3, r2
 8006610:	d000      	beq.n	8006614 <__ieee754_pow+0x344>
 8006612:	e1dc      	b.n	80069ce <__ieee754_pow+0x6fe>
 8006614:	2300      	movs	r3, #0
 8006616:	4c2c      	ldr	r4, [pc, #176]	; (80066c8 <__ieee754_pow+0x3f8>)
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	9401      	str	r4, [sp, #4]
 800661c:	9c02      	ldr	r4, [sp, #8]
 800661e:	9d03      	ldr	r5, [sp, #12]
 8006620:	9802      	ldr	r0, [sp, #8]
 8006622:	9903      	ldr	r1, [sp, #12]
 8006624:	2400      	movs	r4, #0
 8006626:	002b      	movs	r3, r5
 8006628:	0022      	movs	r2, r4
 800662a:	f7fb f959 	bl	80018e0 <__aeabi_dsub>
 800662e:	9a04      	ldr	r2, [sp, #16]
 8006630:	9b05      	ldr	r3, [sp, #20]
 8006632:	f7fa fe93 	bl	800135c <__aeabi_dmul>
 8006636:	9a02      	ldr	r2, [sp, #8]
 8006638:	9b03      	ldr	r3, [sp, #12]
 800663a:	9006      	str	r0, [sp, #24]
 800663c:	9107      	str	r1, [sp, #28]
 800663e:	0030      	movs	r0, r6
 8006640:	0039      	movs	r1, r7
 8006642:	f7fa fe8b 	bl	800135c <__aeabi_dmul>
 8006646:	0002      	movs	r2, r0
 8006648:	000b      	movs	r3, r1
 800664a:	9806      	ldr	r0, [sp, #24]
 800664c:	9907      	ldr	r1, [sp, #28]
 800664e:	f7f9 ff2b 	bl	80004a8 <__aeabi_dadd>
 8006652:	0022      	movs	r2, r4
 8006654:	002b      	movs	r3, r5
 8006656:	0006      	movs	r6, r0
 8006658:	000f      	movs	r7, r1
 800665a:	9804      	ldr	r0, [sp, #16]
 800665c:	9905      	ldr	r1, [sp, #20]
 800665e:	f7fa fe7d 	bl	800135c <__aeabi_dmul>
 8006662:	0003      	movs	r3, r0
 8006664:	000c      	movs	r4, r1
 8006666:	9004      	str	r0, [sp, #16]
 8006668:	9105      	str	r1, [sp, #20]
 800666a:	9306      	str	r3, [sp, #24]
 800666c:	9407      	str	r4, [sp, #28]
 800666e:	0002      	movs	r2, r0
 8006670:	000b      	movs	r3, r1
 8006672:	0030      	movs	r0, r6
 8006674:	0039      	movs	r1, r7
 8006676:	f7f9 ff17 	bl	80004a8 <__aeabi_dadd>
 800667a:	4b14      	ldr	r3, [pc, #80]	; (80066cc <__ieee754_pow+0x3fc>)
 800667c:	0005      	movs	r5, r0
 800667e:	000c      	movs	r4, r1
 8006680:	9108      	str	r1, [sp, #32]
 8006682:	4299      	cmp	r1, r3
 8006684:	dc00      	bgt.n	8006688 <__ieee754_pow+0x3b8>
 8006686:	e2d4      	b.n	8006c32 <__ieee754_pow+0x962>
 8006688:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <__ieee754_pow+0x400>)
 800668a:	18cb      	adds	r3, r1, r3
 800668c:	4303      	orrs	r3, r0
 800668e:	d100      	bne.n	8006692 <__ieee754_pow+0x3c2>
 8006690:	e1d6      	b.n	8006a40 <__ieee754_pow+0x770>
 8006692:	9800      	ldr	r0, [sp, #0]
 8006694:	9901      	ldr	r1, [sp, #4]
 8006696:	2300      	movs	r3, #0
 8006698:	2200      	movs	r2, #0
 800669a:	f7f9 febf 	bl	800041c <__aeabi_dcmplt>
 800669e:	1e43      	subs	r3, r0, #1
 80066a0:	4198      	sbcs	r0, r3
 80066a2:	e72f      	b.n	8006504 <__ieee754_pow+0x234>
 80066a4:	3ff00000 	.word	0x3ff00000
 80066a8:	3ff71547 	.word	0x3ff71547
 80066ac:	f85ddf44 	.word	0xf85ddf44
 80066b0:	3e54ae0b 	.word	0x3e54ae0b
 80066b4:	3fd00000 	.word	0x3fd00000
 80066b8:	55555555 	.word	0x55555555
 80066bc:	3fd55555 	.word	0x3fd55555
 80066c0:	3fe00000 	.word	0x3fe00000
 80066c4:	652b82fe 	.word	0x652b82fe
 80066c8:	bff00000 	.word	0xbff00000
 80066cc:	408fffff 	.word	0x408fffff
 80066d0:	bf700000 	.word	0xbf700000
 80066d4:	4bbf      	ldr	r3, [pc, #764]	; (80069d4 <__ieee754_pow+0x704>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	422b      	tst	r3, r5
 80066da:	d10a      	bne.n	80066f2 <__ieee754_pow+0x422>
 80066dc:	9800      	ldr	r0, [sp, #0]
 80066de:	9901      	ldr	r1, [sp, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	4bbd      	ldr	r3, [pc, #756]	; (80069d8 <__ieee754_pow+0x708>)
 80066e4:	f7fa fe3a 	bl	800135c <__aeabi_dmul>
 80066e8:	2235      	movs	r2, #53	; 0x35
 80066ea:	9000      	str	r0, [sp, #0]
 80066ec:	9101      	str	r1, [sp, #4]
 80066ee:	9c01      	ldr	r4, [sp, #4]
 80066f0:	4252      	negs	r2, r2
 80066f2:	49ba      	ldr	r1, [pc, #744]	; (80069dc <__ieee754_pow+0x70c>)
 80066f4:	1523      	asrs	r3, r4, #20
 80066f6:	185b      	adds	r3, r3, r1
 80066f8:	189b      	adds	r3, r3, r2
 80066fa:	0324      	lsls	r4, r4, #12
 80066fc:	4db8      	ldr	r5, [pc, #736]	; (80069e0 <__ieee754_pow+0x710>)
 80066fe:	930d      	str	r3, [sp, #52]	; 0x34
 8006700:	4bb8      	ldr	r3, [pc, #736]	; (80069e4 <__ieee754_pow+0x714>)
 8006702:	0b22      	lsrs	r2, r4, #12
 8006704:	4315      	orrs	r5, r2
 8006706:	2400      	movs	r4, #0
 8006708:	429a      	cmp	r2, r3
 800670a:	dd09      	ble.n	8006720 <__ieee754_pow+0x450>
 800670c:	4bb6      	ldr	r3, [pc, #728]	; (80069e8 <__ieee754_pow+0x718>)
 800670e:	3401      	adds	r4, #1
 8006710:	429a      	cmp	r2, r3
 8006712:	dd05      	ble.n	8006720 <__ieee754_pow+0x450>
 8006714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006716:	191b      	adds	r3, r3, r4
 8006718:	2400      	movs	r4, #0
 800671a:	930d      	str	r3, [sp, #52]	; 0x34
 800671c:	4bb3      	ldr	r3, [pc, #716]	; (80069ec <__ieee754_pow+0x71c>)
 800671e:	18ed      	adds	r5, r5, r3
 8006720:	4bb3      	ldr	r3, [pc, #716]	; (80069f0 <__ieee754_pow+0x720>)
 8006722:	00e2      	lsls	r2, r4, #3
 8006724:	189b      	adds	r3, r3, r2
 8006726:	9800      	ldr	r0, [sp, #0]
 8006728:	9901      	ldr	r1, [sp, #4]
 800672a:	920f      	str	r2, [sp, #60]	; 0x3c
 800672c:	0029      	movs	r1, r5
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	0006      	movs	r6, r0
 8006734:	920a      	str	r2, [sp, #40]	; 0x28
 8006736:	930b      	str	r3, [sp, #44]	; 0x2c
 8006738:	f7fb f8d2 	bl	80018e0 <__aeabi_dsub>
 800673c:	0032      	movs	r2, r6
 800673e:	002b      	movs	r3, r5
 8006740:	9010      	str	r0, [sp, #64]	; 0x40
 8006742:	9111      	str	r1, [sp, #68]	; 0x44
 8006744:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006746:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006748:	f7f9 feae 	bl	80004a8 <__aeabi_dadd>
 800674c:	0002      	movs	r2, r0
 800674e:	000b      	movs	r3, r1
 8006750:	2000      	movs	r0, #0
 8006752:	49a3      	ldr	r1, [pc, #652]	; (80069e0 <__ieee754_pow+0x710>)
 8006754:	f7fa fa08 	bl	8000b68 <__aeabi_ddiv>
 8006758:	0002      	movs	r2, r0
 800675a:	000b      	movs	r3, r1
 800675c:	9012      	str	r0, [sp, #72]	; 0x48
 800675e:	9113      	str	r1, [sp, #76]	; 0x4c
 8006760:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006762:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006764:	f7fa fdfa 	bl	800135c <__aeabi_dmul>
 8006768:	9008      	str	r0, [sp, #32]
 800676a:	9109      	str	r1, [sp, #36]	; 0x24
 800676c:	9a08      	ldr	r2, [sp, #32]
 800676e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006770:	9204      	str	r2, [sp, #16]
 8006772:	9305      	str	r3, [sp, #20]
 8006774:	2300      	movs	r3, #0
 8006776:	2180      	movs	r1, #128	; 0x80
 8006778:	2080      	movs	r0, #128	; 0x80
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	9a04      	ldr	r2, [sp, #16]
 800677e:	9b05      	ldr	r3, [sp, #20]
 8006780:	9200      	str	r2, [sp, #0]
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	002f      	movs	r7, r5
 8006788:	0589      	lsls	r1, r1, #22
 800678a:	106d      	asrs	r5, r5, #1
 800678c:	4329      	orrs	r1, r5
 800678e:	0300      	lsls	r0, r0, #12
 8006790:	1809      	adds	r1, r1, r0
 8006792:	04a0      	lsls	r0, r4, #18
 8006794:	180b      	adds	r3, r1, r0
 8006796:	9800      	ldr	r0, [sp, #0]
 8006798:	9901      	ldr	r1, [sp, #4]
 800679a:	0014      	movs	r4, r2
 800679c:	001d      	movs	r5, r3
 800679e:	f7fa fddd 	bl	800135c <__aeabi_dmul>
 80067a2:	0002      	movs	r2, r0
 80067a4:	000b      	movs	r3, r1
 80067a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80067a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80067aa:	f7fb f899 	bl	80018e0 <__aeabi_dsub>
 80067ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067b2:	9010      	str	r0, [sp, #64]	; 0x40
 80067b4:	9111      	str	r1, [sp, #68]	; 0x44
 80067b6:	0020      	movs	r0, r4
 80067b8:	0029      	movs	r1, r5
 80067ba:	f7fb f891 	bl	80018e0 <__aeabi_dsub>
 80067be:	0002      	movs	r2, r0
 80067c0:	000b      	movs	r3, r1
 80067c2:	0030      	movs	r0, r6
 80067c4:	0039      	movs	r1, r7
 80067c6:	f7fb f88b 	bl	80018e0 <__aeabi_dsub>
 80067ca:	9a00      	ldr	r2, [sp, #0]
 80067cc:	9b01      	ldr	r3, [sp, #4]
 80067ce:	f7fa fdc5 	bl	800135c <__aeabi_dmul>
 80067d2:	0002      	movs	r2, r0
 80067d4:	000b      	movs	r3, r1
 80067d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80067d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80067da:	f7fb f881 	bl	80018e0 <__aeabi_dsub>
 80067de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067e2:	f7fa fdbb 	bl	800135c <__aeabi_dmul>
 80067e6:	9a08      	ldr	r2, [sp, #32]
 80067e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ea:	900a      	str	r0, [sp, #40]	; 0x28
 80067ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80067ee:	0010      	movs	r0, r2
 80067f0:	0019      	movs	r1, r3
 80067f2:	f7fa fdb3 	bl	800135c <__aeabi_dmul>
 80067f6:	0006      	movs	r6, r0
 80067f8:	000f      	movs	r7, r1
 80067fa:	4a7e      	ldr	r2, [pc, #504]	; (80069f4 <__ieee754_pow+0x724>)
 80067fc:	4b7e      	ldr	r3, [pc, #504]	; (80069f8 <__ieee754_pow+0x728>)
 80067fe:	f7fa fdad 	bl	800135c <__aeabi_dmul>
 8006802:	4a7e      	ldr	r2, [pc, #504]	; (80069fc <__ieee754_pow+0x72c>)
 8006804:	4b7e      	ldr	r3, [pc, #504]	; (8006a00 <__ieee754_pow+0x730>)
 8006806:	f7f9 fe4f 	bl	80004a8 <__aeabi_dadd>
 800680a:	0032      	movs	r2, r6
 800680c:	003b      	movs	r3, r7
 800680e:	f7fa fda5 	bl	800135c <__aeabi_dmul>
 8006812:	4a7c      	ldr	r2, [pc, #496]	; (8006a04 <__ieee754_pow+0x734>)
 8006814:	4b7c      	ldr	r3, [pc, #496]	; (8006a08 <__ieee754_pow+0x738>)
 8006816:	f7f9 fe47 	bl	80004a8 <__aeabi_dadd>
 800681a:	0032      	movs	r2, r6
 800681c:	003b      	movs	r3, r7
 800681e:	f7fa fd9d 	bl	800135c <__aeabi_dmul>
 8006822:	4a7a      	ldr	r2, [pc, #488]	; (8006a0c <__ieee754_pow+0x73c>)
 8006824:	4b7a      	ldr	r3, [pc, #488]	; (8006a10 <__ieee754_pow+0x740>)
 8006826:	f7f9 fe3f 	bl	80004a8 <__aeabi_dadd>
 800682a:	0032      	movs	r2, r6
 800682c:	003b      	movs	r3, r7
 800682e:	f7fa fd95 	bl	800135c <__aeabi_dmul>
 8006832:	4a78      	ldr	r2, [pc, #480]	; (8006a14 <__ieee754_pow+0x744>)
 8006834:	4b78      	ldr	r3, [pc, #480]	; (8006a18 <__ieee754_pow+0x748>)
 8006836:	f7f9 fe37 	bl	80004a8 <__aeabi_dadd>
 800683a:	0032      	movs	r2, r6
 800683c:	003b      	movs	r3, r7
 800683e:	f7fa fd8d 	bl	800135c <__aeabi_dmul>
 8006842:	4a76      	ldr	r2, [pc, #472]	; (8006a1c <__ieee754_pow+0x74c>)
 8006844:	4b76      	ldr	r3, [pc, #472]	; (8006a20 <__ieee754_pow+0x750>)
 8006846:	f7f9 fe2f 	bl	80004a8 <__aeabi_dadd>
 800684a:	0032      	movs	r2, r6
 800684c:	0004      	movs	r4, r0
 800684e:	000d      	movs	r5, r1
 8006850:	003b      	movs	r3, r7
 8006852:	0030      	movs	r0, r6
 8006854:	0039      	movs	r1, r7
 8006856:	f7fa fd81 	bl	800135c <__aeabi_dmul>
 800685a:	0002      	movs	r2, r0
 800685c:	000b      	movs	r3, r1
 800685e:	0020      	movs	r0, r4
 8006860:	0029      	movs	r1, r5
 8006862:	f7fa fd7b 	bl	800135c <__aeabi_dmul>
 8006866:	9a00      	ldr	r2, [sp, #0]
 8006868:	9b01      	ldr	r3, [sp, #4]
 800686a:	0004      	movs	r4, r0
 800686c:	000d      	movs	r5, r1
 800686e:	9808      	ldr	r0, [sp, #32]
 8006870:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006872:	f7f9 fe19 	bl	80004a8 <__aeabi_dadd>
 8006876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687a:	f7fa fd6f 	bl	800135c <__aeabi_dmul>
 800687e:	0022      	movs	r2, r4
 8006880:	002b      	movs	r3, r5
 8006882:	f7f9 fe11 	bl	80004a8 <__aeabi_dadd>
 8006886:	9a00      	ldr	r2, [sp, #0]
 8006888:	9b01      	ldr	r3, [sp, #4]
 800688a:	9010      	str	r0, [sp, #64]	; 0x40
 800688c:	9111      	str	r1, [sp, #68]	; 0x44
 800688e:	0010      	movs	r0, r2
 8006890:	0019      	movs	r1, r3
 8006892:	f7fa fd63 	bl	800135c <__aeabi_dmul>
 8006896:	2200      	movs	r2, #0
 8006898:	4b62      	ldr	r3, [pc, #392]	; (8006a24 <__ieee754_pow+0x754>)
 800689a:	0004      	movs	r4, r0
 800689c:	000d      	movs	r5, r1
 800689e:	f7f9 fe03 	bl	80004a8 <__aeabi_dadd>
 80068a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068a6:	f7f9 fdff 	bl	80004a8 <__aeabi_dadd>
 80068aa:	2000      	movs	r0, #0
 80068ac:	000f      	movs	r7, r1
 80068ae:	0006      	movs	r6, r0
 80068b0:	0002      	movs	r2, r0
 80068b2:	000b      	movs	r3, r1
 80068b4:	9800      	ldr	r0, [sp, #0]
 80068b6:	9901      	ldr	r1, [sp, #4]
 80068b8:	f7fa fd50 	bl	800135c <__aeabi_dmul>
 80068bc:	2200      	movs	r2, #0
 80068be:	9000      	str	r0, [sp, #0]
 80068c0:	9101      	str	r1, [sp, #4]
 80068c2:	4b58      	ldr	r3, [pc, #352]	; (8006a24 <__ieee754_pow+0x754>)
 80068c4:	0030      	movs	r0, r6
 80068c6:	0039      	movs	r1, r7
 80068c8:	f7fb f80a 	bl	80018e0 <__aeabi_dsub>
 80068cc:	0022      	movs	r2, r4
 80068ce:	002b      	movs	r3, r5
 80068d0:	f7fb f806 	bl	80018e0 <__aeabi_dsub>
 80068d4:	0002      	movs	r2, r0
 80068d6:	000b      	movs	r3, r1
 80068d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80068da:	9911      	ldr	r1, [sp, #68]	; 0x44
 80068dc:	f7fb f800 	bl	80018e0 <__aeabi_dsub>
 80068e0:	9a08      	ldr	r2, [sp, #32]
 80068e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e4:	f7fa fd3a 	bl	800135c <__aeabi_dmul>
 80068e8:	0032      	movs	r2, r6
 80068ea:	0004      	movs	r4, r0
 80068ec:	000d      	movs	r5, r1
 80068ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068f2:	003b      	movs	r3, r7
 80068f4:	f7fa fd32 	bl	800135c <__aeabi_dmul>
 80068f8:	0002      	movs	r2, r0
 80068fa:	000b      	movs	r3, r1
 80068fc:	0020      	movs	r0, r4
 80068fe:	0029      	movs	r1, r5
 8006900:	f7f9 fdd2 	bl	80004a8 <__aeabi_dadd>
 8006904:	0004      	movs	r4, r0
 8006906:	000d      	movs	r5, r1
 8006908:	0002      	movs	r2, r0
 800690a:	000b      	movs	r3, r1
 800690c:	9800      	ldr	r0, [sp, #0]
 800690e:	9901      	ldr	r1, [sp, #4]
 8006910:	f7f9 fdca 	bl	80004a8 <__aeabi_dadd>
 8006914:	22e0      	movs	r2, #224	; 0xe0
 8006916:	2000      	movs	r0, #0
 8006918:	4b43      	ldr	r3, [pc, #268]	; (8006a28 <__ieee754_pow+0x758>)
 800691a:	0612      	lsls	r2, r2, #24
 800691c:	0006      	movs	r6, r0
 800691e:	000f      	movs	r7, r1
 8006920:	f7fa fd1c 	bl	800135c <__aeabi_dmul>
 8006924:	9008      	str	r0, [sp, #32]
 8006926:	9109      	str	r1, [sp, #36]	; 0x24
 8006928:	9a00      	ldr	r2, [sp, #0]
 800692a:	9b01      	ldr	r3, [sp, #4]
 800692c:	0030      	movs	r0, r6
 800692e:	0039      	movs	r1, r7
 8006930:	f7fa ffd6 	bl	80018e0 <__aeabi_dsub>
 8006934:	0002      	movs	r2, r0
 8006936:	000b      	movs	r3, r1
 8006938:	0020      	movs	r0, r4
 800693a:	0029      	movs	r1, r5
 800693c:	f7fa ffd0 	bl	80018e0 <__aeabi_dsub>
 8006940:	4a3a      	ldr	r2, [pc, #232]	; (8006a2c <__ieee754_pow+0x75c>)
 8006942:	4b39      	ldr	r3, [pc, #228]	; (8006a28 <__ieee754_pow+0x758>)
 8006944:	f7fa fd0a 	bl	800135c <__aeabi_dmul>
 8006948:	4a39      	ldr	r2, [pc, #228]	; (8006a30 <__ieee754_pow+0x760>)
 800694a:	0004      	movs	r4, r0
 800694c:	000d      	movs	r5, r1
 800694e:	0030      	movs	r0, r6
 8006950:	0039      	movs	r1, r7
 8006952:	4b38      	ldr	r3, [pc, #224]	; (8006a34 <__ieee754_pow+0x764>)
 8006954:	f7fa fd02 	bl	800135c <__aeabi_dmul>
 8006958:	0002      	movs	r2, r0
 800695a:	000b      	movs	r3, r1
 800695c:	0020      	movs	r0, r4
 800695e:	0029      	movs	r1, r5
 8006960:	f7f9 fda2 	bl	80004a8 <__aeabi_dadd>
 8006964:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006966:	4b34      	ldr	r3, [pc, #208]	; (8006a38 <__ieee754_pow+0x768>)
 8006968:	189b      	adds	r3, r3, r2
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f7f9 fd9b 	bl	80004a8 <__aeabi_dadd>
 8006972:	9000      	str	r0, [sp, #0]
 8006974:	9101      	str	r1, [sp, #4]
 8006976:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006978:	f7fb fb88 	bl	800208c <__aeabi_i2d>
 800697c:	0004      	movs	r4, r0
 800697e:	000d      	movs	r5, r1
 8006980:	9808      	ldr	r0, [sp, #32]
 8006982:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006984:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006986:	4b2d      	ldr	r3, [pc, #180]	; (8006a3c <__ieee754_pow+0x76c>)
 8006988:	189b      	adds	r3, r3, r2
 800698a:	681e      	ldr	r6, [r3, #0]
 800698c:	685f      	ldr	r7, [r3, #4]
 800698e:	9a00      	ldr	r2, [sp, #0]
 8006990:	9b01      	ldr	r3, [sp, #4]
 8006992:	f7f9 fd89 	bl	80004a8 <__aeabi_dadd>
 8006996:	0032      	movs	r2, r6
 8006998:	003b      	movs	r3, r7
 800699a:	f7f9 fd85 	bl	80004a8 <__aeabi_dadd>
 800699e:	0022      	movs	r2, r4
 80069a0:	002b      	movs	r3, r5
 80069a2:	f7f9 fd81 	bl	80004a8 <__aeabi_dadd>
 80069a6:	2000      	movs	r0, #0
 80069a8:	0022      	movs	r2, r4
 80069aa:	002b      	movs	r3, r5
 80069ac:	9004      	str	r0, [sp, #16]
 80069ae:	9105      	str	r1, [sp, #20]
 80069b0:	f7fa ff96 	bl	80018e0 <__aeabi_dsub>
 80069b4:	0032      	movs	r2, r6
 80069b6:	003b      	movs	r3, r7
 80069b8:	f7fa ff92 	bl	80018e0 <__aeabi_dsub>
 80069bc:	9a08      	ldr	r2, [sp, #32]
 80069be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c0:	f7fa ff8e 	bl	80018e0 <__aeabi_dsub>
 80069c4:	0002      	movs	r2, r0
 80069c6:	000b      	movs	r3, r1
 80069c8:	9800      	ldr	r0, [sp, #0]
 80069ca:	9901      	ldr	r1, [sp, #4]
 80069cc:	e618      	b.n	8006600 <__ieee754_pow+0x330>
 80069ce:	2300      	movs	r3, #0
 80069d0:	4c03      	ldr	r4, [pc, #12]	; (80069e0 <__ieee754_pow+0x710>)
 80069d2:	e621      	b.n	8006618 <__ieee754_pow+0x348>
 80069d4:	7ff00000 	.word	0x7ff00000
 80069d8:	43400000 	.word	0x43400000
 80069dc:	fffffc01 	.word	0xfffffc01
 80069e0:	3ff00000 	.word	0x3ff00000
 80069e4:	0003988e 	.word	0x0003988e
 80069e8:	000bb679 	.word	0x000bb679
 80069ec:	fff00000 	.word	0xfff00000
 80069f0:	08007088 	.word	0x08007088
 80069f4:	4a454eef 	.word	0x4a454eef
 80069f8:	3fca7e28 	.word	0x3fca7e28
 80069fc:	93c9db65 	.word	0x93c9db65
 8006a00:	3fcd864a 	.word	0x3fcd864a
 8006a04:	a91d4101 	.word	0xa91d4101
 8006a08:	3fd17460 	.word	0x3fd17460
 8006a0c:	518f264d 	.word	0x518f264d
 8006a10:	3fd55555 	.word	0x3fd55555
 8006a14:	db6fabff 	.word	0xdb6fabff
 8006a18:	3fdb6db6 	.word	0x3fdb6db6
 8006a1c:	33333303 	.word	0x33333303
 8006a20:	3fe33333 	.word	0x3fe33333
 8006a24:	40080000 	.word	0x40080000
 8006a28:	3feec709 	.word	0x3feec709
 8006a2c:	dc3a03fd 	.word	0xdc3a03fd
 8006a30:	145b01f5 	.word	0x145b01f5
 8006a34:	be3e2fe0 	.word	0xbe3e2fe0
 8006a38:	080070a8 	.word	0x080070a8
 8006a3c:	08007098 	.word	0x08007098
 8006a40:	4a90      	ldr	r2, [pc, #576]	; (8006c84 <__ieee754_pow+0x9b4>)
 8006a42:	4b91      	ldr	r3, [pc, #580]	; (8006c88 <__ieee754_pow+0x9b8>)
 8006a44:	0030      	movs	r0, r6
 8006a46:	0039      	movs	r1, r7
 8006a48:	f7f9 fd2e 	bl	80004a8 <__aeabi_dadd>
 8006a4c:	9a04      	ldr	r2, [sp, #16]
 8006a4e:	9b05      	ldr	r3, [sp, #20]
 8006a50:	9002      	str	r0, [sp, #8]
 8006a52:	9103      	str	r1, [sp, #12]
 8006a54:	0028      	movs	r0, r5
 8006a56:	0021      	movs	r1, r4
 8006a58:	f7fa ff42 	bl	80018e0 <__aeabi_dsub>
 8006a5c:	0002      	movs	r2, r0
 8006a5e:	000b      	movs	r3, r1
 8006a60:	9802      	ldr	r0, [sp, #8]
 8006a62:	9903      	ldr	r1, [sp, #12]
 8006a64:	f7f9 fcee 	bl	8000444 <__aeabi_dcmpgt>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d000      	beq.n	8006a6e <__ieee754_pow+0x79e>
 8006a6c:	e611      	b.n	8006692 <__ieee754_pow+0x3c2>
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4a86      	ldr	r2, [pc, #536]	; (8006c8c <__ieee754_pow+0x9bc>)
 8006a72:	0063      	lsls	r3, r4, #1
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	9102      	str	r1, [sp, #8]
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	dd25      	ble.n	8006ac8 <__ieee754_pow+0x7f8>
 8006a7c:	4a84      	ldr	r2, [pc, #528]	; (8006c90 <__ieee754_pow+0x9c0>)
 8006a7e:	151b      	asrs	r3, r3, #20
 8006a80:	189b      	adds	r3, r3, r2
 8006a82:	2280      	movs	r2, #128	; 0x80
 8006a84:	0352      	lsls	r2, r2, #13
 8006a86:	0011      	movs	r1, r2
 8006a88:	4119      	asrs	r1, r3
 8006a8a:	190b      	adds	r3, r1, r4
 8006a8c:	005c      	lsls	r4, r3, #1
 8006a8e:	4981      	ldr	r1, [pc, #516]	; (8006c94 <__ieee754_pow+0x9c4>)
 8006a90:	4d81      	ldr	r5, [pc, #516]	; (8006c98 <__ieee754_pow+0x9c8>)
 8006a92:	0d64      	lsrs	r4, r4, #21
 8006a94:	1864      	adds	r4, r4, r1
 8006a96:	4125      	asrs	r5, r4
 8006a98:	401d      	ands	r5, r3
 8006a9a:	031b      	lsls	r3, r3, #12
 8006a9c:	0b1b      	lsrs	r3, r3, #12
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	2214      	movs	r2, #20
 8006aa2:	1b12      	subs	r2, r2, r4
 8006aa4:	4113      	asrs	r3, r2
 8006aa6:	9302      	str	r3, [sp, #8]
 8006aa8:	9b08      	ldr	r3, [sp, #32]
 8006aaa:	2000      	movs	r0, #0
 8006aac:	0029      	movs	r1, r5
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	da02      	bge.n	8006ab8 <__ieee754_pow+0x7e8>
 8006ab2:	9b02      	ldr	r3, [sp, #8]
 8006ab4:	425b      	negs	r3, r3
 8006ab6:	9302      	str	r3, [sp, #8]
 8006ab8:	0002      	movs	r2, r0
 8006aba:	000b      	movs	r3, r1
 8006abc:	9804      	ldr	r0, [sp, #16]
 8006abe:	9905      	ldr	r1, [sp, #20]
 8006ac0:	f7fa ff0e 	bl	80018e0 <__aeabi_dsub>
 8006ac4:	9006      	str	r0, [sp, #24]
 8006ac6:	9107      	str	r1, [sp, #28]
 8006ac8:	9806      	ldr	r0, [sp, #24]
 8006aca:	9907      	ldr	r1, [sp, #28]
 8006acc:	0032      	movs	r2, r6
 8006ace:	003b      	movs	r3, r7
 8006ad0:	f7f9 fcea 	bl	80004a8 <__aeabi_dadd>
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4b70      	ldr	r3, [pc, #448]	; (8006c9c <__ieee754_pow+0x9cc>)
 8006ada:	9004      	str	r0, [sp, #16]
 8006adc:	9105      	str	r1, [sp, #20]
 8006ade:	f7fa fc3d 	bl	800135c <__aeabi_dmul>
 8006ae2:	9a06      	ldr	r2, [sp, #24]
 8006ae4:	9b07      	ldr	r3, [sp, #28]
 8006ae6:	9008      	str	r0, [sp, #32]
 8006ae8:	9109      	str	r1, [sp, #36]	; 0x24
 8006aea:	9804      	ldr	r0, [sp, #16]
 8006aec:	9905      	ldr	r1, [sp, #20]
 8006aee:	f7fa fef7 	bl	80018e0 <__aeabi_dsub>
 8006af2:	0002      	movs	r2, r0
 8006af4:	000b      	movs	r3, r1
 8006af6:	0030      	movs	r0, r6
 8006af8:	0039      	movs	r1, r7
 8006afa:	f7fa fef1 	bl	80018e0 <__aeabi_dsub>
 8006afe:	4a68      	ldr	r2, [pc, #416]	; (8006ca0 <__ieee754_pow+0x9d0>)
 8006b00:	4b68      	ldr	r3, [pc, #416]	; (8006ca4 <__ieee754_pow+0x9d4>)
 8006b02:	f7fa fc2b 	bl	800135c <__aeabi_dmul>
 8006b06:	4a68      	ldr	r2, [pc, #416]	; (8006ca8 <__ieee754_pow+0x9d8>)
 8006b08:	0004      	movs	r4, r0
 8006b0a:	000d      	movs	r5, r1
 8006b0c:	9804      	ldr	r0, [sp, #16]
 8006b0e:	9905      	ldr	r1, [sp, #20]
 8006b10:	4b66      	ldr	r3, [pc, #408]	; (8006cac <__ieee754_pow+0x9dc>)
 8006b12:	f7fa fc23 	bl	800135c <__aeabi_dmul>
 8006b16:	0002      	movs	r2, r0
 8006b18:	000b      	movs	r3, r1
 8006b1a:	0020      	movs	r0, r4
 8006b1c:	0029      	movs	r1, r5
 8006b1e:	f7f9 fcc3 	bl	80004a8 <__aeabi_dadd>
 8006b22:	0004      	movs	r4, r0
 8006b24:	000d      	movs	r5, r1
 8006b26:	0002      	movs	r2, r0
 8006b28:	000b      	movs	r3, r1
 8006b2a:	9808      	ldr	r0, [sp, #32]
 8006b2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b2e:	f7f9 fcbb 	bl	80004a8 <__aeabi_dadd>
 8006b32:	9a08      	ldr	r2, [sp, #32]
 8006b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b36:	0006      	movs	r6, r0
 8006b38:	000f      	movs	r7, r1
 8006b3a:	f7fa fed1 	bl	80018e0 <__aeabi_dsub>
 8006b3e:	0002      	movs	r2, r0
 8006b40:	000b      	movs	r3, r1
 8006b42:	0020      	movs	r0, r4
 8006b44:	0029      	movs	r1, r5
 8006b46:	f7fa fecb 	bl	80018e0 <__aeabi_dsub>
 8006b4a:	0032      	movs	r2, r6
 8006b4c:	9004      	str	r0, [sp, #16]
 8006b4e:	9105      	str	r1, [sp, #20]
 8006b50:	003b      	movs	r3, r7
 8006b52:	0030      	movs	r0, r6
 8006b54:	0039      	movs	r1, r7
 8006b56:	f7fa fc01 	bl	800135c <__aeabi_dmul>
 8006b5a:	0004      	movs	r4, r0
 8006b5c:	000d      	movs	r5, r1
 8006b5e:	4a54      	ldr	r2, [pc, #336]	; (8006cb0 <__ieee754_pow+0x9e0>)
 8006b60:	4b54      	ldr	r3, [pc, #336]	; (8006cb4 <__ieee754_pow+0x9e4>)
 8006b62:	f7fa fbfb 	bl	800135c <__aeabi_dmul>
 8006b66:	4a54      	ldr	r2, [pc, #336]	; (8006cb8 <__ieee754_pow+0x9e8>)
 8006b68:	4b54      	ldr	r3, [pc, #336]	; (8006cbc <__ieee754_pow+0x9ec>)
 8006b6a:	f7fa feb9 	bl	80018e0 <__aeabi_dsub>
 8006b6e:	0022      	movs	r2, r4
 8006b70:	002b      	movs	r3, r5
 8006b72:	f7fa fbf3 	bl	800135c <__aeabi_dmul>
 8006b76:	4a52      	ldr	r2, [pc, #328]	; (8006cc0 <__ieee754_pow+0x9f0>)
 8006b78:	4b52      	ldr	r3, [pc, #328]	; (8006cc4 <__ieee754_pow+0x9f4>)
 8006b7a:	f7f9 fc95 	bl	80004a8 <__aeabi_dadd>
 8006b7e:	0022      	movs	r2, r4
 8006b80:	002b      	movs	r3, r5
 8006b82:	f7fa fbeb 	bl	800135c <__aeabi_dmul>
 8006b86:	4a50      	ldr	r2, [pc, #320]	; (8006cc8 <__ieee754_pow+0x9f8>)
 8006b88:	4b50      	ldr	r3, [pc, #320]	; (8006ccc <__ieee754_pow+0x9fc>)
 8006b8a:	f7fa fea9 	bl	80018e0 <__aeabi_dsub>
 8006b8e:	0022      	movs	r2, r4
 8006b90:	002b      	movs	r3, r5
 8006b92:	f7fa fbe3 	bl	800135c <__aeabi_dmul>
 8006b96:	4a4e      	ldr	r2, [pc, #312]	; (8006cd0 <__ieee754_pow+0xa00>)
 8006b98:	4b4e      	ldr	r3, [pc, #312]	; (8006cd4 <__ieee754_pow+0xa04>)
 8006b9a:	f7f9 fc85 	bl	80004a8 <__aeabi_dadd>
 8006b9e:	0022      	movs	r2, r4
 8006ba0:	002b      	movs	r3, r5
 8006ba2:	f7fa fbdb 	bl	800135c <__aeabi_dmul>
 8006ba6:	0002      	movs	r2, r0
 8006ba8:	000b      	movs	r3, r1
 8006baa:	0030      	movs	r0, r6
 8006bac:	0039      	movs	r1, r7
 8006bae:	f7fa fe97 	bl	80018e0 <__aeabi_dsub>
 8006bb2:	0004      	movs	r4, r0
 8006bb4:	000d      	movs	r5, r1
 8006bb6:	0002      	movs	r2, r0
 8006bb8:	000b      	movs	r3, r1
 8006bba:	0030      	movs	r0, r6
 8006bbc:	0039      	movs	r1, r7
 8006bbe:	f7fa fbcd 	bl	800135c <__aeabi_dmul>
 8006bc2:	2380      	movs	r3, #128	; 0x80
 8006bc4:	9006      	str	r0, [sp, #24]
 8006bc6:	9107      	str	r1, [sp, #28]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	0020      	movs	r0, r4
 8006bcc:	0029      	movs	r1, r5
 8006bce:	05db      	lsls	r3, r3, #23
 8006bd0:	f7fa fe86 	bl	80018e0 <__aeabi_dsub>
 8006bd4:	0002      	movs	r2, r0
 8006bd6:	000b      	movs	r3, r1
 8006bd8:	9806      	ldr	r0, [sp, #24]
 8006bda:	9907      	ldr	r1, [sp, #28]
 8006bdc:	f7f9 ffc4 	bl	8000b68 <__aeabi_ddiv>
 8006be0:	9a04      	ldr	r2, [sp, #16]
 8006be2:	9b05      	ldr	r3, [sp, #20]
 8006be4:	0004      	movs	r4, r0
 8006be6:	000d      	movs	r5, r1
 8006be8:	0030      	movs	r0, r6
 8006bea:	0039      	movs	r1, r7
 8006bec:	f7fa fbb6 	bl	800135c <__aeabi_dmul>
 8006bf0:	9a04      	ldr	r2, [sp, #16]
 8006bf2:	9b05      	ldr	r3, [sp, #20]
 8006bf4:	f7f9 fc58 	bl	80004a8 <__aeabi_dadd>
 8006bf8:	0002      	movs	r2, r0
 8006bfa:	000b      	movs	r3, r1
 8006bfc:	0020      	movs	r0, r4
 8006bfe:	0029      	movs	r1, r5
 8006c00:	f7fa fe6e 	bl	80018e0 <__aeabi_dsub>
 8006c04:	0032      	movs	r2, r6
 8006c06:	003b      	movs	r3, r7
 8006c08:	f7fa fe6a 	bl	80018e0 <__aeabi_dsub>
 8006c0c:	0002      	movs	r2, r0
 8006c0e:	000b      	movs	r3, r1
 8006c10:	2000      	movs	r0, #0
 8006c12:	4931      	ldr	r1, [pc, #196]	; (8006cd8 <__ieee754_pow+0xa08>)
 8006c14:	f7fa fe64 	bl	80018e0 <__aeabi_dsub>
 8006c18:	9b02      	ldr	r3, [sp, #8]
 8006c1a:	051b      	lsls	r3, r3, #20
 8006c1c:	185b      	adds	r3, r3, r1
 8006c1e:	151a      	asrs	r2, r3, #20
 8006c20:	2a00      	cmp	r2, #0
 8006c22:	dc25      	bgt.n	8006c70 <__ieee754_pow+0x9a0>
 8006c24:	9a02      	ldr	r2, [sp, #8]
 8006c26:	f000 f861 	bl	8006cec <scalbn>
 8006c2a:	9a00      	ldr	r2, [sp, #0]
 8006c2c:	9b01      	ldr	r3, [sp, #4]
 8006c2e:	f7ff fc33 	bl	8006498 <__ieee754_pow+0x1c8>
 8006c32:	4a2a      	ldr	r2, [pc, #168]	; (8006cdc <__ieee754_pow+0xa0c>)
 8006c34:	004b      	lsls	r3, r1, #1
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	dc00      	bgt.n	8006c3e <__ieee754_pow+0x96e>
 8006c3c:	e717      	b.n	8006a6e <__ieee754_pow+0x79e>
 8006c3e:	4b28      	ldr	r3, [pc, #160]	; (8006ce0 <__ieee754_pow+0xa10>)
 8006c40:	18cb      	adds	r3, r1, r3
 8006c42:	4303      	orrs	r3, r0
 8006c44:	d008      	beq.n	8006c58 <__ieee754_pow+0x988>
 8006c46:	9800      	ldr	r0, [sp, #0]
 8006c48:	9901      	ldr	r1, [sp, #4]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f7f9 fbe5 	bl	800041c <__aeabi_dcmplt>
 8006c52:	1e43      	subs	r3, r0, #1
 8006c54:	4198      	sbcs	r0, r3
 8006c56:	e462      	b.n	800651e <__ieee754_pow+0x24e>
 8006c58:	9a04      	ldr	r2, [sp, #16]
 8006c5a:	9b05      	ldr	r3, [sp, #20]
 8006c5c:	f7fa fe40 	bl	80018e0 <__aeabi_dsub>
 8006c60:	0032      	movs	r2, r6
 8006c62:	003b      	movs	r3, r7
 8006c64:	f7f9 fbf8 	bl	8000458 <__aeabi_dcmpge>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d100      	bne.n	8006c6e <__ieee754_pow+0x99e>
 8006c6c:	e6ff      	b.n	8006a6e <__ieee754_pow+0x79e>
 8006c6e:	e7ea      	b.n	8006c46 <__ieee754_pow+0x976>
 8006c70:	0019      	movs	r1, r3
 8006c72:	e7da      	b.n	8006c2a <__ieee754_pow+0x95a>
 8006c74:	2300      	movs	r3, #0
 8006c76:	4c18      	ldr	r4, [pc, #96]	; (8006cd8 <__ieee754_pow+0xa08>)
 8006c78:	f7ff fbf1 	bl	800645e <__ieee754_pow+0x18e>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2400      	movs	r4, #0
 8006c80:	f7ff fbed 	bl	800645e <__ieee754_pow+0x18e>
 8006c84:	652b82fe 	.word	0x652b82fe
 8006c88:	3c971547 	.word	0x3c971547
 8006c8c:	3fe00000 	.word	0x3fe00000
 8006c90:	fffffc02 	.word	0xfffffc02
 8006c94:	fffffc01 	.word	0xfffffc01
 8006c98:	fff00000 	.word	0xfff00000
 8006c9c:	3fe62e43 	.word	0x3fe62e43
 8006ca0:	fefa39ef 	.word	0xfefa39ef
 8006ca4:	3fe62e42 	.word	0x3fe62e42
 8006ca8:	0ca86c39 	.word	0x0ca86c39
 8006cac:	be205c61 	.word	0xbe205c61
 8006cb0:	72bea4d0 	.word	0x72bea4d0
 8006cb4:	3e663769 	.word	0x3e663769
 8006cb8:	c5d26bf1 	.word	0xc5d26bf1
 8006cbc:	3ebbbd41 	.word	0x3ebbbd41
 8006cc0:	af25de2c 	.word	0xaf25de2c
 8006cc4:	3f11566a 	.word	0x3f11566a
 8006cc8:	16bebd93 	.word	0x16bebd93
 8006ccc:	3f66c16c 	.word	0x3f66c16c
 8006cd0:	5555553e 	.word	0x5555553e
 8006cd4:	3fc55555 	.word	0x3fc55555
 8006cd8:	3ff00000 	.word	0x3ff00000
 8006cdc:	4090cbff 	.word	0x4090cbff
 8006ce0:	3f6f3400 	.word	0x3f6f3400

08006ce4 <fabs>:
 8006ce4:	0049      	lsls	r1, r1, #1
 8006ce6:	084b      	lsrs	r3, r1, #1
 8006ce8:	0019      	movs	r1, r3
 8006cea:	4770      	bx	lr

08006cec <scalbn>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	0014      	movs	r4, r2
 8006cf0:	004a      	lsls	r2, r1, #1
 8006cf2:	000b      	movs	r3, r1
 8006cf4:	0d52      	lsrs	r2, r2, #21
 8006cf6:	d10f      	bne.n	8006d18 <scalbn+0x2c>
 8006cf8:	004b      	lsls	r3, r1, #1
 8006cfa:	085b      	lsrs	r3, r3, #1
 8006cfc:	4303      	orrs	r3, r0
 8006cfe:	d011      	beq.n	8006d24 <scalbn+0x38>
 8006d00:	4b22      	ldr	r3, [pc, #136]	; (8006d8c <scalbn+0xa0>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	f7fa fb2a 	bl	800135c <__aeabi_dmul>
 8006d08:	4b21      	ldr	r3, [pc, #132]	; (8006d90 <scalbn+0xa4>)
 8006d0a:	429c      	cmp	r4, r3
 8006d0c:	da0b      	bge.n	8006d26 <scalbn+0x3a>
 8006d0e:	4a21      	ldr	r2, [pc, #132]	; (8006d94 <scalbn+0xa8>)
 8006d10:	4b21      	ldr	r3, [pc, #132]	; (8006d98 <scalbn+0xac>)
 8006d12:	f7fa fb23 	bl	800135c <__aeabi_dmul>
 8006d16:	e005      	b.n	8006d24 <scalbn+0x38>
 8006d18:	4d20      	ldr	r5, [pc, #128]	; (8006d9c <scalbn+0xb0>)
 8006d1a:	42aa      	cmp	r2, r5
 8006d1c:	d107      	bne.n	8006d2e <scalbn+0x42>
 8006d1e:	0002      	movs	r2, r0
 8006d20:	f7f9 fbc2 	bl	80004a8 <__aeabi_dadd>
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
 8006d26:	000b      	movs	r3, r1
 8006d28:	004a      	lsls	r2, r1, #1
 8006d2a:	0d52      	lsrs	r2, r2, #21
 8006d2c:	3a36      	subs	r2, #54	; 0x36
 8006d2e:	4d1c      	ldr	r5, [pc, #112]	; (8006da0 <scalbn+0xb4>)
 8006d30:	42ac      	cmp	r4, r5
 8006d32:	dd0a      	ble.n	8006d4a <scalbn+0x5e>
 8006d34:	4c1b      	ldr	r4, [pc, #108]	; (8006da4 <scalbn+0xb8>)
 8006d36:	4d1c      	ldr	r5, [pc, #112]	; (8006da8 <scalbn+0xbc>)
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	da01      	bge.n	8006d40 <scalbn+0x54>
 8006d3c:	4c19      	ldr	r4, [pc, #100]	; (8006da4 <scalbn+0xb8>)
 8006d3e:	4d1b      	ldr	r5, [pc, #108]	; (8006dac <scalbn+0xc0>)
 8006d40:	4a18      	ldr	r2, [pc, #96]	; (8006da4 <scalbn+0xb8>)
 8006d42:	4b19      	ldr	r3, [pc, #100]	; (8006da8 <scalbn+0xbc>)
 8006d44:	0020      	movs	r0, r4
 8006d46:	0029      	movs	r1, r5
 8006d48:	e7e3      	b.n	8006d12 <scalbn+0x26>
 8006d4a:	18a2      	adds	r2, r4, r2
 8006d4c:	4c18      	ldr	r4, [pc, #96]	; (8006db0 <scalbn+0xc4>)
 8006d4e:	42a2      	cmp	r2, r4
 8006d50:	dcf0      	bgt.n	8006d34 <scalbn+0x48>
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	dd05      	ble.n	8006d62 <scalbn+0x76>
 8006d56:	4c17      	ldr	r4, [pc, #92]	; (8006db4 <scalbn+0xc8>)
 8006d58:	0512      	lsls	r2, r2, #20
 8006d5a:	4023      	ands	r3, r4
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	0019      	movs	r1, r3
 8006d60:	e7e0      	b.n	8006d24 <scalbn+0x38>
 8006d62:	0014      	movs	r4, r2
 8006d64:	3435      	adds	r4, #53	; 0x35
 8006d66:	da08      	bge.n	8006d7a <scalbn+0x8e>
 8006d68:	4c0a      	ldr	r4, [pc, #40]	; (8006d94 <scalbn+0xa8>)
 8006d6a:	4d0b      	ldr	r5, [pc, #44]	; (8006d98 <scalbn+0xac>)
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	da01      	bge.n	8006d74 <scalbn+0x88>
 8006d70:	4c08      	ldr	r4, [pc, #32]	; (8006d94 <scalbn+0xa8>)
 8006d72:	4d11      	ldr	r5, [pc, #68]	; (8006db8 <scalbn+0xcc>)
 8006d74:	4a07      	ldr	r2, [pc, #28]	; (8006d94 <scalbn+0xa8>)
 8006d76:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <scalbn+0xac>)
 8006d78:	e7e4      	b.n	8006d44 <scalbn+0x58>
 8006d7a:	4c0e      	ldr	r4, [pc, #56]	; (8006db4 <scalbn+0xc8>)
 8006d7c:	3236      	adds	r2, #54	; 0x36
 8006d7e:	4023      	ands	r3, r4
 8006d80:	0512      	lsls	r2, r2, #20
 8006d82:	431a      	orrs	r2, r3
 8006d84:	0011      	movs	r1, r2
 8006d86:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <scalbn+0xd0>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	e7c2      	b.n	8006d12 <scalbn+0x26>
 8006d8c:	43500000 	.word	0x43500000
 8006d90:	ffff3cb0 	.word	0xffff3cb0
 8006d94:	c2f8f359 	.word	0xc2f8f359
 8006d98:	01a56e1f 	.word	0x01a56e1f
 8006d9c:	000007ff 	.word	0x000007ff
 8006da0:	0000c350 	.word	0x0000c350
 8006da4:	8800759c 	.word	0x8800759c
 8006da8:	7e37e43c 	.word	0x7e37e43c
 8006dac:	fe37e43c 	.word	0xfe37e43c
 8006db0:	000007fe 	.word	0x000007fe
 8006db4:	800fffff 	.word	0x800fffff
 8006db8:	81a56e1f 	.word	0x81a56e1f
 8006dbc:	3c900000 	.word	0x3c900000

08006dc0 <with_errno>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	000d      	movs	r5, r1
 8006dc4:	0016      	movs	r6, r2
 8006dc6:	0004      	movs	r4, r0
 8006dc8:	f7ff f9e2 	bl	8006190 <__errno>
 8006dcc:	0029      	movs	r1, r5
 8006dce:	6006      	str	r6, [r0, #0]
 8006dd0:	0020      	movs	r0, r4
 8006dd2:	bd70      	pop	{r4, r5, r6, pc}

08006dd4 <xflow>:
 8006dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dd6:	0015      	movs	r5, r2
 8006dd8:	001c      	movs	r4, r3
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d010      	beq.n	8006e00 <xflow+0x2c>
 8006dde:	2380      	movs	r3, #128	; 0x80
 8006de0:	0010      	movs	r0, r2
 8006de2:	061b      	lsls	r3, r3, #24
 8006de4:	18e1      	adds	r1, r4, r3
 8006de6:	9000      	str	r0, [sp, #0]
 8006de8:	9101      	str	r1, [sp, #4]
 8006dea:	9a00      	ldr	r2, [sp, #0]
 8006dec:	9b01      	ldr	r3, [sp, #4]
 8006dee:	0028      	movs	r0, r5
 8006df0:	0021      	movs	r1, r4
 8006df2:	f7fa fab3 	bl	800135c <__aeabi_dmul>
 8006df6:	2222      	movs	r2, #34	; 0x22
 8006df8:	f7ff ffe2 	bl	8006dc0 <with_errno>
 8006dfc:	b003      	add	sp, #12
 8006dfe:	bd30      	pop	{r4, r5, pc}
 8006e00:	0010      	movs	r0, r2
 8006e02:	0019      	movs	r1, r3
 8006e04:	e7ef      	b.n	8006de6 <xflow+0x12>

08006e06 <__math_uflow>:
 8006e06:	2380      	movs	r3, #128	; 0x80
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	055b      	lsls	r3, r3, #21
 8006e0e:	f7ff ffe1 	bl	8006dd4 <xflow>
 8006e12:	bd10      	pop	{r4, pc}

08006e14 <__math_oflow>:
 8006e14:	23e0      	movs	r3, #224	; 0xe0
 8006e16:	b510      	push	{r4, lr}
 8006e18:	2200      	movs	r2, #0
 8006e1a:	05db      	lsls	r3, r3, #23
 8006e1c:	f7ff ffda 	bl	8006dd4 <xflow>
 8006e20:	bd10      	pop	{r4, pc}
	...

08006e24 <__ieee754_sqrt>:
 8006e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e26:	000a      	movs	r2, r1
 8006e28:	000c      	movs	r4, r1
 8006e2a:	496f      	ldr	r1, [pc, #444]	; (8006fe8 <__ieee754_sqrt+0x1c4>)
 8006e2c:	0005      	movs	r5, r0
 8006e2e:	0003      	movs	r3, r0
 8006e30:	0008      	movs	r0, r1
 8006e32:	b087      	sub	sp, #28
 8006e34:	4020      	ands	r0, r4
 8006e36:	4288      	cmp	r0, r1
 8006e38:	d111      	bne.n	8006e5e <__ieee754_sqrt+0x3a>
 8006e3a:	002a      	movs	r2, r5
 8006e3c:	0023      	movs	r3, r4
 8006e3e:	0028      	movs	r0, r5
 8006e40:	0021      	movs	r1, r4
 8006e42:	f7fa fa8b 	bl	800135c <__aeabi_dmul>
 8006e46:	0002      	movs	r2, r0
 8006e48:	000b      	movs	r3, r1
 8006e4a:	0028      	movs	r0, r5
 8006e4c:	0021      	movs	r1, r4
 8006e4e:	f7f9 fb2b 	bl	80004a8 <__aeabi_dadd>
 8006e52:	0005      	movs	r5, r0
 8006e54:	000c      	movs	r4, r1
 8006e56:	0028      	movs	r0, r5
 8006e58:	0021      	movs	r1, r4
 8006e5a:	b007      	add	sp, #28
 8006e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e5e:	2c00      	cmp	r4, #0
 8006e60:	dc12      	bgt.n	8006e88 <__ieee754_sqrt+0x64>
 8006e62:	0061      	lsls	r1, r4, #1
 8006e64:	0849      	lsrs	r1, r1, #1
 8006e66:	4329      	orrs	r1, r5
 8006e68:	d0f5      	beq.n	8006e56 <__ieee754_sqrt+0x32>
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	428c      	cmp	r4, r1
 8006e6e:	d100      	bne.n	8006e72 <__ieee754_sqrt+0x4e>
 8006e70:	e09f      	b.n	8006fb2 <__ieee754_sqrt+0x18e>
 8006e72:	002a      	movs	r2, r5
 8006e74:	0023      	movs	r3, r4
 8006e76:	0028      	movs	r0, r5
 8006e78:	0021      	movs	r1, r4
 8006e7a:	f7fa fd31 	bl	80018e0 <__aeabi_dsub>
 8006e7e:	0002      	movs	r2, r0
 8006e80:	000b      	movs	r3, r1
 8006e82:	f7f9 fe71 	bl	8000b68 <__aeabi_ddiv>
 8006e86:	e7e4      	b.n	8006e52 <__ieee754_sqrt+0x2e>
 8006e88:	1521      	asrs	r1, r4, #20
 8006e8a:	d100      	bne.n	8006e8e <__ieee754_sqrt+0x6a>
 8006e8c:	e091      	b.n	8006fb2 <__ieee754_sqrt+0x18e>
 8006e8e:	4857      	ldr	r0, [pc, #348]	; (8006fec <__ieee754_sqrt+0x1c8>)
 8006e90:	0312      	lsls	r2, r2, #12
 8006e92:	180c      	adds	r4, r1, r0
 8006e94:	2080      	movs	r0, #128	; 0x80
 8006e96:	0b12      	lsrs	r2, r2, #12
 8006e98:	0340      	lsls	r0, r0, #13
 8006e9a:	4310      	orrs	r0, r2
 8006e9c:	07c9      	lsls	r1, r1, #31
 8006e9e:	d403      	bmi.n	8006ea8 <__ieee754_sqrt+0x84>
 8006ea0:	0fda      	lsrs	r2, r3, #31
 8006ea2:	0040      	lsls	r0, r0, #1
 8006ea4:	1810      	adds	r0, r2, r0
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	1062      	asrs	r2, r4, #1
 8006eac:	0040      	lsls	r0, r0, #1
 8006eae:	2480      	movs	r4, #128	; 0x80
 8006eb0:	9205      	str	r2, [sp, #20]
 8006eb2:	0fda      	lsrs	r2, r3, #31
 8006eb4:	1812      	adds	r2, r2, r0
 8006eb6:	0029      	movs	r1, r5
 8006eb8:	2016      	movs	r0, #22
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	03a4      	lsls	r4, r4, #14
 8006ebe:	190e      	adds	r6, r1, r4
 8006ec0:	4296      	cmp	r6, r2
 8006ec2:	dc02      	bgt.n	8006eca <__ieee754_sqrt+0xa6>
 8006ec4:	1931      	adds	r1, r6, r4
 8006ec6:	1b92      	subs	r2, r2, r6
 8006ec8:	192d      	adds	r5, r5, r4
 8006eca:	0fde      	lsrs	r6, r3, #31
 8006ecc:	0052      	lsls	r2, r2, #1
 8006ece:	3801      	subs	r0, #1
 8006ed0:	18b2      	adds	r2, r6, r2
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	0864      	lsrs	r4, r4, #1
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d1f1      	bne.n	8006ebe <__ieee754_sqrt+0x9a>
 8006eda:	2620      	movs	r6, #32
 8006edc:	2780      	movs	r7, #128	; 0x80
 8006ede:	0004      	movs	r4, r0
 8006ee0:	9604      	str	r6, [sp, #16]
 8006ee2:	063f      	lsls	r7, r7, #24
 8006ee4:	183e      	adds	r6, r7, r0
 8006ee6:	46b4      	mov	ip, r6
 8006ee8:	428a      	cmp	r2, r1
 8006eea:	dc02      	bgt.n	8006ef2 <__ieee754_sqrt+0xce>
 8006eec:	d114      	bne.n	8006f18 <__ieee754_sqrt+0xf4>
 8006eee:	429e      	cmp	r6, r3
 8006ef0:	d812      	bhi.n	8006f18 <__ieee754_sqrt+0xf4>
 8006ef2:	4660      	mov	r0, ip
 8006ef4:	4666      	mov	r6, ip
 8006ef6:	19c0      	adds	r0, r0, r7
 8006ef8:	9100      	str	r1, [sp, #0]
 8006efa:	2e00      	cmp	r6, #0
 8006efc:	da03      	bge.n	8006f06 <__ieee754_sqrt+0xe2>
 8006efe:	43c6      	mvns	r6, r0
 8006f00:	0ff6      	lsrs	r6, r6, #31
 8006f02:	198e      	adds	r6, r1, r6
 8006f04:	9600      	str	r6, [sp, #0]
 8006f06:	1a52      	subs	r2, r2, r1
 8006f08:	4563      	cmp	r3, ip
 8006f0a:	4189      	sbcs	r1, r1
 8006f0c:	4249      	negs	r1, r1
 8006f0e:	1a52      	subs	r2, r2, r1
 8006f10:	4661      	mov	r1, ip
 8006f12:	1a5b      	subs	r3, r3, r1
 8006f14:	9900      	ldr	r1, [sp, #0]
 8006f16:	19e4      	adds	r4, r4, r7
 8006f18:	0fde      	lsrs	r6, r3, #31
 8006f1a:	0052      	lsls	r2, r2, #1
 8006f1c:	18b2      	adds	r2, r6, r2
 8006f1e:	9e04      	ldr	r6, [sp, #16]
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	3e01      	subs	r6, #1
 8006f24:	087f      	lsrs	r7, r7, #1
 8006f26:	9604      	str	r6, [sp, #16]
 8006f28:	2e00      	cmp	r6, #0
 8006f2a:	d1db      	bne.n	8006ee4 <__ieee754_sqrt+0xc0>
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	d01f      	beq.n	8006f70 <__ieee754_sqrt+0x14c>
 8006f30:	4e2f      	ldr	r6, [pc, #188]	; (8006ff0 <__ieee754_sqrt+0x1cc>)
 8006f32:	4f30      	ldr	r7, [pc, #192]	; (8006ff4 <__ieee754_sqrt+0x1d0>)
 8006f34:	6830      	ldr	r0, [r6, #0]
 8006f36:	6871      	ldr	r1, [r6, #4]
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	9200      	str	r2, [sp, #0]
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	6832      	ldr	r2, [r6, #0]
 8006f42:	6873      	ldr	r3, [r6, #4]
 8006f44:	9202      	str	r2, [sp, #8]
 8006f46:	9303      	str	r3, [sp, #12]
 8006f48:	9a00      	ldr	r2, [sp, #0]
 8006f4a:	9b01      	ldr	r3, [sp, #4]
 8006f4c:	f7fa fcc8 	bl	80018e0 <__aeabi_dsub>
 8006f50:	0002      	movs	r2, r0
 8006f52:	000b      	movs	r3, r1
 8006f54:	9802      	ldr	r0, [sp, #8]
 8006f56:	9903      	ldr	r1, [sp, #12]
 8006f58:	f7f9 fa6a 	bl	8000430 <__aeabi_dcmple>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d007      	beq.n	8006f70 <__ieee754_sqrt+0x14c>
 8006f60:	6830      	ldr	r0, [r6, #0]
 8006f62:	6871      	ldr	r1, [r6, #4]
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	1c67      	adds	r7, r4, #1
 8006f6a:	d127      	bne.n	8006fbc <__ieee754_sqrt+0x198>
 8006f6c:	9c04      	ldr	r4, [sp, #16]
 8006f6e:	3501      	adds	r5, #1
 8006f70:	4b21      	ldr	r3, [pc, #132]	; (8006ff8 <__ieee754_sqrt+0x1d4>)
 8006f72:	1069      	asrs	r1, r5, #1
 8006f74:	18c9      	adds	r1, r1, r3
 8006f76:	0864      	lsrs	r4, r4, #1
 8006f78:	07ed      	lsls	r5, r5, #31
 8006f7a:	d502      	bpl.n	8006f82 <__ieee754_sqrt+0x15e>
 8006f7c:	2380      	movs	r3, #128	; 0x80
 8006f7e:	061b      	lsls	r3, r3, #24
 8006f80:	431c      	orrs	r4, r3
 8006f82:	9b05      	ldr	r3, [sp, #20]
 8006f84:	0025      	movs	r5, r4
 8006f86:	0518      	lsls	r0, r3, #20
 8006f88:	1843      	adds	r3, r0, r1
 8006f8a:	001c      	movs	r4, r3
 8006f8c:	e763      	b.n	8006e56 <__ieee754_sqrt+0x32>
 8006f8e:	0ada      	lsrs	r2, r3, #11
 8006f90:	3815      	subs	r0, #21
 8006f92:	055b      	lsls	r3, r3, #21
 8006f94:	2a00      	cmp	r2, #0
 8006f96:	d0fa      	beq.n	8006f8e <__ieee754_sqrt+0x16a>
 8006f98:	2480      	movs	r4, #128	; 0x80
 8006f9a:	0364      	lsls	r4, r4, #13
 8006f9c:	4222      	tst	r2, r4
 8006f9e:	d00a      	beq.n	8006fb6 <__ieee754_sqrt+0x192>
 8006fa0:	2420      	movs	r4, #32
 8006fa2:	001e      	movs	r6, r3
 8006fa4:	1a64      	subs	r4, r4, r1
 8006fa6:	40e6      	lsrs	r6, r4
 8006fa8:	1e4d      	subs	r5, r1, #1
 8006faa:	408b      	lsls	r3, r1
 8006fac:	4332      	orrs	r2, r6
 8006fae:	1b41      	subs	r1, r0, r5
 8006fb0:	e76d      	b.n	8006e8e <__ieee754_sqrt+0x6a>
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	e7ee      	b.n	8006f94 <__ieee754_sqrt+0x170>
 8006fb6:	0052      	lsls	r2, r2, #1
 8006fb8:	3101      	adds	r1, #1
 8006fba:	e7ef      	b.n	8006f9c <__ieee754_sqrt+0x178>
 8006fbc:	f7f9 fa74 	bl	80004a8 <__aeabi_dadd>
 8006fc0:	6877      	ldr	r7, [r6, #4]
 8006fc2:	6836      	ldr	r6, [r6, #0]
 8006fc4:	0002      	movs	r2, r0
 8006fc6:	000b      	movs	r3, r1
 8006fc8:	0030      	movs	r0, r6
 8006fca:	0039      	movs	r1, r7
 8006fcc:	f7f9 fa26 	bl	800041c <__aeabi_dcmplt>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d004      	beq.n	8006fde <__ieee754_sqrt+0x1ba>
 8006fd4:	3402      	adds	r4, #2
 8006fd6:	4263      	negs	r3, r4
 8006fd8:	4163      	adcs	r3, r4
 8006fda:	18ed      	adds	r5, r5, r3
 8006fdc:	e7c8      	b.n	8006f70 <__ieee754_sqrt+0x14c>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	3401      	adds	r4, #1
 8006fe2:	439c      	bics	r4, r3
 8006fe4:	e7c4      	b.n	8006f70 <__ieee754_sqrt+0x14c>
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	7ff00000 	.word	0x7ff00000
 8006fec:	fffffc01 	.word	0xfffffc01
 8006ff0:	20000060 	.word	0x20000060
 8006ff4:	20000068 	.word	0x20000068
 8006ff8:	3fe00000 	.word	0x3fe00000

08006ffc <_init>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007002:	bc08      	pop	{r3}
 8007004:	469e      	mov	lr, r3
 8007006:	4770      	bx	lr

08007008 <_fini>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700e:	bc08      	pop	{r3}
 8007010:	469e      	mov	lr, r3
 8007012:	4770      	bx	lr
