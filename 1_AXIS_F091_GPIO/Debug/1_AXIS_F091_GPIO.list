
1_AXIS_F091_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039ac  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a98  08003a98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a98  08003a98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a98  08003a98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a98  08003a98  00013a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000000c  08003aac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08003aac  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f52  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4d  00000000  00000000  00028f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002a9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002b298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b373  00000000  00000000  0002ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009db4  00000000  00000000  00046e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa348  00000000  00000000  00050bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000faeff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e74  00000000  00000000  000faf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003a50 	.word	0x08003a50

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003a50 	.word	0x08003a50

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <TMC5160_Basic_Init>:
	}*/
}


void TMC5160_Basic_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
		TMC5160_Stop();
 8000220:	f000 f926 	bl	8000470 <TMC5160_Stop>
		TMC5160_SPIWrite(0x00, 	0x00000008, 1); 		// writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 8000224:	2201      	movs	r2, #1
 8000226:	2108      	movs	r1, #8
 8000228:	2000      	movs	r0, #0
 800022a:	f000 fc2d 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x00, 	0x00000008, 0); 		// writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 800022e:	2200      	movs	r2, #0
 8000230:	2108      	movs	r1, #8
 8000232:	2000      	movs	r0, #0
 8000234:	f000 fc28 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x03, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 1 = 0x03(SLAVECONF)
 8000238:	2201      	movs	r2, #1
 800023a:	2100      	movs	r1, #0
 800023c:	2003      	movs	r0, #3
 800023e:	f000 fc23 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x05, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 2 = 0x05(X_COMPARE)
 8000242:	2201      	movs	r2, #1
 8000244:	2100      	movs	r1, #0
 8000246:	2005      	movs	r0, #5
 8000248:	f000 fc1e 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x06, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 3 = 0x06(OTP_PROG)
 800024c:	2201      	movs	r2, #1
 800024e:	2100      	movs	r1, #0
 8000250:	2006      	movs	r0, #6
 8000252:	f000 fc19 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x08, 	0x0000000F, 1); 		// writing value 0x0000000F = 15 = 0.0 to address 4 = 0x08(FACTORY_CONF)
 8000256:	2201      	movs	r2, #1
 8000258:	210f      	movs	r1, #15
 800025a:	2008      	movs	r0, #8
 800025c:	f000 fc14 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x09, 	0x00010606, 1); 		// writing value 0x00010606 = 67078 = 0.0 to address 5 = 0x09(SHORT_CONF)
 8000260:	4b73      	ldr	r3, [pc, #460]	; (8000430 <TMC5160_Basic_Init+0x214>)
 8000262:	2201      	movs	r2, #1
 8000264:	0019      	movs	r1, r3
 8000266:	2009      	movs	r0, #9
 8000268:	f000 fc0e 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x0A, 	0x00080400, 1); 		// writing value 0x00080400 = 525312 = 0.0 to address 6 = 0x0A(DRV_CONF)
 800026c:	4b71      	ldr	r3, [pc, #452]	; (8000434 <TMC5160_Basic_Init+0x218>)
 800026e:	2201      	movs	r2, #1
 8000270:	0019      	movs	r1, r3
 8000272:	200a      	movs	r0, #10
 8000274:	f000 fc08 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x0B, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 7 = 0x0B(GLOBAL_SCALER)
 8000278:	2201      	movs	r2, #1
 800027a:	2100      	movs	r1, #0
 800027c:	200b      	movs	r0, #11
 800027e:	f000 fc03 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x10, 	0x00070A03, 1); 		// writing value 0x00070A03 = 461315 = 0.0 to address 8 = 0x10(IHOLD_IRUN)
 8000282:	4b6d      	ldr	r3, [pc, #436]	; (8000438 <TMC5160_Basic_Init+0x21c>)
 8000284:	2201      	movs	r2, #1
 8000286:	0019      	movs	r1, r3
 8000288:	2010      	movs	r0, #16
 800028a:	f000 fbfd 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x11, 	0x0000000A, 1); 		// writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 800028e:	2201      	movs	r2, #1
 8000290:	210a      	movs	r1, #10
 8000292:	2011      	movs	r0, #17
 8000294:	f000 fbf8 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x13, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 8000298:	2201      	movs	r2, #1
 800029a:	2100      	movs	r1, #0
 800029c:	2013      	movs	r0, #19
 800029e:	f000 fbf3 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x14, 	0x00000000, 1); 		// writing value 0x00000010 = 16 = 0.0 to address 11 = 0x14(TCOOLTHRS)
 80002a2:	2201      	movs	r2, #1
 80002a4:	2100      	movs	r1, #0
 80002a6:	2014      	movs	r0, #20
 80002a8:	f000 fbee 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x15, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 12 = 0x15(THIGH)
 80002ac:	2201      	movs	r2, #1
 80002ae:	2100      	movs	r1, #0
 80002b0:	2015      	movs	r0, #21
 80002b2:	f000 fbe9 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x20, 	0x00000001, 1); 		// writing value 0x00000001 = 1 = 0.0 to address 13 = 0x20(RAMPMODE)
 80002b6:	2201      	movs	r2, #1
 80002b8:	2101      	movs	r1, #1
 80002ba:	2020      	movs	r0, #32
 80002bc:	f000 fbe4 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x21, 	0x00000000, 1); 		// writing value 0x0016DFDD = 1499101 = 0.0 to address 14 = 0x21(XACTUAL)
 80002c0:	2201      	movs	r2, #1
 80002c2:	2100      	movs	r1, #0
 80002c4:	2021      	movs	r0, #33	; 0x21
 80002c6:	f000 fbdf 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x23, 	0x000003E8, 1); 		// writing value 0x000003E8 = 1000 = 0.0 to address 15 = 0x23(VSTART)
 80002ca:	23fa      	movs	r3, #250	; 0xfa
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	2201      	movs	r2, #1
 80002d0:	0019      	movs	r1, r3
 80002d2:	2023      	movs	r0, #35	; 0x23
 80002d4:	f000 fbd8 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x24, 	0x000003E8, 1); 		// writing value 0x000003E8 = 1000 = 0.0 to address 16 = 0x24(A1)
 80002d8:	23fa      	movs	r3, #250	; 0xfa
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	2201      	movs	r2, #1
 80002de:	0019      	movs	r1, r3
 80002e0:	2024      	movs	r0, #36	; 0x24
 80002e2:	f000 fbd1 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x25, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 17 = 0x25(V1)
 80002e6:	2201      	movs	r2, #1
 80002e8:	2100      	movs	r1, #0
 80002ea:	2025      	movs	r0, #37	; 0x25
 80002ec:	f000 fbcc 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x26, 	0x000009C4, 1); 		// writing value 0x000009C4 = 2500 = 0.0 to address 18 = 0x26(AMAX)
 80002f0:	4b52      	ldr	r3, [pc, #328]	; (800043c <TMC5160_Basic_Init+0x220>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	0019      	movs	r1, r3
 80002f6:	2026      	movs	r0, #38	; 0x26
 80002f8:	f000 fbc6 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x27, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 19 = 0x27(VMAX)
 80002fc:	2201      	movs	r2, #1
 80002fe:	2100      	movs	r1, #0
 8000300:	2027      	movs	r0, #39	; 0x27
 8000302:	f000 fbc1 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x28, 	0x000002BC, 1); 		// writing value 0x000002BC = 700 = 0.0 to address 20 = 0x28(DMAX)
 8000306:	23af      	movs	r3, #175	; 0xaf
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	2201      	movs	r2, #1
 800030c:	0019      	movs	r1, r3
 800030e:	2028      	movs	r0, #40	; 0x28
 8000310:	f000 fbba 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x2A, 	0x00000578, 1); 		// writing value 0x00000578 = 1400 = 0.0 to address 21 = 0x2A(D1)
 8000314:	23af      	movs	r3, #175	; 0xaf
 8000316:	00db      	lsls	r3, r3, #3
 8000318:	2201      	movs	r2, #1
 800031a:	0019      	movs	r1, r3
 800031c:	202a      	movs	r0, #42	; 0x2a
 800031e:	f000 fbb3 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x2B, 	0x0000000A, 1); 		// writing value 0x0000000A = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 8000322:	2201      	movs	r2, #1
 8000324:	210a      	movs	r1, #10
 8000326:	202b      	movs	r0, #43	; 0x2b
 8000328:	f000 fbae 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x2C, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 23 = 0x2C(TZEROWAIT)
 800032c:	2201      	movs	r2, #1
 800032e:	2100      	movs	r1, #0
 8000330:	202c      	movs	r0, #44	; 0x2c
 8000332:	f000 fba9 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x2D, 	0xFFFF9C00, 1); 		// writing value 0xFFFF9C00 = 0 = 0.0 to address 24 = 0x2D(XTARGET)
 8000336:	4b42      	ldr	r3, [pc, #264]	; (8000440 <TMC5160_Basic_Init+0x224>)
 8000338:	2201      	movs	r2, #1
 800033a:	0019      	movs	r1, r3
 800033c:	202d      	movs	r0, #45	; 0x2d
 800033e:	f000 fba3 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x33, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 25 = 0x33(VDCMIN)
 8000342:	2201      	movs	r2, #1
 8000344:	2100      	movs	r1, #0
 8000346:	2033      	movs	r0, #51	; 0x33
 8000348:	f000 fb9e 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x34, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 26 = 0x34(SW_MODE)
 800034c:	2201      	movs	r2, #1
 800034e:	2100      	movs	r1, #0
 8000350:	2034      	movs	r0, #52	; 0x34
 8000352:	f000 fb99 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x38, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 27 = 0x38(ENCMODE)
 8000356:	2201      	movs	r2, #1
 8000358:	2100      	movs	r1, #0
 800035a:	2038      	movs	r0, #56	; 0x38
 800035c:	f000 fb94 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x39, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 28 = 0x39(X_ENC)
 8000360:	2201      	movs	r2, #1
 8000362:	2100      	movs	r1, #0
 8000364:	2039      	movs	r0, #57	; 0x39
 8000366:	f000 fb8f 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x3A, 	0x00010000, 1); 		// writing value 0x00010000 = 65536 = 0.0 to address 29 = 0x3A(ENC_CONST)
 800036a:	2380      	movs	r3, #128	; 0x80
 800036c:	025b      	lsls	r3, r3, #9
 800036e:	2201      	movs	r2, #1
 8000370:	0019      	movs	r1, r3
 8000372:	203a      	movs	r0, #58	; 0x3a
 8000374:	f000 fb88 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x3D, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 30 = 0x3D(ENC_DEVIATION)
 8000378:	2201      	movs	r2, #1
 800037a:	2100      	movs	r1, #0
 800037c:	203d      	movs	r0, #61	; 0x3d
 800037e:	f000 fb83 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x60, 	0xAAAAB554, 1); 		// writing value 0xAAAAB554 = 0 = 0.0 to address 31 = 0x60(MSLUT[0])
 8000382:	4b30      	ldr	r3, [pc, #192]	; (8000444 <TMC5160_Basic_Init+0x228>)
 8000384:	2201      	movs	r2, #1
 8000386:	0019      	movs	r1, r3
 8000388:	2060      	movs	r0, #96	; 0x60
 800038a:	f000 fb7d 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x61, 	0x4A9554AA, 1); 		// writing value 0x4A9554AA = 1251300522 = 0.0 to address 32 = 0x61(MSLUT[1])
 800038e:	4b2e      	ldr	r3, [pc, #184]	; (8000448 <TMC5160_Basic_Init+0x22c>)
 8000390:	2201      	movs	r2, #1
 8000392:	0019      	movs	r1, r3
 8000394:	2061      	movs	r0, #97	; 0x61
 8000396:	f000 fb77 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x62, 	0x24492929, 1); 		// writing value 0x24492929 = 608774441 = 0.0 to address 33 = 0x62(MSLUT[2])
 800039a:	4b2c      	ldr	r3, [pc, #176]	; (800044c <TMC5160_Basic_Init+0x230>)
 800039c:	2201      	movs	r2, #1
 800039e:	0019      	movs	r1, r3
 80003a0:	2062      	movs	r0, #98	; 0x62
 80003a2:	f000 fb71 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x63, 	0x10104222, 1); 		// writing value 0x10104222 = 269500962 = 0.0 to address 34 = 0x63(MSLUT[3])
 80003a6:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <TMC5160_Basic_Init+0x234>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	0019      	movs	r1, r3
 80003ac:	2063      	movs	r0, #99	; 0x63
 80003ae:	f000 fb6b 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x64, 	0xFBFFFFFF, 1); 		// writing value 0xFBFFFFFF = 0 = 0.0 to address 35 = 0x64(MSLUT[4])
 80003b2:	4b28      	ldr	r3, [pc, #160]	; (8000454 <TMC5160_Basic_Init+0x238>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	0019      	movs	r1, r3
 80003b8:	2064      	movs	r0, #100	; 0x64
 80003ba:	f000 fb65 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x65, 	0xB5BB777D, 1); 		// writing value 0xB5BB777D = 0 = 0.0 to address 36 = 0x65(MSLUT[5])
 80003be:	4b26      	ldr	r3, [pc, #152]	; (8000458 <TMC5160_Basic_Init+0x23c>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	0019      	movs	r1, r3
 80003c4:	2065      	movs	r0, #101	; 0x65
 80003c6:	f000 fb5f 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x66, 	0x49295556, 1); 		// writing value 0x49295556 = 1227445590 = 0.0 to address 37 = 0x66(MSLUT[6])
 80003ca:	4b24      	ldr	r3, [pc, #144]	; (800045c <TMC5160_Basic_Init+0x240>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	0019      	movs	r1, r3
 80003d0:	2066      	movs	r0, #102	; 0x66
 80003d2:	f000 fb59 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x67, 	0x00404222, 1); 		// writing value 0x00404222 = 4211234 = 0.0 to address 38 = 0x67(MSLUT[7])
 80003d6:	4b22      	ldr	r3, [pc, #136]	; (8000460 <TMC5160_Basic_Init+0x244>)
 80003d8:	2201      	movs	r2, #1
 80003da:	0019      	movs	r1, r3
 80003dc:	2067      	movs	r0, #103	; 0x67
 80003de:	f000 fb53 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x68, 	0xFFFF8056, 1); 		// writing value 0xFFFF8056 = 0 = 0.0 to address 39 = 0x68(MSLUTSEL)
 80003e2:	4b20      	ldr	r3, [pc, #128]	; (8000464 <TMC5160_Basic_Init+0x248>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	0019      	movs	r1, r3
 80003e8:	2068      	movs	r0, #104	; 0x68
 80003ea:	f000 fb4d 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x69, 	0x00F70000, 1); 		// writing value 0x00F70000 = 16187392 = 0.0 to address 40 = 0x69(MSLUTSTART)
 80003ee:	23f7      	movs	r3, #247	; 0xf7
 80003f0:	041b      	lsls	r3, r3, #16
 80003f2:	2201      	movs	r2, #1
 80003f4:	0019      	movs	r1, r3
 80003f6:	2069      	movs	r0, #105	; 0x69
 80003f8:	f000 fb46 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x6C, 	0x00410153, 1); 		// writing value 0x00410103 = 4260099 = 0.0 to address 41 = 0x6C(CHOPCONF)
 80003fc:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <TMC5160_Basic_Init+0x24c>)
 80003fe:	2201      	movs	r2, #1
 8000400:	0019      	movs	r1, r3
 8000402:	206c      	movs	r0, #108	; 0x6c
 8000404:	f000 fb40 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x6D, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 42 = 0x6D(COOLCONF)
 8000408:	2201      	movs	r2, #1
 800040a:	2100      	movs	r1, #0
 800040c:	206d      	movs	r0, #109	; 0x6d
 800040e:	f000 fb3b 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x6E, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 43 = 0x6E(DCCTRL)
 8000412:	2201      	movs	r2, #1
 8000414:	2100      	movs	r1, #0
 8000416:	206e      	movs	r0, #110	; 0x6e
 8000418:	f000 fb36 	bl	8000a88 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x70, 	0xC40C001E, 1); 		// writing value 0xC40C001E = 0 = 0.0 to address 44 = 0x70(PWMCONF)
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <TMC5160_Basic_Init+0x250>)
 800041e:	2201      	movs	r2, #1
 8000420:	0019      	movs	r1, r3
 8000422:	2070      	movs	r0, #112	; 0x70
 8000424:	f000 fb30 	bl	8000a88 <TMC5160_SPIWrite>
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	00010606 	.word	0x00010606
 8000434:	00080400 	.word	0x00080400
 8000438:	00070a03 	.word	0x00070a03
 800043c:	000009c4 	.word	0x000009c4
 8000440:	ffff9c00 	.word	0xffff9c00
 8000444:	aaaab554 	.word	0xaaaab554
 8000448:	4a9554aa 	.word	0x4a9554aa
 800044c:	24492929 	.word	0x24492929
 8000450:	10104222 	.word	0x10104222
 8000454:	fbffffff 	.word	0xfbffffff
 8000458:	b5bb777d 	.word	0xb5bb777d
 800045c:	49295556 	.word	0x49295556
 8000460:	00404222 	.word	0x00404222
 8000464:	ffff8056 	.word	0xffff8056
 8000468:	00410153 	.word	0x00410153
 800046c:	c40c001e 	.word	0xc40c001e

08000470 <TMC5160_Stop>:
		AMS5055_SPIWriteInt(0x3FFF,1);
	}
}

void TMC5160_Stop(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	TMC5160_SPIWrite(0x26, 	0x00000000, 1); 		// writing value 0x000009C4 = 500 = 0.0 to address 18 = 0x26(AMAX)
 8000474:	2201      	movs	r2, #1
 8000476:	2100      	movs	r1, #0
 8000478:	2026      	movs	r0, #38	; 0x26
 800047a:	f000 fb05 	bl	8000a88 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x27, 	0x00000000, 1); 		// writing value 0x00000000 = 200 000 = 0.0 to address 19 = 0x27(VMAX)
 800047e:	2201      	movs	r2, #1
 8000480:	2100      	movs	r1, #0
 8000482:	2027      	movs	r0, #39	; 0x27
 8000484:	f000 fb00 	bl	8000a88 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x24, 	0x00000000, 1); 		// writing value 0x000003E8 = 1 000 = 0.0 to address 16 = 0x24(A1)
 8000488:	2201      	movs	r2, #1
 800048a:	2100      	movs	r1, #0
 800048c:	2024      	movs	r0, #36	; 0x24
 800048e:	f000 fafb 	bl	8000a88 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x25, 	0x00000000, 1); 		// writing value 0x00000000 = 50 000 = 0.0 to address 17 = 0x25(V1)
 8000492:	2201      	movs	r2, #1
 8000494:	2100      	movs	r1, #0
 8000496:	2025      	movs	r0, #37	; 0x25
 8000498:	f000 faf6 	bl	8000a88 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x28, 	0x00000000, 1); 		// writing value 0x000002BC = 700 = 0.0 to address 20 = 0x28(DMAX)
 800049c:	2201      	movs	r2, #1
 800049e:	2100      	movs	r1, #0
 80004a0:	2028      	movs	r0, #40	; 0x28
 80004a2:	f000 faf1 	bl	8000a88 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2A, 	0x00000010, 1); 		// writing value 0x00000578 = 1 400 = 0.0 to address 21 = 0x2A(D1)
 80004a6:	2201      	movs	r2, #1
 80004a8:	2110      	movs	r1, #16
 80004aa:	202a      	movs	r0, #42	; 0x2a
 80004ac:	f000 faec 	bl	8000a88 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2B, 	0x00000010, 1); 		// writing value 0x0000000A = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 80004b0:	2201      	movs	r2, #1
 80004b2:	2110      	movs	r1, #16
 80004b4:	202b      	movs	r0, #43	; 0x2b
 80004b6:	f000 fae7 	bl	8000a88 <TMC5160_SPIWrite>
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <HAL_CAN_RxFifo0MsgPendingCallback>:
int x;


/*  CAN RECEIVE INTERRUPT */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CANRxHeader, CANRxData);
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	2100      	movs	r1, #0
 80004d0:	f001 fbaa 	bl	8001c28 <HAL_CAN_GetRxMessage>

	if (CANRxData[0] == 0x01)
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d102      	bne.n	80004e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Datacheck = 1;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
	}
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b002      	add	sp, #8
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	20000174 	.word	0x20000174
 80004f0:	20000158 	.word	0x20000158
 80004f4:	20000264 	.word	0x20000264

080004f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	0002      	movs	r2, r0
 8000500:	1dbb      	adds	r3, r7, #6
 8000502:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == AMS_INT_Pin && ReadingData == 0)
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d126      	bne.n	800055a <HAL_GPIO_EXTI_Callback+0x62>
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <HAL_GPIO_EXTI_Callback+0x6c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d122      	bne.n	800055a <HAL_GPIO_EXTI_Callback+0x62>
	{
		ReadingData = 1;
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]


		if(Ax == 0) // Do not write, first value is random
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <HAL_GPIO_EXTI_Callback+0x70>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d102      	bne.n	8000528 <HAL_GPIO_EXTI_Callback+0x30>
		{
			AMS5055_Get_Position();
 8000522:	f000 fcb7 	bl	8000e94 <AMS5055_Get_Position>
 8000526:	e008      	b.n	800053a <HAL_GPIO_EXTI_Callback+0x42>
		}

		else
		{
			Angles[Ax] = AMS5055_Get_Position();
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_GPIO_EXTI_Callback+0x70>)
 800052a:	681c      	ldr	r4, [r3, #0]
 800052c:	f000 fcb2 	bl	8000e94 <AMS5055_Get_Position>
 8000530:	0003      	movs	r3, r0
 8000532:	0019      	movs	r1, r3
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <HAL_GPIO_EXTI_Callback+0x74>)
 8000536:	0062      	lsls	r2, r4, #1
 8000538:	52d1      	strh	r1, [r2, r3]
		}

		if(Ax == 100)
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <HAL_GPIO_EXTI_Callback+0x70>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b64      	cmp	r3, #100	; 0x64
 8000540:	d103      	bne.n	800054a <HAL_GPIO_EXTI_Callback+0x52>
		{
			Ax = 0;
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <HAL_GPIO_EXTI_Callback+0x70>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	e004      	b.n	8000554 <HAL_GPIO_EXTI_Callback+0x5c>
		}

		else
		{
			Ax++;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <HAL_GPIO_EXTI_Callback+0x70>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_GPIO_EXTI_Callback+0x70>)
 8000552:	601a      	str	r2, [r3, #0]
		}

		ReadingData = 0;
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
	}
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b003      	add	sp, #12
 8000560:	bd90      	pop	{r4, r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	20000268 	.word	0x20000268
 8000568:	2000026c 	.word	0x2000026c
 800056c:	20000188 	.word	0x20000188

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fe4c 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f872 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f9f4 	bl	8000968 <MX_GPIO_Init>
  MX_ADC_Init();
 8000580:	f000 f8b4 	bl	80006ec <MX_ADC_Init>
  MX_CAN_Init();
 8000584:	f000 f90e 	bl	80007a4 <MX_CAN_Init>
  MX_SPI1_Init();
 8000588:	f000 f972 	bl	8000870 <MX_SPI1_Init>
  MX_SPI2_Init();
 800058c:	f000 f9ae 	bl	80008ec <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  TMC5160_Stop();
 8000590:	f7ff ff6e 	bl	8000470 <TMC5160_Stop>
  HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,1); // LOW = ON
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	0059      	lsls	r1, r3, #1
 8000598:	2390      	movs	r3, #144	; 0x90
 800059a:	05db      	lsls	r3, r3, #23
 800059c:	2201      	movs	r2, #1
 800059e:	0018      	movs	r0, r3
 80005a0:	f002 f90f 	bl	80027c2 <HAL_GPIO_WritePin>
  HAL_Delay(2500);	//startup delay, so motor does not spin on debug
 80005a4:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <main+0xe8>)
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fe96 	bl	80012d8 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,1); // set TMC CS high
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	015b      	lsls	r3, r3, #5
 80005b0:	482a      	ldr	r0, [pc, #168]	; (800065c <main+0xec>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	0019      	movs	r1, r3
 80005b6:	f002 f904 	bl	80027c2 <HAL_GPIO_WritePin>

  /* Perform Basic Init of TMC5160 and AMS5055 */
  TMC5160_Basic_Init();
 80005ba:	f7ff fe2f 	bl	800021c <TMC5160_Basic_Init>
  AMS5055_Basic_Init();
 80005be:	f000 fb4d 	bl	8000c5c <AMS5055_Basic_Init>

  /* Enable DRV stage*/
  HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,0); // LOW = ON
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	0059      	lsls	r1, r3, #1
 80005c6:	2390      	movs	r3, #144	; 0x90
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2200      	movs	r2, #0
 80005cc:	0018      	movs	r0, r3
 80005ce:	f002 f8f8 	bl	80027c2 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f000 fe80 	bl	80012d8 <HAL_Delay>

  //Read IN1 (5 to 24V)
  while(HAL_GPIO_ReadPin(GPIOB, REFL_UC_Pin) == 1)
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <main+0xec>)
 80005dc:	2140      	movs	r1, #64	; 0x40
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 f8d2 	bl	8002788 <HAL_GPIO_ReadPin>
 80005e4:	0003      	movs	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d0f7      	beq.n	80005da <main+0x6a>
  {
  }

  //Read IN2 (5 to 24V)
  while(HAL_GPIO_ReadPin(GPIOB, REFR_UC_Pin) == 1)
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <main+0xec>)
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	0018      	movs	r0, r3
 80005f2:	f002 f8c9 	bl	8002788 <HAL_GPIO_ReadPin>
 80005f6:	0003      	movs	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d0f7      	beq.n	80005ec <main+0x7c>
  while(HAL_GPIO_ReadPin(GPIOB, REFR_UC_Pin) == 1)
  {
  } */

  // Enable OUT2 for 1 sec (24V)
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,1);
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <main+0xec>)
 80005fe:	2201      	movs	r2, #1
 8000600:	2120      	movs	r1, #32
 8000602:	0018      	movs	r0, r3
 8000604:	f002 f8dd 	bl	80027c2 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000608:	23fa      	movs	r3, #250	; 0xfa
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	0018      	movs	r0, r3
 800060e:	f000 fe63 	bl	80012d8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,0);
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <main+0xec>)
 8000614:	2200      	movs	r2, #0
 8000616:	2120      	movs	r1, #32
 8000618:	0018      	movs	r0, r3
 800061a:	f002 f8d2 	bl	80027c2 <HAL_GPIO_WritePin>

  //Enable OUT1 for 1 sec (24V)
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,1);
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <main+0xec>)
 8000620:	2201      	movs	r2, #1
 8000622:	2110      	movs	r1, #16
 8000624:	0018      	movs	r0, r3
 8000626:	f002 f8cc 	bl	80027c2 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800062a:	23fa      	movs	r3, #250	; 0xfa
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fe52 	bl	80012d8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,0);
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <main+0xec>)
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	0018      	movs	r0, r3
 800063c:	f002 f8c1 	bl	80027c2 <HAL_GPIO_WritePin>
  HAL_ADC_Stop(&hadc);
  s = 0;
 */


  HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,1); // LOW = ON
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	0059      	lsls	r1, r3, #1
 8000644:	2390      	movs	r3, #144	; 0x90
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	2201      	movs	r2, #1
 800064a:	0018      	movs	r0, r3
 800064c:	f002 f8b9 	bl	80027c2 <HAL_GPIO_WritePin>
  TMC5160_Stop();
 8000650:	f7ff ff0e 	bl	8000470 <TMC5160_Stop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0xe4>
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	000009c4 	.word	0x000009c4
 800065c:	48000400 	.word	0x48000400

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b093      	sub	sp, #76	; 0x4c
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	2414      	movs	r4, #20
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2334      	movs	r3, #52	; 0x34
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f003 f9e5 	bl	8003a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	0018      	movs	r0, r3
 800067a:	2310      	movs	r3, #16
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f003 f9de 	bl	8003a40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000684:	0021      	movs	r1, r4
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2212      	movs	r2, #18
 800068a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2201      	movs	r2, #1
 8000690:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2201      	movs	r2, #1
 8000696:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2210      	movs	r2, #16
 800069c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2210      	movs	r2, #16
 80006a2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	0018      	movs	r0, r3
 80006ae:	f002 f8c1 	bl	8002834 <HAL_RCC_OscConfig>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006b6:	f000 fbff 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2207      	movs	r2, #7
 80006be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2100      	movs	r1, #0
 80006d6:	0018      	movs	r0, r3
 80006d8:	f002 fc32 	bl	8002f40 <HAL_RCC_ClockConfig>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006e0:	f000 fbea 	bl	8000eb8 <Error_Handler>
  }
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b013      	add	sp, #76	; 0x4c
 80006ea:	bd90      	pop	{r4, r7, pc}

080006ec <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	0018      	movs	r0, r3
 80006f6:	230c      	movs	r3, #12
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f003 f9a0 	bl	8003a40 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_ADC_Init+0xb0>)
 8000702:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <MX_ADC_Init+0xb4>)
 8000704:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <MX_ADC_Init+0xb0>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_ADC_Init+0xb0>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_ADC_Init+0xb0>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ADC_Init+0xb0>)
 800071a:	2201      	movs	r2, #1
 800071c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_ADC_Init+0xb0>)
 8000720:	2204      	movs	r2, #4
 8000722:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ADC_Init+0xb0>)
 8000726:	2200      	movs	r2, #0
 8000728:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_ADC_Init+0xb0>)
 800072c:	2200      	movs	r2, #0
 800072e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_ADC_Init+0xb0>)
 8000732:	2200      	movs	r2, #0
 8000734:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC_Init+0xb0>)
 8000738:	2200      	movs	r2, #0
 800073a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_ADC_Init+0xb0>)
 800073e:	22c2      	movs	r2, #194	; 0xc2
 8000740:	32ff      	adds	r2, #255	; 0xff
 8000742:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_ADC_Init+0xb0>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC_Init+0xb0>)
 800074c:	2224      	movs	r2, #36	; 0x24
 800074e:	2100      	movs	r1, #0
 8000750:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_ADC_Init+0xb0>)
 8000754:	2201      	movs	r2, #1
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_ADC_Init+0xb0>)
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fde0 	bl	8001320 <HAL_ADC_Init>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000764:	f000 fba8 	bl	8000eb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	0152      	lsls	r2, r2, #5
 8000774:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	0552      	lsls	r2, r2, #21
 800077c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800077e:	1d3a      	adds	r2, r7, #4
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_ADC_Init+0xb0>)
 8000782:	0011      	movs	r1, r2
 8000784:	0018      	movs	r0, r3
 8000786:	f000 ff0b 	bl	80015a0 <HAL_ADC_ConfigChannel>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800078e:	f000 fb93 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b004      	add	sp, #16
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000028 	.word	0x20000028
 80007a0:	40012400 	.word	0x40012400

080007a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80007aa:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <MX_CAN_Init+0xc4>)
 80007ac:	4a2f      	ldr	r2, [pc, #188]	; (800086c <MX_CAN_Init+0xc8>)
 80007ae:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80007b0:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <MX_CAN_Init+0xc4>)
 80007b2:	2210      	movs	r2, #16
 80007b4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <MX_CAN_Init+0xc4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_CAN_Init+0xc4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <MX_CAN_Init+0xc4>)
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	0252      	lsls	r2, r2, #9
 80007c8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007ca:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_CAN_Init+0xc4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007d0:	4b25      	ldr	r3, [pc, #148]	; (8000868 <MX_CAN_Init+0xc4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_CAN_Init+0xc4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_CAN_Init+0xc4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_CAN_Init+0xc4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_CAN_Init+0xc4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_CAN_Init+0xc4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_CAN_Init+0xc4>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 ffe0 	bl	80017bc <HAL_CAN_Init>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000800:	f000 fb5a 	bl	8000eb8 <Error_Handler>

  /* CAN filter */

  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 8000804:	003b      	movs	r3, r7
 8000806:	2201      	movs	r2, #1
 8000808:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 10;
 800080a:	003b      	movs	r3, r7
 800080c:	220a      	movs	r2, #10
 800080e:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000810:	003b      	movs	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000816:	003b      	movs	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800081c:	003b      	movs	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000822:	003b      	movs	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000828:	003b      	movs	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800082e:	003b      	movs	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000834:	003b      	movs	r3, r7
 8000836:	2201      	movs	r2, #1
 8000838:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 0;
 800083a:	003b      	movs	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000840:	003a      	movs	r2, r7
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_CAN_Init+0xc4>)
 8000844:	0011      	movs	r1, r2
 8000846:	0018      	movs	r0, r3
 8000848:	f001 f8b6 	bl	80019b8 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_CAN_Init+0xc4>)
 800084e:	0018      	movs	r0, r3
 8000850:	f001 f9a4 	bl	8001b9c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <MX_CAN_Init+0xc4>)
 8000856:	2102      	movs	r1, #2
 8000858:	0018      	movs	r0, r3
 800085a:	f001 fb01 	bl	8001e60 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b00a      	add	sp, #40	; 0x28
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	20000068 	.word	0x20000068
 800086c:	40006400 	.word	0x40006400

08000870 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_SPI1_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_SPI1_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_SPI1_Init+0x74>)
 800087c:	2282      	movs	r2, #130	; 0x82
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_SPI1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_SPI1_Init+0x74>)
 800088a:	22e0      	movs	r2, #224	; 0xe0
 800088c:	00d2      	lsls	r2, r2, #3
 800088e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_SPI1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_SPI1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_SPI1_Init+0x74>)
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	0092      	lsls	r2, r2, #2
 80008a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008be:	2207      	movs	r2, #7
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <MX_SPI1_Init+0x74>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f002 fc91 	bl	80031f8 <HAL_SPI_Init>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008da:	f000 faed 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000090 	.word	0x20000090
 80008e8:	40013000 	.word	0x40013000

080008ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_SPI2_Init+0x74>)
 80008f2:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <MX_SPI2_Init+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_SPI2_Init+0x74>)
 80008f8:	2282      	movs	r2, #130	; 0x82
 80008fa:	0052      	lsls	r2, r2, #1
 80008fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_SPI2_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_SPI2_Init+0x74>)
 8000906:	22e0      	movs	r2, #224	; 0xe0
 8000908:	00d2      	lsls	r2, r2, #3
 800090a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_SPI2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_SPI2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_SPI2_Init+0x74>)
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	0092      	lsls	r2, r2, #2
 800091e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_SPI2_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_SPI2_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_SPI2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_SPI2_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_SPI2_Init+0x74>)
 800093a:	2207      	movs	r2, #7
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_SPI2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_SPI2_Init+0x74>)
 8000946:	2208      	movs	r2, #8
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <MX_SPI2_Init+0x74>)
 800094c:	0018      	movs	r0, r3
 800094e:	f002 fc53 	bl	80031f8 <HAL_SPI_Init>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 faaf 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000f4 	.word	0x200000f4
 8000964:	40003800 	.word	0x40003800

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	240c      	movs	r4, #12
 8000970:	193b      	adds	r3, r7, r4
 8000972:	0018      	movs	r0, r3
 8000974:	2314      	movs	r3, #20
 8000976:	001a      	movs	r2, r3
 8000978:	2100      	movs	r1, #0
 800097a:	f003 f861 	bl	8003a40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b3f      	ldr	r3, [pc, #252]	; (8000a7c <MX_GPIO_Init+0x114>)
 8000980:	695a      	ldr	r2, [r3, #20]
 8000982:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <MX_GPIO_Init+0x114>)
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	0289      	lsls	r1, r1, #10
 8000988:	430a      	orrs	r2, r1
 800098a:	615a      	str	r2, [r3, #20]
 800098c:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <MX_GPIO_Init+0x114>)
 800098e:	695a      	ldr	r2, [r3, #20]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	029b      	lsls	r3, r3, #10
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <MX_GPIO_Init+0x114>)
 800099c:	695a      	ldr	r2, [r3, #20]
 800099e:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <MX_GPIO_Init+0x114>)
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	02c9      	lsls	r1, r1, #11
 80009a4:	430a      	orrs	r2, r1
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <MX_GPIO_Init+0x114>)
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	02db      	lsls	r3, r3, #11
 80009b0:	4013      	ands	r3, r2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin, GPIO_PIN_RESET);
 80009b6:	238a      	movs	r3, #138	; 0x8a
 80009b8:	0059      	lsls	r1, r3, #1
 80009ba:	2390      	movs	r3, #144	; 0x90
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	2200      	movs	r2, #0
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 fefe 	bl	80027c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin, GPIO_PIN_RESET);
 80009c6:	492e      	ldr	r1, [pc, #184]	; (8000a80 <MX_GPIO_Init+0x118>)
 80009c8:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <MX_GPIO_Init+0x11c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 fef8 	bl	80027c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_STB_Pin AMS_CS_Pin DRV_ENN_Pin */
  GPIO_InitStruct.Pin = CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	228a      	movs	r2, #138	; 0x8a
 80009d6:	0052      	lsls	r2, r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2201      	movs	r2, #1
 80009de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	193a      	adds	r2, r7, r4
 80009ee:	2390      	movs	r3, #144	; 0x90
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 fd4f 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_INT_Pin */
  GPIO_InitStruct.Pin = AMS_INT_Pin;
 80009fa:	0021      	movs	r1, r4
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2288      	movs	r2, #136	; 0x88
 8000a06:	0352      	lsls	r2, r2, #13
 8000a08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	000c      	movs	r4, r1
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AMS_INT_GPIO_Port, &GPIO_InitStruct);
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <MX_GPIO_Init+0x11c>)
 8000a16:	0019      	movs	r1, r3
 8000a18:	0010      	movs	r0, r2
 8000a1a:	f001 fd3d 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC_CS_Pin EXT_OUT_1_Pin EXT_OUT_2_Pin */
  GPIO_InitStruct.Pin = TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <MX_GPIO_Init+0x118>)
 8000a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2201      	movs	r2, #1
 8000a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_GPIO_Init+0x11c>)
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	0010      	movs	r0, r2
 8000a3e:	f001 fd2b 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : REFL_UC_Pin REFR_UC_Pin */
  GPIO_InitStruct.Pin = REFL_UC_Pin|REFR_UC_Pin;
 8000a42:	0021      	movs	r1, r4
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	22c0      	movs	r2, #192	; 0xc0
 8000a48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2202      	movs	r2, #2
 8000a54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <MX_GPIO_Init+0x11c>)
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	0010      	movs	r0, r2
 8000a5e:	f001 fd1b 	bl	8002498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2005      	movs	r0, #5
 8000a68:	f001 fce4 	bl	8002434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a6c:	2005      	movs	r0, #5
 8000a6e:	f001 fcf6 	bl	800245e <HAL_NVIC_EnableIRQ>

}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b009      	add	sp, #36	; 0x24
 8000a78:	bd90      	pop	{r4, r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	00001030 	.word	0x00001030
 8000a84:	48000400 	.word	0x48000400

08000a88 <TMC5160_SPIWrite>:
	HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin, 1);
}*/


uint32_t TMC5160_SPIWrite(uint8_t Adress, uint32_t Value, int Action)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	240f      	movs	r4, #15
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	1c02      	adds	r2, r0, #0
 8000a98:	701a      	strb	r2, [r3, #0]

	  SPI2Rx = 0;
 8000a9a:	4b32      	ldr	r3, [pc, #200]	; (8000b64 <TMC5160_SPIWrite+0xdc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,0); // set TMC CS low
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	015b      	lsls	r3, r3, #5
 8000aa4:	4830      	ldr	r0, [pc, #192]	; (8000b68 <TMC5160_SPIWrite+0xe0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	f001 fe8a 	bl	80027c2 <HAL_GPIO_WritePin>

	  if (Action == 1) //Write
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d106      	bne.n	8000ac2 <TMC5160_SPIWrite+0x3a>
	  {
		SPI2TxData[0] = Adress + 0x80;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3b80      	subs	r3, #128	; 0x80
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <TMC5160_SPIWrite+0xe4>)
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e004      	b.n	8000acc <TMC5160_SPIWrite+0x44>
	  }

	  else //Read
	  {
		SPI2TxData[0] = Adress;
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <TMC5160_SPIWrite+0xe4>)
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	18ba      	adds	r2, r7, r2
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	701a      	strb	r2, [r3, #0]
	  }

	  SPI2TxData[1] = Value >> 24;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	0e1b      	lsrs	r3, r3, #24
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <TMC5160_SPIWrite+0xe4>)
 8000ad4:	705a      	strb	r2, [r3, #1]
	  SPI2TxData[2] = Value >> 16;
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	0c1b      	lsrs	r3, r3, #16
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <TMC5160_SPIWrite+0xe4>)
 8000ade:	709a      	strb	r2, [r3, #2]
	  SPI2TxData[3] = Value >> 8;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <TMC5160_SPIWrite+0xe4>)
 8000ae8:	70da      	strb	r2, [r3, #3]
	  SPI2TxData[4] = Value;
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <TMC5160_SPIWrite+0xe4>)
 8000af0:	711a      	strb	r2, [r3, #4]

	  HAL_SPI_TransmitReceive(&hspi2, SPI2TxData, SPI2RxData, 0x05, 100);
 8000af2:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <TMC5160_SPIWrite+0xe8>)
 8000af4:	491d      	ldr	r1, [pc, #116]	; (8000b6c <TMC5160_SPIWrite+0xe4>)
 8000af6:	481f      	ldr	r0, [pc, #124]	; (8000b74 <TMC5160_SPIWrite+0xec>)
 8000af8:	2364      	movs	r3, #100	; 0x64
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2305      	movs	r3, #5
 8000afe:	f002 fc33 	bl	8003368 <HAL_SPI_TransmitReceive>


	  SPI2Rx += (SPI2RxData[1] << 24);
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <TMC5160_SPIWrite+0xe8>)
 8000b04:	785b      	ldrb	r3, [r3, #1]
 8000b06:	061b      	lsls	r3, r3, #24
 8000b08:	001a      	movs	r2, r3
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <TMC5160_SPIWrite+0xdc>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	18d2      	adds	r2, r2, r3
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <TMC5160_SPIWrite+0xdc>)
 8000b12:	601a      	str	r2, [r3, #0]
	  SPI2Rx += (SPI2RxData[2] << 16);
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <TMC5160_SPIWrite+0xe8>)
 8000b16:	789b      	ldrb	r3, [r3, #2]
 8000b18:	041b      	lsls	r3, r3, #16
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <TMC5160_SPIWrite+0xdc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	18d2      	adds	r2, r2, r3
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <TMC5160_SPIWrite+0xdc>)
 8000b24:	601a      	str	r2, [r3, #0]
	  SPI2Rx += (SPI2RxData[3] << 8);
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <TMC5160_SPIWrite+0xe8>)
 8000b28:	78db      	ldrb	r3, [r3, #3]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <TMC5160_SPIWrite+0xdc>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	18d2      	adds	r2, r2, r3
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <TMC5160_SPIWrite+0xdc>)
 8000b36:	601a      	str	r2, [r3, #0]
	  SPI2Rx += (SPI2RxData[4] << 0);
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <TMC5160_SPIWrite+0xe8>)
 8000b3a:	791b      	ldrb	r3, [r3, #4]
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <TMC5160_SPIWrite+0xdc>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	18d2      	adds	r2, r2, r3
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <TMC5160_SPIWrite+0xdc>)
 8000b46:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,1); // set TMC CS high
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	015b      	lsls	r3, r3, #5
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <TMC5160_SPIWrite+0xe0>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	0019      	movs	r1, r3
 8000b52:	f001 fe36 	bl	80027c2 <HAL_GPIO_WritePin>

	  return SPI2Rx;
 8000b56:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <TMC5160_SPIWrite+0xdc>)
 8000b58:	681b      	ldr	r3, [r3, #0]
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b005      	add	sp, #20
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	20000260 	.word	0x20000260
 8000b68:	48000400 	.word	0x48000400
 8000b6c:	20000250 	.word	0x20000250
 8000b70:	20000258 	.word	0x20000258
 8000b74:	200000f4 	.word	0x200000f4

08000b78 <AMS5055_SPIWriteInt>:


uint16_t AMS5055_SPIWriteInt(uint16_t Adress, int Action)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	0002      	movs	r2, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	1dbb      	adds	r3, r7, #6
 8000b84:	801a      	strh	r2, [r3, #0]

 	DC -> Don't care
 	PAR -> Parity bit
	*/

	  SPI1Rx = 0;
 8000b86:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <AMS5055_SPIWriteInt+0xcc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	801a      	strh	r2, [r3, #0]
	  SPI1Tx = 0;
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <AMS5055_SPIWriteInt+0xd0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	801a      	strh	r2, [r3, #0]
	  SPI1Tx = (Adress << 1);
 8000b92:	1dbb      	adds	r3, r7, #6
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	18db      	adds	r3, r3, r3
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <AMS5055_SPIWriteInt+0xd0>)
 8000b9c:	801a      	strh	r2, [r3, #0]

	  if (Action == 1) //READ
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d106      	bne.n	8000bb2 <AMS5055_SPIWriteInt+0x3a>
	  {
		  SPI1Tx = SPI1Tx | 0x8000;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <AMS5055_SPIWriteInt+0xd0>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	4a28      	ldr	r2, [pc, #160]	; (8000c4c <AMS5055_SPIWriteInt+0xd4>)
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <AMS5055_SPIWriteInt+0xd0>)
 8000bb0:	801a      	strh	r2, [r3, #0]
	  }

	  SPI1Tx = SPI1Tx | AMSParity(SPI1Tx);
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <AMS5055_SPIWriteInt+0xd0>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 f938 	bl	8000e2c <AMSParity>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <AMS5055_SPIWriteInt+0xd0>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <AMS5055_SPIWriteInt+0xd0>)
 8000bca:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low
 8000bcc:	2390      	movs	r3, #144	; 0x90
 8000bce:	05db      	lsls	r3, r3, #23
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f001 fdf4 	bl	80027c2 <HAL_GPIO_WritePin>

	  SPI1TxData[0] = SPI1Tx >> 8;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <AMS5055_SPIWriteInt+0xd0>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <AMS5055_SPIWriteInt+0xd8>)
 8000be6:	701a      	strb	r2, [r3, #0]
	  SPI1TxData[1] = SPI1Tx;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <AMS5055_SPIWriteInt+0xd0>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <AMS5055_SPIWriteInt+0xd8>)
 8000bf0:	705a      	strb	r2, [r3, #1]

	  HAL_SPI_TransmitReceive(&hspi1, SPI1TxData, SPI1RxData, 0x02, 100);
 8000bf2:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <AMS5055_SPIWriteInt+0xdc>)
 8000bf4:	4916      	ldr	r1, [pc, #88]	; (8000c50 <AMS5055_SPIWriteInt+0xd8>)
 8000bf6:	4818      	ldr	r0, [pc, #96]	; (8000c58 <AMS5055_SPIWriteInt+0xe0>)
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	f002 fbb3 	bl	8003368 <HAL_SPI_TransmitReceive>

	  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high
 8000c02:	2390      	movs	r3, #144	; 0x90
 8000c04:	05db      	lsls	r3, r3, #23
 8000c06:	2201      	movs	r2, #1
 8000c08:	2110      	movs	r1, #16
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f001 fdd9 	bl	80027c2 <HAL_GPIO_WritePin>

	  SPI1Rx += (SPI1RxData[0] << 8);
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <AMS5055_SPIWriteInt+0xdc>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <AMS5055_SPIWriteInt+0xcc>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	18d3      	adds	r3, r2, r3
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <AMS5055_SPIWriteInt+0xcc>)
 8000c24:	801a      	strh	r2, [r3, #0]
	  SPI1Rx += (SPI1RxData[1] << 0);
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <AMS5055_SPIWriteInt+0xdc>)
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <AMS5055_SPIWriteInt+0xcc>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	18d3      	adds	r3, r2, r3
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <AMS5055_SPIWriteInt+0xcc>)
 8000c36:	801a      	strh	r2, [r3, #0]

	  return SPI1Rx;
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <AMS5055_SPIWriteInt+0xcc>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000182 	.word	0x20000182
 8000c48:	20000184 	.word	0x20000184
 8000c4c:	ffff8000 	.word	0xffff8000
 8000c50:	2000017c 	.word	0x2000017c
 8000c54:	20000180 	.word	0x20000180
 8000c58:	20000090 	.word	0x20000090

08000c5c <AMS5055_Basic_Init>:
	  }
}


void AMS5055_Basic_Init(void)
{
 8000c5c:	b5b0      	push	{r4, r5, r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000c60:	4b6e      	ldr	r3, [pc, #440]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000c62:	681c      	ldr	r4, [r3, #0]
 8000c64:	4b6e      	ldr	r3, [pc, #440]	; (8000e20 <AMS5055_Basic_Init+0x1c4>)
 8000c66:	2101      	movs	r1, #1
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ff85 	bl	8000b78 <AMS5055_SPIWriteInt>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	0019      	movs	r1, r3
 8000c72:	4b6c      	ldr	r3, [pc, #432]	; (8000e24 <AMS5055_Basic_Init+0x1c8>)
 8000c74:	0062      	lsls	r2, r4, #1
 8000c76:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000c78:	4b68      	ldr	r3, [pc, #416]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	4b67      	ldr	r3, [pc, #412]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000c80:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000c82:	2064      	movs	r0, #100	; 0x64
 8000c84:	f000 fb28 	bl	80012d8 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(NOP,1); // Random
 8000c88:	4b64      	ldr	r3, [pc, #400]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000c8a:	681c      	ldr	r4, [r3, #0]
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff ff72 	bl	8000b78 <AMS5055_SPIWriteInt>
 8000c94:	0003      	movs	r3, r0
 8000c96:	0019      	movs	r1, r3
 8000c98:	4b62      	ldr	r3, [pc, #392]	; (8000e24 <AMS5055_Basic_Init+0x1c8>)
 8000c9a:	0062      	lsls	r2, r4, #1
 8000c9c:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000c9e:	4b5f      	ldr	r3, [pc, #380]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	4b5d      	ldr	r3, [pc, #372]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000ca6:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000ca8:	2064      	movs	r0, #100	; 0x64
 8000caa:	f000 fb15 	bl	80012d8 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(AGC,1); // Random
 8000cae:	4b5b      	ldr	r3, [pc, #364]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000cb0:	681c      	ldr	r4, [r3, #0]
 8000cb2:	4b5d      	ldr	r3, [pc, #372]	; (8000e28 <AMS5055_Basic_Init+0x1cc>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff ff5e 	bl	8000b78 <AMS5055_SPIWriteInt>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	4b58      	ldr	r3, [pc, #352]	; (8000e24 <AMS5055_Basic_Init+0x1c8>)
 8000cc2:	0062      	lsls	r2, r4, #1
 8000cc4:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000cc6:	4b55      	ldr	r3, [pc, #340]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	4b53      	ldr	r3, [pc, #332]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000cce:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000cd0:	2064      	movs	r0, #100	; 0x64
 8000cd2:	f000 fb01 	bl	80012d8 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(SOFTWARE_RESET,1); // Random
 8000cd6:	4b51      	ldr	r3, [pc, #324]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000cd8:	681c      	ldr	r4, [r3, #0]
 8000cda:	23f0      	movs	r3, #240	; 0xf0
 8000cdc:	019b      	lsls	r3, r3, #6
 8000cde:	2101      	movs	r1, #1
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff ff49 	bl	8000b78 <AMS5055_SPIWriteInt>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	0019      	movs	r1, r3
 8000cea:	4b4e      	ldr	r3, [pc, #312]	; (8000e24 <AMS5055_Basic_Init+0x1c8>)
 8000cec:	0062      	lsls	r2, r4, #1
 8000cee:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000cf0:	4b4a      	ldr	r3, [pc, #296]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	4b49      	ldr	r3, [pc, #292]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000cf8:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000cfa:	2064      	movs	r0, #100	; 0x64
 8000cfc:	f000 faec 	bl	80012d8 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(SOFTWARE_RESET_SPI,0); // Random
 8000d00:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d02:	681c      	ldr	r4, [r3, #0]
 8000d04:	2100      	movs	r1, #0
 8000d06:	2002      	movs	r0, #2
 8000d08:	f7ff ff36 	bl	8000b78 <AMS5055_SPIWriteInt>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	0019      	movs	r1, r3
 8000d10:	4b44      	ldr	r3, [pc, #272]	; (8000e24 <AMS5055_Basic_Init+0x1c8>)
 8000d12:	0062      	lsls	r2, r4, #1
 8000d14:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d1e:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000d20:	2064      	movs	r0, #100	; 0x64
 8000d22:	f000 fad9 	bl	80012d8 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d28:	681c      	ldr	r4, [r3, #0]
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <AMS5055_Basic_Init+0x1c4>)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f7ff ff22 	bl	8000b78 <AMS5055_SPIWriteInt>
 8000d34:	0003      	movs	r3, r0
 8000d36:	0019      	movs	r1, r3
 8000d38:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <AMS5055_Basic_Init+0x1c8>)
 8000d3a:	0062      	lsls	r2, r4, #1
 8000d3c:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000d3e:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d46:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000d48:	2064      	movs	r0, #100	; 0x64
 8000d4a:	f000 fac5 	bl	80012d8 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(NOP,1); // Random
 8000d4e:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d50:	681c      	ldr	r4, [r3, #0]
 8000d52:	2101      	movs	r1, #1
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff ff0f 	bl	8000b78 <AMS5055_SPIWriteInt>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <AMS5055_Basic_Init+0x1c8>)
 8000d60:	0062      	lsls	r2, r4, #1
 8000d62:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000d64:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d6c:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000d6e:	2064      	movs	r0, #100	; 0x64
 8000d70:	f000 fab2 	bl	80012d8 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(AGC,1); // Random
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d76:	681c      	ldr	r4, [r3, #0]
 8000d78:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <AMS5055_Basic_Init+0x1cc>)
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff fefb 	bl	8000b78 <AMS5055_SPIWriteInt>
 8000d82:	0003      	movs	r3, r0
 8000d84:	0019      	movs	r1, r3
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <AMS5055_Basic_Init+0x1c8>)
 8000d88:	0062      	lsls	r2, r4, #1
 8000d8a:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d94:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000d96:	2064      	movs	r0, #100	; 0x64
 8000d98:	f000 fa9e 	bl	80012d8 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000d9e:	681c      	ldr	r4, [r3, #0]
 8000da0:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <AMS5055_Basic_Init+0x1c4>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff fee7 	bl	8000b78 <AMS5055_SPIWriteInt>
 8000daa:	0003      	movs	r3, r0
 8000dac:	0019      	movs	r1, r3
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <AMS5055_Basic_Init+0x1c8>)
 8000db0:	0062      	lsls	r2, r4, #1
 8000db2:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	1c5a      	adds	r2, r3, #1
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000dbc:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000dbe:	2064      	movs	r0, #100	; 0x64
 8000dc0:	f000 fa8a 	bl	80012d8 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000dc6:	681c      	ldr	r4, [r3, #0]
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <AMS5055_Basic_Init+0x1c4>)
 8000dca:	2101      	movs	r1, #1
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff fed3 	bl	8000b78 <AMS5055_SPIWriteInt>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <AMS5055_Basic_Init+0x1c8>)
 8000dd8:	0062      	lsls	r2, r4, #1
 8000dda:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000de4:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000de6:	2064      	movs	r0, #100	; 0x64
 8000de8:	f000 fa76 	bl	80012d8 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000dee:	681c      	ldr	r4, [r3, #0]
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <AMS5055_Basic_Init+0x1c4>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff febf 	bl	8000b78 <AMS5055_SPIWriteInt>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <AMS5055_Basic_Init+0x1c8>)
 8000e00:	0062      	lsls	r2, r4, #1
 8000e02:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <AMS5055_Basic_Init+0x1c0>)
 8000e0c:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000e0e:	2064      	movs	r0, #100	; 0x64
 8000e10:	f000 fa62 	bl	80012d8 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(NOP,1); // 0
	Ax++;
	HAL_Delay(100);
	*/
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bdb0      	pop	{r4, r5, r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	2000026c 	.word	0x2000026c
 8000e20:	00003fff 	.word	0x00003fff
 8000e24:	20000188 	.word	0x20000188
 8000e28:	00003ff8 	.word	0x00003ff8

08000e2c <AMSParity>:

uint8_t AMSParity(uint16_t value)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	0002      	movs	r2, r0
 8000e34:	1dbb      	adds	r3, r7, #6
 8000e36:	801a      	strh	r2, [r3, #0]
	uint8_t cnt = 0;
 8000e38:	230f      	movs	r3, #15
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8000e40:	230e      	movs	r3, #14
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	e015      	b.n	8000e76 <AMSParity+0x4a>
	{
		if (value & 0x1)
 8000e4a:	1dbb      	adds	r3, r7, #6
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	d005      	beq.n	8000e60 <AMSParity+0x34>
		{
			cnt++;
 8000e54:	210f      	movs	r1, #15
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	3201      	adds	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
		}

		value >>= 1;
 8000e60:	1dbb      	adds	r3, r7, #6
 8000e62:	1dba      	adds	r2, r7, #6
 8000e64:	8812      	ldrh	r2, [r2, #0]
 8000e66:	0852      	lsrs	r2, r2, #1
 8000e68:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 16; i++)
 8000e6a:	210e      	movs	r1, #14
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	3201      	adds	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	230e      	movs	r3, #14
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d9e4      	bls.n	8000e4a <AMSParity+0x1e>
	}
	return cnt & 0x1;
 8000e80:	230f      	movs	r3, #15
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2201      	movs	r2, #1
 8000e88:	4013      	ands	r3, r2
 8000e8a:	b2db      	uxtb	r3, r3
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b004      	add	sp, #16
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <AMS5055_Get_Position>:


uint16_t AMS5055_Get_Position(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	Angle = AMS5055_SPIWriteInt(NOP,1);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fe6c 	bl	8000b78 <AMS5055_SPIWriteInt>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <AMS5055_Get_Position+0x20>)
 8000ea6:	801a      	strh	r2, [r3, #0]

	//Angle = Angle << 2;
	//Angle = (Angle >> 2) & 0x3fff;
	//Angle = ((Angle * 360) / 4095);

	return Angle;
 8000ea8:	4b02      	ldr	r3, [pc, #8]	; (8000eb4 <AMS5055_Get_Position+0x20>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	20000186 	.word	0x20000186

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <Error_Handler+0x8>
	...

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x44>)
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	619a      	str	r2, [r3, #24]
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x44>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	2201      	movs	r2, #1
 8000edc:	4013      	ands	r3, r2
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee4:	69da      	ldr	r2, [r3, #28]
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_MspInit+0x44>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	0549      	lsls	r1, r1, #21
 8000eec:	430a      	orrs	r2, r1
 8000eee:	61da      	str	r2, [r3, #28]
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_MspInit+0x44>)
 8000ef2:	69da      	ldr	r2, [r3, #28]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	055b      	lsls	r3, r3, #21
 8000ef8:	4013      	ands	r3, r2
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b08b      	sub	sp, #44	; 0x2c
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	2414      	movs	r4, #20
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	0018      	movs	r0, r3
 8000f1a:	2314      	movs	r3, #20
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	2100      	movs	r1, #0
 8000f20:	f002 fd8e 	bl	8003a40 <memset>
  if(hadc->Instance==ADC1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_ADC_MspInit+0x84>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12b      	bne.n	8000f86 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_ADC_MspInit+0x88>)
 8000f30:	699a      	ldr	r2, [r3, #24]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_ADC_MspInit+0x88>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	0089      	lsls	r1, r1, #2
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	619a      	str	r2, [r3, #24]
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_ADC_MspInit+0x88>)
 8000f3e:	699a      	ldr	r2, [r3, #24]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_ADC_MspInit+0x88>)
 8000f4c:	695a      	ldr	r2, [r3, #20]
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_ADC_MspInit+0x88>)
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	0289      	lsls	r1, r1, #10
 8000f54:	430a      	orrs	r2, r1
 8000f56:	615a      	str	r2, [r3, #20]
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_ADC_MspInit+0x88>)
 8000f5a:	695a      	ldr	r2, [r3, #20]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	029b      	lsls	r3, r3, #10
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = AIN_MCU_Pin;
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	2203      	movs	r2, #3
 8000f70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AIN_MCU_GPIO_Port, &GPIO_InitStruct);
 8000f78:	193a      	adds	r2, r7, r4
 8000f7a:	2390      	movs	r3, #144	; 0x90
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f001 fa89 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b00b      	add	sp, #44	; 0x2c
 8000f8c:	bd90      	pop	{r4, r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	40012400 	.word	0x40012400
 8000f94:	40021000 	.word	0x40021000

08000f98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b08b      	sub	sp, #44	; 0x2c
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	2414      	movs	r4, #20
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	2314      	movs	r3, #20
 8000fa8:	001a      	movs	r2, r3
 8000faa:	2100      	movs	r1, #0
 8000fac:	f002 fd48 	bl	8003a40 <memset>
  if(hcan->Instance==CAN)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a20      	ldr	r2, [pc, #128]	; (8001038 <HAL_CAN_MspInit+0xa0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d13a      	bne.n	8001030 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_CAN_MspInit+0xa4>)
 8000fbc:	69da      	ldr	r2, [r3, #28]
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <HAL_CAN_MspInit+0xa4>)
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	0489      	lsls	r1, r1, #18
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	61da      	str	r2, [r3, #28]
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_CAN_MspInit+0xa4>)
 8000fca:	69da      	ldr	r2, [r3, #28]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	049b      	lsls	r3, r3, #18
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_CAN_MspInit+0xa4>)
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <HAL_CAN_MspInit+0xa4>)
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	02c9      	lsls	r1, r1, #11
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	615a      	str	r2, [r3, #20]
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_CAN_MspInit+0xa4>)
 8000fe6:	695a      	ldr	r2, [r3, #20]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	02db      	lsls	r3, r3, #11
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	22c0      	movs	r2, #192	; 0xc0
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	0021      	movs	r1, r4
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2202      	movs	r2, #2
 8001000:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2203      	movs	r2, #3
 800100c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2204      	movs	r2, #4
 8001012:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	187b      	adds	r3, r7, r1
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_CAN_MspInit+0xa8>)
 8001018:	0019      	movs	r1, r3
 800101a:	0010      	movs	r0, r2
 800101c:	f001 fa3c 	bl	8002498 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	201e      	movs	r0, #30
 8001026:	f001 fa05 	bl	8002434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800102a:	201e      	movs	r0, #30
 800102c:	f001 fa17 	bl	800245e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b00b      	add	sp, #44	; 0x2c
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	40006400 	.word	0x40006400
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08d      	sub	sp, #52	; 0x34
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	241c      	movs	r4, #28
 800104e:	193b      	adds	r3, r7, r4
 8001050:	0018      	movs	r0, r3
 8001052:	2314      	movs	r3, #20
 8001054:	001a      	movs	r2, r3
 8001056:	2100      	movs	r1, #0
 8001058:	f002 fcf2 	bl	8003a40 <memset>
  if(hspi->Instance==SPI1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a39      	ldr	r2, [pc, #228]	; (8001148 <HAL_SPI_MspInit+0x104>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d133      	bne.n	80010ce <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <HAL_SPI_MspInit+0x108>)
 8001068:	699a      	ldr	r2, [r3, #24]
 800106a:	4b38      	ldr	r3, [pc, #224]	; (800114c <HAL_SPI_MspInit+0x108>)
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	0149      	lsls	r1, r1, #5
 8001070:	430a      	orrs	r2, r1
 8001072:	619a      	str	r2, [r3, #24]
 8001074:	4b35      	ldr	r3, [pc, #212]	; (800114c <HAL_SPI_MspInit+0x108>)
 8001076:	699a      	ldr	r2, [r3, #24]
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	015b      	lsls	r3, r3, #5
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b32      	ldr	r3, [pc, #200]	; (800114c <HAL_SPI_MspInit+0x108>)
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <HAL_SPI_MspInit+0x108>)
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	0289      	lsls	r1, r1, #10
 800108c:	430a      	orrs	r2, r1
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	4b2e      	ldr	r3, [pc, #184]	; (800114c <HAL_SPI_MspInit+0x108>)
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	4013      	ands	r3, r2
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AMS_SCK_Pin|AMS_MISO_Pin|AMS_MOSI_Pin;
 800109e:	0021      	movs	r1, r4
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	22e0      	movs	r2, #224	; 0xe0
 80010a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2202      	movs	r2, #2
 80010aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2203      	movs	r2, #3
 80010b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	187a      	adds	r2, r7, r1
 80010c0:	2390      	movs	r3, #144	; 0x90
 80010c2:	05db      	lsls	r3, r3, #23
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f001 f9e6 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010cc:	e037      	b.n	800113e <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <HAL_SPI_MspInit+0x10c>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d132      	bne.n	800113e <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010d8:	4b1c      	ldr	r3, [pc, #112]	; (800114c <HAL_SPI_MspInit+0x108>)
 80010da:	69da      	ldr	r2, [r3, #28]
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_SPI_MspInit+0x108>)
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	01c9      	lsls	r1, r1, #7
 80010e2:	430a      	orrs	r2, r1
 80010e4:	61da      	str	r2, [r3, #28]
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_SPI_MspInit+0x108>)
 80010e8:	69da      	ldr	r2, [r3, #28]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	01db      	lsls	r3, r3, #7
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_SPI_MspInit+0x108>)
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_SPI_MspInit+0x108>)
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	02c9      	lsls	r1, r1, #11
 80010fe:	430a      	orrs	r2, r1
 8001100:	615a      	str	r2, [r3, #20]
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_SPI_MspInit+0x108>)
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	02db      	lsls	r3, r3, #11
 800110a:	4013      	ands	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMC_SCK_Pin|TMC_MISO_Pin|TMC_MOSI_Pin;
 8001110:	211c      	movs	r1, #28
 8001112:	187b      	adds	r3, r7, r1
 8001114:	22e0      	movs	r2, #224	; 0xe0
 8001116:	0212      	lsls	r2, r2, #8
 8001118:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2202      	movs	r2, #2
 800111e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	187b      	adds	r3, r7, r1
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001126:	187b      	adds	r3, r7, r1
 8001128:	2203      	movs	r2, #3
 800112a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800112c:	187b      	adds	r3, r7, r1
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	187b      	adds	r3, r7, r1
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_SPI_MspInit+0x110>)
 8001136:	0019      	movs	r1, r3
 8001138:	0010      	movs	r0, r2
 800113a:	f001 f9ad 	bl	8002498 <HAL_GPIO_Init>
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b00d      	add	sp, #52	; 0x34
 8001144:	bd90      	pop	{r4, r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	40013000 	.word	0x40013000
 800114c:	40021000 	.word	0x40021000
 8001150:	40003800 	.word	0x40003800
 8001154:	48000400 	.word	0x48000400

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117c:	f000 f890 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AMS_INT_Pin);
 800118a:	2001      	movs	r0, #1
 800118c:	f001 fb36 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <CEC_CAN_IRQHandler+0x14>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 fe88 	bl	8001eb4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	20000068 	.word	0x20000068

080011b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <Reset_Handler>:
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <LoopForever+0x2>)
 80011be:	4685      	mov	sp, r0
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <LoopForever+0x6>)
 80011c2:	490e      	ldr	r1, [pc, #56]	; (80011fc <LoopForever+0xa>)
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <LoopForever+0xe>)
 80011c6:	2300      	movs	r3, #0
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:
 80011ca:	58d4      	ldr	r4, [r2, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:
 80011d0:	18c4      	adds	r4, r0, r3
 80011d2:	428c      	cmp	r4, r1
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopForever+0x12>)
 80011d8:	4c0b      	ldr	r4, [pc, #44]	; (8001208 <LoopForever+0x16>)
 80011da:	2300      	movs	r3, #0
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:
 80011e2:	42a2      	cmp	r2, r4
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>
 80011e6:	f7ff ffe3 	bl	80011b0 <SystemInit>
 80011ea:	f002 fc05 	bl	80039f8 <__libc_init_array>
 80011ee:	f7ff f9bf 	bl	8000570 <main>

080011f2 <LoopForever>:
 80011f2:	e7fe      	b.n	80011f2 <LoopForever>
 80011f4:	20008000 	.word	0x20008000
 80011f8:	20000000 	.word	0x20000000
 80011fc:	2000000c 	.word	0x2000000c
 8001200:	08003aa0 	.word	0x08003aa0
 8001204:	2000000c 	.word	0x2000000c
 8001208:	20000274 	.word	0x20000274

0800120c <ADC1_COMP_IRQHandler>:
 800120c:	e7fe      	b.n	800120c <ADC1_COMP_IRQHandler>
	...

08001210 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <HAL_Init+0x24>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_Init+0x24>)
 800121a:	2110      	movs	r1, #16
 800121c:	430a      	orrs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 f809 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001226:	f7ff fe4d 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	40022000 	.word	0x40022000

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_InitTick+0x5c>)
 8001242:	681c      	ldr	r4, [r3, #0]
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_InitTick+0x60>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	0019      	movs	r1, r3
 800124a:	23fa      	movs	r3, #250	; 0xfa
 800124c:	0098      	lsls	r0, r3, #2
 800124e:	f7fe ff59 	bl	8000104 <__udivsi3>
 8001252:	0003      	movs	r3, r0
 8001254:	0019      	movs	r1, r3
 8001256:	0020      	movs	r0, r4
 8001258:	f7fe ff54 	bl	8000104 <__udivsi3>
 800125c:	0003      	movs	r3, r0
 800125e:	0018      	movs	r0, r3
 8001260:	f001 f90d 	bl	800247e <HAL_SYSTICK_Config>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d001      	beq.n	800126c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e00f      	b.n	800128c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d80b      	bhi.n	800128a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	2301      	movs	r3, #1
 8001276:	425b      	negs	r3, r3
 8001278:	2200      	movs	r2, #0
 800127a:	0018      	movs	r0, r3
 800127c:	f001 f8da 	bl	8002434 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_InitTick+0x64>)
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b003      	add	sp, #12
 8001292:	bd90      	pop	{r4, r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	20000008 	.word	0x20000008
 800129c:	20000004 	.word	0x20000004

080012a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_IncTick+0x1c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	001a      	movs	r2, r3
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_IncTick+0x20>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	18d2      	adds	r2, r2, r3
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_IncTick+0x20>)
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000270 	.word	0x20000270

080012c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b02      	ldr	r3, [pc, #8]	; (80012d4 <HAL_GetTick+0x10>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	20000270 	.word	0x20000270

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff fff0 	bl	80012c4 <HAL_GetTick>
 80012e4:	0003      	movs	r3, r0
 80012e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3301      	adds	r3, #1
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	001a      	movs	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	189b      	adds	r3, r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	f7ff ffe0 	bl	80012c4 <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b004      	add	sp, #16
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	20000008 	.word	0x20000008

08001320 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001328:	230f      	movs	r3, #15
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e125      	b.n	800158a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10a      	bne.n	800135c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2234      	movs	r2, #52	; 0x34
 8001350:	2100      	movs	r1, #0
 8001352:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff fdd8 	bl	8000f0c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001360:	2210      	movs	r2, #16
 8001362:	4013      	ands	r3, r2
 8001364:	d000      	beq.n	8001368 <HAL_ADC_Init+0x48>
 8001366:	e103      	b.n	8001570 <HAL_ADC_Init+0x250>
 8001368:	230f      	movs	r3, #15
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d000      	beq.n	8001374 <HAL_ADC_Init+0x54>
 8001372:	e0fd      	b.n	8001570 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2204      	movs	r2, #4
 800137c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800137e:	d000      	beq.n	8001382 <HAL_ADC_Init+0x62>
 8001380:	e0f6      	b.n	8001570 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001386:	4a83      	ldr	r2, [pc, #524]	; (8001594 <HAL_ADC_Init+0x274>)
 8001388:	4013      	ands	r3, r2
 800138a:	2202      	movs	r2, #2
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2203      	movs	r2, #3
 800139a:	4013      	ands	r3, r2
 800139c:	2b01      	cmp	r3, #1
 800139e:	d112      	bne.n	80013c6 <HAL_ADC_Init+0xa6>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d009      	beq.n	80013c2 <HAL_ADC_Init+0xa2>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	401a      	ands	r2, r3
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	429a      	cmp	r2, r3
 80013c0:	d101      	bne.n	80013c6 <HAL_ADC_Init+0xa6>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_ADC_Init+0xa8>
 80013c6:	2300      	movs	r3, #0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d116      	bne.n	80013fa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2218      	movs	r2, #24
 80013d4:	4393      	bics	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	0899      	lsrs	r1, r3, #2
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4964      	ldr	r1, [pc, #400]	; (8001598 <HAL_ADC_Init+0x278>)
 8001406:	400a      	ands	r2, r1
 8001408:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	7e1b      	ldrb	r3, [r3, #24]
 800140e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7e5b      	ldrb	r3, [r3, #25]
 8001414:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001416:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7e9b      	ldrb	r3, [r3, #26]
 800141c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800141e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	2b01      	cmp	r3, #1
 8001426:	d002      	beq.n	800142e <HAL_ADC_Init+0x10e>
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	015b      	lsls	r3, r3, #5
 800142c:	e000      	b.n	8001430 <HAL_ADC_Init+0x110>
 800142e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001430:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001436:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d101      	bne.n	8001444 <HAL_ADC_Init+0x124>
 8001440:	2304      	movs	r3, #4
 8001442:	e000      	b.n	8001446 <HAL_ADC_Init+0x126>
 8001444:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001446:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2124      	movs	r1, #36	; 0x24
 800144c:	5c5b      	ldrb	r3, [r3, r1]
 800144e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001450:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	4313      	orrs	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7edb      	ldrb	r3, [r3, #27]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d115      	bne.n	800148c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7e9b      	ldrb	r3, [r3, #26]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d105      	bne.n	8001474 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	0252      	lsls	r2, r2, #9
 800146e:	4313      	orrs	r3, r2
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	e00b      	b.n	800148c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001478:	2220      	movs	r2, #32
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001484:	2201      	movs	r2, #1
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69da      	ldr	r2, [r3, #28]
 8001490:	23c2      	movs	r3, #194	; 0xc2
 8001492:	33ff      	adds	r3, #255	; 0xff
 8001494:	429a      	cmp	r2, r3
 8001496:	d007      	beq.n	80014a8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80014a0:	4313      	orrs	r3, r2
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68d9      	ldr	r1, [r3, #12]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	055b      	lsls	r3, r3, #21
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d01b      	beq.n	80014fc <HAL_ADC_Init+0x1dc>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d017      	beq.n	80014fc <HAL_ADC_Init+0x1dc>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d013      	beq.n	80014fc <HAL_ADC_Init+0x1dc>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d00f      	beq.n	80014fc <HAL_ADC_Init+0x1dc>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d00b      	beq.n	80014fc <HAL_ADC_Init+0x1dc>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d007      	beq.n	80014fc <HAL_ADC_Init+0x1dc>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	2b06      	cmp	r3, #6
 80014f2:	d003      	beq.n	80014fc <HAL_ADC_Init+0x1dc>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	2b07      	cmp	r3, #7
 80014fa:	d112      	bne.n	8001522 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	695a      	ldr	r2, [r3, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2107      	movs	r1, #7
 8001508:	438a      	bics	r2, r1
 800150a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6959      	ldr	r1, [r3, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	2207      	movs	r2, #7
 8001518:	401a      	ands	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_ADC_Init+0x27c>)
 800152a:	4013      	ands	r3, r2
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	429a      	cmp	r2, r3
 8001530:	d10b      	bne.n	800154a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	2203      	movs	r2, #3
 800153e:	4393      	bics	r3, r2
 8001540:	2201      	movs	r2, #1
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001548:	e01c      	b.n	8001584 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	2212      	movs	r2, #18
 8001550:	4393      	bics	r3, r2
 8001552:	2210      	movs	r2, #16
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155e:	2201      	movs	r2, #1
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001566:	230f      	movs	r3, #15
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800156e:	e009      	b.n	8001584 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001574:	2210      	movs	r2, #16
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800157c:	230f      	movs	r3, #15
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001584:	230f      	movs	r3, #15
 8001586:	18fb      	adds	r3, r7, r3
 8001588:	781b      	ldrb	r3, [r3, #0]
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b004      	add	sp, #16
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	fffffefd 	.word	0xfffffefd
 8001598:	fffe0219 	.word	0xfffe0219
 800159c:	833fffe7 	.word	0x833fffe7

080015a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015aa:	230f      	movs	r3, #15
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	055b      	lsls	r3, r3, #21
 80015be:	429a      	cmp	r2, r3
 80015c0:	d011      	beq.n	80015e6 <HAL_ADC_ConfigChannel+0x46>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d00d      	beq.n	80015e6 <HAL_ADC_ConfigChannel+0x46>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d009      	beq.n	80015e6 <HAL_ADC_ConfigChannel+0x46>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d005      	beq.n	80015e6 <HAL_ADC_ConfigChannel+0x46>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d001      	beq.n	80015e6 <HAL_ADC_ConfigChannel+0x46>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2234      	movs	r2, #52	; 0x34
 80015ea:	5c9b      	ldrb	r3, [r3, r2]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x54>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e0d0      	b.n	8001796 <HAL_ADC_ConfigChannel+0x1f6>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2234      	movs	r2, #52	; 0x34
 80015f8:	2101      	movs	r1, #1
 80015fa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2204      	movs	r2, #4
 8001604:	4013      	ands	r3, r2
 8001606:	d000      	beq.n	800160a <HAL_ADC_ConfigChannel+0x6a>
 8001608:	e0b4      	b.n	8001774 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4a64      	ldr	r2, [pc, #400]	; (80017a0 <HAL_ADC_ConfigChannel+0x200>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d100      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x76>
 8001614:	e082      	b.n	800171c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	409a      	lsls	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	055b      	lsls	r3, r3, #21
 8001634:	429a      	cmp	r2, r3
 8001636:	d037      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x108>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	2b01      	cmp	r3, #1
 800163e:	d033      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x108>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	2b02      	cmp	r3, #2
 8001646:	d02f      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x108>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	2b03      	cmp	r3, #3
 800164e:	d02b      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x108>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	2b04      	cmp	r3, #4
 8001656:	d027      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x108>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	2b05      	cmp	r3, #5
 800165e:	d023      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x108>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	2b06      	cmp	r3, #6
 8001666:	d01f      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x108>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	2b07      	cmp	r3, #7
 800166e:	d01b      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	2107      	movs	r1, #7
 800167c:	400b      	ands	r3, r1
 800167e:	429a      	cmp	r2, r3
 8001680:	d012      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2107      	movs	r1, #7
 800168e:	438a      	bics	r2, r1
 8001690:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6959      	ldr	r1, [r3, #20]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2207      	movs	r2, #7
 800169e:	401a      	ands	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b10      	cmp	r3, #16
 80016ae:	d007      	beq.n	80016c0 <HAL_ADC_ConfigChannel+0x120>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b11      	cmp	r3, #17
 80016b6:	d003      	beq.n	80016c0 <HAL_ADC_ConfigChannel+0x120>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b12      	cmp	r3, #18
 80016be:	d163      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016c0:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <HAL_ADC_ConfigChannel+0x204>)
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b10      	cmp	r3, #16
 80016ca:	d009      	beq.n	80016e0 <HAL_ADC_ConfigChannel+0x140>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b11      	cmp	r3, #17
 80016d2:	d102      	bne.n	80016da <HAL_ADC_ConfigChannel+0x13a>
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	03db      	lsls	r3, r3, #15
 80016d8:	e004      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x144>
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	045b      	lsls	r3, r3, #17
 80016de:	e001      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x144>
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	041b      	lsls	r3, r3, #16
 80016e4:	4a2f      	ldr	r2, [pc, #188]	; (80017a4 <HAL_ADC_ConfigChannel+0x204>)
 80016e6:	430b      	orrs	r3, r1
 80016e8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b10      	cmp	r3, #16
 80016f0:	d14a      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <HAL_ADC_ConfigChannel+0x208>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	492d      	ldr	r1, [pc, #180]	; (80017ac <HAL_ADC_ConfigChannel+0x20c>)
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7fe fd03 	bl	8000104 <__udivsi3>
 80016fe:	0003      	movs	r3, r0
 8001700:	001a      	movs	r2, r3
 8001702:	0013      	movs	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	189b      	adds	r3, r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800170c:	e002      	b.n	8001714 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	3b01      	subs	r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f9      	bne.n	800170e <HAL_ADC_ConfigChannel+0x16e>
 800171a:	e035      	b.n	8001788 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2101      	movs	r1, #1
 8001728:	4099      	lsls	r1, r3
 800172a:	000b      	movs	r3, r1
 800172c:	43d9      	mvns	r1, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	400a      	ands	r2, r1
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b10      	cmp	r3, #16
 800173c:	d007      	beq.n	800174e <HAL_ADC_ConfigChannel+0x1ae>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b11      	cmp	r3, #17
 8001744:	d003      	beq.n	800174e <HAL_ADC_ConfigChannel+0x1ae>
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b12      	cmp	r3, #18
 800174c:	d11c      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_ADC_ConfigChannel+0x204>)
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b10      	cmp	r3, #16
 8001758:	d007      	beq.n	800176a <HAL_ADC_ConfigChannel+0x1ca>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b11      	cmp	r3, #17
 8001760:	d101      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x1c6>
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_ADC_ConfigChannel+0x210>)
 8001764:	e002      	b.n	800176c <HAL_ADC_ConfigChannel+0x1cc>
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_ADC_ConfigChannel+0x214>)
 8001768:	e000      	b.n	800176c <HAL_ADC_ConfigChannel+0x1cc>
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <HAL_ADC_ConfigChannel+0x218>)
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <HAL_ADC_ConfigChannel+0x204>)
 800176e:	400b      	ands	r3, r1
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e009      	b.n	8001788 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001778:	2220      	movs	r2, #32
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001780:	230f      	movs	r3, #15
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2234      	movs	r2, #52	; 0x34
 800178c:	2100      	movs	r1, #0
 800178e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001790:	230f      	movs	r3, #15
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	781b      	ldrb	r3, [r3, #0]
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b004      	add	sp, #16
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	00001001 	.word	0x00001001
 80017a4:	40012708 	.word	0x40012708
 80017a8:	20000000 	.word	0x20000000
 80017ac:	000f4240 	.word	0x000f4240
 80017b0:	ffbfffff 	.word	0xffbfffff
 80017b4:	feffffff 	.word	0xfeffffff
 80017b8:	ff7fffff 	.word	0xff7fffff

080017bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0f0      	b.n	80019b0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2220      	movs	r2, #32
 80017d2:	5c9b      	ldrb	r3, [r3, r2]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	0018      	movs	r0, r3
 80017de:	f7ff fbdb 	bl	8000f98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2101      	movs	r1, #1
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f2:	f7ff fd67 	bl	80012c4 <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017fa:	e013      	b.n	8001824 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017fc:	f7ff fd62 	bl	80012c4 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b0a      	cmp	r3, #10
 8001808:	d90c      	bls.n	8001824 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	0292      	lsls	r2, r2, #10
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2220      	movs	r2, #32
 800181c:	2105      	movs	r1, #5
 800181e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0c5      	b.n	80019b0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	4013      	ands	r3, r2
 800182e:	d0e5      	beq.n	80017fc <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2102      	movs	r1, #2
 800183c:	438a      	bics	r2, r1
 800183e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001840:	f7ff fd40 	bl	80012c4 <HAL_GetTick>
 8001844:	0003      	movs	r3, r0
 8001846:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001848:	e013      	b.n	8001872 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800184a:	f7ff fd3b 	bl	80012c4 <HAL_GetTick>
 800184e:	0002      	movs	r2, r0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b0a      	cmp	r3, #10
 8001856:	d90c      	bls.n	8001872 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	2280      	movs	r2, #128	; 0x80
 800185e:	0292      	lsls	r2, r2, #10
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2220      	movs	r2, #32
 800186a:	2105      	movs	r1, #5
 800186c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e09e      	b.n	80019b0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2202      	movs	r2, #2
 800187a:	4013      	ands	r3, r2
 800187c:	d1e5      	bne.n	800184a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7e1b      	ldrb	r3, [r3, #24]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d108      	bne.n	8001898 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e007      	b.n	80018a8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2180      	movs	r1, #128	; 0x80
 80018a4:	438a      	bics	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7e5b      	ldrb	r3, [r3, #25]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d108      	bne.n	80018c2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2140      	movs	r1, #64	; 0x40
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e007      	b.n	80018d2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2140      	movs	r1, #64	; 0x40
 80018ce:	438a      	bics	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7e9b      	ldrb	r3, [r3, #26]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d108      	bne.n	80018ec <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2120      	movs	r1, #32
 80018e6:	430a      	orrs	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e007      	b.n	80018fc <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2120      	movs	r1, #32
 80018f8:	438a      	bics	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7edb      	ldrb	r3, [r3, #27]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d108      	bne.n	8001916 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2110      	movs	r1, #16
 8001910:	438a      	bics	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e007      	b.n	8001926 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2110      	movs	r1, #16
 8001922:	430a      	orrs	r2, r1
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7f1b      	ldrb	r3, [r3, #28]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d108      	bne.n	8001940 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2108      	movs	r1, #8
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e007      	b.n	8001950 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2108      	movs	r1, #8
 800194c:	438a      	bics	r2, r1
 800194e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7f5b      	ldrb	r3, [r3, #29]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d108      	bne.n	800196a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2104      	movs	r1, #4
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e007      	b.n	800197a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2104      	movs	r1, #4
 8001976:	438a      	bics	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	431a      	orrs	r2, r3
 8001990:	0011      	movs	r1, r2
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	1e5a      	subs	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2220      	movs	r2, #32
 80019aa:	2101      	movs	r1, #1
 80019ac:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b004      	add	sp, #16
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019c8:	2013      	movs	r0, #19
 80019ca:	183b      	adds	r3, r7, r0
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	2120      	movs	r1, #32
 80019d0:	5c52      	ldrb	r2, [r2, r1]
 80019d2:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80019d4:	0002      	movs	r2, r0
 80019d6:	18bb      	adds	r3, r7, r2
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d004      	beq.n	80019e8 <HAL_CAN_ConfigFilter+0x30>
 80019de:	18bb      	adds	r3, r7, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d000      	beq.n	80019e8 <HAL_CAN_ConfigFilter+0x30>
 80019e6:	e0cd      	b.n	8001b84 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	58d3      	ldr	r3, [r2, r3]
 80019f0:	2201      	movs	r2, #1
 80019f2:	431a      	orrs	r2, r3
 80019f4:	0011      	movs	r1, r2
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	221f      	movs	r2, #31
 8001a04:	4013      	ands	r3, r2
 8001a06:	2201      	movs	r2, #1
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	0013      	movs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	2387      	movs	r3, #135	; 0x87
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	58d3      	ldr	r3, [r2, r3]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	43d2      	mvns	r2, r2
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	0011      	movs	r1, r2
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	2387      	movs	r3, #135	; 0x87
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d129      	bne.n	8001a82 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	2383      	movs	r3, #131	; 0x83
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	58d3      	ldr	r3, [r2, r3]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	43d2      	mvns	r2, r2
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	0011      	movs	r1, r2
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	2383      	movs	r3, #131	; 0x83
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a58:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3248      	adds	r2, #72	; 0x48
 8001a5e:	00d2      	lsls	r2, r2, #3
 8001a60:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a76:	6979      	ldr	r1, [r7, #20]
 8001a78:	3348      	adds	r3, #72	; 0x48
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	18cb      	adds	r3, r1, r3
 8001a7e:	3304      	adds	r3, #4
 8001a80:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d128      	bne.n	8001adc <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	2383      	movs	r3, #131	; 0x83
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	58d2      	ldr	r2, [r2, r3]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	0011      	movs	r1, r2
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	2383      	movs	r3, #131	; 0x83
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ab2:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3248      	adds	r2, #72	; 0x48
 8001ab8:	00d2      	lsls	r2, r2, #3
 8001aba:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	041b      	lsls	r3, r3, #16
 8001ac8:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ace:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ad0:	6979      	ldr	r1, [r7, #20]
 8001ad2:	3348      	adds	r3, #72	; 0x48
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	18cb      	adds	r3, r1, r3
 8001ad8:	3304      	adds	r3, #4
 8001ada:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10c      	bne.n	8001afe <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	2381      	movs	r3, #129	; 0x81
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	58d3      	ldr	r3, [r2, r3]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	43d2      	mvns	r2, r2
 8001af0:	401a      	ands	r2, r3
 8001af2:	0011      	movs	r1, r2
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	2381      	movs	r3, #129	; 0x81
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	50d1      	str	r1, [r2, r3]
 8001afc:	e00a      	b.n	8001b14 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	2381      	movs	r3, #129	; 0x81
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	58d2      	ldr	r2, [r2, r3]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	2381      	movs	r3, #129	; 0x81
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10c      	bne.n	8001b36 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	2385      	movs	r3, #133	; 0x85
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	58d3      	ldr	r3, [r2, r3]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	43d2      	mvns	r2, r2
 8001b28:	401a      	ands	r2, r3
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	2385      	movs	r3, #133	; 0x85
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	50d1      	str	r1, [r2, r3]
 8001b34:	e00a      	b.n	8001b4c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	2385      	movs	r3, #133	; 0x85
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	58d2      	ldr	r2, [r2, r3]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	0011      	movs	r1, r2
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	2385      	movs	r3, #133	; 0x85
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d10a      	bne.n	8001b6a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	2387      	movs	r3, #135	; 0x87
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	58d2      	ldr	r2, [r2, r3]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	0011      	movs	r1, r2
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	2387      	movs	r3, #135	; 0x87
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	58d3      	ldr	r3, [r2, r3]
 8001b72:	2201      	movs	r2, #1
 8001b74:	4393      	bics	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e007      	b.n	8001b94 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	02d2      	lsls	r2, r2, #11
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
  }
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b006      	add	sp, #24
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	5c9b      	ldrb	r3, [r3, r2]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d12f      	bne.n	8001c10 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	438a      	bics	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bc8:	f7ff fb7c 	bl	80012c4 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bd0:	e013      	b.n	8001bfa <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bd2:	f7ff fb77 	bl	80012c4 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b0a      	cmp	r3, #10
 8001bde:	d90c      	bls.n	8001bfa <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	0292      	lsls	r2, r2, #10
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e012      	b.n	8001c20 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	4013      	ands	r3, r2
 8001c04:	d1e5      	bne.n	8001bd2 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e007      	b.n	8001c20 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	0312      	lsls	r2, r2, #12
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
  }
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b004      	add	sp, #16
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c36:	2017      	movs	r0, #23
 8001c38:	183b      	adds	r3, r7, r0
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	2120      	movs	r1, #32
 8001c3e:	5c52      	ldrb	r2, [r2, r1]
 8001c40:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c42:	0002      	movs	r2, r0
 8001c44:	18bb      	adds	r3, r7, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d004      	beq.n	8001c56 <HAL_CAN_GetRxMessage+0x2e>
 8001c4c:	18bb      	adds	r3, r7, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d000      	beq.n	8001c56 <HAL_CAN_GetRxMessage+0x2e>
 8001c54:	e0f8      	b.n	8001e48 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10e      	bne.n	8001c7a <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2203      	movs	r2, #3
 8001c64:	4013      	ands	r3, r2
 8001c66:	d117      	bne.n	8001c98 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	0392      	lsls	r2, r2, #14
 8001c70:	431a      	orrs	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0ee      	b.n	8001e58 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2203      	movs	r2, #3
 8001c82:	4013      	ands	r3, r2
 8001c84:	d108      	bne.n	8001c98 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	0392      	lsls	r2, r2, #14
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0df      	b.n	8001e58 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	321b      	adds	r2, #27
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	58d3      	ldr	r3, [r2, r3]
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10b      	bne.n	8001ccc <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	321b      	adds	r2, #27
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	58d3      	ldr	r3, [r2, r3]
 8001cc0:	0d5b      	lsrs	r3, r3, #21
 8001cc2:	055b      	lsls	r3, r3, #21
 8001cc4:	0d5a      	lsrs	r2, r3, #21
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e00a      	b.n	8001ce2 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	321b      	adds	r2, #27
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	58d3      	ldr	r3, [r2, r3]
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	321b      	adds	r2, #27
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	58d3      	ldr	r3, [r2, r3]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	331b      	adds	r3, #27
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	18d3      	adds	r3, r2, r3
 8001d02:	3304      	adds	r3, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	220f      	movs	r2, #15
 8001d08:	401a      	ands	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	331b      	adds	r3, #27
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	18d3      	adds	r3, r2, r3
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	22ff      	movs	r2, #255	; 0xff
 8001d22:	401a      	ands	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	331b      	adds	r3, #27
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	18d3      	adds	r3, r2, r3
 8001d34:	3304      	adds	r3, #4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	041b      	lsls	r3, r3, #16
 8001d3c:	0c1a      	lsrs	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6819      	ldr	r1, [r3, #0]
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	23dc      	movs	r3, #220	; 0xdc
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	188a      	adds	r2, r1, r2
 8001d50:	18d3      	adds	r3, r2, r3
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	23dc      	movs	r3, #220	; 0xdc
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	188a      	adds	r2, r1, r2
 8001d68:	18d3      	adds	r3, r2, r3
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0a1a      	lsrs	r2, r3, #8
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6819      	ldr	r1, [r3, #0]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	23dc      	movs	r3, #220	; 0xdc
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	188a      	adds	r2, r1, r2
 8001d84:	18d3      	adds	r3, r2, r3
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0c1a      	lsrs	r2, r3, #16
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	23dc      	movs	r3, #220	; 0xdc
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	188a      	adds	r2, r1, r2
 8001da0:	18d3      	adds	r3, r2, r3
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0e1a      	lsrs	r2, r3, #24
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	3303      	adds	r3, #3
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	23de      	movs	r3, #222	; 0xde
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	188a      	adds	r2, r1, r2
 8001dbc:	18d3      	adds	r3, r2, r3
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6819      	ldr	r1, [r3, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	23de      	movs	r3, #222	; 0xde
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	188a      	adds	r2, r1, r2
 8001dd6:	18d3      	adds	r3, r2, r3
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	0a1a      	lsrs	r2, r3, #8
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	3305      	adds	r3, #5
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6819      	ldr	r1, [r3, #0]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	23de      	movs	r3, #222	; 0xde
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	188a      	adds	r2, r1, r2
 8001df2:	18d3      	adds	r3, r2, r3
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0c1a      	lsrs	r2, r3, #16
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	3306      	adds	r3, #6
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	23de      	movs	r3, #222	; 0xde
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	188a      	adds	r2, r1, r2
 8001e0e:	18d3      	adds	r3, r2, r3
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	0e1a      	lsrs	r2, r3, #24
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	3307      	adds	r3, #7
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d108      	bne.n	8001e34 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	e007      	b.n	8001e44 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2120      	movs	r1, #32
 8001e40:	430a      	orrs	r2, r1
 8001e42:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e007      	b.n	8001e58 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	02d2      	lsls	r2, r2, #11
 8001e50:	431a      	orrs	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
  }
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b006      	add	sp, #24
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e6a:	200f      	movs	r0, #15
 8001e6c:	183b      	adds	r3, r7, r0
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	2120      	movs	r1, #32
 8001e72:	5c52      	ldrb	r2, [r2, r1]
 8001e74:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e76:	0002      	movs	r2, r0
 8001e78:	18bb      	adds	r3, r7, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d003      	beq.n	8001e88 <HAL_CAN_ActivateNotification+0x28>
 8001e80:	18bb      	adds	r3, r7, r2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d109      	bne.n	8001e9c <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6959      	ldr	r1, [r3, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e007      	b.n	8001eac <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	02d2      	lsls	r2, r2, #11
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
  }
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b004      	add	sp, #16
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d100      	bne.n	8001efa <HAL_CAN_IRQHandler+0x46>
 8001ef8:	e084      	b.n	8002004 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4013      	ands	r3, r2
 8001f00:	d024      	beq.n	8001f4c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2201      	movs	r2, #1
 8001f08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d004      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f000 f981 	bl	800221c <HAL_CAN_TxMailbox0CompleteCallback>
 8001f1a:	e017      	b.n	8001f4c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	4013      	ands	r3, r2
 8001f22:	d005      	beq.n	8001f30 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	2280      	movs	r2, #128	; 0x80
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2e:	e00d      	b.n	8001f4c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2208      	movs	r2, #8
 8001f34:	4013      	ands	r3, r2
 8001f36:	d005      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	0152      	lsls	r2, r2, #5
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
 8001f42:	e003      	b.n	8001f4c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 f980 	bl	800224c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4013      	ands	r3, r2
 8001f54:	d028      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2280      	movs	r2, #128	; 0x80
 8001f5c:	0052      	lsls	r2, r2, #1
 8001f5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4013      	ands	r3, r2
 8001f68:	d004      	beq.n	8001f74 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 f95d 	bl	800222c <HAL_CAN_TxMailbox1CompleteCallback>
 8001f72:	e019      	b.n	8001fa8 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d005      	beq.n	8001f8a <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	2280      	movs	r2, #128	; 0x80
 8001f82:	0192      	lsls	r2, r2, #6
 8001f84:	4313      	orrs	r3, r2
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	e00e      	b.n	8001fa8 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	4013      	ands	r3, r2
 8001f92:	d005      	beq.n	8001fa0 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	2280      	movs	r2, #128	; 0x80
 8001f98:	01d2      	lsls	r2, r2, #7
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9e:	e003      	b.n	8001fa8 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f000 f95a 	bl	800225c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	025b      	lsls	r3, r3, #9
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d028      	beq.n	8002004 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	0252      	lsls	r2, r2, #9
 8001fba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	029b      	lsls	r3, r3, #10
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d004      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f000 f937 	bl	800223c <HAL_CAN_TxMailbox2CompleteCallback>
 8001fce:	e019      	b.n	8002004 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	02db      	lsls	r3, r3, #11
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d005      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	2280      	movs	r2, #128	; 0x80
 8001fde:	0212      	lsls	r2, r2, #8
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe4:	e00e      	b.n	8002004 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	031b      	lsls	r3, r3, #12
 8001fec:	4013      	ands	r3, r2
 8001fee:	d005      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	2280      	movs	r2, #128	; 0x80
 8001ff4:	0252      	lsls	r2, r2, #9
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffa:	e003      	b.n	8002004 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 f934 	bl	800226c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	2208      	movs	r2, #8
 8002008:	4013      	ands	r3, r2
 800200a:	d00c      	beq.n	8002026 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2210      	movs	r2, #16
 8002010:	4013      	ands	r3, r2
 8002012:	d008      	beq.n	8002026 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	0092      	lsls	r2, r2, #2
 800201a:	4313      	orrs	r3, r2
 800201c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2210      	movs	r2, #16
 8002024:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	2204      	movs	r2, #4
 800202a:	4013      	ands	r3, r2
 800202c:	d00b      	beq.n	8002046 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2208      	movs	r2, #8
 8002032:	4013      	ands	r3, r2
 8002034:	d007      	beq.n	8002046 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2208      	movs	r2, #8
 800203c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0018      	movs	r0, r3
 8002042:	f000 f91b 	bl	800227c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	2202      	movs	r2, #2
 800204a:	4013      	ands	r3, r2
 800204c:	d009      	beq.n	8002062 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2203      	movs	r2, #3
 8002056:	4013      	ands	r3, r2
 8002058:	d003      	beq.n	8002062 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f7fe fa2f 	bl	80004c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	2240      	movs	r2, #64	; 0x40
 8002066:	4013      	ands	r3, r2
 8002068:	d00c      	beq.n	8002084 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2210      	movs	r2, #16
 800206e:	4013      	ands	r3, r2
 8002070:	d008      	beq.n	8002084 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	00d2      	lsls	r2, r2, #3
 8002078:	4313      	orrs	r3, r2
 800207a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2210      	movs	r2, #16
 8002082:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	2220      	movs	r2, #32
 8002088:	4013      	ands	r3, r2
 800208a:	d00b      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	2208      	movs	r2, #8
 8002090:	4013      	ands	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2208      	movs	r2, #8
 800209a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 f8fc 	bl	800229c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	2210      	movs	r2, #16
 80020a8:	4013      	ands	r3, r2
 80020aa:	d009      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2203      	movs	r2, #3
 80020b4:	4013      	ands	r3, r2
 80020b6:	d003      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 f8e6 	bl	800228c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020c0:	6a3a      	ldr	r2, [r7, #32]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	029b      	lsls	r3, r3, #10
 80020c6:	4013      	ands	r3, r2
 80020c8:	d00b      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	2210      	movs	r2, #16
 80020ce:	4013      	ands	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2210      	movs	r2, #16
 80020d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0018      	movs	r0, r3
 80020de:	f000 f8e5 	bl	80022ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020e2:	6a3a      	ldr	r2, [r7, #32]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	025b      	lsls	r3, r3, #9
 80020e8:	4013      	ands	r3, r2
 80020ea:	d00b      	beq.n	8002104 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2208      	movs	r2, #8
 80020f0:	4013      	ands	r3, r2
 80020f2:	d007      	beq.n	8002104 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2208      	movs	r2, #8
 80020fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	0018      	movs	r0, r3
 8002100:	f000 f8dc 	bl	80022bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002104:	6a3a      	ldr	r2, [r7, #32]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	4013      	ands	r3, r2
 800210c:	d100      	bne.n	8002110 <HAL_CAN_IRQHandler+0x25c>
 800210e:	e074      	b.n	80021fa <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2204      	movs	r2, #4
 8002114:	4013      	ands	r3, r2
 8002116:	d100      	bne.n	800211a <HAL_CAN_IRQHandler+0x266>
 8002118:	e06b      	b.n	80021f2 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800211a:	6a3a      	ldr	r2, [r7, #32]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4013      	ands	r3, r2
 8002122:	d007      	beq.n	8002134 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800212a:	d003      	beq.n	8002134 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	2201      	movs	r2, #1
 8002130:	4313      	orrs	r3, r2
 8002132:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002134:	6a3a      	ldr	r2, [r7, #32]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4013      	ands	r3, r2
 800213c:	d007      	beq.n	800214e <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2202      	movs	r2, #2
 8002142:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002144:	d003      	beq.n	800214e <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	2202      	movs	r2, #2
 800214a:	4313      	orrs	r3, r2
 800214c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800214e:	6a3a      	ldr	r2, [r7, #32]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4013      	ands	r3, r2
 8002156:	d007      	beq.n	8002168 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2204      	movs	r2, #4
 800215c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800215e:	d003      	beq.n	8002168 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	2204      	movs	r2, #4
 8002164:	4313      	orrs	r3, r2
 8002166:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002168:	6a3a      	ldr	r2, [r7, #32]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	4013      	ands	r3, r2
 8002170:	d03f      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2270      	movs	r2, #112	; 0x70
 8002176:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002178:	d03b      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2270      	movs	r2, #112	; 0x70
 800217e:	4013      	ands	r3, r2
 8002180:	2b60      	cmp	r3, #96	; 0x60
 8002182:	d027      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x320>
 8002184:	d82c      	bhi.n	80021e0 <HAL_CAN_IRQHandler+0x32c>
 8002186:	2b50      	cmp	r3, #80	; 0x50
 8002188:	d01f      	beq.n	80021ca <HAL_CAN_IRQHandler+0x316>
 800218a:	d829      	bhi.n	80021e0 <HAL_CAN_IRQHandler+0x32c>
 800218c:	2b40      	cmp	r3, #64	; 0x40
 800218e:	d017      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x30c>
 8002190:	d826      	bhi.n	80021e0 <HAL_CAN_IRQHandler+0x32c>
 8002192:	2b30      	cmp	r3, #48	; 0x30
 8002194:	d00f      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x302>
 8002196:	d823      	bhi.n	80021e0 <HAL_CAN_IRQHandler+0x32c>
 8002198:	2b10      	cmp	r3, #16
 800219a:	d002      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x2ee>
 800219c:	2b20      	cmp	r3, #32
 800219e:	d005      	beq.n	80021ac <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021a0:	e01e      	b.n	80021e0 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	2208      	movs	r2, #8
 80021a6:	4313      	orrs	r3, r2
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021aa:	e01a      	b.n	80021e2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	2210      	movs	r2, #16
 80021b0:	4313      	orrs	r3, r2
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021b4:	e015      	b.n	80021e2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	2220      	movs	r2, #32
 80021ba:	4313      	orrs	r3, r2
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021be:	e010      	b.n	80021e2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	4313      	orrs	r3, r2
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021c8:	e00b      	b.n	80021e2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	4313      	orrs	r3, r2
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021d2:	e006      	b.n	80021e2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	0052      	lsls	r2, r2, #1
 80021da:	4313      	orrs	r3, r2
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021de:	e000      	b.n	80021e2 <HAL_CAN_IRQHandler+0x32e>
            break;
 80021e0:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699a      	ldr	r2, [r3, #24]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2170      	movs	r1, #112	; 0x70
 80021ee:	438a      	bics	r2, r1
 80021f0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2204      	movs	r2, #4
 80021f8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d009      	beq.n	8002214 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	0018      	movs	r0, r3
 8002210:	f000 f85c 	bl	80022cc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b00a      	add	sp, #40	; 0x28
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	b002      	add	sp, #8
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b002      	add	sp, #8
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b002      	add	sp, #8
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002284:	46c0      	nop			; (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	b002      	add	sp, #8
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b002      	add	sp, #8
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b002      	add	sp, #8
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	0002      	movs	r2, r0
 80022e4:	1dfb      	adds	r3, r7, #7
 80022e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	1dfb      	adds	r3, r7, #7
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b7f      	cmp	r3, #127	; 0x7f
 80022ee:	d809      	bhi.n	8002304 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	001a      	movs	r2, r3
 80022f6:	231f      	movs	r3, #31
 80022f8:	401a      	ands	r2, r3
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <__NVIC_EnableIRQ+0x30>)
 80022fc:	2101      	movs	r1, #1
 80022fe:	4091      	lsls	r1, r2
 8002300:	000a      	movs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]
  }
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}
 800230c:	e000e100 	.word	0xe000e100

08002310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	0002      	movs	r2, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	1dfb      	adds	r3, r7, #7
 800231c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800231e:	1dfb      	adds	r3, r7, #7
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b7f      	cmp	r3, #127	; 0x7f
 8002324:	d828      	bhi.n	8002378 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002326:	4a2f      	ldr	r2, [pc, #188]	; (80023e4 <__NVIC_SetPriority+0xd4>)
 8002328:	1dfb      	adds	r3, r7, #7
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b25b      	sxtb	r3, r3
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	33c0      	adds	r3, #192	; 0xc0
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	589b      	ldr	r3, [r3, r2]
 8002336:	1dfa      	adds	r2, r7, #7
 8002338:	7812      	ldrb	r2, [r2, #0]
 800233a:	0011      	movs	r1, r2
 800233c:	2203      	movs	r2, #3
 800233e:	400a      	ands	r2, r1
 8002340:	00d2      	lsls	r2, r2, #3
 8002342:	21ff      	movs	r1, #255	; 0xff
 8002344:	4091      	lsls	r1, r2
 8002346:	000a      	movs	r2, r1
 8002348:	43d2      	mvns	r2, r2
 800234a:	401a      	ands	r2, r3
 800234c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	019b      	lsls	r3, r3, #6
 8002352:	22ff      	movs	r2, #255	; 0xff
 8002354:	401a      	ands	r2, r3
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	0018      	movs	r0, r3
 800235c:	2303      	movs	r3, #3
 800235e:	4003      	ands	r3, r0
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002364:	481f      	ldr	r0, [pc, #124]	; (80023e4 <__NVIC_SetPriority+0xd4>)
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	b25b      	sxtb	r3, r3
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	430a      	orrs	r2, r1
 8002370:	33c0      	adds	r3, #192	; 0xc0
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002376:	e031      	b.n	80023dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002378:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <__NVIC_SetPriority+0xd8>)
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	0019      	movs	r1, r3
 8002380:	230f      	movs	r3, #15
 8002382:	400b      	ands	r3, r1
 8002384:	3b08      	subs	r3, #8
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3306      	adds	r3, #6
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	18d3      	adds	r3, r2, r3
 800238e:	3304      	adds	r3, #4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1dfa      	adds	r2, r7, #7
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	0011      	movs	r1, r2
 8002398:	2203      	movs	r2, #3
 800239a:	400a      	ands	r2, r1
 800239c:	00d2      	lsls	r2, r2, #3
 800239e:	21ff      	movs	r1, #255	; 0xff
 80023a0:	4091      	lsls	r1, r2
 80023a2:	000a      	movs	r2, r1
 80023a4:	43d2      	mvns	r2, r2
 80023a6:	401a      	ands	r2, r3
 80023a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	019b      	lsls	r3, r3, #6
 80023ae:	22ff      	movs	r2, #255	; 0xff
 80023b0:	401a      	ands	r2, r3
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	0018      	movs	r0, r3
 80023b8:	2303      	movs	r3, #3
 80023ba:	4003      	ands	r3, r0
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c0:	4809      	ldr	r0, [pc, #36]	; (80023e8 <__NVIC_SetPriority+0xd8>)
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	001c      	movs	r4, r3
 80023c8:	230f      	movs	r3, #15
 80023ca:	4023      	ands	r3, r4
 80023cc:	3b08      	subs	r3, #8
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	430a      	orrs	r2, r1
 80023d2:	3306      	adds	r3, #6
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	18c3      	adds	r3, r0, r3
 80023d8:	3304      	adds	r3, #4
 80023da:	601a      	str	r2, [r3, #0]
}
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b003      	add	sp, #12
 80023e2:	bd90      	pop	{r4, r7, pc}
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	1e5a      	subs	r2, r3, #1
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	045b      	lsls	r3, r3, #17
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d301      	bcc.n	8002404 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002400:	2301      	movs	r3, #1
 8002402:	e010      	b.n	8002426 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <SysTick_Config+0x44>)
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	3a01      	subs	r2, #1
 800240a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240c:	2301      	movs	r3, #1
 800240e:	425b      	negs	r3, r3
 8002410:	2103      	movs	r1, #3
 8002412:	0018      	movs	r0, r3
 8002414:	f7ff ff7c 	bl	8002310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <SysTick_Config+0x44>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <SysTick_Config+0x44>)
 8002420:	2207      	movs	r2, #7
 8002422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002424:	2300      	movs	r3, #0
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	b002      	add	sp, #8
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	e000e010 	.word	0xe000e010

08002434 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	210f      	movs	r1, #15
 8002440:	187b      	adds	r3, r7, r1
 8002442:	1c02      	adds	r2, r0, #0
 8002444:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	187b      	adds	r3, r7, r1
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b25b      	sxtb	r3, r3
 800244e:	0011      	movs	r1, r2
 8002450:	0018      	movs	r0, r3
 8002452:	f7ff ff5d 	bl	8002310 <__NVIC_SetPriority>
}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	0002      	movs	r2, r0
 8002466:	1dfb      	adds	r3, r7, #7
 8002468:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246a:	1dfb      	adds	r3, r7, #7
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b25b      	sxtb	r3, r3
 8002470:	0018      	movs	r0, r3
 8002472:	f7ff ff33 	bl	80022dc <__NVIC_EnableIRQ>
}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	46bd      	mov	sp, r7
 800247a:	b002      	add	sp, #8
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0018      	movs	r0, r3
 800248a:	f7ff ffaf 	bl	80023ec <SysTick_Config>
 800248e:	0003      	movs	r3, r0
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b002      	add	sp, #8
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a6:	e155      	b.n	8002754 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2101      	movs	r1, #1
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4091      	lsls	r1, r2
 80024b2:	000a      	movs	r2, r1
 80024b4:	4013      	ands	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d100      	bne.n	80024c0 <HAL_GPIO_Init+0x28>
 80024be:	e146      	b.n	800274e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2203      	movs	r2, #3
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d005      	beq.n	80024d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2203      	movs	r2, #3
 80024d2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d130      	bne.n	800253a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	409a      	lsls	r2, r3
 80024e6:	0013      	movs	r3, r2
 80024e8:	43da      	mvns	r2, r3
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	409a      	lsls	r2, r3
 80024fa:	0013      	movs	r3, r2
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800250e:	2201      	movs	r2, #1
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	409a      	lsls	r2, r3
 8002514:	0013      	movs	r3, r2
 8002516:	43da      	mvns	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	2201      	movs	r2, #1
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	409a      	lsls	r2, r3
 800252c:	0013      	movs	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2203      	movs	r2, #3
 8002540:	4013      	ands	r3, r2
 8002542:	2b03      	cmp	r3, #3
 8002544:	d017      	beq.n	8002576 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2203      	movs	r2, #3
 8002552:	409a      	lsls	r2, r3
 8002554:	0013      	movs	r3, r2
 8002556:	43da      	mvns	r2, r3
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	409a      	lsls	r2, r3
 8002568:	0013      	movs	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2203      	movs	r2, #3
 800257c:	4013      	ands	r3, r2
 800257e:	2b02      	cmp	r3, #2
 8002580:	d123      	bne.n	80025ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	0092      	lsls	r2, r2, #2
 800258c:	58d3      	ldr	r3, [r2, r3]
 800258e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2207      	movs	r2, #7
 8002594:	4013      	ands	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	409a      	lsls	r2, r3
 800259c:	0013      	movs	r3, r2
 800259e:	43da      	mvns	r2, r3
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2107      	movs	r1, #7
 80025ae:	400b      	ands	r3, r1
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	409a      	lsls	r2, r3
 80025b4:	0013      	movs	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	6939      	ldr	r1, [r7, #16]
 80025c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	409a      	lsls	r2, r3
 80025d8:	0013      	movs	r3, r2
 80025da:	43da      	mvns	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2203      	movs	r2, #3
 80025e8:	401a      	ands	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	409a      	lsls	r2, r3
 80025f0:	0013      	movs	r3, r2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	23c0      	movs	r3, #192	; 0xc0
 8002604:	029b      	lsls	r3, r3, #10
 8002606:	4013      	ands	r3, r2
 8002608:	d100      	bne.n	800260c <HAL_GPIO_Init+0x174>
 800260a:	e0a0      	b.n	800274e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260c:	4b57      	ldr	r3, [pc, #348]	; (800276c <HAL_GPIO_Init+0x2d4>)
 800260e:	699a      	ldr	r2, [r3, #24]
 8002610:	4b56      	ldr	r3, [pc, #344]	; (800276c <HAL_GPIO_Init+0x2d4>)
 8002612:	2101      	movs	r1, #1
 8002614:	430a      	orrs	r2, r1
 8002616:	619a      	str	r2, [r3, #24]
 8002618:	4b54      	ldr	r3, [pc, #336]	; (800276c <HAL_GPIO_Init+0x2d4>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2201      	movs	r2, #1
 800261e:	4013      	ands	r3, r2
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_GPIO_Init+0x2d8>)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	589b      	ldr	r3, [r3, r2]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2203      	movs	r2, #3
 8002636:	4013      	ands	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	409a      	lsls	r2, r3
 800263e:	0013      	movs	r3, r2
 8002640:	43da      	mvns	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	2390      	movs	r3, #144	; 0x90
 800264c:	05db      	lsls	r3, r3, #23
 800264e:	429a      	cmp	r2, r3
 8002650:	d019      	beq.n	8002686 <HAL_GPIO_Init+0x1ee>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a47      	ldr	r2, [pc, #284]	; (8002774 <HAL_GPIO_Init+0x2dc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <HAL_GPIO_Init+0x1ea>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a46      	ldr	r2, [pc, #280]	; (8002778 <HAL_GPIO_Init+0x2e0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00d      	beq.n	800267e <HAL_GPIO_Init+0x1e6>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a45      	ldr	r2, [pc, #276]	; (800277c <HAL_GPIO_Init+0x2e4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <HAL_GPIO_Init+0x1e2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a44      	ldr	r2, [pc, #272]	; (8002780 <HAL_GPIO_Init+0x2e8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d101      	bne.n	8002676 <HAL_GPIO_Init+0x1de>
 8002672:	2304      	movs	r3, #4
 8002674:	e008      	b.n	8002688 <HAL_GPIO_Init+0x1f0>
 8002676:	2305      	movs	r3, #5
 8002678:	e006      	b.n	8002688 <HAL_GPIO_Init+0x1f0>
 800267a:	2303      	movs	r3, #3
 800267c:	e004      	b.n	8002688 <HAL_GPIO_Init+0x1f0>
 800267e:	2302      	movs	r3, #2
 8002680:	e002      	b.n	8002688 <HAL_GPIO_Init+0x1f0>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_GPIO_Init+0x1f0>
 8002686:	2300      	movs	r3, #0
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	2103      	movs	r1, #3
 800268c:	400a      	ands	r2, r1
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	4093      	lsls	r3, r2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002698:	4935      	ldr	r1, [pc, #212]	; (8002770 <HAL_GPIO_Init+0x2d8>)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	3302      	adds	r3, #2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a6:	4b37      	ldr	r3, [pc, #220]	; (8002784 <HAL_GPIO_Init+0x2ec>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43da      	mvns	r2, r3
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	025b      	lsls	r3, r3, #9
 80026be:	4013      	ands	r3, r2
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026ca:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <HAL_GPIO_Init+0x2ec>)
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80026d0:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <HAL_GPIO_Init+0x2ec>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	43da      	mvns	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	029b      	lsls	r3, r3, #10
 80026e8:	4013      	ands	r3, r2
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026f4:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_GPIO_Init+0x2ec>)
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_GPIO_Init+0x2ec>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	43da      	mvns	r2, r3
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	035b      	lsls	r3, r3, #13
 8002712:	4013      	ands	r3, r2
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_GPIO_Init+0x2ec>)
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002724:	4b17      	ldr	r3, [pc, #92]	; (8002784 <HAL_GPIO_Init+0x2ec>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43da      	mvns	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	039b      	lsls	r3, r3, #14
 800273c:	4013      	ands	r3, r2
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <HAL_GPIO_Init+0x2ec>)
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3301      	adds	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	40da      	lsrs	r2, r3
 800275c:	1e13      	subs	r3, r2, #0
 800275e:	d000      	beq.n	8002762 <HAL_GPIO_Init+0x2ca>
 8002760:	e6a2      	b.n	80024a8 <HAL_GPIO_Init+0x10>
  } 
}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	b006      	add	sp, #24
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	40010000 	.word	0x40010000
 8002774:	48000400 	.word	0x48000400
 8002778:	48000800 	.word	0x48000800
 800277c:	48000c00 	.word	0x48000c00
 8002780:	48001000 	.word	0x48001000
 8002784:	40010400 	.word	0x40010400

08002788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	000a      	movs	r2, r1
 8002792:	1cbb      	adds	r3, r7, #2
 8002794:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	1cba      	adds	r2, r7, #2
 800279c:	8812      	ldrh	r2, [r2, #0]
 800279e:	4013      	ands	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027a2:	230f      	movs	r3, #15
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e003      	b.n	80027b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ac:	230f      	movs	r3, #15
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027b4:	230f      	movs	r3, #15
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	781b      	ldrb	r3, [r3, #0]
  }
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b004      	add	sp, #16
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	0008      	movs	r0, r1
 80027cc:	0011      	movs	r1, r2
 80027ce:	1cbb      	adds	r3, r7, #2
 80027d0:	1c02      	adds	r2, r0, #0
 80027d2:	801a      	strh	r2, [r3, #0]
 80027d4:	1c7b      	adds	r3, r7, #1
 80027d6:	1c0a      	adds	r2, r1, #0
 80027d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027da:	1c7b      	adds	r3, r7, #1
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d004      	beq.n	80027ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027e2:	1cbb      	adds	r3, r7, #2
 80027e4:	881a      	ldrh	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027ea:	e003      	b.n	80027f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ec:	1cbb      	adds	r3, r7, #2
 80027ee:	881a      	ldrh	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b002      	add	sp, #8
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	0002      	movs	r2, r0
 8002804:	1dbb      	adds	r3, r7, #6
 8002806:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	1dba      	adds	r2, r7, #6
 800280e:	8812      	ldrh	r2, [r2, #0]
 8002810:	4013      	ands	r3, r2
 8002812:	d008      	beq.n	8002826 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002816:	1dba      	adds	r2, r7, #6
 8002818:	8812      	ldrh	r2, [r2, #0]
 800281a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800281c:	1dbb      	adds	r3, r7, #6
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	0018      	movs	r0, r3
 8002822:	f7fd fe69 	bl	80004f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	b002      	add	sp, #8
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	f000 fb76 	bl	8002f34 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	4013      	ands	r3, r2
 8002850:	d100      	bne.n	8002854 <HAL_RCC_OscConfig+0x20>
 8002852:	e08e      	b.n	8002972 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002854:	4bc5      	ldr	r3, [pc, #788]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	220c      	movs	r2, #12
 800285a:	4013      	ands	r3, r2
 800285c:	2b04      	cmp	r3, #4
 800285e:	d00e      	beq.n	800287e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002860:	4bc2      	ldr	r3, [pc, #776]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	220c      	movs	r2, #12
 8002866:	4013      	ands	r3, r2
 8002868:	2b08      	cmp	r3, #8
 800286a:	d117      	bne.n	800289c <HAL_RCC_OscConfig+0x68>
 800286c:	4bbf      	ldr	r3, [pc, #764]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	23c0      	movs	r3, #192	; 0xc0
 8002872:	025b      	lsls	r3, r3, #9
 8002874:	401a      	ands	r2, r3
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	025b      	lsls	r3, r3, #9
 800287a:	429a      	cmp	r2, r3
 800287c:	d10e      	bne.n	800289c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287e:	4bbb      	ldr	r3, [pc, #748]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	029b      	lsls	r3, r3, #10
 8002886:	4013      	ands	r3, r2
 8002888:	d100      	bne.n	800288c <HAL_RCC_OscConfig+0x58>
 800288a:	e071      	b.n	8002970 <HAL_RCC_OscConfig+0x13c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d000      	beq.n	8002896 <HAL_RCC_OscConfig+0x62>
 8002894:	e06c      	b.n	8002970 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	f000 fb4c 	bl	8002f34 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_OscConfig+0x80>
 80028a4:	4bb1      	ldr	r3, [pc, #708]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4bb0      	ldr	r3, [pc, #704]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	0249      	lsls	r1, r1, #9
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e02f      	b.n	8002914 <HAL_RCC_OscConfig+0xe0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0xa2>
 80028bc:	4bab      	ldr	r3, [pc, #684]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4baa      	ldr	r3, [pc, #680]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80028c2:	49ab      	ldr	r1, [pc, #684]	; (8002b70 <HAL_RCC_OscConfig+0x33c>)
 80028c4:	400a      	ands	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	4ba8      	ldr	r3, [pc, #672]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4ba7      	ldr	r3, [pc, #668]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80028ce:	49a9      	ldr	r1, [pc, #676]	; (8002b74 <HAL_RCC_OscConfig+0x340>)
 80028d0:	400a      	ands	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e01e      	b.n	8002914 <HAL_RCC_OscConfig+0xe0>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b05      	cmp	r3, #5
 80028dc:	d10e      	bne.n	80028fc <HAL_RCC_OscConfig+0xc8>
 80028de:	4ba3      	ldr	r3, [pc, #652]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4ba2      	ldr	r3, [pc, #648]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	02c9      	lsls	r1, r1, #11
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	4b9f      	ldr	r3, [pc, #636]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b9e      	ldr	r3, [pc, #632]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80028f2:	2180      	movs	r1, #128	; 0x80
 80028f4:	0249      	lsls	r1, r1, #9
 80028f6:	430a      	orrs	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0xe0>
 80028fc:	4b9b      	ldr	r3, [pc, #620]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b9a      	ldr	r3, [pc, #616]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002902:	499b      	ldr	r1, [pc, #620]	; (8002b70 <HAL_RCC_OscConfig+0x33c>)
 8002904:	400a      	ands	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	4b98      	ldr	r3, [pc, #608]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b97      	ldr	r3, [pc, #604]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 800290e:	4999      	ldr	r1, [pc, #612]	; (8002b74 <HAL_RCC_OscConfig+0x340>)
 8002910:	400a      	ands	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d014      	beq.n	8002946 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fcd2 	bl	80012c4 <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002926:	f7fe fccd 	bl	80012c4 <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	; 0x64
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e2fd      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002938:	4b8c      	ldr	r3, [pc, #560]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	029b      	lsls	r3, r3, #10
 8002940:	4013      	ands	r3, r2
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0xf2>
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe fcbd 	bl	80012c4 <HAL_GetTick>
 800294a:	0003      	movs	r3, r0
 800294c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe fcb8 	bl	80012c4 <HAL_GetTick>
 8002954:	0002      	movs	r2, r0
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e2e8      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b82      	ldr	r3, [pc, #520]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	029b      	lsls	r3, r3, #10
 800296a:	4013      	ands	r3, r2
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x11c>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2202      	movs	r2, #2
 8002978:	4013      	ands	r3, r2
 800297a:	d100      	bne.n	800297e <HAL_RCC_OscConfig+0x14a>
 800297c:	e06c      	b.n	8002a58 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800297e:	4b7b      	ldr	r3, [pc, #492]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	220c      	movs	r2, #12
 8002984:	4013      	ands	r3, r2
 8002986:	d00e      	beq.n	80029a6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002988:	4b78      	ldr	r3, [pc, #480]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	220c      	movs	r2, #12
 800298e:	4013      	ands	r3, r2
 8002990:	2b08      	cmp	r3, #8
 8002992:	d11f      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1a0>
 8002994:	4b75      	ldr	r3, [pc, #468]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	23c0      	movs	r3, #192	; 0xc0
 800299a:	025b      	lsls	r3, r3, #9
 800299c:	401a      	ands	r2, r3
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d116      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a6:	4b71      	ldr	r3, [pc, #452]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2202      	movs	r2, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_OscConfig+0x188>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e2bb      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029bc:	4b6b      	ldr	r3, [pc, #428]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	22f8      	movs	r2, #248	; 0xf8
 80029c2:	4393      	bics	r3, r2
 80029c4:	0019      	movs	r1, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00da      	lsls	r2, r3, #3
 80029cc:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	e041      	b.n	8002a58 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d024      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029dc:	4b63      	ldr	r3, [pc, #396]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b62      	ldr	r3, [pc, #392]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 80029e2:	2101      	movs	r1, #1
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fc6c 	bl	80012c4 <HAL_GetTick>
 80029ec:	0003      	movs	r3, r0
 80029ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f2:	f7fe fc67 	bl	80012c4 <HAL_GetTick>
 80029f6:	0002      	movs	r2, r0
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e297      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	4b59      	ldr	r3, [pc, #356]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d0f1      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0e:	4b57      	ldr	r3, [pc, #348]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	22f8      	movs	r2, #248	; 0xf8
 8002a14:	4393      	bics	r3, r2
 8002a16:	0019      	movs	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	00da      	lsls	r2, r3, #3
 8002a1e:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e018      	b.n	8002a58 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b51      	ldr	r3, [pc, #324]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	438a      	bics	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7fe fc47 	bl	80012c4 <HAL_GetTick>
 8002a36:	0003      	movs	r3, r0
 8002a38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a3c:	f7fe fc42 	bl	80012c4 <HAL_GetTick>
 8002a40:	0002      	movs	r2, r0
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e272      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2202      	movs	r2, #2
 8002a54:	4013      	ands	r3, r2
 8002a56:	d1f1      	bne.n	8002a3c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d036      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d019      	beq.n	8002a9e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	4b40      	ldr	r3, [pc, #256]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6e:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002a70:	2101      	movs	r1, #1
 8002a72:	430a      	orrs	r2, r1
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fc25 	bl	80012c4 <HAL_GetTick>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe fc20 	bl	80012c4 <HAL_GetTick>
 8002a84:	0002      	movs	r2, r0
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e250      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	4b36      	ldr	r3, [pc, #216]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	2202      	movs	r2, #2
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d0f1      	beq.n	8002a80 <HAL_RCC_OscConfig+0x24c>
 8002a9c:	e018      	b.n	8002ad0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9e:	4b33      	ldr	r3, [pc, #204]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa2:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	438a      	bics	r2, r1
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fc0b 	bl	80012c4 <HAL_GetTick>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab4:	f7fe fc06 	bl	80012c4 <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e236      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac6:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	2202      	movs	r2, #2
 8002acc:	4013      	ands	r3, r2
 8002ace:	d1f1      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d100      	bne.n	8002adc <HAL_RCC_OscConfig+0x2a8>
 8002ada:	e0b5      	b.n	8002c48 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002adc:	201f      	movs	r0, #31
 8002ade:	183b      	adds	r3, r7, r0
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae4:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	055b      	lsls	r3, r3, #21
 8002aec:	4013      	ands	r3, r2
 8002aee:	d110      	bne.n	8002b12 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	0549      	lsls	r1, r1, #21
 8002afa:	430a      	orrs	r2, r1
 8002afc:	61da      	str	r2, [r3, #28]
 8002afe:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	055b      	lsls	r3, r3, #21
 8002b06:	4013      	ands	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b0c:	183b      	adds	r3, r7, r0
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b12:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_OscConfig+0x344>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d11a      	bne.n	8002b54 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <HAL_RCC_OscConfig+0x344>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <HAL_RCC_OscConfig+0x344>)
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	0049      	lsls	r1, r1, #1
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fbca 	bl	80012c4 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7fe fbc5 	bl	80012c4 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b64      	cmp	r3, #100	; 0x64
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1f5      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_OscConfig+0x344>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10f      	bne.n	8002b7c <HAL_RCC_OscConfig+0x348>
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002b5e:	6a1a      	ldr	r2, [r3, #32]
 8002b60:	4b02      	ldr	r3, [pc, #8]	; (8002b6c <HAL_RCC_OscConfig+0x338>)
 8002b62:	2101      	movs	r1, #1
 8002b64:	430a      	orrs	r2, r1
 8002b66:	621a      	str	r2, [r3, #32]
 8002b68:	e036      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3a4>
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	fffeffff 	.word	0xfffeffff
 8002b74:	fffbffff 	.word	0xfffbffff
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10c      	bne.n	8002b9e <HAL_RCC_OscConfig+0x36a>
 8002b84:	4bca      	ldr	r3, [pc, #808]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002b86:	6a1a      	ldr	r2, [r3, #32]
 8002b88:	4bc9      	ldr	r3, [pc, #804]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	438a      	bics	r2, r1
 8002b8e:	621a      	str	r2, [r3, #32]
 8002b90:	4bc7      	ldr	r3, [pc, #796]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	4bc6      	ldr	r3, [pc, #792]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002b96:	2104      	movs	r1, #4
 8002b98:	438a      	bics	r2, r1
 8002b9a:	621a      	str	r2, [r3, #32]
 8002b9c:	e01c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3a4>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b05      	cmp	r3, #5
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x38c>
 8002ba6:	4bc2      	ldr	r3, [pc, #776]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
 8002baa:	4bc1      	ldr	r3, [pc, #772]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002bac:	2104      	movs	r1, #4
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	621a      	str	r2, [r3, #32]
 8002bb2:	4bbf      	ldr	r3, [pc, #764]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
 8002bb6:	4bbe      	ldr	r3, [pc, #760]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002bb8:	2101      	movs	r1, #1
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	621a      	str	r2, [r3, #32]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3a4>
 8002bc0:	4bbb      	ldr	r3, [pc, #748]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002bc2:	6a1a      	ldr	r2, [r3, #32]
 8002bc4:	4bba      	ldr	r3, [pc, #744]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	438a      	bics	r2, r1
 8002bca:	621a      	str	r2, [r3, #32]
 8002bcc:	4bb8      	ldr	r3, [pc, #736]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002bce:	6a1a      	ldr	r2, [r3, #32]
 8002bd0:	4bb7      	ldr	r3, [pc, #732]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002bd2:	2104      	movs	r1, #4
 8002bd4:	438a      	bics	r2, r1
 8002bd6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d014      	beq.n	8002c0a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be0:	f7fe fb70 	bl	80012c4 <HAL_GetTick>
 8002be4:	0003      	movs	r3, r0
 8002be6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	e009      	b.n	8002bfe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bea:	f7fe fb6b 	bl	80012c4 <HAL_GetTick>
 8002bee:	0002      	movs	r2, r0
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	4aaf      	ldr	r2, [pc, #700]	; (8002eb4 <HAL_RCC_OscConfig+0x680>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e19a      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfe:	4bac      	ldr	r3, [pc, #688]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	2202      	movs	r2, #2
 8002c04:	4013      	ands	r3, r2
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x3b6>
 8002c08:	e013      	b.n	8002c32 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fb5b 	bl	80012c4 <HAL_GetTick>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c12:	e009      	b.n	8002c28 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe fb56 	bl	80012c4 <HAL_GetTick>
 8002c18:	0002      	movs	r2, r0
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	4aa5      	ldr	r2, [pc, #660]	; (8002eb4 <HAL_RCC_OscConfig+0x680>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e185      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c28:	4ba1      	ldr	r3, [pc, #644]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c32:	231f      	movs	r3, #31
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3c:	4b9c      	ldr	r3, [pc, #624]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	4b9b      	ldr	r3, [pc, #620]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002c42:	499d      	ldr	r1, [pc, #628]	; (8002eb8 <HAL_RCC_OscConfig+0x684>)
 8002c44:	400a      	ands	r2, r1
 8002c46:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d063      	beq.n	8002d1a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d12a      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c5a:	4b95      	ldr	r3, [pc, #596]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5e:	4b94      	ldr	r3, [pc, #592]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002c60:	2104      	movs	r1, #4
 8002c62:	430a      	orrs	r2, r1
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c66:	4b92      	ldr	r3, [pc, #584]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6a:	4b91      	ldr	r3, [pc, #580]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c72:	f7fe fb27 	bl	80012c4 <HAL_GetTick>
 8002c76:	0003      	movs	r3, r0
 8002c78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c7c:	f7fe fb22 	bl	80012c4 <HAL_GetTick>
 8002c80:	0002      	movs	r2, r0
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e152      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c8e:	4b88      	ldr	r3, [pc, #544]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	2202      	movs	r2, #2
 8002c94:	4013      	ands	r3, r2
 8002c96:	d0f1      	beq.n	8002c7c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c98:	4b85      	ldr	r3, [pc, #532]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	22f8      	movs	r2, #248	; 0xf8
 8002c9e:	4393      	bics	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	00da      	lsls	r2, r3, #3
 8002ca8:	4b81      	ldr	r3, [pc, #516]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002caa:	430a      	orrs	r2, r1
 8002cac:	635a      	str	r2, [r3, #52]	; 0x34
 8002cae:	e034      	b.n	8002d1a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	3305      	adds	r3, #5
 8002cb6:	d111      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002cb8:	4b7d      	ldr	r3, [pc, #500]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cbc:	4b7c      	ldr	r3, [pc, #496]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002cbe:	2104      	movs	r1, #4
 8002cc0:	438a      	bics	r2, r1
 8002cc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cc4:	4b7a      	ldr	r3, [pc, #488]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc8:	22f8      	movs	r2, #248	; 0xf8
 8002cca:	4393      	bics	r3, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	00da      	lsls	r2, r3, #3
 8002cd4:	4b76      	ldr	r3, [pc, #472]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cda:	e01e      	b.n	8002d1a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cdc:	4b74      	ldr	r3, [pc, #464]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce0:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002ce2:	2104      	movs	r1, #4
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ce8:	4b71      	ldr	r3, [pc, #452]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cec:	4b70      	ldr	r3, [pc, #448]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002cee:	2101      	movs	r1, #1
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fae6 	bl	80012c4 <HAL_GetTick>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cfe:	f7fe fae1 	bl	80012c4 <HAL_GetTick>
 8002d02:	0002      	movs	r2, r0
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e111      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d10:	4b67      	ldr	r3, [pc, #412]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	2202      	movs	r2, #2
 8002d16:	4013      	ands	r3, r2
 8002d18:	d1f1      	bne.n	8002cfe <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	4013      	ands	r3, r2
 8002d22:	d05c      	beq.n	8002dde <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d24:	4b62      	ldr	r3, [pc, #392]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	220c      	movs	r2, #12
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d00e      	beq.n	8002d4e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d30:	4b5f      	ldr	r3, [pc, #380]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	220c      	movs	r2, #12
 8002d36:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d114      	bne.n	8002d66 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d3c:	4b5c      	ldr	r3, [pc, #368]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	23c0      	movs	r3, #192	; 0xc0
 8002d42:	025b      	lsls	r3, r3, #9
 8002d44:	401a      	ands	r2, r3
 8002d46:	23c0      	movs	r3, #192	; 0xc0
 8002d48:	025b      	lsls	r3, r3, #9
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d10b      	bne.n	8002d66 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d4e:	4b58      	ldr	r3, [pc, #352]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	025b      	lsls	r3, r3, #9
 8002d56:	4013      	ands	r3, r2
 8002d58:	d040      	beq.n	8002ddc <HAL_RCC_OscConfig+0x5a8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d03c      	beq.n	8002ddc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0e6      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d01b      	beq.n	8002da6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d6e:	4b50      	ldr	r3, [pc, #320]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d72:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	0249      	lsls	r1, r1, #9
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe faa2 	bl	80012c4 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d86:	f7fe fa9d 	bl	80012c4 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0cd      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d98:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	025b      	lsls	r3, r3, #9
 8002da0:	4013      	ands	r3, r2
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x552>
 8002da4:	e01b      	b.n	8002dde <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002da6:	4b42      	ldr	r3, [pc, #264]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002daa:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002dac:	4943      	ldr	r1, [pc, #268]	; (8002ebc <HAL_RCC_OscConfig+0x688>)
 8002dae:	400a      	ands	r2, r1
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe fa87 	bl	80012c4 <HAL_GetTick>
 8002db6:	0003      	movs	r3, r0
 8002db8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dbc:	f7fe fa82 	bl	80012c4 <HAL_GetTick>
 8002dc0:	0002      	movs	r2, r0
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e0b2      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002dce:	4b38      	ldr	r3, [pc, #224]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	025b      	lsls	r3, r3, #9
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x588>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002ddc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d100      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5b4>
 8002de6:	e0a4      	b.n	8002f32 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de8:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	220c      	movs	r2, #12
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d100      	bne.n	8002df6 <HAL_RCC_OscConfig+0x5c2>
 8002df4:	e078      	b.n	8002ee8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d14c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b2c      	ldr	r3, [pc, #176]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002e04:	492e      	ldr	r1, [pc, #184]	; (8002ec0 <HAL_RCC_OscConfig+0x68c>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fa5b 	bl	80012c4 <HAL_GetTick>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fe fa56 	bl	80012c4 <HAL_GetTick>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e086      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	049b      	lsls	r3, r3, #18
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e32:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	220f      	movs	r2, #15
 8002e38:	4393      	bics	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002e42:	430a      	orrs	r2, r1
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <HAL_RCC_OscConfig+0x690>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	0449      	lsls	r1, r1, #17
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fa29 	bl	80012c4 <HAL_GetTick>
 8002e72:	0003      	movs	r3, r0
 8002e74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fe fa24 	bl	80012c4 <HAL_GetTick>
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e054      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	049b      	lsls	r3, r3, #18
 8002e92:	4013      	ands	r3, r2
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x644>
 8002e96:	e04c      	b.n	8002f32 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <HAL_RCC_OscConfig+0x67c>)
 8002e9e:	4908      	ldr	r1, [pc, #32]	; (8002ec0 <HAL_RCC_OscConfig+0x68c>)
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fa0e 	bl	80012c4 <HAL_GetTick>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eac:	e015      	b.n	8002eda <HAL_RCC_OscConfig+0x6a6>
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	00001388 	.word	0x00001388
 8002eb8:	efffffff 	.word	0xefffffff
 8002ebc:	fffeffff 	.word	0xfffeffff
 8002ec0:	feffffff 	.word	0xfeffffff
 8002ec4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe f9fc 	bl	80012c4 <HAL_GetTick>
 8002ecc:	0002      	movs	r2, r0
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e02c      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <HAL_RCC_OscConfig+0x708>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	049b      	lsls	r3, r3, #18
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x694>
 8002ee6:	e024      	b.n	8002f32 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e01f      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <HAL_RCC_OscConfig+0x708>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_RCC_OscConfig+0x708>)
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	23c0      	movs	r3, #192	; 0xc0
 8002f04:	025b      	lsls	r3, r3, #9
 8002f06:	401a      	ands	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d10e      	bne.n	8002f2e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	220f      	movs	r2, #15
 8002f14:	401a      	ands	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	23f0      	movs	r3, #240	; 0xf0
 8002f22:	039b      	lsls	r3, r3, #14
 8002f24:	401a      	ands	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b008      	add	sp, #32
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000

08002f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0bf      	b.n	80030d4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_ClockConfig+0x19c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d911      	bls.n	8002f86 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b5e      	ldr	r3, [pc, #376]	; (80030dc <HAL_RCC_ClockConfig+0x19c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2201      	movs	r2, #1
 8002f68:	4393      	bics	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <HAL_RCC_ClockConfig+0x19c>)
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f74:	4b59      	ldr	r3, [pc, #356]	; (80030dc <HAL_RCC_ClockConfig+0x19c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0a6      	b.n	80030d4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d015      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2204      	movs	r2, #4
 8002f96:	4013      	ands	r3, r2
 8002f98:	d006      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f9a:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fa0:	21e0      	movs	r1, #224	; 0xe0
 8002fa2:	00c9      	lsls	r1, r1, #3
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b4d      	ldr	r3, [pc, #308]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	22f0      	movs	r2, #240	; 0xf0
 8002fae:	4393      	bics	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	4b4a      	ldr	r3, [pc, #296]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d04c      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b44      	ldr	r3, [pc, #272]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	029b      	lsls	r3, r3, #10
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d120      	bne.n	800301c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07a      	b.n	80030d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	049b      	lsls	r3, r3, #18
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d114      	bne.n	800301c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06e      	b.n	80030d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ffe:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 8003000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	025b      	lsls	r3, r3, #9
 8003006:	4013      	ands	r3, r2
 8003008:	d108      	bne.n	800301c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e062      	b.n	80030d4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2202      	movs	r2, #2
 8003014:	4013      	ands	r3, r2
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e05b      	b.n	80030d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301c:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2203      	movs	r2, #3
 8003022:	4393      	bics	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fe f948 	bl	80012c4 <HAL_GetTick>
 8003034:	0003      	movs	r3, r0
 8003036:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003038:	e009      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303a:	f7fe f943 	bl	80012c4 <HAL_GetTick>
 800303e:	0002      	movs	r2, r0
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	4a27      	ldr	r2, [pc, #156]	; (80030e4 <HAL_RCC_ClockConfig+0x1a4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e042      	b.n	80030d4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	220c      	movs	r2, #12
 8003054:	401a      	ands	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1ec      	bne.n	800303a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <HAL_RCC_ClockConfig+0x19c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2201      	movs	r2, #1
 8003066:	4013      	ands	r3, r2
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d211      	bcs.n	8003092 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_RCC_ClockConfig+0x19c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2201      	movs	r2, #1
 8003074:	4393      	bics	r3, r2
 8003076:	0019      	movs	r1, r3
 8003078:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_RCC_ClockConfig+0x19c>)
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003080:	4b16      	ldr	r3, [pc, #88]	; (80030dc <HAL_RCC_ClockConfig+0x19c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2201      	movs	r2, #1
 8003086:	4013      	ands	r3, r2
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d001      	beq.n	8003092 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e020      	b.n	80030d4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2204      	movs	r2, #4
 8003098:	4013      	ands	r3, r2
 800309a:	d009      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800309c:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <HAL_RCC_ClockConfig+0x1a8>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030b0:	f000 f820 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80030b4:	0001      	movs	r1, r0
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_RCC_ClockConfig+0x1a0>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	220f      	movs	r2, #15
 80030be:	4013      	ands	r3, r2
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <HAL_RCC_ClockConfig+0x1ac>)
 80030c2:	5cd3      	ldrb	r3, [r2, r3]
 80030c4:	000a      	movs	r2, r1
 80030c6:	40da      	lsrs	r2, r3
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x1b0>)
 80030ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030cc:	2003      	movs	r0, #3
 80030ce:	f7fe f8b3 	bl	8001238 <HAL_InitTick>
  
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	0018      	movs	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b004      	add	sp, #16
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40022000 	.word	0x40022000
 80030e0:	40021000 	.word	0x40021000
 80030e4:	00001388 	.word	0x00001388
 80030e8:	fffff8ff 	.word	0xfffff8ff
 80030ec:	08003a88 	.word	0x08003a88
 80030f0:	20000000 	.word	0x20000000

080030f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b08f      	sub	sp, #60	; 0x3c
 80030f8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80030fa:	2314      	movs	r3, #20
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	4a38      	ldr	r2, [pc, #224]	; (80031e0 <HAL_RCC_GetSysClockFreq+0xec>)
 8003100:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003102:	c313      	stmia	r3!, {r0, r1, r4}
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003108:	1d3b      	adds	r3, r7, #4
 800310a:	4a36      	ldr	r2, [pc, #216]	; (80031e4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800310c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800310e:	c313      	stmia	r3!, {r0, r1, r4}
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003118:	2300      	movs	r3, #0
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
 800311c:	2300      	movs	r3, #0
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003128:	4b2f      	ldr	r3, [pc, #188]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003130:	220c      	movs	r2, #12
 8003132:	4013      	ands	r3, r2
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d047      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0xd4>
 8003138:	d849      	bhi.n	80031ce <HAL_RCC_GetSysClockFreq+0xda>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d002      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x50>
 800313e:	2b08      	cmp	r3, #8
 8003140:	d003      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x56>
 8003142:	e044      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003144:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003148:	e044      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	0c9b      	lsrs	r3, r3, #18
 800314e:	220f      	movs	r2, #15
 8003150:	4013      	ands	r3, r2
 8003152:	2214      	movs	r2, #20
 8003154:	18ba      	adds	r2, r7, r2
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800315a:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	220f      	movs	r2, #15
 8003160:	4013      	ands	r3, r2
 8003162:	1d3a      	adds	r2, r7, #4
 8003164:	5cd3      	ldrb	r3, [r2, r3]
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316a:	23c0      	movs	r3, #192	; 0xc0
 800316c:	025b      	lsls	r3, r3, #9
 800316e:	401a      	ands	r2, r3
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	025b      	lsls	r3, r3, #9
 8003174:	429a      	cmp	r2, r3
 8003176:	d109      	bne.n	800318c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800317a:	481c      	ldr	r0, [pc, #112]	; (80031ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800317c:	f7fc ffc2 	bl	8000104 <__udivsi3>
 8003180:	0003      	movs	r3, r0
 8003182:	001a      	movs	r2, r3
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	4353      	muls	r3, r2
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
 800318a:	e01a      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800318c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800318e:	23c0      	movs	r3, #192	; 0xc0
 8003190:	025b      	lsls	r3, r3, #9
 8003192:	401a      	ands	r2, r3
 8003194:	23c0      	movs	r3, #192	; 0xc0
 8003196:	025b      	lsls	r3, r3, #9
 8003198:	429a      	cmp	r2, r3
 800319a:	d109      	bne.n	80031b0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800319c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319e:	4814      	ldr	r0, [pc, #80]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031a0:	f7fc ffb0 	bl	8000104 <__udivsi3>
 80031a4:	0003      	movs	r3, r0
 80031a6:	001a      	movs	r2, r3
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	4353      	muls	r3, r2
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031b2:	4810      	ldr	r0, [pc, #64]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x100>)
 80031b4:	f7fc ffa6 	bl	8000104 <__udivsi3>
 80031b8:	0003      	movs	r3, r0
 80031ba:	001a      	movs	r2, r3
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	4353      	muls	r3, r2
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031c6:	e005      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031cc:	e002      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x100>)
 80031d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b00f      	add	sp, #60	; 0x3c
 80031dc:	bd90      	pop	{r4, r7, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	08003a68 	.word	0x08003a68
 80031e4:	08003a78 	.word	0x08003a78
 80031e8:	40021000 	.word	0x40021000
 80031ec:	00b71b00 	.word	0x00b71b00
 80031f0:	02dc6c00 	.word	0x02dc6c00
 80031f4:	007a1200 	.word	0x007a1200

080031f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0a8      	b.n	800335c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	2382      	movs	r3, #130	; 0x82
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	429a      	cmp	r2, r3
 800321c:	d009      	beq.n	8003232 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	61da      	str	r2, [r3, #28]
 8003224:	e005      	b.n	8003232 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	225d      	movs	r2, #93	; 0x5d
 800323c:	5c9b      	ldrb	r3, [r3, r2]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	225c      	movs	r2, #92	; 0x5c
 8003248:	2100      	movs	r1, #0
 800324a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	0018      	movs	r0, r3
 8003250:	f7fd fef8 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	225d      	movs	r2, #93	; 0x5d
 8003258:	2102      	movs	r1, #2
 800325a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2140      	movs	r1, #64	; 0x40
 8003268:	438a      	bics	r2, r1
 800326a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	23e0      	movs	r3, #224	; 0xe0
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	429a      	cmp	r2, r3
 8003276:	d902      	bls.n	800327e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e002      	b.n	8003284 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	015b      	lsls	r3, r3, #5
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	23f0      	movs	r3, #240	; 0xf0
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	429a      	cmp	r2, r3
 800328e:	d008      	beq.n	80032a2 <HAL_SPI_Init+0xaa>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	23e0      	movs	r3, #224	; 0xe0
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	429a      	cmp	r2, r3
 800329a:	d002      	beq.n	80032a2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	2382      	movs	r3, #130	; 0x82
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	401a      	ands	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	2384      	movs	r3, #132	; 0x84
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	400b      	ands	r3, r1
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2102      	movs	r1, #2
 80032be:	400b      	ands	r3, r1
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	2101      	movs	r1, #1
 80032c8:	400b      	ands	r3, r1
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6999      	ldr	r1, [r3, #24]
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	400b      	ands	r3, r1
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	2138      	movs	r1, #56	; 0x38
 80032de:	400b      	ands	r3, r1
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	400b      	ands	r3, r1
 80032ea:	431a      	orrs	r2, r3
 80032ec:	0011      	movs	r1, r2
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	019b      	lsls	r3, r3, #6
 80032f6:	401a      	ands	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	2204      	movs	r2, #4
 8003308:	401a      	ands	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2110      	movs	r1, #16
 8003310:	400b      	ands	r3, r1
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003318:	2108      	movs	r1, #8
 800331a:	400b      	ands	r3, r1
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	23f0      	movs	r3, #240	; 0xf0
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	400b      	ands	r3, r1
 8003328:	431a      	orrs	r2, r3
 800332a:	0011      	movs	r1, r2
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	015b      	lsls	r3, r3, #5
 8003332:	401a      	ands	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69da      	ldr	r2, [r3, #28]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4907      	ldr	r1, [pc, #28]	; (8003364 <HAL_SPI_Init+0x16c>)
 8003348:	400a      	ands	r2, r1
 800334a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	225d      	movs	r2, #93	; 0x5d
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b004      	add	sp, #16
 8003362:	bd80      	pop	{r7, pc}
 8003364:	fffff7ff 	.word	0xfffff7ff

08003368 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	001a      	movs	r2, r3
 8003376:	1cbb      	adds	r3, r7, #2
 8003378:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800337a:	2301      	movs	r3, #1
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800337e:	2323      	movs	r3, #35	; 0x23
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	225c      	movs	r2, #92	; 0x5c
 800338a:	5c9b      	ldrb	r3, [r3, r2]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x2c>
 8003390:	2302      	movs	r3, #2
 8003392:	e1b5      	b.n	8003700 <HAL_SPI_TransmitReceive+0x398>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	225c      	movs	r2, #92	; 0x5c
 8003398:	2101      	movs	r1, #1
 800339a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800339c:	f7fd ff92 	bl	80012c4 <HAL_GetTick>
 80033a0:	0003      	movs	r3, r0
 80033a2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033a4:	201b      	movs	r0, #27
 80033a6:	183b      	adds	r3, r7, r0
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	215d      	movs	r1, #93	; 0x5d
 80033ac:	5c52      	ldrb	r2, [r2, r1]
 80033ae:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80033b6:	2312      	movs	r3, #18
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	1cba      	adds	r2, r7, #2
 80033bc:	8812      	ldrh	r2, [r2, #0]
 80033be:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033c0:	183b      	adds	r3, r7, r0
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d011      	beq.n	80033ec <HAL_SPI_TransmitReceive+0x84>
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	2382      	movs	r3, #130	; 0x82
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d107      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x7a>
 80033da:	183b      	adds	r3, r7, r0
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d004      	beq.n	80033ec <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80033e2:	2323      	movs	r3, #35	; 0x23
 80033e4:	18fb      	adds	r3, r7, r3
 80033e6:	2202      	movs	r2, #2
 80033e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80033ea:	e17e      	b.n	80036ea <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <HAL_SPI_TransmitReceive+0x98>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_SPI_TransmitReceive+0x98>
 80033f8:	1cbb      	adds	r3, r7, #2
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d104      	bne.n	800340a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003400:	2323      	movs	r3, #35	; 0x23
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
    goto error;
 8003408:	e16f      	b.n	80036ea <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	225d      	movs	r2, #93	; 0x5d
 800340e:	5c9b      	ldrb	r3, [r3, r2]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b04      	cmp	r3, #4
 8003414:	d003      	beq.n	800341e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	225d      	movs	r2, #93	; 0x5d
 800341a:	2105      	movs	r1, #5
 800341c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1cba      	adds	r2, r7, #2
 800342e:	2146      	movs	r1, #70	; 0x46
 8003430:	8812      	ldrh	r2, [r2, #0]
 8003432:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1cba      	adds	r2, r7, #2
 8003438:	2144      	movs	r1, #68	; 0x44
 800343a:	8812      	ldrh	r2, [r2, #0]
 800343c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1cba      	adds	r2, r7, #2
 8003448:	8812      	ldrh	r2, [r2, #0]
 800344a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1cba      	adds	r2, r7, #2
 8003450:	8812      	ldrh	r2, [r2, #0]
 8003452:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	23e0      	movs	r3, #224	; 0xe0
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	429a      	cmp	r2, r3
 800346a:	d908      	bls.n	800347e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	49a4      	ldr	r1, [pc, #656]	; (8003708 <HAL_SPI_TransmitReceive+0x3a0>)
 8003478:	400a      	ands	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	e008      	b.n	8003490 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	0149      	lsls	r1, r1, #5
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2240      	movs	r2, #64	; 0x40
 8003498:	4013      	ands	r3, r2
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d007      	beq.n	80034ae <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2140      	movs	r1, #64	; 0x40
 80034aa:	430a      	orrs	r2, r1
 80034ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	23e0      	movs	r3, #224	; 0xe0
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d800      	bhi.n	80034bc <HAL_SPI_TransmitReceive+0x154>
 80034ba:	e07f      	b.n	80035bc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_SPI_TransmitReceive+0x168>
 80034c4:	2312      	movs	r3, #18
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d000      	beq.n	80034d0 <HAL_SPI_TransmitReceive+0x168>
 80034ce:	e069      	b.n	80035a4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	881a      	ldrh	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	1c9a      	adds	r2, r3, #2
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034f4:	e056      	b.n	80035a4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2202      	movs	r2, #2
 80034fe:	4013      	ands	r3, r2
 8003500:	2b02      	cmp	r3, #2
 8003502:	d11b      	bne.n	800353c <HAL_SPI_TransmitReceive+0x1d4>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d016      	beq.n	800353c <HAL_SPI_TransmitReceive+0x1d4>
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	2b01      	cmp	r3, #1
 8003512:	d113      	bne.n	800353c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	881a      	ldrh	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	1c9a      	adds	r2, r3, #2
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2201      	movs	r2, #1
 8003544:	4013      	ands	r3, r2
 8003546:	2b01      	cmp	r3, #1
 8003548:	d11c      	bne.n	8003584 <HAL_SPI_TransmitReceive+0x21c>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2246      	movs	r2, #70	; 0x46
 800354e:	5a9b      	ldrh	r3, [r3, r2]
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	b292      	uxth	r2, r2
 8003562:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	1c9a      	adds	r2, r3, #2
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2246      	movs	r2, #70	; 0x46
 8003572:	5a9b      	ldrh	r3, [r3, r2]
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b299      	uxth	r1, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2246      	movs	r2, #70	; 0x46
 800357e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003580:	2301      	movs	r3, #1
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003584:	f7fd fe9e 	bl	80012c4 <HAL_GetTick>
 8003588:	0002      	movs	r2, r0
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003590:	429a      	cmp	r2, r3
 8003592:	d807      	bhi.n	80035a4 <HAL_SPI_TransmitReceive+0x23c>
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	3301      	adds	r3, #1
 8003598:	d004      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800359a:	2323      	movs	r3, #35	; 0x23
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	2203      	movs	r2, #3
 80035a0:	701a      	strb	r2, [r3, #0]
        goto error;
 80035a2:	e0a2      	b.n	80036ea <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1a3      	bne.n	80034f6 <HAL_SPI_TransmitReceive+0x18e>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2246      	movs	r2, #70	; 0x46
 80035b2:	5a9b      	ldrh	r3, [r3, r2]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d19d      	bne.n	80034f6 <HAL_SPI_TransmitReceive+0x18e>
 80035ba:	e085      	b.n	80036c8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x268>
 80035c4:	2312      	movs	r3, #18
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d000      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x268>
 80035ce:	e070      	b.n	80036b2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	7812      	ldrb	r2, [r2, #0]
 80035dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035f6:	e05c      	b.n	80036b2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2202      	movs	r2, #2
 8003600:	4013      	ands	r3, r2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d11c      	bne.n	8003640 <HAL_SPI_TransmitReceive+0x2d8>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d017      	beq.n	8003640 <HAL_SPI_TransmitReceive+0x2d8>
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	2b01      	cmp	r3, #1
 8003614:	d114      	bne.n	8003640 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2201      	movs	r2, #1
 8003648:	4013      	ands	r3, r2
 800364a:	2b01      	cmp	r3, #1
 800364c:	d11e      	bne.n	800368c <HAL_SPI_TransmitReceive+0x324>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2246      	movs	r2, #70	; 0x46
 8003652:	5a9b      	ldrh	r3, [r3, r2]
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d018      	beq.n	800368c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	330c      	adds	r3, #12
 8003660:	001a      	movs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	7812      	ldrb	r2, [r2, #0]
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2246      	movs	r2, #70	; 0x46
 800367a:	5a9b      	ldrh	r3, [r3, r2]
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b299      	uxth	r1, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2246      	movs	r2, #70	; 0x46
 8003686:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003688:	2301      	movs	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800368c:	f7fd fe1a 	bl	80012c4 <HAL_GetTick>
 8003690:	0002      	movs	r2, r0
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003698:	429a      	cmp	r2, r3
 800369a:	d802      	bhi.n	80036a2 <HAL_SPI_TransmitReceive+0x33a>
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	3301      	adds	r3, #1
 80036a0:	d102      	bne.n	80036a8 <HAL_SPI_TransmitReceive+0x340>
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d104      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80036a8:	2323      	movs	r3, #35	; 0x23
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2203      	movs	r2, #3
 80036ae:	701a      	strb	r2, [r3, #0]
        goto error;
 80036b0:	e01b      	b.n	80036ea <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d19d      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x290>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2246      	movs	r2, #70	; 0x46
 80036c0:	5a9b      	ldrh	r3, [r3, r2]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d197      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f000 f94c 	bl	800396c <SPI_EndRxTxTransaction>
 80036d4:	1e03      	subs	r3, r0, #0
 80036d6:	d007      	beq.n	80036e8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80036d8:	2323      	movs	r3, #35	; 0x23
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	661a      	str	r2, [r3, #96]	; 0x60
 80036e6:	e000      	b.n	80036ea <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80036e8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	225d      	movs	r2, #93	; 0x5d
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	225c      	movs	r2, #92	; 0x5c
 80036f6:	2100      	movs	r1, #0
 80036f8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80036fa:	2323      	movs	r3, #35	; 0x23
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	781b      	ldrb	r3, [r3, #0]
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b00a      	add	sp, #40	; 0x28
 8003706:	bd80      	pop	{r7, pc}
 8003708:	ffffefff 	.word	0xffffefff

0800370c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	1dfb      	adds	r3, r7, #7
 800371a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800371c:	f7fd fdd2 	bl	80012c4 <HAL_GetTick>
 8003720:	0002      	movs	r2, r0
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	18d3      	adds	r3, r2, r3
 800372a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800372c:	f7fd fdca 	bl	80012c4 <HAL_GetTick>
 8003730:	0003      	movs	r3, r0
 8003732:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003734:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	015b      	lsls	r3, r3, #5
 800373a:	0d1b      	lsrs	r3, r3, #20
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	4353      	muls	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003742:	e058      	b.n	80037f6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	d055      	beq.n	80037f6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800374a:	f7fd fdbb 	bl	80012c4 <HAL_GetTick>
 800374e:	0002      	movs	r2, r0
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	429a      	cmp	r2, r3
 8003758:	d902      	bls.n	8003760 <SPI_WaitFlagStateUntilTimeout+0x54>
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d142      	bne.n	80037e6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	21e0      	movs	r1, #224	; 0xe0
 800376c:	438a      	bics	r2, r1
 800376e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	2382      	movs	r3, #130	; 0x82
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	429a      	cmp	r2, r3
 800377a:	d113      	bne.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	429a      	cmp	r2, r3
 8003786:	d005      	beq.n	8003794 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	429a      	cmp	r2, r3
 8003792:	d107      	bne.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2140      	movs	r1, #64	; 0x40
 80037a0:	438a      	bics	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	019b      	lsls	r3, r3, #6
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d110      	bne.n	80037d2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	491a      	ldr	r1, [pc, #104]	; (8003824 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80037bc:	400a      	ands	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2180      	movs	r1, #128	; 0x80
 80037cc:	0189      	lsls	r1, r1, #6
 80037ce:	430a      	orrs	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	225d      	movs	r2, #93	; 0x5d
 80037d6:	2101      	movs	r1, #1
 80037d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	225c      	movs	r2, #92	; 0x5c
 80037de:	2100      	movs	r1, #0
 80037e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e017      	b.n	8003816 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	425a      	negs	r2, r3
 8003806:	4153      	adcs	r3, r2
 8003808:	b2db      	uxtb	r3, r3
 800380a:	001a      	movs	r2, r3
 800380c:	1dfb      	adds	r3, r7, #7
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d197      	bne.n	8003744 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	0018      	movs	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	b008      	add	sp, #32
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	20000000 	.word	0x20000000
 8003824:	ffffdfff 	.word	0xffffdfff

08003828 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003836:	2317      	movs	r3, #23
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800383e:	f7fd fd41 	bl	80012c4 <HAL_GetTick>
 8003842:	0002      	movs	r2, r0
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	18d3      	adds	r3, r2, r3
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800384e:	f7fd fd39 	bl	80012c4 <HAL_GetTick>
 8003852:	0003      	movs	r3, r0
 8003854:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800385e:	4b41      	ldr	r3, [pc, #260]	; (8003964 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	0013      	movs	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	189b      	adds	r3, r3, r2
 8003868:	00da      	lsls	r2, r3, #3
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	0d1b      	lsrs	r3, r3, #20
 800386e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003870:	4353      	muls	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003874:	e068      	b.n	8003948 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	23c0      	movs	r3, #192	; 0xc0
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	429a      	cmp	r2, r3
 800387e:	d10a      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	2117      	movs	r1, #23
 800388e:	187b      	adds	r3, r7, r1
 8003890:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003892:	187b      	adds	r3, r7, r1
 8003894:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	d055      	beq.n	8003948 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800389c:	f7fd fd12 	bl	80012c4 <HAL_GetTick>
 80038a0:	0002      	movs	r2, r0
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d902      	bls.n	80038b2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d142      	bne.n	8003938 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	21e0      	movs	r1, #224	; 0xe0
 80038be:	438a      	bics	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	2382      	movs	r3, #130	; 0x82
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d113      	bne.n	80038f6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d005      	beq.n	80038e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d107      	bne.n	80038f6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2140      	movs	r1, #64	; 0x40
 80038f2:	438a      	bics	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	429a      	cmp	r2, r3
 8003900:	d110      	bne.n	8003924 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4916      	ldr	r1, [pc, #88]	; (8003968 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800390e:	400a      	ands	r2, r1
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	0189      	lsls	r1, r1, #6
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	225d      	movs	r2, #93	; 0x5d
 8003928:	2101      	movs	r1, #1
 800392a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	225c      	movs	r2, #92	; 0x5c
 8003930:	2100      	movs	r1, #0
 8003932:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e010      	b.n	800395a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	3b01      	subs	r3, #1
 8003946:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	4013      	ands	r3, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d18e      	bne.n	8003876 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	b00a      	add	sp, #40	; 0x28
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	20000000 	.word	0x20000000
 8003968:	ffffdfff 	.word	0xffffdfff

0800396c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	23c0      	movs	r3, #192	; 0xc0
 800397c:	0159      	lsls	r1, r3, #5
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	0013      	movs	r3, r2
 8003986:	2200      	movs	r2, #0
 8003988:	f7ff ff4e 	bl	8003828 <SPI_WaitFifoStateUntilTimeout>
 800398c:	1e03      	subs	r3, r0, #0
 800398e:	d007      	beq.n	80039a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003994:	2220      	movs	r2, #32
 8003996:	431a      	orrs	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e027      	b.n	80039f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	0013      	movs	r3, r2
 80039aa:	2200      	movs	r2, #0
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	f7ff fead 	bl	800370c <SPI_WaitFlagStateUntilTimeout>
 80039b2:	1e03      	subs	r3, r0, #0
 80039b4:	d007      	beq.n	80039c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ba:	2220      	movs	r2, #32
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e014      	b.n	80039f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	23c0      	movs	r3, #192	; 0xc0
 80039ca:	00d9      	lsls	r1, r3, #3
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	0013      	movs	r3, r2
 80039d4:	2200      	movs	r2, #0
 80039d6:	f7ff ff27 	bl	8003828 <SPI_WaitFifoStateUntilTimeout>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d007      	beq.n	80039ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	2220      	movs	r2, #32
 80039e4:	431a      	orrs	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e000      	b.n	80039f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b004      	add	sp, #16
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <__libc_init_array>:
 80039f8:	b570      	push	{r4, r5, r6, lr}
 80039fa:	2600      	movs	r6, #0
 80039fc:	4d0c      	ldr	r5, [pc, #48]	; (8003a30 <__libc_init_array+0x38>)
 80039fe:	4c0d      	ldr	r4, [pc, #52]	; (8003a34 <__libc_init_array+0x3c>)
 8003a00:	1b64      	subs	r4, r4, r5
 8003a02:	10a4      	asrs	r4, r4, #2
 8003a04:	42a6      	cmp	r6, r4
 8003a06:	d109      	bne.n	8003a1c <__libc_init_array+0x24>
 8003a08:	2600      	movs	r6, #0
 8003a0a:	f000 f821 	bl	8003a50 <_init>
 8003a0e:	4d0a      	ldr	r5, [pc, #40]	; (8003a38 <__libc_init_array+0x40>)
 8003a10:	4c0a      	ldr	r4, [pc, #40]	; (8003a3c <__libc_init_array+0x44>)
 8003a12:	1b64      	subs	r4, r4, r5
 8003a14:	10a4      	asrs	r4, r4, #2
 8003a16:	42a6      	cmp	r6, r4
 8003a18:	d105      	bne.n	8003a26 <__libc_init_array+0x2e>
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	00b3      	lsls	r3, r6, #2
 8003a1e:	58eb      	ldr	r3, [r5, r3]
 8003a20:	4798      	blx	r3
 8003a22:	3601      	adds	r6, #1
 8003a24:	e7ee      	b.n	8003a04 <__libc_init_array+0xc>
 8003a26:	00b3      	lsls	r3, r6, #2
 8003a28:	58eb      	ldr	r3, [r5, r3]
 8003a2a:	4798      	blx	r3
 8003a2c:	3601      	adds	r6, #1
 8003a2e:	e7f2      	b.n	8003a16 <__libc_init_array+0x1e>
 8003a30:	08003a98 	.word	0x08003a98
 8003a34:	08003a98 	.word	0x08003a98
 8003a38:	08003a98 	.word	0x08003a98
 8003a3c:	08003a9c 	.word	0x08003a9c

08003a40 <memset>:
 8003a40:	0003      	movs	r3, r0
 8003a42:	1882      	adds	r2, r0, r2
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d100      	bne.n	8003a4a <memset+0xa>
 8003a48:	4770      	bx	lr
 8003a4a:	7019      	strb	r1, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	e7f9      	b.n	8003a44 <memset+0x4>

08003a50 <_init>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr

08003a5c <_fini>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a62:	bc08      	pop	{r3}
 8003a64:	469e      	mov	lr, r3
 8003a66:	4770      	bx	lr
