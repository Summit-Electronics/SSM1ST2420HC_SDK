
1_AXIS_F091_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f94  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004050  08004050  00014050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004080  08004080  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004080  08004080  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004080  08004080  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  08004094  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08004094  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b97  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ac6  00000000  00000000  00028c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002a6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000663  00000000  00000000  0002af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a53a  00000000  00000000  0002b5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a193  00000000  00000000  00045ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f70c  00000000  00000000  0004fc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d50  00000000  00000000  000ef384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f10d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004038 	.word	0x08004038

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004038 	.word	0x08004038

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <TMC5160_Basic_Init>:
int Ax = 0;				// counter for buffer
uint8_t AMS_Ready;		//check for interrupt


void TMC5160_Basic_Init(CurrentConfig *Current)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	/* CURRENT SETTINGS
	 I_RUN, Max run current = 20 = ~2.0A
	 I_HOLD, Max Hold current = 20 = ~2.0A
	*/

	uint32_t IHOLD_IRUN = 0x00070000; // standard IHOLD DELAY value
 80003f8:	23e0      	movs	r3, #224	; 0xe0
 80003fa:	02db      	lsls	r3, r3, #11
 80003fc:	60fb      	str	r3, [r7, #12]
	//uint32_t GSTAT_VALUE = 0x00000000; //default value for GSTAT

	if(Current->IHOLD > 20) // set upper current limit ~2.0A
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	2b14      	cmp	r3, #20
 8000404:	d902      	bls.n	800040c <TMC5160_Basic_Init+0x1c>
	{
		Current->IHOLD = 20;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2214      	movs	r2, #20
 800040a:	605a      	str	r2, [r3, #4]
	}

	if(Current->IRUN > 20) // set upper current limit ~2.0A
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b14      	cmp	r3, #20
 8000412:	d902      	bls.n	800041a <TMC5160_Basic_Init+0x2a>
	{
		Current->IRUN = 20;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2214      	movs	r2, #20
 8000418:	601a      	str	r2, [r3, #0]
	}

	IHOLD_IRUN += Current->IHOLD + (Current->IRUN <<8);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	021b      	lsls	r3, r3, #8
 8000424:	18d3      	adds	r3, r2, r3
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	18d3      	adds	r3, r2, r3
 800042a:	60fb      	str	r3, [r7, #12]

	TMC5160_SPIWrite(0x00, 0x00000008, 1); // writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 800042c:	2201      	movs	r2, #1
 800042e:	2108      	movs	r1, #8
 8000430:	2000      	movs	r0, #0
 8000432:	f000 f909 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x00, 0x00000008, 0); // writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 8000436:	2200      	movs	r2, #0
 8000438:	2108      	movs	r1, #8
 800043a:	2000      	movs	r0, #0
 800043c:	f000 f904 	bl	8000648 <TMC5160_SPIWrite>
	{
		TMC5160_SPIWrite(0x01, 0x00000001, 1); // write 1 bit to GSTAT to clear all error flags
		// TODO: is clearing the flags enough? or poweqr cycle needed?
	}*/

	TMC5160_SPIWrite(0x03, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 1 = 0x03(SLAVECONF)
 8000440:	2201      	movs	r2, #1
 8000442:	2100      	movs	r1, #0
 8000444:	2003      	movs	r0, #3
 8000446:	f000 f8ff 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x05, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 2 = 0x05(X_COMPARE)
 800044a:	2201      	movs	r2, #1
 800044c:	2100      	movs	r1, #0
 800044e:	2005      	movs	r0, #5
 8000450:	f000 f8fa 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x06, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 3 = 0x06(OTP_PROG)
 8000454:	2201      	movs	r2, #1
 8000456:	2100      	movs	r1, #0
 8000458:	2006      	movs	r0, #6
 800045a:	f000 f8f5 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x08, 0x0000000F, 1); // writing value 0x0000000F = 15 = 0.0 to address 4 = 0x08(FACTORY_CONF)
 800045e:	2201      	movs	r2, #1
 8000460:	210f      	movs	r1, #15
 8000462:	2008      	movs	r0, #8
 8000464:	f000 f8f0 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x09, 0x00010606, 1); // writing value 0x00010606 = 67078 = 0.0 to address 5 = 0x09(SHORT_CONF)
 8000468:	4b53      	ldr	r3, [pc, #332]	; (80005b8 <TMC5160_Basic_Init+0x1c8>)
 800046a:	2201      	movs	r2, #1
 800046c:	0019      	movs	r1, r3
 800046e:	2009      	movs	r0, #9
 8000470:	f000 f8ea 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x0A, 0x00080400, 1); // writing value 0x00080400 = 525312 = 0.0 to address 6 = 0x0A(DRV_CONF)
 8000474:	4b51      	ldr	r3, [pc, #324]	; (80005bc <TMC5160_Basic_Init+0x1cc>)
 8000476:	2201      	movs	r2, #1
 8000478:	0019      	movs	r1, r3
 800047a:	200a      	movs	r0, #10
 800047c:	f000 f8e4 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x0B, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 7 = 0x0B(GLOBAL_SCALER)
 8000480:	2201      	movs	r2, #1
 8000482:	2100      	movs	r1, #0
 8000484:	200b      	movs	r0, #11
 8000486:	f000 f8df 	bl	8000648 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x10, IHOLD_IRUN, 1); // writing value 0x00070A03 = 461315 = 0.0 to address 8 = 0x10(IHOLD_IRUN)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	2201      	movs	r2, #1
 800048e:	0019      	movs	r1, r3
 8000490:	2010      	movs	r0, #16
 8000492:	f000 f8d9 	bl	8000648 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x11, 0x0000000A, 1); // writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 8000496:	2201      	movs	r2, #1
 8000498:	210a      	movs	r1, #10
 800049a:	2011      	movs	r0, #17
 800049c:	f000 f8d4 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x13, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 80004a0:	2201      	movs	r2, #1
 80004a2:	2100      	movs	r1, #0
 80004a4:	2013      	movs	r0, #19
 80004a6:	f000 f8cf 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x14, 0x00000000, 1); // writing value 0x00000010 = 16 = 0.0 to address 11 = 0x14(TCOOLTHRS)
 80004aa:	2201      	movs	r2, #1
 80004ac:	2100      	movs	r1, #0
 80004ae:	2014      	movs	r0, #20
 80004b0:	f000 f8ca 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x15, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 12 = 0x15(THIGH)
 80004b4:	2201      	movs	r2, #1
 80004b6:	2100      	movs	r1, #0
 80004b8:	2015      	movs	r0, #21
 80004ba:	f000 f8c5 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2C, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 23 = 0x2C(TZEROWAIT)
 80004be:	2201      	movs	r2, #1
 80004c0:	2100      	movs	r1, #0
 80004c2:	202c      	movs	r0, #44	; 0x2c
 80004c4:	f000 f8c0 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x33, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 25 = 0x33(VDCMIN)
 80004c8:	2201      	movs	r2, #1
 80004ca:	2100      	movs	r1, #0
 80004cc:	2033      	movs	r0, #51	; 0x33
 80004ce:	f000 f8bb 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x34, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 26 = 0x34(SW_MODE)
 80004d2:	2201      	movs	r2, #1
 80004d4:	2100      	movs	r1, #0
 80004d6:	2034      	movs	r0, #52	; 0x34
 80004d8:	f000 f8b6 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x38, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 27 = 0x38(ENCMODE)
 80004dc:	2201      	movs	r2, #1
 80004de:	2100      	movs	r1, #0
 80004e0:	2038      	movs	r0, #56	; 0x38
 80004e2:	f000 f8b1 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x39, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 28 = 0x39(X_ENC)
 80004e6:	2201      	movs	r2, #1
 80004e8:	2100      	movs	r1, #0
 80004ea:	2039      	movs	r0, #57	; 0x39
 80004ec:	f000 f8ac 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x3A, 0x00010000, 1); // writing value 0x00010000 = 65536 = 0.0 to address 29 = 0x3A(ENC_CONST)
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	025b      	lsls	r3, r3, #9
 80004f4:	2201      	movs	r2, #1
 80004f6:	0019      	movs	r1, r3
 80004f8:	203a      	movs	r0, #58	; 0x3a
 80004fa:	f000 f8a5 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x3D, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 30 = 0x3D(ENC_DEVIATION)
 80004fe:	2201      	movs	r2, #1
 8000500:	2100      	movs	r1, #0
 8000502:	203d      	movs	r0, #61	; 0x3d
 8000504:	f000 f8a0 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x60, 0xAAAAB554, 1); // writing value 0xAAAAB554 = 0 = 0.0 to address 31 = 0x60(MSLUT[0])
 8000508:	4b2d      	ldr	r3, [pc, #180]	; (80005c0 <TMC5160_Basic_Init+0x1d0>)
 800050a:	2201      	movs	r2, #1
 800050c:	0019      	movs	r1, r3
 800050e:	2060      	movs	r0, #96	; 0x60
 8000510:	f000 f89a 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x61, 0x4A9554AA, 1); // writing value 0x4A9554AA = 1251300522 = 0.0 to address 32 = 0x61(MSLUT[1])
 8000514:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <TMC5160_Basic_Init+0x1d4>)
 8000516:	2201      	movs	r2, #1
 8000518:	0019      	movs	r1, r3
 800051a:	2061      	movs	r0, #97	; 0x61
 800051c:	f000 f894 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x62, 0x24492929, 1); // writing value 0x24492929 = 608774441 = 0.0 to address 33 = 0x62(MSLUT[2])
 8000520:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <TMC5160_Basic_Init+0x1d8>)
 8000522:	2201      	movs	r2, #1
 8000524:	0019      	movs	r1, r3
 8000526:	2062      	movs	r0, #98	; 0x62
 8000528:	f000 f88e 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x63, 0x10104222, 1); // writing value 0x10104222 = 269500962 = 0.0 to address 34 = 0x63(MSLUT[3])
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <TMC5160_Basic_Init+0x1dc>)
 800052e:	2201      	movs	r2, #1
 8000530:	0019      	movs	r1, r3
 8000532:	2063      	movs	r0, #99	; 0x63
 8000534:	f000 f888 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x64, 0xFBFFFFFF, 1); // writing value 0xFBFFFFFF = 0 = 0.0 to address 35 = 0x64(MSLUT[4])
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <TMC5160_Basic_Init+0x1e0>)
 800053a:	2201      	movs	r2, #1
 800053c:	0019      	movs	r1, r3
 800053e:	2064      	movs	r0, #100	; 0x64
 8000540:	f000 f882 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x65, 0xB5BB777D, 1); // writing value 0xB5BB777D = 0 = 0.0 to address 36 = 0x65(MSLUT[5])
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <TMC5160_Basic_Init+0x1e4>)
 8000546:	2201      	movs	r2, #1
 8000548:	0019      	movs	r1, r3
 800054a:	2065      	movs	r0, #101	; 0x65
 800054c:	f000 f87c 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x66, 0x49295556, 1); // writing value 0x49295556 = 1227445590 = 0.0 to address 37 = 0x66(MSLUT[6])
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <TMC5160_Basic_Init+0x1e8>)
 8000552:	2201      	movs	r2, #1
 8000554:	0019      	movs	r1, r3
 8000556:	2066      	movs	r0, #102	; 0x66
 8000558:	f000 f876 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x67, 0x00404222, 1); // writing value 0x00404222 = 4211234 = 0.0 to address 38 = 0x67(MSLUT[7])
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <TMC5160_Basic_Init+0x1ec>)
 800055e:	2201      	movs	r2, #1
 8000560:	0019      	movs	r1, r3
 8000562:	2067      	movs	r0, #103	; 0x67
 8000564:	f000 f870 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x68, 0xFFFF8056, 1); // writing value 0xFFFF8056 = 0 = 0.0 to address 39 = 0x68(MSLUTSEL)
 8000568:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <TMC5160_Basic_Init+0x1f0>)
 800056a:	2201      	movs	r2, #1
 800056c:	0019      	movs	r1, r3
 800056e:	2068      	movs	r0, #104	; 0x68
 8000570:	f000 f86a 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x69, 0x00F70000, 1); // writing value 0x00F70000 = 16187392 = 0.0 to address 40 = 0x69(MSLUTSTART)
 8000574:	23f7      	movs	r3, #247	; 0xf7
 8000576:	041b      	lsls	r3, r3, #16
 8000578:	2201      	movs	r2, #1
 800057a:	0019      	movs	r1, r3
 800057c:	2069      	movs	r0, #105	; 0x69
 800057e:	f000 f863 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6C, 0x00410153, 1); // writing value 0x00410153 = 4260099 = 0.0 to address 41 = 0x6C(CHOPCONF)
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <TMC5160_Basic_Init+0x1f4>)
 8000584:	2201      	movs	r2, #1
 8000586:	0019      	movs	r1, r3
 8000588:	206c      	movs	r0, #108	; 0x6c
 800058a:	f000 f85d 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6D, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 42 = 0x6D(COOLCONF)
 800058e:	2201      	movs	r2, #1
 8000590:	2100      	movs	r1, #0
 8000592:	206d      	movs	r0, #109	; 0x6d
 8000594:	f000 f858 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6E, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 43 = 0x6E(DCCTRL)
 8000598:	2201      	movs	r2, #1
 800059a:	2100      	movs	r1, #0
 800059c:	206e      	movs	r0, #110	; 0x6e
 800059e:	f000 f853 	bl	8000648 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x70, 0xC40C001E, 1); // writing value 0xC40C001E = 0 = 0.0 to address 44 = 0x70(PWMCONF)
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <TMC5160_Basic_Init+0x1f8>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	0019      	movs	r1, r3
 80005a8:	2070      	movs	r0, #112	; 0x70
 80005aa:	f000 f84d 	bl	8000648 <TMC5160_SPIWrite>

}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b004      	add	sp, #16
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	00010606 	.word	0x00010606
 80005bc:	00080400 	.word	0x00080400
 80005c0:	aaaab554 	.word	0xaaaab554
 80005c4:	4a9554aa 	.word	0x4a9554aa
 80005c8:	24492929 	.word	0x24492929
 80005cc:	10104222 	.word	0x10104222
 80005d0:	fbffffff 	.word	0xfbffffff
 80005d4:	b5bb777d 	.word	0xb5bb777d
 80005d8:	49295556 	.word	0x49295556
 80005dc:	00404222 	.word	0x00404222
 80005e0:	ffff8056 	.word	0xffff8056
 80005e4:	00410153 	.word	0x00410153
 80005e8:	c40c001e 	.word	0xc40c001e

080005ec <TMC5160_Stop>:

	return AngleT;
}

void TMC5160_Stop(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	TMC5160_SPIWrite(0x27,0x00000000, 1); //set VMAX to 0
 80005f0:	2201      	movs	r2, #1
 80005f2:	2100      	movs	r1, #0
 80005f4:	2027      	movs	r0, #39	; 0x27
 80005f6:	f000 f827 	bl	8000648 <TMC5160_SPIWrite>
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Drive_Enable>:

void Drive_Enable(int state)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if(state == 1) // Enable driver
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d10a      	bne.n	8000624 <Drive_Enable+0x24>
	{
		HAL_GPIO_WritePin(GPIOA, DRV_ENN_Pin, 0); // LOW = ON
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	0059      	lsls	r1, r3, #1
 8000612:	2390      	movs	r3, #144	; 0x90
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	2200      	movs	r2, #0
 8000618:	0018      	movs	r0, r3
 800061a:	f002 fbc6 	bl	8002daa <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800061e:	200a      	movs	r0, #10
 8000620:	f000 fed4 	bl	80013cc <HAL_Delay>
	}

	if(state == 0) // disable drive
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d10a      	bne.n	8000640 <Drive_Enable+0x40>
	{
		HAL_GPIO_WritePin(GPIOA, DRV_ENN_Pin, 1); // HIGH = OFF
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	0059      	lsls	r1, r3, #1
 800062e:	2390      	movs	r3, #144	; 0x90
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	2201      	movs	r2, #1
 8000634:	0018      	movs	r0, r3
 8000636:	f002 fbb8 	bl	8002daa <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f000 fec6 	bl	80013cc <HAL_Delay>
	}
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b002      	add	sp, #8
 8000646:	bd80      	pop	{r7, pc}

08000648 <TMC5160_SPIWrite>:


uint32_t TMC5160_SPIWrite(uint8_t Address, uint32_t Value, int Action)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b08d      	sub	sp, #52	; 0x34
 800064c:	af02      	add	r7, sp, #8
 800064e:	60b9      	str	r1, [r7, #8]
 8000650:	607a      	str	r2, [r7, #4]
 8000652:	240f      	movs	r4, #15
 8000654:	193b      	adds	r3, r7, r4
 8000656:	1c02      	adds	r2, r0, #0
 8000658:	701a      	strb	r2, [r3, #0]

	uint8_t SPI2TxData[5];  //TX data array SPI2
	uint8_t SPI2RxData[5];  //RX data array SPI2
	uint32_t SPI2Rx = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,0); // set TMC CS low
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	015b      	lsls	r3, r3, #5
 8000662:	482d      	ldr	r0, [pc, #180]	; (8000718 <TMC5160_SPIWrite+0xd0>)
 8000664:	2200      	movs	r2, #0
 8000666:	0019      	movs	r1, r3
 8000668:	f002 fb9f 	bl	8002daa <HAL_GPIO_WritePin>

	  if (Action == 1) //Write
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d107      	bne.n	8000682 <TMC5160_SPIWrite+0x3a>
	  {
		SPI2TxData[0] = Address + 0x80;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b80      	subs	r3, #128	; 0x80
 8000678:	b2da      	uxtb	r2, r3
 800067a:	231c      	movs	r3, #28
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	e005      	b.n	800068e <TMC5160_SPIWrite+0x46>
	  }

	  else //Read
	  {
		SPI2TxData[0] = Address;
 8000682:	231c      	movs	r3, #28
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	220f      	movs	r2, #15
 8000688:	18ba      	adds	r2, r7, r2
 800068a:	7812      	ldrb	r2, [r2, #0]
 800068c:	701a      	strb	r2, [r3, #0]
	  }

	  SPI2TxData[1] = Value >> 24;
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	0e1b      	lsrs	r3, r3, #24
 8000692:	b2da      	uxtb	r2, r3
 8000694:	211c      	movs	r1, #28
 8000696:	187b      	adds	r3, r7, r1
 8000698:	705a      	strb	r2, [r3, #1]
	  SPI2TxData[2] = Value >> 16;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	0c1b      	lsrs	r3, r3, #16
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	709a      	strb	r2, [r3, #2]
	  SPI2TxData[3] = Value >> 8;
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	70da      	strb	r2, [r3, #3]
	  SPI2TxData[4] = Value;
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	711a      	strb	r2, [r3, #4]

	  HAL_SPI_TransmitReceive(&hspi2, SPI2TxData, SPI2RxData, 0x05, 100);
 80006b6:	2414      	movs	r4, #20
 80006b8:	193a      	adds	r2, r7, r4
 80006ba:	1879      	adds	r1, r7, r1
 80006bc:	4817      	ldr	r0, [pc, #92]	; (800071c <TMC5160_SPIWrite+0xd4>)
 80006be:	2364      	movs	r3, #100	; 0x64
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2305      	movs	r3, #5
 80006c4:	f003 f944 	bl	8003950 <HAL_SPI_TransmitReceive>


	  SPI2Rx += (SPI2RxData[1] << 24);
 80006c8:	0021      	movs	r1, r4
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	061b      	lsls	r3, r3, #24
 80006d0:	001a      	movs	r2, r3
 80006d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d4:	189b      	adds	r3, r3, r2
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[2] << 16);
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	789b      	ldrb	r3, [r3, #2]
 80006dc:	041b      	lsls	r3, r3, #16
 80006de:	001a      	movs	r2, r3
 80006e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e2:	189b      	adds	r3, r3, r2
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[3] << 8);
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	78db      	ldrb	r3, [r3, #3]
 80006ea:	021b      	lsls	r3, r3, #8
 80006ec:	001a      	movs	r2, r3
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	189b      	adds	r3, r3, r2
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[4] << 0);
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	001a      	movs	r2, r3
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	189b      	adds	r3, r3, r2
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,1); // set TMC CS high
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	015b      	lsls	r3, r3, #5
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <TMC5160_SPIWrite+0xd0>)
 8000706:	2201      	movs	r2, #1
 8000708:	0019      	movs	r1, r3
 800070a:	f002 fb4e 	bl	8002daa <HAL_GPIO_WritePin>

	  return SPI2Rx;
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	b00b      	add	sp, #44	; 0x2c
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	48000400 	.word	0x48000400
 800071c:	20000100 	.word	0x20000100

08000720 <AMS5055_Basic_Init>:

void AMS5055_Basic_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	AMSoffset = AMS5055_Get_Position();  // Angle read when standstill is offset
 8000724:	f000 f80a 	bl	800073c <AMS5055_Get_Position>
 8000728:	0003      	movs	r3, r0
 800072a:	001a      	movs	r2, r3
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <AMS5055_Basic_Init+0x18>)
 800072e:	801a      	strh	r2, [r3, #0]
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	20000028 	.word	0x20000028

0800073c <AMS5055_Get_Position>:

uint16_t AMS5055_Get_Position(void)
{
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
	uint16_t Angle = 0;
 8000742:	230e      	movs	r3, #14
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	2200      	movs	r2, #0
 8000748:	801a      	strh	r2, [r3, #0]
	int AlarmLo = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
	int AlarmHi = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]

	AMS5055_SPIWriteInt(ANGULAR_DATA,1);
 8000752:	4b34      	ldr	r3, [pc, #208]	; (8000824 <AMS5055_Get_Position+0xe8>)
 8000754:	2101      	movs	r1, #1
 8000756:	0018      	movs	r0, r3
 8000758:	f000 f8a4 	bl	80008a4 <AMS5055_SPIWriteInt>

	while(AMS_Ready != 1) //wacht op INT
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	4b32      	ldr	r3, [pc, #200]	; (8000828 <AMS5055_Get_Position+0xec>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d1fb      	bne.n	800075e <AMS5055_Get_Position+0x22>
	{
	}

	Angle = AMS5055_SPIWriteInt(NOP,1);
 8000766:	250e      	movs	r5, #14
 8000768:	197c      	adds	r4, r7, r5
 800076a:	2101      	movs	r1, #1
 800076c:	2000      	movs	r0, #0
 800076e:	f000 f899 	bl	80008a4 <AMS5055_SPIWriteInt>
 8000772:	0003      	movs	r3, r0
 8000774:	8023      	strh	r3, [r4, #0]

	AlarmHi = (Angle >> 12) & 0x01; // AlamHi = b14
 8000776:	0029      	movs	r1, r5
 8000778:	187b      	adds	r3, r7, r1
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	0b1b      	lsrs	r3, r3, #12
 800077e:	b29b      	uxth	r3, r3
 8000780:	001a      	movs	r2, r3
 8000782:	2301      	movs	r3, #1
 8000784:	4013      	ands	r3, r2
 8000786:	607b      	str	r3, [r7, #4]
	AlarmLo = (Angle >> 13) & 0x01; // AlarmLo = b15
 8000788:	187b      	adds	r3, r7, r1
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	0b5b      	lsrs	r3, r3, #13
 800078e:	b29b      	uxth	r3, r3
 8000790:	001a      	movs	r2, r3
 8000792:	2301      	movs	r3, #1
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
		//magnetic field too strong , lower AGC ?
	}

	// remove first 2 and last 2 bits

	Angle &= ~(1 << 14);
 8000798:	000c      	movs	r4, r1
 800079a:	193b      	adds	r3, r7, r4
 800079c:	193a      	adds	r2, r7, r4
 800079e:	8812      	ldrh	r2, [r2, #0]
 80007a0:	4922      	ldr	r1, [pc, #136]	; (800082c <AMS5055_Get_Position+0xf0>)
 80007a2:	400a      	ands	r2, r1
 80007a4:	801a      	strh	r2, [r3, #0]
	Angle &= ~(1 << 15);
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	193a      	adds	r2, r7, r4
 80007aa:	8812      	ldrh	r2, [r2, #0]
 80007ac:	0452      	lsls	r2, r2, #17
 80007ae:	0c52      	lsrs	r2, r2, #17
 80007b0:	801a      	strh	r2, [r3, #0]
	Angle = (Angle >> 2);
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	193a      	adds	r2, r7, r4
 80007b6:	8812      	ldrh	r2, [r2, #0]
 80007b8:	0892      	lsrs	r2, r2, #2
 80007ba:	801a      	strh	r2, [r3, #0]

	Angle = ((Angle * 360) / 4095); //12 bit resolution
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	881a      	ldrh	r2, [r3, #0]
 80007c0:	0013      	movs	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	189b      	adds	r3, r3, r2
 80007c6:	011a      	lsls	r2, r3, #4
 80007c8:	1ad2      	subs	r2, r2, r3
 80007ca:	00d3      	lsls	r3, r2, #3
 80007cc:	001a      	movs	r2, r3
 80007ce:	0013      	movs	r3, r2
 80007d0:	4917      	ldr	r1, [pc, #92]	; (8000830 <AMS5055_Get_Position+0xf4>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f7ff fd20 	bl	8000218 <__divsi3>
 80007d8:	0003      	movs	r3, r0
 80007da:	001a      	movs	r2, r3
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	801a      	strh	r2, [r3, #0]

	Angle = Angle - AMSoffset;  // AMS is not calibrated, so angle needs to be fixed
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <AMS5055_Get_Position+0xf8>)
 80007e2:	881a      	ldrh	r2, [r3, #0]
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	1939      	adds	r1, r7, r4
 80007e8:	8809      	ldrh	r1, [r1, #0]
 80007ea:	1a8a      	subs	r2, r1, r2
 80007ec:	801a      	strh	r2, [r3, #0]
	if((int)Angle <= 0)
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d106      	bne.n	8000804 <AMS5055_Get_Position+0xc8>
	{
		Angle = Angle + 360;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	193a      	adds	r2, r7, r4
 80007fa:	8812      	ldrh	r2, [r2, #0]
 80007fc:	3269      	adds	r2, #105	; 0x69
 80007fe:	32ff      	adds	r2, #255	; 0xff
 8000800:	801a      	strh	r2, [r3, #0]
 8000802:	e007      	b.n	8000814 <AMS5055_Get_Position+0xd8>
		Ax = 0;
	}*/

	else
	{
		Ax++;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <AMS5055_Get_Position+0xfc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <AMS5055_Get_Position+0xfc>)
 800080c:	601a      	str	r2, [r3, #0]
		AMS_Ready = 0;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <AMS5055_Get_Position+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
	}

	return Angle;
 8000814:	230e      	movs	r3, #14
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	881b      	ldrh	r3, [r3, #0]
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	b004      	add	sp, #16
 8000820:	bdb0      	pop	{r4, r5, r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	00003fff 	.word	0x00003fff
 8000828:	20000030 	.word	0x20000030
 800082c:	ffffbfff 	.word	0xffffbfff
 8000830:	00000fff 	.word	0x00000fff
 8000834:	20000028 	.word	0x20000028
 8000838:	2000002c 	.word	0x2000002c

0800083c <AMSParity>:

uint8_t AMSParity(uint16_t value)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	0002      	movs	r2, r0
 8000844:	1dbb      	adds	r3, r7, #6
 8000846:	801a      	strh	r2, [r3, #0]
	uint8_t cnt = 0;
 8000848:	230f      	movs	r3, #15
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8000850:	230e      	movs	r3, #14
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
 8000858:	e015      	b.n	8000886 <AMSParity+0x4a>
	{
		if (value & 0x1)
 800085a:	1dbb      	adds	r3, r7, #6
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	2201      	movs	r2, #1
 8000860:	4013      	ands	r3, r2
 8000862:	d005      	beq.n	8000870 <AMSParity+0x34>
		{
			cnt++;
 8000864:	210f      	movs	r1, #15
 8000866:	187b      	adds	r3, r7, r1
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	187b      	adds	r3, r7, r1
 800086c:	3201      	adds	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
		}

		value >>= 1;
 8000870:	1dbb      	adds	r3, r7, #6
 8000872:	1dba      	adds	r2, r7, #6
 8000874:	8812      	ldrh	r2, [r2, #0]
 8000876:	0852      	lsrs	r2, r2, #1
 8000878:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 16; i++)
 800087a:	210e      	movs	r1, #14
 800087c:	187b      	adds	r3, r7, r1
 800087e:	781a      	ldrb	r2, [r3, #0]
 8000880:	187b      	adds	r3, r7, r1
 8000882:	3201      	adds	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	230e      	movs	r3, #14
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d9e4      	bls.n	800085a <AMSParity+0x1e>
	}
	return cnt & 0x1;
 8000890:	230f      	movs	r3, #15
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2201      	movs	r2, #1
 8000898:	4013      	ands	r3, r2
 800089a:	b2db      	uxtb	r3, r3
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b004      	add	sp, #16
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <AMS5055_SPIWriteInt>:

uint16_t AMS5055_SPIWriteInt(uint16_t Address, int Action)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	0002      	movs	r2, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	1dbb      	adds	r3, r7, #6
 80008b0:	801a      	strh	r2, [r3, #0]
	*/

	uint8_t SPI1TxData[2];	//TX data array SPI1
	uint8_t SPI1RxData[2];	//RX data array SPI1

	uint16_t SPI1Rx = 0;
 80008b2:	2314      	movs	r3, #20
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	2200      	movs	r2, #0
 80008b8:	801a      	strh	r2, [r3, #0]
	uint16_t SPI1Tx = 0;
 80008ba:	2416      	movs	r4, #22
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	2200      	movs	r2, #0
 80008c0:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low
 80008c2:	2390      	movs	r3, #144	; 0x90
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	2200      	movs	r2, #0
 80008c8:	2110      	movs	r1, #16
 80008ca:	0018      	movs	r0, r3
 80008cc:	f002 fa6d 	bl	8002daa <HAL_GPIO_WritePin>


	  SPI1Tx = (Address << 1);
 80008d0:	0021      	movs	r1, r4
 80008d2:	187a      	adds	r2, r7, r1
 80008d4:	1dbb      	adds	r3, r7, #6
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	18db      	adds	r3, r3, r3
 80008da:	8013      	strh	r3, [r2, #0]

	  if (Action == 1) //READ
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d105      	bne.n	80008ee <AMS5055_SPIWriteInt+0x4a>
	  {
		  SPI1Tx = SPI1Tx | 0x8000;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	187a      	adds	r2, r7, r1
 80008e6:	8812      	ldrh	r2, [r2, #0]
 80008e8:	4923      	ldr	r1, [pc, #140]	; (8000978 <AMS5055_SPIWriteInt+0xd4>)
 80008ea:	430a      	orrs	r2, r1
 80008ec:	801a      	strh	r2, [r3, #0]
	  }

	  SPI1Tx = SPI1Tx | AMSParity(SPI1Tx);
 80008ee:	2416      	movs	r4, #22
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff ffa1 	bl	800083c <AMSParity>
 80008fa:	0003      	movs	r3, r0
 80008fc:	b299      	uxth	r1, r3
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	193a      	adds	r2, r7, r4
 8000902:	8812      	ldrh	r2, [r2, #0]
 8000904:	430a      	orrs	r2, r1
 8000906:	801a      	strh	r2, [r3, #0]

	 // HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low

	  SPI1TxData[0] = SPI1Tx >> 8;
 8000908:	0021      	movs	r1, r4
 800090a:	193b      	adds	r3, r7, r4
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	0a1b      	lsrs	r3, r3, #8
 8000910:	b29b      	uxth	r3, r3
 8000912:	b2da      	uxtb	r2, r3
 8000914:	2010      	movs	r0, #16
 8000916:	183b      	adds	r3, r7, r0
 8000918:	701a      	strb	r2, [r3, #0]
	  SPI1TxData[1] = SPI1Tx;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	183b      	adds	r3, r7, r0
 8000922:	705a      	strb	r2, [r3, #1]

	  HAL_SPI_TransmitReceive(&hspi1, SPI1TxData, SPI1RxData, 0x02, 100);
 8000924:	240c      	movs	r4, #12
 8000926:	193a      	adds	r2, r7, r4
 8000928:	1839      	adds	r1, r7, r0
 800092a:	4814      	ldr	r0, [pc, #80]	; (800097c <AMS5055_SPIWriteInt+0xd8>)
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2302      	movs	r3, #2
 8000932:	f003 f80d 	bl	8003950 <HAL_SPI_TransmitReceive>
	//HAL_SPI_TransmitReceive(&hspi1, SPI1Tx, SPI1Rx, 0x02, 100);

	  //HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high

	  SPI1Rx += (SPI1RxData[0] << 8);	//<< 8
 8000936:	193b      	adds	r3, r7, r4
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	021b      	lsls	r3, r3, #8
 800093e:	b299      	uxth	r1, r3
 8000940:	2014      	movs	r0, #20
 8000942:	183b      	adds	r3, r7, r0
 8000944:	183a      	adds	r2, r7, r0
 8000946:	8812      	ldrh	r2, [r2, #0]
 8000948:	188a      	adds	r2, r1, r2
 800094a:	801a      	strh	r2, [r3, #0]
	  SPI1Rx += (SPI1RxData[1] << 0);	//<< 0
 800094c:	193b      	adds	r3, r7, r4
 800094e:	785b      	ldrb	r3, [r3, #1]
 8000950:	b299      	uxth	r1, r3
 8000952:	183b      	adds	r3, r7, r0
 8000954:	0004      	movs	r4, r0
 8000956:	183a      	adds	r2, r7, r0
 8000958:	8812      	ldrh	r2, [r2, #0]
 800095a:	188a      	adds	r2, r1, r2
 800095c:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high
 800095e:	2390      	movs	r3, #144	; 0x90
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2201      	movs	r2, #1
 8000964:	2110      	movs	r1, #16
 8000966:	0018      	movs	r0, r3
 8000968:	f002 fa1f 	bl	8002daa <HAL_GPIO_WritePin>

	  return SPI1Rx;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	881b      	ldrh	r3, [r3, #0]
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b007      	add	sp, #28
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	ffff8000 	.word	0xffff8000
 800097c:	2000009c 	.word	0x2000009c

08000980 <Read_IN>:
	 HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,0);
	}
}

int Read_IN(int port)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	int val = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]

	if(port == 1)//Read IN1 (5 to 24V = 1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d106      	bne.n	80009a0 <Read_IN+0x20>
	{
		val = HAL_GPIO_ReadPin(GPIOB, REFL_UC_Pin);
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <Read_IN+0x40>)
 8000994:	2140      	movs	r1, #64	; 0x40
 8000996:	0018      	movs	r0, r3
 8000998:	f002 f9ea 	bl	8002d70 <HAL_GPIO_ReadPin>
 800099c:	0003      	movs	r3, r0
 800099e:	60fb      	str	r3, [r7, #12]
	}

	if(port == 2)//Read IN1 (5 to 24V = 1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d106      	bne.n	80009b4 <Read_IN+0x34>
	{
		val = HAL_GPIO_ReadPin(GPIOB, REFR_UC_Pin);
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <Read_IN+0x40>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	0018      	movs	r0, r3
 80009ac:	f002 f9e0 	bl	8002d70 <HAL_GPIO_ReadPin>
 80009b0:	0003      	movs	r3, r0
 80009b2:	60fb      	str	r3, [r7, #12]

	}

	return val;
 80009b4:	68fb      	ldr	r3, [r7, #12]
}
 80009b6:	0018      	movs	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	48000400 	.word	0x48000400

080009c4 <Read_AIN>:

uint16_t Read_AIN(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
	uint16_t ADCReading = 0;
 80009ca:	1dbb      	adds	r3, r7, #6
 80009cc:	2200      	movs	r2, #0
 80009ce:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Start(&hadc);
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <Read_AIN+0x40>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 fe5e 	bl	8001694 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <Read_AIN+0x40>)
 80009da:	210a      	movs	r1, #10
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 feed 	bl	80017bc <HAL_ADC_PollForConversion>
	ADCReading = HAL_ADC_GetValue(&hadc);
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <Read_AIN+0x40>)
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 ff81 	bl	80018ec <HAL_ADC_GetValue>
 80009ea:	0002      	movs	r2, r0
 80009ec:	1dbb      	adds	r3, r7, #6
 80009ee:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc);
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <Read_AIN+0x40>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 fea2 	bl	800173c <HAL_ADC_Stop>

	return ADCReading;
 80009f8:	1dbb      	adds	r3, r7, #6
 80009fa:	881b      	ldrh	r3, [r3, #0]
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000034 	.word	0x20000034

08000a08 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailbox[3];	//CAN Mailbox
int Datacheck;			//temp value for checking incomming CAN Data

/*  CAN RECEIVE INTERRUPT */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CANRxHeader, CANRxData);
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000a12:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	2100      	movs	r1, #0
 8000a18:	f001 fbf9 	bl	800220e <HAL_CAN_GetRxMessage>

	if (CANRxData[0] == 0x01)
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d102      	bne.n	8000a2a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Datacheck = 1;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
	}
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	200001ac 	.word	0x200001ac
 8000a38:	20000190 	.word	0x20000190
 8000a3c:	200001b4 	.word	0x200001b4

08000a40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	0002      	movs	r2, r0
 8000a48:	1dbb      	adds	r3, r7, #6
 8000a4a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == AMS_INT_Pin && AMS_Ready == 0)
 8000a4c:	1dbb      	adds	r3, r7, #6
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d106      	bne.n	8000a62 <HAL_GPIO_EXTI_Callback+0x22>
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <HAL_GPIO_EXTI_Callback+0x22>
	{
		AMS_Ready = 1;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
	}
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b002      	add	sp, #8
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	20000030 	.word	0x20000030

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a74:	f000 fc46 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a78:	f000 f884 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f000 fa06 	bl	8000e8c <MX_GPIO_Init>
  MX_ADC_Init();
 8000a80:	f000 f8c6 	bl	8000c10 <MX_ADC_Init>
  MX_CAN_Init();
 8000a84:	f000 f920 	bl	8000cc8 <MX_CAN_Init>
  MX_SPI1_Init();
 8000a88:	f000 f984 	bl	8000d94 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a8c:	f000 f9c0 	bl	8000e10 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	TMC5160_Stop();
 8000a90:	f7ff fdac 	bl	80005ec <TMC5160_Stop>
	HAL_Delay(2500);	//startup delay, so motor does not spin on debug
 8000a94:	4b35      	ldr	r3, [pc, #212]	; (8000b6c <main+0xfc>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 fc98 	bl	80013cc <HAL_Delay>

	Ramp1.VSTART = 10;
 8000a9c:	4b34      	ldr	r3, [pc, #208]	; (8000b70 <main+0x100>)
 8000a9e:	220a      	movs	r2, #10
 8000aa0:	601a      	str	r2, [r3, #0]
	Ramp1.A1 = 1000;
 8000aa2:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <main+0x100>)
 8000aa4:	22fa      	movs	r2, #250	; 0xfa
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	605a      	str	r2, [r3, #4]
	Ramp1.V1 = 10000;
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <main+0x100>)
 8000aac:	4a31      	ldr	r2, [pc, #196]	; (8000b74 <main+0x104>)
 8000aae:	609a      	str	r2, [r3, #8]
	Ramp1.AMAX = 12800;
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <main+0x100>)
 8000ab2:	22c8      	movs	r2, #200	; 0xc8
 8000ab4:	0192      	lsls	r2, r2, #6
 8000ab6:	60da      	str	r2, [r3, #12]
	Ramp1.VMAX = 51200;
 8000ab8:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <main+0x100>)
 8000aba:	22c8      	movs	r2, #200	; 0xc8
 8000abc:	0212      	lsls	r2, r2, #8
 8000abe:	611a      	str	r2, [r3, #16]
	Ramp1.DMAX = 700;
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <main+0x100>)
 8000ac2:	22af      	movs	r2, #175	; 0xaf
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	615a      	str	r2, [r3, #20]
	Ramp1.D1 = 1400;
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <main+0x100>)
 8000aca:	22af      	movs	r2, #175	; 0xaf
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	619a      	str	r2, [r3, #24]
	Ramp1.VSTOP = 10;
 8000ad0:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <main+0x100>)
 8000ad2:	220a      	movs	r2, #10
 8000ad4:	61da      	str	r2, [r3, #28]

	CurrentSetting1.IHOLD = 3;
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <main+0x108>)
 8000ad8:	2203      	movs	r2, #3
 8000ada:	605a      	str	r2, [r3, #4]
	CurrentSetting1.IRUN = 1;
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <main+0x108>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin, 1); // set TMC CS high
 8000ae2:	2380      	movs	r3, #128	; 0x80
 8000ae4:	015b      	lsls	r3, r3, #5
 8000ae6:	4825      	ldr	r0, [pc, #148]	; (8000b7c <main+0x10c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	0019      	movs	r1, r3
 8000aec:	f002 f95d 	bl	8002daa <HAL_GPIO_WritePin>

	TMC5160_Basic_Init(&CurrentSetting1);
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <main+0x108>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fc7c 	bl	80003f0 <TMC5160_Basic_Init>

	if (AMS_ENB == 1) {
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <main+0x110>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d101      	bne.n	8000b04 <main+0x94>
		AMS5055_Basic_Init();
 8000b00:	f7ff fe0e 	bl	8000720 <AMS5055_Basic_Init>
	}

	Drive_Enable(1); // enable driver
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff fd7b 	bl	8000600 <Drive_Enable>

  //Read IN1 (5 to 24V)
  Read_IN(1);
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f7ff ff38 	bl	8000980 <Read_IN>

  //Read IN2 (5 to 24V)
  Read_IN(2);
 8000b10:	2002      	movs	r0, #2
 8000b12:	f7ff ff35 	bl	8000980 <Read_IN>

  //Enable OUT1 for 1 sec (24V)
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,1);
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <main+0x10c>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2110      	movs	r1, #16
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f002 f944 	bl	8002daa <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000b22:	23fa      	movs	r3, #250	; 0xfa
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fc50 	bl	80013cc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_1_Pin,0);
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <main+0x10c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2110      	movs	r1, #16
 8000b32:	0018      	movs	r0, r3
 8000b34:	f002 f939 	bl	8002daa <HAL_GPIO_WritePin>

  //OR use,   Toggle_OUT(1,1000);

  // Enable OUT2 for 1 sec (24V)
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,1);
 8000b38:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <main+0x10c>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f002 f933 	bl	8002daa <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000b44:	23fa      	movs	r3, #250	; 0xfa
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fc3f 	bl	80013cc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB,EXT_OUT_2_Pin,0);
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <main+0x10c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	2120      	movs	r1, #32
 8000b54:	0018      	movs	r0, r3
 8000b56:	f002 f928 	bl	8002daa <HAL_GPIO_WritePin>

  //OR use,   Toggle_OUT(2,1000);

/* Analog read check, AIN max = 5V , circuit has voltage devider for 3V max.*/

  Read_AIN(); //returns Anlog value
 8000b5a:	f7ff ff33 	bl	80009c4 <Read_AIN>

  Drive_Enable(0); //disable drive
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fd4e 	bl	8000600 <Drive_Enable>
  TMC5160_Stop();
 8000b64:	f7ff fd42 	bl	80005ec <TMC5160_Stop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <main+0xf8>
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	000009c4 	.word	0x000009c4
 8000b70:	20000164 	.word	0x20000164
 8000b74:	00002710 	.word	0x00002710
 8000b78:	20000184 	.word	0x20000184
 8000b7c:	48000400 	.word	0x48000400
 8000b80:	2000018c 	.word	0x2000018c

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b093      	sub	sp, #76	; 0x4c
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	2414      	movs	r4, #20
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2334      	movs	r3, #52	; 0x34
 8000b92:	001a      	movs	r2, r3
 8000b94:	2100      	movs	r1, #0
 8000b96:	f003 fa23 	bl	8003fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f003 fa1c 	bl	8003fe0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000ba8:	0021      	movs	r1, r4
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2212      	movs	r2, #18
 8000bae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2201      	movs	r2, #1
 8000bba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f002 f923 	bl	8002e1c <HAL_RCC_OscConfig>
 8000bd6:	1e03      	subs	r3, r0, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000bda:	f000 f9e7 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f002 fc94 	bl	8003528 <HAL_RCC_ClockConfig>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c04:	f000 f9d2 	bl	8000fac <Error_Handler>
  }
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b013      	add	sp, #76	; 0x4c
 8000c0e:	bd90      	pop	{r4, r7, pc}

08000c10 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f003 f9de 	bl	8003fe0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c26:	4a27      	ldr	r2, [pc, #156]	; (8000cc4 <MX_ADC_Init+0xb4>)
 8000c28:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c2a:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c44:	2204      	movs	r2, #4
 8000c46:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c62:	22c2      	movs	r2, #194	; 0xc2
 8000c64:	32ff      	adds	r2, #255	; 0xff
 8000c66:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c70:	2224      	movs	r2, #36	; 0x24
 8000c72:	2100      	movs	r1, #0
 8000c74:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fbc8 	bl	8001414 <HAL_ADC_Init>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000c88:	f000 f990 	bl	8000fac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	0152      	lsls	r2, r2, #5
 8000c98:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	0552      	lsls	r2, r2, #21
 8000ca0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ca2:	1d3a      	adds	r2, r7, #4
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_ADC_Init+0xb0>)
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f000 fe2b 	bl	8001904 <HAL_ADC_ConfigChannel>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000cb2:	f000 f97b 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000034 	.word	0x20000034
 8000cc4:	40012400 	.word	0x40012400

08000cc8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000cce:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000cd0:	4a2f      	ldr	r2, [pc, #188]	; (8000d90 <MX_CAN_Init+0xc8>)
 8000cd2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000cd4:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000cd6:	2210      	movs	r2, #16
 8000cd8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000cda:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	0252      	lsls	r2, r2, #9
 8000cec:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000cf4:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000cfa:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 f841 	bl	8001da2 <HAL_CAN_Init>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d001      	beq.n	8000d28 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000d24:	f000 f942 	bl	8000fac <Error_Handler>

  /* CAN filter */

  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 8000d28:	003b      	movs	r3, r7
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 10;
 8000d2e:	003b      	movs	r3, r7
 8000d30:	220a      	movs	r2, #10
 8000d32:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000d34:	003b      	movs	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000d3a:	003b      	movs	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000d40:	003b      	movs	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000d46:	003b      	movs	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000d4c:	003b      	movs	r3, r7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d52:	003b      	movs	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d58:	003b      	movs	r3, r7
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 0;
 8000d5e:	003b      	movs	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000d64:	003a      	movs	r2, r7
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000d68:	0011      	movs	r1, r2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f001 f917 	bl	8001f9e <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000d72:	0018      	movs	r0, r3
 8000d74:	f001 fa05 	bl	8002182 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <MX_CAN_Init+0xc4>)
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 fb62 	bl	8002446 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b00a      	add	sp, #40	; 0x28
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000074 	.word	0x20000074
 8000d90:	40006400 	.word	0x40006400

08000d94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <MX_SPI1_Init+0x78>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000da0:	2282      	movs	r2, #130	; 0x82
 8000da2:	0052      	lsls	r2, r2, #1
 8000da4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000dae:	22e0      	movs	r2, #224	; 0xe0
 8000db0:	00d2      	lsls	r2, r2, #3
 8000db2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000de2:	2207      	movs	r2, #7
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000dee:	2208      	movs	r2, #8
 8000df0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <MX_SPI1_Init+0x74>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f002 fcf3 	bl	80037e0 <HAL_SPI_Init>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dfe:	f000 f8d5 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000009c 	.word	0x2000009c
 8000e0c:	40013000 	.word	0x40013000

08000e10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <MX_SPI2_Init+0x78>)
 8000e18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e1c:	2282      	movs	r2, #130	; 0x82
 8000e1e:	0052      	lsls	r2, r2, #1
 8000e20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e2a:	22e0      	movs	r2, #224	; 0xe0
 8000e2c:	00d2      	lsls	r2, r2, #3
 8000e2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e3e:	2280      	movs	r2, #128	; 0x80
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e5e:	2207      	movs	r2, #7
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <MX_SPI2_Init+0x74>)
 8000e70:	0018      	movs	r0, r3
 8000e72:	f002 fcb5 	bl	80037e0 <HAL_SPI_Init>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d001      	beq.n	8000e7e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 f897 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000100 	.word	0x20000100
 8000e88:	40003800 	.word	0x40003800

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	240c      	movs	r4, #12
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	0018      	movs	r0, r3
 8000e98:	2314      	movs	r3, #20
 8000e9a:	001a      	movs	r2, r3
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	f003 f89f 	bl	8003fe0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <MX_GPIO_Init+0x114>)
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <MX_GPIO_Init+0x114>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	0289      	lsls	r1, r1, #10
 8000eac:	430a      	orrs	r2, r1
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <MX_GPIO_Init+0x114>)
 8000eb2:	695a      	ldr	r2, [r3, #20]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	029b      	lsls	r3, r3, #10
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <MX_GPIO_Init+0x114>)
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <MX_GPIO_Init+0x114>)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	02c9      	lsls	r1, r1, #11
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	615a      	str	r2, [r3, #20]
 8000ecc:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <MX_GPIO_Init+0x114>)
 8000ece:	695a      	ldr	r2, [r3, #20]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	02db      	lsls	r3, r3, #11
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin, GPIO_PIN_RESET);
 8000eda:	238a      	movs	r3, #138	; 0x8a
 8000edc:	0059      	lsls	r1, r3, #1
 8000ede:	2390      	movs	r3, #144	; 0x90
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f001 ff60 	bl	8002daa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin, GPIO_PIN_RESET);
 8000eea:	492e      	ldr	r1, [pc, #184]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <MX_GPIO_Init+0x11c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f001 ff5a 	bl	8002daa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_STB_Pin AMS_CS_Pin DRV_ENN_Pin */
  GPIO_InitStruct.Pin = CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	228a      	movs	r2, #138	; 0x8a
 8000efa:	0052      	lsls	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	2201      	movs	r2, #1
 8000f02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	193a      	adds	r2, r7, r4
 8000f12:	2390      	movs	r3, #144	; 0x90
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	0011      	movs	r1, r2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f001 fdb1 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_INT_Pin */
  GPIO_InitStruct.Pin = AMS_INT_Pin;
 8000f1e:	0021      	movs	r1, r4
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2288      	movs	r2, #136	; 0x88
 8000f2a:	0352      	lsls	r2, r2, #13
 8000f2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	000c      	movs	r4, r1
 8000f30:	193b      	adds	r3, r7, r4
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AMS_INT_GPIO_Port, &GPIO_InitStruct);
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <MX_GPIO_Init+0x11c>)
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	0010      	movs	r0, r2
 8000f3e:	f001 fd9f 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC_CS_Pin EXT_OUT_1_Pin EXT_OUT_2_Pin */
  GPIO_InitStruct.Pin = TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin;
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <MX_GPIO_Init+0x118>)
 8000f46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	193b      	adds	r3, r7, r4
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <MX_GPIO_Init+0x11c>)
 8000f5e:	0019      	movs	r1, r3
 8000f60:	0010      	movs	r0, r2
 8000f62:	f001 fd8d 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : REFL_UC_Pin REFR_UC_Pin */
  GPIO_InitStruct.Pin = REFL_UC_Pin|REFR_UC_Pin;
 8000f66:	0021      	movs	r1, r4
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	22c0      	movs	r2, #192	; 0xc0
 8000f6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2202      	movs	r2, #2
 8000f78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <MX_GPIO_Init+0x11c>)
 8000f7e:	0019      	movs	r1, r3
 8000f80:	0010      	movs	r0, r2
 8000f82:	f001 fd7d 	bl	8002a80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f001 fd46 	bl	8002a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000f90:	2005      	movs	r0, #5
 8000f92:	f001 fd58 	bl	8002a46 <HAL_NVIC_EnableIRQ>

}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b009      	add	sp, #36	; 0x24
 8000f9c:	bd90      	pop	{r4, r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	00001030 	.word	0x00001030
 8000fa8:	48000400 	.word	0x48000400

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_MspInit+0x44>)
 8000fc0:	699a      	ldr	r2, [r3, #24]
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_MspInit+0x44>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	619a      	str	r2, [r3, #24]
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <HAL_MspInit+0x44>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_MspInit+0x44>)
 8000fd8:	69da      	ldr	r2, [r3, #28]
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_MspInit+0x44>)
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	0549      	lsls	r1, r1, #21
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	61da      	str	r2, [r3, #28]
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_MspInit+0x44>)
 8000fe6:	69da      	ldr	r2, [r3, #28]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	055b      	lsls	r3, r3, #21
 8000fec:	4013      	ands	r3, r2
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b08b      	sub	sp, #44	; 0x2c
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	2414      	movs	r4, #20
 800100a:	193b      	adds	r3, r7, r4
 800100c:	0018      	movs	r0, r3
 800100e:	2314      	movs	r3, #20
 8001010:	001a      	movs	r2, r3
 8001012:	2100      	movs	r1, #0
 8001014:	f002 ffe4 	bl	8003fe0 <memset>
  if(hadc->Instance==ADC1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a19      	ldr	r2, [pc, #100]	; (8001084 <HAL_ADC_MspInit+0x84>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12b      	bne.n	800107a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_ADC_MspInit+0x88>)
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_ADC_MspInit+0x88>)
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	0089      	lsls	r1, r1, #2
 800102c:	430a      	orrs	r2, r1
 800102e:	619a      	str	r2, [r3, #24]
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_ADC_MspInit+0x88>)
 8001032:	699a      	ldr	r2, [r3, #24]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_ADC_MspInit+0x88>)
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_ADC_MspInit+0x88>)
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	0289      	lsls	r1, r1, #10
 8001048:	430a      	orrs	r2, r1
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_ADC_MspInit+0x88>)
 800104e:	695a      	ldr	r2, [r3, #20]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	029b      	lsls	r3, r3, #10
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = AIN_MCU_Pin;
 800105a:	193b      	adds	r3, r7, r4
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001060:	193b      	adds	r3, r7, r4
 8001062:	2203      	movs	r2, #3
 8001064:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	193b      	adds	r3, r7, r4
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AIN_MCU_GPIO_Port, &GPIO_InitStruct);
 800106c:	193a      	adds	r2, r7, r4
 800106e:	2390      	movs	r3, #144	; 0x90
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	0011      	movs	r1, r2
 8001074:	0018      	movs	r0, r3
 8001076:	f001 fd03 	bl	8002a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b00b      	add	sp, #44	; 0x2c
 8001080:	bd90      	pop	{r4, r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	40012400 	.word	0x40012400
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b08b      	sub	sp, #44	; 0x2c
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	2414      	movs	r4, #20
 8001096:	193b      	adds	r3, r7, r4
 8001098:	0018      	movs	r0, r3
 800109a:	2314      	movs	r3, #20
 800109c:	001a      	movs	r2, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	f002 ff9e 	bl	8003fe0 <memset>
  if(hcan->Instance==CAN)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a20      	ldr	r2, [pc, #128]	; (800112c <HAL_CAN_MspInit+0xa0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d13a      	bne.n	8001124 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010b0:	69da      	ldr	r2, [r3, #28]
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	0489      	lsls	r1, r1, #18
 80010b8:	430a      	orrs	r2, r1
 80010ba:	61da      	str	r2, [r3, #28]
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010be:	69da      	ldr	r2, [r3, #28]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	049b      	lsls	r3, r3, #18
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	02c9      	lsls	r1, r1, #11
 80010d4:	430a      	orrs	r2, r1
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	02db      	lsls	r3, r3, #11
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	22c0      	movs	r2, #192	; 0xc0
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	0021      	movs	r1, r4
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2202      	movs	r2, #2
 80010f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2203      	movs	r2, #3
 8001100:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2204      	movs	r2, #4
 8001106:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	187b      	adds	r3, r7, r1
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_CAN_MspInit+0xa8>)
 800110c:	0019      	movs	r1, r3
 800110e:	0010      	movs	r0, r2
 8001110:	f001 fcb6 	bl	8002a80 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	201e      	movs	r0, #30
 800111a:	f001 fc7f 	bl	8002a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800111e:	201e      	movs	r0, #30
 8001120:	f001 fc91 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b00b      	add	sp, #44	; 0x2c
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	40006400 	.word	0x40006400
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400

08001138 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b08d      	sub	sp, #52	; 0x34
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	241c      	movs	r4, #28
 8001142:	193b      	adds	r3, r7, r4
 8001144:	0018      	movs	r0, r3
 8001146:	2314      	movs	r3, #20
 8001148:	001a      	movs	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	f002 ff48 	bl	8003fe0 <memset>
  if(hspi->Instance==SPI1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a39      	ldr	r2, [pc, #228]	; (800123c <HAL_SPI_MspInit+0x104>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d133      	bne.n	80011c2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800115a:	4b39      	ldr	r3, [pc, #228]	; (8001240 <HAL_SPI_MspInit+0x108>)
 800115c:	699a      	ldr	r2, [r3, #24]
 800115e:	4b38      	ldr	r3, [pc, #224]	; (8001240 <HAL_SPI_MspInit+0x108>)
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	0149      	lsls	r1, r1, #5
 8001164:	430a      	orrs	r2, r1
 8001166:	619a      	str	r2, [r3, #24]
 8001168:	4b35      	ldr	r3, [pc, #212]	; (8001240 <HAL_SPI_MspInit+0x108>)
 800116a:	699a      	ldr	r2, [r3, #24]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	015b      	lsls	r3, r3, #5
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <HAL_SPI_MspInit+0x108>)
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <HAL_SPI_MspInit+0x108>)
 800117c:	2180      	movs	r1, #128	; 0x80
 800117e:	0289      	lsls	r1, r1, #10
 8001180:	430a      	orrs	r2, r1
 8001182:	615a      	str	r2, [r3, #20]
 8001184:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <HAL_SPI_MspInit+0x108>)
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	029b      	lsls	r3, r3, #10
 800118c:	4013      	ands	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AMS_SCK_Pin|AMS_MISO_Pin|AMS_MOSI_Pin;
 8001192:	0021      	movs	r1, r4
 8001194:	187b      	adds	r3, r7, r1
 8001196:	22e0      	movs	r2, #224	; 0xe0
 8001198:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2202      	movs	r2, #2
 800119e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2203      	movs	r2, #3
 80011aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	187a      	adds	r2, r7, r1
 80011b4:	2390      	movs	r3, #144	; 0x90
 80011b6:	05db      	lsls	r3, r3, #23
 80011b8:	0011      	movs	r1, r2
 80011ba:	0018      	movs	r0, r3
 80011bc:	f001 fc60 	bl	8002a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011c0:	e037      	b.n	8001232 <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <HAL_SPI_MspInit+0x10c>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d132      	bne.n	8001232 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_SPI_MspInit+0x108>)
 80011ce:	69da      	ldr	r2, [r3, #28]
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_SPI_MspInit+0x108>)
 80011d2:	2180      	movs	r1, #128	; 0x80
 80011d4:	01c9      	lsls	r1, r1, #7
 80011d6:	430a      	orrs	r2, r1
 80011d8:	61da      	str	r2, [r3, #28]
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_SPI_MspInit+0x108>)
 80011dc:	69da      	ldr	r2, [r3, #28]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	01db      	lsls	r3, r3, #7
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_SPI_MspInit+0x108>)
 80011ea:	695a      	ldr	r2, [r3, #20]
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_SPI_MspInit+0x108>)
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	02c9      	lsls	r1, r1, #11
 80011f2:	430a      	orrs	r2, r1
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_SPI_MspInit+0x108>)
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	02db      	lsls	r3, r3, #11
 80011fe:	4013      	ands	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMC_SCK_Pin|TMC_MISO_Pin|TMC_MOSI_Pin;
 8001204:	211c      	movs	r1, #28
 8001206:	187b      	adds	r3, r7, r1
 8001208:	22e0      	movs	r2, #224	; 0xe0
 800120a:	0212      	lsls	r2, r2, #8
 800120c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2202      	movs	r2, #2
 8001212:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	187b      	adds	r3, r7, r1
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121a:	187b      	adds	r3, r7, r1
 800121c:	2203      	movs	r2, #3
 800121e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001220:	187b      	adds	r3, r7, r1
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	187b      	adds	r3, r7, r1
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_SPI_MspInit+0x110>)
 800122a:	0019      	movs	r1, r3
 800122c:	0010      	movs	r0, r2
 800122e:	f001 fc27 	bl	8002a80 <HAL_GPIO_Init>
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b00d      	add	sp, #52	; 0x34
 8001238:	bd90      	pop	{r4, r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	40013000 	.word	0x40013000
 8001240:	40021000 	.word	0x40021000
 8001244:	40003800 	.word	0x40003800
 8001248:	48000400 	.word	0x48000400

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001270:	f000 f890 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AMS_INT_Pin);
 800127e:	2001      	movs	r0, #1
 8001280:	f001 fdb0 	bl	8002de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <CEC_CAN_IRQHandler+0x14>)
 8001292:	0018      	movs	r0, r3
 8001294:	f001 f901 	bl	800249a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	20000074 	.word	0x20000074

080012a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <LoopForever+0x6>)
  ldr r1, =_edata
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <LoopForever+0xe>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012cc:	4c0b      	ldr	r4, [pc, #44]	; (80012fc <LoopForever+0x16>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012da:	f7ff ffe3 	bl	80012a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80012de:	f002 fe87 	bl	8003ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012e2:	f7ff fbc5 	bl	8000a70 <main>

080012e6 <LoopForever>:

LoopForever:
    b LoopForever
 80012e6:	e7fe      	b.n	80012e6 <LoopForever>
  ldr   r0, =_estack
 80012e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012f4:	08004088 	.word	0x08004088
  ldr r2, =_sbss
 80012f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012fc:	200001bc 	.word	0x200001bc

08001300 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_COMP_IRQHandler>
	...

08001304 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_Init+0x24>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_Init+0x24>)
 800130e:	2110      	movs	r1, #16
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f809 	bl	800132c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800131a:	f7ff fe4d 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	0018      	movs	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	40022000 	.word	0x40022000

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_InitTick+0x5c>)
 8001336:	681c      	ldr	r4, [r3, #0]
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_InitTick+0x60>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	0019      	movs	r1, r3
 800133e:	23fa      	movs	r3, #250	; 0xfa
 8001340:	0098      	lsls	r0, r3, #2
 8001342:	f7fe fedf 	bl	8000104 <__udivsi3>
 8001346:	0003      	movs	r3, r0
 8001348:	0019      	movs	r1, r3
 800134a:	0020      	movs	r0, r4
 800134c:	f7fe feda 	bl	8000104 <__udivsi3>
 8001350:	0003      	movs	r3, r0
 8001352:	0018      	movs	r0, r3
 8001354:	f001 fb87 	bl	8002a66 <HAL_SYSTICK_Config>
 8001358:	1e03      	subs	r3, r0, #0
 800135a:	d001      	beq.n	8001360 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e00f      	b.n	8001380 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b03      	cmp	r3, #3
 8001364:	d80b      	bhi.n	800137e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	2301      	movs	r3, #1
 800136a:	425b      	negs	r3, r3
 800136c:	2200      	movs	r2, #0
 800136e:	0018      	movs	r0, r3
 8001370:	f001 fb54 	bl	8002a1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_InitTick+0x64>)
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b003      	add	sp, #12
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	20000000 	.word	0x20000000
 800138c:	20000008 	.word	0x20000008
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x1c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	001a      	movs	r2, r3
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x20>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	18d2      	adds	r2, r2, r3
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_IncTick+0x20>)
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	20000008 	.word	0x20000008
 80013b4:	200001b8 	.word	0x200001b8

080013b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <HAL_GetTick+0x10>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	200001b8 	.word	0x200001b8

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff fff0 	bl	80013b8 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3301      	adds	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	001a      	movs	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	189b      	adds	r3, r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	f7ff ffe0 	bl	80013b8 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b004      	add	sp, #16
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	20000008 	.word	0x20000008

08001414 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141c:	230f      	movs	r3, #15
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e125      	b.n	800167e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10a      	bne.n	8001450 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2234      	movs	r2, #52	; 0x34
 8001444:	2100      	movs	r1, #0
 8001446:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff fdd8 	bl	8001000 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001454:	2210      	movs	r2, #16
 8001456:	4013      	ands	r3, r2
 8001458:	d000      	beq.n	800145c <HAL_ADC_Init+0x48>
 800145a:	e103      	b.n	8001664 <HAL_ADC_Init+0x250>
 800145c:	230f      	movs	r3, #15
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d000      	beq.n	8001468 <HAL_ADC_Init+0x54>
 8001466:	e0fd      	b.n	8001664 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2204      	movs	r2, #4
 8001470:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001472:	d000      	beq.n	8001476 <HAL_ADC_Init+0x62>
 8001474:	e0f6      	b.n	8001664 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147a:	4a83      	ldr	r2, [pc, #524]	; (8001688 <HAL_ADC_Init+0x274>)
 800147c:	4013      	ands	r3, r2
 800147e:	2202      	movs	r2, #2
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2203      	movs	r2, #3
 800148e:	4013      	ands	r3, r2
 8001490:	2b01      	cmp	r3, #1
 8001492:	d112      	bne.n	80014ba <HAL_ADC_Init+0xa6>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2201      	movs	r2, #1
 800149c:	4013      	ands	r3, r2
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d009      	beq.n	80014b6 <HAL_ADC_Init+0xa2>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	401a      	ands	r2, r3
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d101      	bne.n	80014ba <HAL_ADC_Init+0xa6>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_ADC_Init+0xa8>
 80014ba:	2300      	movs	r3, #0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d116      	bne.n	80014ee <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2218      	movs	r2, #24
 80014c8:	4393      	bics	r3, r2
 80014ca:	0019      	movs	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	0899      	lsrs	r1, r3, #2
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4964      	ldr	r1, [pc, #400]	; (800168c <HAL_ADC_Init+0x278>)
 80014fa:	400a      	ands	r2, r1
 80014fc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7e1b      	ldrb	r3, [r3, #24]
 8001502:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7e5b      	ldrb	r3, [r3, #25]
 8001508:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800150a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7e9b      	ldrb	r3, [r3, #26]
 8001510:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001512:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	2b01      	cmp	r3, #1
 800151a:	d002      	beq.n	8001522 <HAL_ADC_Init+0x10e>
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	015b      	lsls	r3, r3, #5
 8001520:	e000      	b.n	8001524 <HAL_ADC_Init+0x110>
 8001522:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001524:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800152a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d101      	bne.n	8001538 <HAL_ADC_Init+0x124>
 8001534:	2304      	movs	r3, #4
 8001536:	e000      	b.n	800153a <HAL_ADC_Init+0x126>
 8001538:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800153a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2124      	movs	r1, #36	; 0x24
 8001540:	5c5b      	ldrb	r3, [r3, r1]
 8001542:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001544:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	4313      	orrs	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7edb      	ldrb	r3, [r3, #27]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d115      	bne.n	8001580 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7e9b      	ldrb	r3, [r3, #26]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d105      	bne.n	8001568 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	0252      	lsls	r2, r2, #9
 8001562:	4313      	orrs	r3, r2
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	e00b      	b.n	8001580 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156c:	2220      	movs	r2, #32
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	2201      	movs	r2, #1
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69da      	ldr	r2, [r3, #28]
 8001584:	23c2      	movs	r3, #194	; 0xc2
 8001586:	33ff      	adds	r3, #255	; 0xff
 8001588:	429a      	cmp	r2, r3
 800158a:	d007      	beq.n	800159c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001594:	4313      	orrs	r3, r2
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	4313      	orrs	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68d9      	ldr	r1, [r3, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	055b      	lsls	r3, r3, #21
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d01b      	beq.n	80015f0 <HAL_ADC_Init+0x1dc>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d017      	beq.n	80015f0 <HAL_ADC_Init+0x1dc>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d013      	beq.n	80015f0 <HAL_ADC_Init+0x1dc>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d00f      	beq.n	80015f0 <HAL_ADC_Init+0x1dc>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d00b      	beq.n	80015f0 <HAL_ADC_Init+0x1dc>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d007      	beq.n	80015f0 <HAL_ADC_Init+0x1dc>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	2b06      	cmp	r3, #6
 80015e6:	d003      	beq.n	80015f0 <HAL_ADC_Init+0x1dc>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	2b07      	cmp	r3, #7
 80015ee:	d112      	bne.n	8001616 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2107      	movs	r1, #7
 80015fc:	438a      	bics	r2, r1
 80015fe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6959      	ldr	r1, [r3, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	2207      	movs	r2, #7
 800160c:	401a      	ands	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <HAL_ADC_Init+0x27c>)
 800161e:	4013      	ands	r3, r2
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	429a      	cmp	r2, r3
 8001624:	d10b      	bne.n	800163e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001630:	2203      	movs	r2, #3
 8001632:	4393      	bics	r3, r2
 8001634:	2201      	movs	r2, #1
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800163c:	e01c      	b.n	8001678 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001642:	2212      	movs	r2, #18
 8001644:	4393      	bics	r3, r2
 8001646:	2210      	movs	r2, #16
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001652:	2201      	movs	r2, #1
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800165a:	230f      	movs	r3, #15
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001662:	e009      	b.n	8001678 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001668:	2210      	movs	r2, #16
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001670:	230f      	movs	r3, #15
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001678:	230f      	movs	r3, #15
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	781b      	ldrb	r3, [r3, #0]
}
 800167e:	0018      	movs	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	b004      	add	sp, #16
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	fffffefd 	.word	0xfffffefd
 800168c:	fffe0219 	.word	0xfffe0219
 8001690:	833fffe7 	.word	0x833fffe7

08001694 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800169c:	230f      	movs	r3, #15
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2204      	movs	r2, #4
 80016ac:	4013      	ands	r3, r2
 80016ae:	d138      	bne.n	8001722 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2234      	movs	r2, #52	; 0x34
 80016b4:	5c9b      	ldrb	r3, [r3, r2]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_ADC_Start+0x2a>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e038      	b.n	8001730 <HAL_ADC_Start+0x9c>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2234      	movs	r2, #52	; 0x34
 80016c2:	2101      	movs	r1, #1
 80016c4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7e5b      	ldrb	r3, [r3, #25]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d007      	beq.n	80016de <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80016ce:	230f      	movs	r3, #15
 80016d0:	18fc      	adds	r4, r7, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f000 fa23 	bl	8001b20 <ADC_Enable>
 80016da:	0003      	movs	r3, r0
 80016dc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016de:	230f      	movs	r3, #15
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d120      	bne.n	800172a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <HAL_ADC_Start+0xa4>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	0052      	lsls	r2, r2, #1
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2234      	movs	r2, #52	; 0x34
 8001704:	2100      	movs	r1, #0
 8001706:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	221c      	movs	r2, #28
 800170e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2104      	movs	r1, #4
 800171c:	430a      	orrs	r2, r1
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	e003      	b.n	800172a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001722:	230f      	movs	r3, #15
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	2202      	movs	r2, #2
 8001728:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800172a:	230f      	movs	r3, #15
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	781b      	ldrb	r3, [r3, #0]
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b005      	add	sp, #20
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	fffff0fe 	.word	0xfffff0fe

0800173c <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	230f      	movs	r3, #15
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2234      	movs	r2, #52	; 0x34
 8001750:	5c9b      	ldrb	r3, [r3, r2]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_ADC_Stop+0x1e>
 8001756:	2302      	movs	r3, #2
 8001758:	e029      	b.n	80017ae <HAL_ADC_Stop+0x72>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2234      	movs	r2, #52	; 0x34
 800175e:	2101      	movs	r1, #1
 8001760:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001762:	250f      	movs	r5, #15
 8001764:	197c      	adds	r4, r7, r5
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	0018      	movs	r0, r3
 800176a:	f000 face 	bl	8001d0a <ADC_ConversionStop>
 800176e:	0003      	movs	r3, r0
 8001770:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001772:	197b      	adds	r3, r7, r5
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d112      	bne.n	80017a0 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800177a:	197c      	adds	r4, r7, r5
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	0018      	movs	r0, r3
 8001780:	f000 fa52 	bl	8001c28 <ADC_Disable>
 8001784:	0003      	movs	r3, r0
 8001786:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001788:	197b      	adds	r3, r7, r5
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d107      	bne.n	80017a0 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001794:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_ADC_Stop+0x7c>)
 8001796:	4013      	ands	r3, r2
 8001798:	2201      	movs	r2, #1
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2234      	movs	r2, #52	; 0x34
 80017a4:	2100      	movs	r1, #0
 80017a6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80017a8:	230f      	movs	r3, #15
 80017aa:	18fb      	adds	r3, r7, r3
 80017ac:	781b      	ldrb	r3, [r3, #0]
}
 80017ae:	0018      	movs	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b004      	add	sp, #16
 80017b4:	bdb0      	pop	{r4, r5, r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	fffffefe 	.word	0xfffffefe

080017bc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d102      	bne.n	80017d4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80017ce:	2308      	movs	r3, #8
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	e014      	b.n	80017fe <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2201      	movs	r2, #1
 80017dc:	4013      	ands	r3, r2
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d10b      	bne.n	80017fa <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	2220      	movs	r2, #32
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2234      	movs	r2, #52	; 0x34
 80017f2:	2100      	movs	r1, #0
 80017f4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e071      	b.n	80018de <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80017fa:	230c      	movs	r3, #12
 80017fc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80017fe:	f7ff fddb 	bl	80013b8 <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001806:	e01f      	b.n	8001848 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	d01c      	beq.n	8001848 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d007      	beq.n	8001824 <HAL_ADC_PollForConversion+0x68>
 8001814:	f7ff fdd0 	bl	80013b8 <HAL_GetTick>
 8001818:	0002      	movs	r2, r0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d211      	bcs.n	8001848 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	d10b      	bne.n	8001848 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001834:	2204      	movs	r2, #4
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2234      	movs	r2, #52	; 0x34
 8001840:	2100      	movs	r1, #0
 8001842:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e04a      	b.n	80018de <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4013      	ands	r3, r2
 8001852:	d0d9      	beq.n	8001808 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	0092      	lsls	r2, r2, #2
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	23c0      	movs	r3, #192	; 0xc0
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4013      	ands	r3, r2
 800186e:	d12d      	bne.n	80018cc <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001874:	2b00      	cmp	r3, #0
 8001876:	d129      	bne.n	80018cc <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2208      	movs	r2, #8
 8001880:	4013      	ands	r3, r2
 8001882:	2b08      	cmp	r3, #8
 8001884:	d122      	bne.n	80018cc <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2204      	movs	r2, #4
 800188e:	4013      	ands	r3, r2
 8001890:	d110      	bne.n	80018b4 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	210c      	movs	r1, #12
 800189e:	438a      	bics	r2, r1
 80018a0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <HAL_ADC_PollForConversion+0x12c>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	2201      	movs	r2, #1
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	639a      	str	r2, [r3, #56]	; 0x38
 80018b2:	e00b      	b.n	80018cc <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b8:	2220      	movs	r2, #32
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c4:	2201      	movs	r2, #1
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7e1b      	ldrb	r3, [r3, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	220c      	movs	r2, #12
 80018da:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b004      	add	sp, #16
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	fffffefe 	.word	0xfffffefe

080018ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b002      	add	sp, #8
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190e:	230f      	movs	r3, #15
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	055b      	lsls	r3, r3, #21
 8001922:	429a      	cmp	r2, r3
 8001924:	d011      	beq.n	800194a <HAL_ADC_ConfigChannel+0x46>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	2b01      	cmp	r3, #1
 800192c:	d00d      	beq.n	800194a <HAL_ADC_ConfigChannel+0x46>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	2b02      	cmp	r3, #2
 8001934:	d009      	beq.n	800194a <HAL_ADC_ConfigChannel+0x46>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	2b03      	cmp	r3, #3
 800193c:	d005      	beq.n	800194a <HAL_ADC_ConfigChannel+0x46>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	2b04      	cmp	r3, #4
 8001944:	d001      	beq.n	800194a <HAL_ADC_ConfigChannel+0x46>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2234      	movs	r2, #52	; 0x34
 800194e:	5c9b      	ldrb	r3, [r3, r2]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x54>
 8001954:	2302      	movs	r3, #2
 8001956:	e0d0      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1f6>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2234      	movs	r2, #52	; 0x34
 800195c:	2101      	movs	r1, #1
 800195e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2204      	movs	r2, #4
 8001968:	4013      	ands	r3, r2
 800196a:	d000      	beq.n	800196e <HAL_ADC_ConfigChannel+0x6a>
 800196c:	e0b4      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a64      	ldr	r2, [pc, #400]	; (8001b04 <HAL_ADC_ConfigChannel+0x200>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d100      	bne.n	800197a <HAL_ADC_ConfigChannel+0x76>
 8001978:	e082      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	409a      	lsls	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	055b      	lsls	r3, r3, #21
 8001998:	429a      	cmp	r2, r3
 800199a:	d037      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d033      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x108>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d02f      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x108>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d02b      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x108>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d027      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x108>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	d023      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x108>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	2b06      	cmp	r3, #6
 80019ca:	d01f      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x108>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	2b07      	cmp	r3, #7
 80019d2:	d01b      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	2107      	movs	r1, #7
 80019e0:	400b      	ands	r3, r1
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d012      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2107      	movs	r1, #7
 80019f2:	438a      	bics	r2, r1
 80019f4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6959      	ldr	r1, [r3, #20]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2207      	movs	r2, #7
 8001a02:	401a      	ands	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b10      	cmp	r3, #16
 8001a12:	d007      	beq.n	8001a24 <HAL_ADC_ConfigChannel+0x120>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b11      	cmp	r3, #17
 8001a1a:	d003      	beq.n	8001a24 <HAL_ADC_ConfigChannel+0x120>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b12      	cmp	r3, #18
 8001a22:	d163      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a24:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_ADC_ConfigChannel+0x204>)
 8001a26:	6819      	ldr	r1, [r3, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b10      	cmp	r3, #16
 8001a2e:	d009      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0x140>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b11      	cmp	r3, #17
 8001a36:	d102      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x13a>
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	03db      	lsls	r3, r3, #15
 8001a3c:	e004      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x144>
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	045b      	lsls	r3, r3, #17
 8001a42:	e001      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x144>
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	041b      	lsls	r3, r3, #16
 8001a48:	4a2f      	ldr	r2, [pc, #188]	; (8001b08 <HAL_ADC_ConfigChannel+0x204>)
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b10      	cmp	r3, #16
 8001a54:	d14a      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a56:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_ADC_ConfigChannel+0x208>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	492d      	ldr	r1, [pc, #180]	; (8001b10 <HAL_ADC_ConfigChannel+0x20c>)
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7fe fb51 	bl	8000104 <__udivsi3>
 8001a62:	0003      	movs	r3, r0
 8001a64:	001a      	movs	r2, r3
 8001a66:	0013      	movs	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	189b      	adds	r3, r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a70:	e002      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f9      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x16e>
 8001a7e:	e035      	b.n	8001aec <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4099      	lsls	r1, r3
 8001a8e:	000b      	movs	r3, r1
 8001a90:	43d9      	mvns	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	400a      	ands	r2, r1
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b10      	cmp	r3, #16
 8001aa0:	d007      	beq.n	8001ab2 <HAL_ADC_ConfigChannel+0x1ae>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b11      	cmp	r3, #17
 8001aa8:	d003      	beq.n	8001ab2 <HAL_ADC_ConfigChannel+0x1ae>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b12      	cmp	r3, #18
 8001ab0:	d11c      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_ADC_ConfigChannel+0x204>)
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b10      	cmp	r3, #16
 8001abc:	d007      	beq.n	8001ace <HAL_ADC_ConfigChannel+0x1ca>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b11      	cmp	r3, #17
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x1c6>
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_ADC_ConfigChannel+0x210>)
 8001ac8:	e002      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x1cc>
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <HAL_ADC_ConfigChannel+0x214>)
 8001acc:	e000      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x1cc>
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_ADC_ConfigChannel+0x218>)
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <HAL_ADC_ConfigChannel+0x204>)
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e009      	b.n	8001aec <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001adc:	2220      	movs	r2, #32
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2234      	movs	r2, #52	; 0x34
 8001af0:	2100      	movs	r1, #0
 8001af2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001af4:	230f      	movs	r3, #15
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	781b      	ldrb	r3, [r3, #0]
}
 8001afa:	0018      	movs	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b004      	add	sp, #16
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	00001001 	.word	0x00001001
 8001b08:	40012708 	.word	0x40012708
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	000f4240 	.word	0x000f4240
 8001b14:	ffbfffff 	.word	0xffbfffff
 8001b18:	feffffff 	.word	0xfeffffff
 8001b1c:	ff7fffff 	.word	0xff7fffff

08001b20 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2203      	movs	r2, #3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d112      	bne.n	8001b64 <ADC_Enable+0x44>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d009      	beq.n	8001b60 <ADC_Enable+0x40>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	401a      	ands	r2, r3
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d101      	bne.n	8001b64 <ADC_Enable+0x44>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <ADC_Enable+0x46>
 8001b64:	2300      	movs	r3, #0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d152      	bne.n	8001c10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a2a      	ldr	r2, [pc, #168]	; (8001c1c <ADC_Enable+0xfc>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	2210      	movs	r2, #16
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b86:	2201      	movs	r2, #1
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e03f      	b.n	8001c12 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <ADC_Enable+0x100>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	491f      	ldr	r1, [pc, #124]	; (8001c24 <ADC_Enable+0x104>)
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7fe faab 	bl	8000104 <__udivsi3>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bb2:	e002      	b.n	8001bba <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f9      	bne.n	8001bb4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bc0:	f7ff fbfa 	bl	80013b8 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bc8:	e01b      	b.n	8001c02 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bca:	f7ff fbf5 	bl	80013b8 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d914      	bls.n	8001c02 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d00d      	beq.n	8001c02 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	2210      	movs	r2, #16
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e007      	b.n	8001c12 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d1dc      	bne.n	8001bca <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b004      	add	sp, #16
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	80000017 	.word	0x80000017
 8001c20:	20000000 	.word	0x20000000
 8001c24:	000f4240 	.word	0x000f4240

08001c28 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d112      	bne.n	8001c68 <ADC_Disable+0x40>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d009      	beq.n	8001c64 <ADC_Disable+0x3c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d101      	bne.n	8001c68 <ADC_Disable+0x40>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <ADC_Disable+0x42>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d048      	beq.n	8001d00 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2205      	movs	r2, #5
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d110      	bne.n	8001c9e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2102      	movs	r1, #2
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2203      	movs	r2, #3
 8001c92:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c94:	f7ff fb90 	bl	80013b8 <HAL_GetTick>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c9c:	e029      	b.n	8001cf2 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cae:	2201      	movs	r2, #1
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e023      	b.n	8001d02 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cba:	f7ff fb7d 	bl	80013b8 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d914      	bls.n	8001cf2 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10d      	bne.n	8001cf2 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cda:	2210      	movs	r2, #16
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e007      	b.n	8001d02 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d0dc      	beq.n	8001cba <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b004      	add	sp, #16
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d03a      	beq.n	8001d98 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2204      	movs	r2, #4
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d10d      	bne.n	8001d4c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2202      	movs	r2, #2
 8001d38:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d3a:	d107      	bne.n	8001d4c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2110      	movs	r1, #16
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d4c:	f7ff fb34 	bl	80013b8 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d54:	e01a      	b.n	8001d8c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d56:	f7ff fb2f 	bl	80013b8 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d913      	bls.n	8001d8c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d74:	2210      	movs	r2, #16
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	2201      	movs	r2, #1
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e006      	b.n	8001d9a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2204      	movs	r2, #4
 8001d94:	4013      	ands	r3, r2
 8001d96:	d1de      	bne.n	8001d56 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0f0      	b.n	8001f96 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	5c9b      	ldrb	r3, [r3, r2]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d103      	bne.n	8001dc8 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7ff f962 	bl	800108c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd8:	f7ff faee 	bl	80013b8 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001de0:	e013      	b.n	8001e0a <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001de2:	f7ff fae9 	bl	80013b8 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b0a      	cmp	r3, #10
 8001dee:	d90c      	bls.n	8001e0a <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	0292      	lsls	r2, r2, #10
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2220      	movs	r2, #32
 8001e02:	2105      	movs	r1, #5
 8001e04:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0c5      	b.n	8001f96 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	d0e5      	beq.n	8001de2 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2102      	movs	r1, #2
 8001e22:	438a      	bics	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e26:	f7ff fac7 	bl	80013b8 <HAL_GetTick>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e2e:	e013      	b.n	8001e58 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e30:	f7ff fac2 	bl	80013b8 <HAL_GetTick>
 8001e34:	0002      	movs	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b0a      	cmp	r3, #10
 8001e3c:	d90c      	bls.n	8001e58 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	2280      	movs	r2, #128	; 0x80
 8001e44:	0292      	lsls	r2, r2, #10
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	2105      	movs	r1, #5
 8001e52:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e09e      	b.n	8001f96 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d1e5      	bne.n	8001e30 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7e1b      	ldrb	r3, [r3, #24]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d108      	bne.n	8001e7e <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e007      	b.n	8001e8e <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	7e5b      	ldrb	r3, [r3, #25]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d108      	bne.n	8001ea8 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2140      	movs	r1, #64	; 0x40
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e007      	b.n	8001eb8 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2140      	movs	r1, #64	; 0x40
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7e9b      	ldrb	r3, [r3, #26]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d108      	bne.n	8001ed2 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2120      	movs	r1, #32
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	e007      	b.n	8001ee2 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2120      	movs	r1, #32
 8001ede:	438a      	bics	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7edb      	ldrb	r3, [r3, #27]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d108      	bne.n	8001efc <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2110      	movs	r1, #16
 8001ef6:	438a      	bics	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e007      	b.n	8001f0c <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2110      	movs	r1, #16
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7f1b      	ldrb	r3, [r3, #28]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d108      	bne.n	8001f26 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2108      	movs	r1, #8
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	e007      	b.n	8001f36 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2108      	movs	r1, #8
 8001f32:	438a      	bics	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	7f5b      	ldrb	r3, [r3, #29]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d108      	bne.n	8001f50 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2104      	movs	r1, #4
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e007      	b.n	8001f60 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	0011      	movs	r1, r2
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	1e5a      	subs	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	2101      	movs	r1, #1
 8001f92:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b004      	add	sp, #16
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fae:	2013      	movs	r0, #19
 8001fb0:	183b      	adds	r3, r7, r0
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	2120      	movs	r1, #32
 8001fb6:	5c52      	ldrb	r2, [r2, r1]
 8001fb8:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fba:	0002      	movs	r2, r0
 8001fbc:	18bb      	adds	r3, r7, r2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d004      	beq.n	8001fce <HAL_CAN_ConfigFilter+0x30>
 8001fc4:	18bb      	adds	r3, r7, r2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d000      	beq.n	8001fce <HAL_CAN_ConfigFilter+0x30>
 8001fcc:	e0cd      	b.n	800216a <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	58d3      	ldr	r3, [r2, r3]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	0011      	movs	r1, r2
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	221f      	movs	r2, #31
 8001fea:	4013      	ands	r3, r2
 8001fec:	2201      	movs	r2, #1
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	2387      	movs	r3, #135	; 0x87
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	58d3      	ldr	r3, [r2, r3]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	43d2      	mvns	r2, r2
 8002000:	401a      	ands	r2, r3
 8002002:	0011      	movs	r1, r2
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	2387      	movs	r3, #135	; 0x87
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d129      	bne.n	8002068 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	2383      	movs	r3, #131	; 0x83
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	58d3      	ldr	r3, [r2, r3]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	43d2      	mvns	r2, r2
 8002020:	401a      	ands	r2, r3
 8002022:	0011      	movs	r1, r2
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	2383      	movs	r3, #131	; 0x83
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	041b      	lsls	r3, r3, #16
 8002038:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800203e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3248      	adds	r2, #72	; 0x48
 8002044:	00d2      	lsls	r2, r2, #3
 8002046:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800205a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800205c:	6979      	ldr	r1, [r7, #20]
 800205e:	3348      	adds	r3, #72	; 0x48
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	18cb      	adds	r3, r1, r3
 8002064:	3304      	adds	r3, #4
 8002066:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d128      	bne.n	80020c2 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	2383      	movs	r3, #131	; 0x83
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	58d2      	ldr	r2, [r2, r3]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	431a      	orrs	r2, r3
 800207c:	0011      	movs	r1, r2
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	2383      	movs	r3, #131	; 0x83
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	041b      	lsls	r3, r3, #16
 8002092:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002098:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3248      	adds	r2, #72	; 0x48
 800209e:	00d2      	lsls	r2, r2, #3
 80020a0:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	041b      	lsls	r3, r3, #16
 80020ae:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020b6:	6979      	ldr	r1, [r7, #20]
 80020b8:	3348      	adds	r3, #72	; 0x48
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	18cb      	adds	r3, r1, r3
 80020be:	3304      	adds	r3, #4
 80020c0:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	2381      	movs	r3, #129	; 0x81
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	58d3      	ldr	r3, [r2, r3]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	43d2      	mvns	r2, r2
 80020d6:	401a      	ands	r2, r3
 80020d8:	0011      	movs	r1, r2
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	2381      	movs	r3, #129	; 0x81
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	50d1      	str	r1, [r2, r3]
 80020e2:	e00a      	b.n	80020fa <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	2381      	movs	r3, #129	; 0x81
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	58d2      	ldr	r2, [r2, r3]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	0011      	movs	r1, r2
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	2381      	movs	r3, #129	; 0x81
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10c      	bne.n	800211c <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	2385      	movs	r3, #133	; 0x85
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	58d3      	ldr	r3, [r2, r3]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	43d2      	mvns	r2, r2
 800210e:	401a      	ands	r2, r3
 8002110:	0011      	movs	r1, r2
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	2385      	movs	r3, #133	; 0x85
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	50d1      	str	r1, [r2, r3]
 800211a:	e00a      	b.n	8002132 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	2385      	movs	r3, #133	; 0x85
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	58d2      	ldr	r2, [r2, r3]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	431a      	orrs	r2, r3
 8002128:	0011      	movs	r1, r2
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	2385      	movs	r3, #133	; 0x85
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d10a      	bne.n	8002150 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	2387      	movs	r3, #135	; 0x87
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	58d2      	ldr	r2, [r2, r3]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	431a      	orrs	r2, r3
 8002146:	0011      	movs	r1, r2
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	2387      	movs	r3, #135	; 0x87
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	58d3      	ldr	r3, [r2, r3]
 8002158:	2201      	movs	r2, #1
 800215a:	4393      	bics	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e007      	b.n	800217a <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	02d2      	lsls	r2, r2, #11
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
  }
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b006      	add	sp, #24
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2220      	movs	r2, #32
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d12f      	bne.n	80021f6 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2220      	movs	r2, #32
 800219a:	2102      	movs	r1, #2
 800219c:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	438a      	bics	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021ae:	f7ff f903 	bl	80013b8 <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021b6:	e013      	b.n	80021e0 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021b8:	f7ff f8fe 	bl	80013b8 <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b0a      	cmp	r3, #10
 80021c4:	d90c      	bls.n	80021e0 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	2280      	movs	r2, #128	; 0x80
 80021cc:	0292      	lsls	r2, r2, #10
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	2105      	movs	r1, #5
 80021da:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e012      	b.n	8002206 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	d1e5      	bne.n	80021b8 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e007      	b.n	8002206 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	0312      	lsls	r2, r2, #12
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
  }
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b004      	add	sp, #16
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800221c:	2017      	movs	r0, #23
 800221e:	183b      	adds	r3, r7, r0
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	2120      	movs	r1, #32
 8002224:	5c52      	ldrb	r2, [r2, r1]
 8002226:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002228:	0002      	movs	r2, r0
 800222a:	18bb      	adds	r3, r7, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d004      	beq.n	800223c <HAL_CAN_GetRxMessage+0x2e>
 8002232:	18bb      	adds	r3, r7, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d000      	beq.n	800223c <HAL_CAN_GetRxMessage+0x2e>
 800223a:	e0f8      	b.n	800242e <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10e      	bne.n	8002260 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2203      	movs	r2, #3
 800224a:	4013      	ands	r3, r2
 800224c:	d117      	bne.n	800227e <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	0392      	lsls	r2, r2, #14
 8002256:	431a      	orrs	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0ee      	b.n	800243e <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2203      	movs	r2, #3
 8002268:	4013      	ands	r3, r2
 800226a:	d108      	bne.n	800227e <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	0392      	lsls	r2, r2, #14
 8002274:	431a      	orrs	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0df      	b.n	800243e <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	321b      	adds	r2, #27
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	58d3      	ldr	r3, [r2, r3]
 800228a:	2204      	movs	r2, #4
 800228c:	401a      	ands	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10b      	bne.n	80022b2 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	321b      	adds	r2, #27
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	58d3      	ldr	r3, [r2, r3]
 80022a6:	0d5b      	lsrs	r3, r3, #21
 80022a8:	055b      	lsls	r3, r3, #21
 80022aa:	0d5a      	lsrs	r2, r3, #21
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e00a      	b.n	80022c8 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	321b      	adds	r2, #27
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	58d3      	ldr	r3, [r2, r3]
 80022be:	08db      	lsrs	r3, r3, #3
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	08da      	lsrs	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	321b      	adds	r2, #27
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	58d3      	ldr	r3, [r2, r3]
 80022d4:	2202      	movs	r2, #2
 80022d6:	401a      	ands	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	331b      	adds	r3, #27
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	18d3      	adds	r3, r2, r3
 80022e8:	3304      	adds	r3, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	220f      	movs	r2, #15
 80022ee:	401a      	ands	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	331b      	adds	r3, #27
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	18d3      	adds	r3, r2, r3
 8002300:	3304      	adds	r3, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	22ff      	movs	r2, #255	; 0xff
 8002308:	401a      	ands	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	331b      	adds	r3, #27
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	18d3      	adds	r3, r2, r3
 800231a:	3304      	adds	r3, #4
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0c1b      	lsrs	r3, r3, #16
 8002320:	041b      	lsls	r3, r3, #16
 8002322:	0c1a      	lsrs	r2, r3, #16
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6819      	ldr	r1, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	23dc      	movs	r3, #220	; 0xdc
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	188a      	adds	r2, r1, r2
 8002336:	18d3      	adds	r3, r2, r3
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	23dc      	movs	r3, #220	; 0xdc
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	188a      	adds	r2, r1, r2
 800234e:	18d3      	adds	r3, r2, r3
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0a1a      	lsrs	r2, r3, #8
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	23dc      	movs	r3, #220	; 0xdc
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	188a      	adds	r2, r1, r2
 800236a:	18d3      	adds	r3, r2, r3
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0c1a      	lsrs	r2, r3, #16
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	3302      	adds	r3, #2
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	23dc      	movs	r3, #220	; 0xdc
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	188a      	adds	r2, r1, r2
 8002386:	18d3      	adds	r3, r2, r3
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0e1a      	lsrs	r2, r3, #24
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	3303      	adds	r3, #3
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	23de      	movs	r3, #222	; 0xde
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	188a      	adds	r2, r1, r2
 80023a2:	18d3      	adds	r3, r2, r3
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	3304      	adds	r3, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6819      	ldr	r1, [r3, #0]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	23de      	movs	r3, #222	; 0xde
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	0112      	lsls	r2, r2, #4
 80023ba:	188a      	adds	r2, r1, r2
 80023bc:	18d3      	adds	r3, r2, r3
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0a1a      	lsrs	r2, r3, #8
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	3305      	adds	r3, #5
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	23de      	movs	r3, #222	; 0xde
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	188a      	adds	r2, r1, r2
 80023d8:	18d3      	adds	r3, r2, r3
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0c1a      	lsrs	r2, r3, #16
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3306      	adds	r3, #6
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6819      	ldr	r1, [r3, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	23de      	movs	r3, #222	; 0xde
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	188a      	adds	r2, r1, r2
 80023f4:	18d3      	adds	r3, r2, r3
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0e1a      	lsrs	r2, r3, #24
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	3307      	adds	r3, #7
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d108      	bne.n	800241a <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2120      	movs	r1, #32
 8002414:	430a      	orrs	r2, r1
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	e007      	b.n	800242a <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2120      	movs	r1, #32
 8002426:	430a      	orrs	r2, r1
 8002428:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e007      	b.n	800243e <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2280      	movs	r2, #128	; 0x80
 8002434:	02d2      	lsls	r2, r2, #11
 8002436:	431a      	orrs	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
  }
}
 800243e:	0018      	movs	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	b006      	add	sp, #24
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002450:	200f      	movs	r0, #15
 8002452:	183b      	adds	r3, r7, r0
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	2120      	movs	r1, #32
 8002458:	5c52      	ldrb	r2, [r2, r1]
 800245a:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800245c:	0002      	movs	r2, r0
 800245e:	18bb      	adds	r3, r7, r2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d003      	beq.n	800246e <HAL_CAN_ActivateNotification+0x28>
 8002466:	18bb      	adds	r3, r7, r2
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d109      	bne.n	8002482 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6959      	ldr	r1, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e007      	b.n	8002492 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	02d2      	lsls	r2, r2, #11
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
  }
}
 8002492:	0018      	movs	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b08a      	sub	sp, #40	; 0x28
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	2201      	movs	r2, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	d100      	bne.n	80024e0 <HAL_CAN_IRQHandler+0x46>
 80024de:	e084      	b.n	80025ea <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d024      	beq.n	8002532 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2201      	movs	r2, #1
 80024ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2202      	movs	r2, #2
 80024f4:	4013      	ands	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f000 f981 	bl	8002802 <HAL_CAN_TxMailbox0CompleteCallback>
 8002500:	e017      	b.n	8002532 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2204      	movs	r2, #4
 8002506:	4013      	ands	r3, r2
 8002508:	d005      	beq.n	8002516 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	2280      	movs	r2, #128	; 0x80
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	4313      	orrs	r3, r2
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
 8002514:	e00d      	b.n	8002532 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2208      	movs	r2, #8
 800251a:	4013      	ands	r3, r2
 800251c:	d005      	beq.n	800252a <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	0152      	lsls	r2, r2, #5
 8002524:	4313      	orrs	r3, r2
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	e003      	b.n	8002532 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0018      	movs	r0, r3
 800252e:	f000 f980 	bl	8002832 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4013      	ands	r3, r2
 800253a:	d028      	beq.n	800258e <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	0052      	lsls	r2, r2, #1
 8002544:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d004      	beq.n	800255a <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	0018      	movs	r0, r3
 8002554:	f000 f95d 	bl	8002812 <HAL_CAN_TxMailbox1CompleteCallback>
 8002558:	e019      	b.n	800258e <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4013      	ands	r3, r2
 8002562:	d005      	beq.n	8002570 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	0192      	lsls	r2, r2, #6
 800256a:	4313      	orrs	r3, r2
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
 800256e:	e00e      	b.n	800258e <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	4013      	ands	r3, r2
 8002578:	d005      	beq.n	8002586 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	2280      	movs	r2, #128	; 0x80
 800257e:	01d2      	lsls	r2, r2, #7
 8002580:	4313      	orrs	r3, r2
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	e003      	b.n	800258e <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	0018      	movs	r0, r3
 800258a:	f000 f95a 	bl	8002842 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	025b      	lsls	r3, r3, #9
 8002594:	4013      	ands	r3, r2
 8002596:	d028      	beq.n	80025ea <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	0252      	lsls	r2, r2, #9
 80025a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	4013      	ands	r3, r2
 80025aa:	d004      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	0018      	movs	r0, r3
 80025b0:	f000 f937 	bl	8002822 <HAL_CAN_TxMailbox2CompleteCallback>
 80025b4:	e019      	b.n	80025ea <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	02db      	lsls	r3, r3, #11
 80025bc:	4013      	ands	r3, r2
 80025be:	d005      	beq.n	80025cc <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	0212      	lsls	r2, r2, #8
 80025c6:	4313      	orrs	r3, r2
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ca:	e00e      	b.n	80025ea <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	031b      	lsls	r3, r3, #12
 80025d2:	4013      	ands	r3, r2
 80025d4:	d005      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	0252      	lsls	r2, r2, #9
 80025dc:	4313      	orrs	r3, r2
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
 80025e0:	e003      	b.n	80025ea <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f000 f934 	bl	8002852 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	2208      	movs	r2, #8
 80025ee:	4013      	ands	r3, r2
 80025f0:	d00c      	beq.n	800260c <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2210      	movs	r2, #16
 80025f6:	4013      	ands	r3, r2
 80025f8:	d008      	beq.n	800260c <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	0092      	lsls	r2, r2, #2
 8002600:	4313      	orrs	r3, r2
 8002602:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2210      	movs	r2, #16
 800260a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	2204      	movs	r2, #4
 8002610:	4013      	ands	r3, r2
 8002612:	d00b      	beq.n	800262c <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2208      	movs	r2, #8
 8002618:	4013      	ands	r3, r2
 800261a:	d007      	beq.n	800262c <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2208      	movs	r2, #8
 8002622:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	0018      	movs	r0, r3
 8002628:	f000 f91b 	bl	8002862 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	2202      	movs	r2, #2
 8002630:	4013      	ands	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2203      	movs	r2, #3
 800263c:	4013      	ands	r3, r2
 800263e:	d003      	beq.n	8002648 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	0018      	movs	r0, r3
 8002644:	f7fe f9e0 	bl	8000a08 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	2240      	movs	r2, #64	; 0x40
 800264c:	4013      	ands	r3, r2
 800264e:	d00c      	beq.n	800266a <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2210      	movs	r2, #16
 8002654:	4013      	ands	r3, r2
 8002656:	d008      	beq.n	800266a <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	2280      	movs	r2, #128	; 0x80
 800265c:	00d2      	lsls	r2, r2, #3
 800265e:	4313      	orrs	r3, r2
 8002660:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2210      	movs	r2, #16
 8002668:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2220      	movs	r2, #32
 800266e:	4013      	ands	r3, r2
 8002670:	d00b      	beq.n	800268a <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2208      	movs	r2, #8
 8002676:	4013      	ands	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2208      	movs	r2, #8
 8002680:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	0018      	movs	r0, r3
 8002686:	f000 f8fc 	bl	8002882 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	2210      	movs	r2, #16
 800268e:	4013      	ands	r3, r2
 8002690:	d009      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2203      	movs	r2, #3
 800269a:	4013      	ands	r3, r2
 800269c:	d003      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 f8e6 	bl	8002872 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026a6:	6a3a      	ldr	r2, [r7, #32]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	029b      	lsls	r3, r3, #10
 80026ac:	4013      	ands	r3, r2
 80026ae:	d00b      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2210      	movs	r2, #16
 80026b4:	4013      	ands	r3, r2
 80026b6:	d007      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2210      	movs	r2, #16
 80026be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 f8e5 	bl	8002892 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	025b      	lsls	r3, r3, #9
 80026ce:	4013      	ands	r3, r2
 80026d0:	d00b      	beq.n	80026ea <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	2208      	movs	r2, #8
 80026d6:	4013      	ands	r3, r2
 80026d8:	d007      	beq.n	80026ea <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2208      	movs	r2, #8
 80026e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f000 f8dc 	bl	80028a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026ea:	6a3a      	ldr	r2, [r7, #32]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	4013      	ands	r3, r2
 80026f2:	d100      	bne.n	80026f6 <HAL_CAN_IRQHandler+0x25c>
 80026f4:	e074      	b.n	80027e0 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	2204      	movs	r2, #4
 80026fa:	4013      	ands	r3, r2
 80026fc:	d100      	bne.n	8002700 <HAL_CAN_IRQHandler+0x266>
 80026fe:	e06b      	b.n	80027d8 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002700:	6a3a      	ldr	r2, [r7, #32]
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4013      	ands	r3, r2
 8002708:	d007      	beq.n	800271a <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002710:	d003      	beq.n	800271a <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	2201      	movs	r2, #1
 8002716:	4313      	orrs	r3, r2
 8002718:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800271a:	6a3a      	ldr	r2, [r7, #32]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4013      	ands	r3, r2
 8002722:	d007      	beq.n	8002734 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2202      	movs	r2, #2
 8002728:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800272a:	d003      	beq.n	8002734 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	2202      	movs	r2, #2
 8002730:	4313      	orrs	r3, r2
 8002732:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4013      	ands	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2204      	movs	r2, #4
 8002742:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002744:	d003      	beq.n	800274e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	2204      	movs	r2, #4
 800274a:	4313      	orrs	r3, r2
 800274c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800274e:	6a3a      	ldr	r2, [r7, #32]
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	4013      	ands	r3, r2
 8002756:	d03f      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2270      	movs	r2, #112	; 0x70
 800275c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800275e:	d03b      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2270      	movs	r2, #112	; 0x70
 8002764:	4013      	ands	r3, r2
 8002766:	2b60      	cmp	r3, #96	; 0x60
 8002768:	d027      	beq.n	80027ba <HAL_CAN_IRQHandler+0x320>
 800276a:	d82c      	bhi.n	80027c6 <HAL_CAN_IRQHandler+0x32c>
 800276c:	2b50      	cmp	r3, #80	; 0x50
 800276e:	d01f      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x316>
 8002770:	d829      	bhi.n	80027c6 <HAL_CAN_IRQHandler+0x32c>
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d017      	beq.n	80027a6 <HAL_CAN_IRQHandler+0x30c>
 8002776:	d826      	bhi.n	80027c6 <HAL_CAN_IRQHandler+0x32c>
 8002778:	2b30      	cmp	r3, #48	; 0x30
 800277a:	d00f      	beq.n	800279c <HAL_CAN_IRQHandler+0x302>
 800277c:	d823      	bhi.n	80027c6 <HAL_CAN_IRQHandler+0x32c>
 800277e:	2b10      	cmp	r3, #16
 8002780:	d002      	beq.n	8002788 <HAL_CAN_IRQHandler+0x2ee>
 8002782:	2b20      	cmp	r3, #32
 8002784:	d005      	beq.n	8002792 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002786:	e01e      	b.n	80027c6 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	2208      	movs	r2, #8
 800278c:	4313      	orrs	r3, r2
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002790:	e01a      	b.n	80027c8 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	2210      	movs	r2, #16
 8002796:	4313      	orrs	r3, r2
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800279a:	e015      	b.n	80027c8 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	2220      	movs	r2, #32
 80027a0:	4313      	orrs	r3, r2
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027a4:	e010      	b.n	80027c8 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	2240      	movs	r2, #64	; 0x40
 80027aa:	4313      	orrs	r3, r2
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027ae:	e00b      	b.n	80027c8 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	4313      	orrs	r3, r2
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027b8:	e006      	b.n	80027c8 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	2280      	movs	r2, #128	; 0x80
 80027be:	0052      	lsls	r2, r2, #1
 80027c0:	4313      	orrs	r3, r2
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027c4:	e000      	b.n	80027c8 <HAL_CAN_IRQHandler+0x32e>
            break;
 80027c6:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699a      	ldr	r2, [r3, #24]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2170      	movs	r1, #112	; 0x70
 80027d4:	438a      	bics	r2, r1
 80027d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2204      	movs	r2, #4
 80027de:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 f85c 	bl	80028b2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b00a      	add	sp, #40	; 0x28
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b002      	add	sp, #8
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b002      	add	sp, #8
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b002      	add	sp, #8
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	46bd      	mov	sp, r7
 800283e:	b002      	add	sp, #8
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b002      	add	sp, #8
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b002      	add	sp, #8
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b002      	add	sp, #8
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	46bd      	mov	sp, r7
 800287e:	b002      	add	sp, #8
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b002      	add	sp, #8
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	b002      	add	sp, #8
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b002      	add	sp, #8
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	0002      	movs	r2, r0
 80028cc:	1dfb      	adds	r3, r7, #7
 80028ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028d0:	1dfb      	adds	r3, r7, #7
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b7f      	cmp	r3, #127	; 0x7f
 80028d6:	d809      	bhi.n	80028ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d8:	1dfb      	adds	r3, r7, #7
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	001a      	movs	r2, r3
 80028de:	231f      	movs	r3, #31
 80028e0:	401a      	ands	r2, r3
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <__NVIC_EnableIRQ+0x30>)
 80028e4:	2101      	movs	r1, #1
 80028e6:	4091      	lsls	r1, r2
 80028e8:	000a      	movs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
  }
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	e000e100 	.word	0xe000e100

080028f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	0002      	movs	r2, r0
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002906:	1dfb      	adds	r3, r7, #7
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b7f      	cmp	r3, #127	; 0x7f
 800290c:	d828      	bhi.n	8002960 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800290e:	4a2f      	ldr	r2, [pc, #188]	; (80029cc <__NVIC_SetPriority+0xd4>)
 8002910:	1dfb      	adds	r3, r7, #7
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	b25b      	sxtb	r3, r3
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	33c0      	adds	r3, #192	; 0xc0
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	589b      	ldr	r3, [r3, r2]
 800291e:	1dfa      	adds	r2, r7, #7
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	0011      	movs	r1, r2
 8002924:	2203      	movs	r2, #3
 8002926:	400a      	ands	r2, r1
 8002928:	00d2      	lsls	r2, r2, #3
 800292a:	21ff      	movs	r1, #255	; 0xff
 800292c:	4091      	lsls	r1, r2
 800292e:	000a      	movs	r2, r1
 8002930:	43d2      	mvns	r2, r2
 8002932:	401a      	ands	r2, r3
 8002934:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	22ff      	movs	r2, #255	; 0xff
 800293c:	401a      	ands	r2, r3
 800293e:	1dfb      	adds	r3, r7, #7
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	0018      	movs	r0, r3
 8002944:	2303      	movs	r3, #3
 8002946:	4003      	ands	r3, r0
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800294c:	481f      	ldr	r0, [pc, #124]	; (80029cc <__NVIC_SetPriority+0xd4>)
 800294e:	1dfb      	adds	r3, r7, #7
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	b25b      	sxtb	r3, r3
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	430a      	orrs	r2, r1
 8002958:	33c0      	adds	r3, #192	; 0xc0
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800295e:	e031      	b.n	80029c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002960:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <__NVIC_SetPriority+0xd8>)
 8002962:	1dfb      	adds	r3, r7, #7
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	0019      	movs	r1, r3
 8002968:	230f      	movs	r3, #15
 800296a:	400b      	ands	r3, r1
 800296c:	3b08      	subs	r3, #8
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3306      	adds	r3, #6
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	18d3      	adds	r3, r2, r3
 8002976:	3304      	adds	r3, #4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	1dfa      	adds	r2, r7, #7
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	0011      	movs	r1, r2
 8002980:	2203      	movs	r2, #3
 8002982:	400a      	ands	r2, r1
 8002984:	00d2      	lsls	r2, r2, #3
 8002986:	21ff      	movs	r1, #255	; 0xff
 8002988:	4091      	lsls	r1, r2
 800298a:	000a      	movs	r2, r1
 800298c:	43d2      	mvns	r2, r2
 800298e:	401a      	ands	r2, r3
 8002990:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	019b      	lsls	r3, r3, #6
 8002996:	22ff      	movs	r2, #255	; 0xff
 8002998:	401a      	ands	r2, r3
 800299a:	1dfb      	adds	r3, r7, #7
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	0018      	movs	r0, r3
 80029a0:	2303      	movs	r3, #3
 80029a2:	4003      	ands	r3, r0
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029a8:	4809      	ldr	r0, [pc, #36]	; (80029d0 <__NVIC_SetPriority+0xd8>)
 80029aa:	1dfb      	adds	r3, r7, #7
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	001c      	movs	r4, r3
 80029b0:	230f      	movs	r3, #15
 80029b2:	4023      	ands	r3, r4
 80029b4:	3b08      	subs	r3, #8
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	430a      	orrs	r2, r1
 80029ba:	3306      	adds	r3, #6
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	18c3      	adds	r3, r0, r3
 80029c0:	3304      	adds	r3, #4
 80029c2:	601a      	str	r2, [r3, #0]
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b003      	add	sp, #12
 80029ca:	bd90      	pop	{r4, r7, pc}
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	1e5a      	subs	r2, r3, #1
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	045b      	lsls	r3, r3, #17
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d301      	bcc.n	80029ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e8:	2301      	movs	r3, #1
 80029ea:	e010      	b.n	8002a0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <SysTick_Config+0x44>)
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	3a01      	subs	r2, #1
 80029f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f4:	2301      	movs	r3, #1
 80029f6:	425b      	negs	r3, r3
 80029f8:	2103      	movs	r1, #3
 80029fa:	0018      	movs	r0, r3
 80029fc:	f7ff ff7c 	bl	80028f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <SysTick_Config+0x44>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a06:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <SysTick_Config+0x44>)
 8002a08:	2207      	movs	r2, #7
 8002a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	0018      	movs	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b002      	add	sp, #8
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	e000e010 	.word	0xe000e010

08002a1c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	210f      	movs	r1, #15
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	1c02      	adds	r2, r0, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	187b      	adds	r3, r7, r1
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	b25b      	sxtb	r3, r3
 8002a36:	0011      	movs	r1, r2
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7ff ff5d 	bl	80028f8 <__NVIC_SetPriority>
}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b004      	add	sp, #16
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	1dfb      	adds	r3, r7, #7
 8002a50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a52:	1dfb      	adds	r3, r7, #7
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	b25b      	sxtb	r3, r3
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7ff ff33 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b002      	add	sp, #8
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7ff ffaf 	bl	80029d4 <SysTick_Config>
 8002a76:	0003      	movs	r3, r0
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8e:	e155      	b.n	8002d3c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2101      	movs	r1, #1
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4091      	lsls	r1, r2
 8002a9a:	000a      	movs	r2, r1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d100      	bne.n	8002aa8 <HAL_GPIO_Init+0x28>
 8002aa6:	e146      	b.n	8002d36 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2203      	movs	r2, #3
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d005      	beq.n	8002ac0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d130      	bne.n	8002b22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	409a      	lsls	r2, r3
 8002ace:	0013      	movs	r3, r2
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	0013      	movs	r3, r2
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af6:	2201      	movs	r2, #1
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
 8002afc:	0013      	movs	r3, r2
 8002afe:	43da      	mvns	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	401a      	ands	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
 8002b14:	0013      	movs	r3, r2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2203      	movs	r2, #3
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d017      	beq.n	8002b5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	0013      	movs	r3, r2
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	0013      	movs	r3, r2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2203      	movs	r2, #3
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d123      	bne.n	8002bb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3208      	adds	r2, #8
 8002b72:	0092      	lsls	r2, r2, #2
 8002b74:	58d3      	ldr	r3, [r2, r3]
 8002b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2207      	movs	r2, #7
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	220f      	movs	r2, #15
 8002b82:	409a      	lsls	r2, r3
 8002b84:	0013      	movs	r3, r2
 8002b86:	43da      	mvns	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2107      	movs	r1, #7
 8002b96:	400b      	ands	r3, r1
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	0013      	movs	r3, r2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	08da      	lsrs	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3208      	adds	r2, #8
 8002bac:	0092      	lsls	r2, r2, #2
 8002bae:	6939      	ldr	r1, [r7, #16]
 8002bb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	0013      	movs	r3, r2
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	0013      	movs	r3, r2
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	23c0      	movs	r3, #192	; 0xc0
 8002bec:	029b      	lsls	r3, r3, #10
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d100      	bne.n	8002bf4 <HAL_GPIO_Init+0x174>
 8002bf2:	e0a0      	b.n	8002d36 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf4:	4b57      	ldr	r3, [pc, #348]	; (8002d54 <HAL_GPIO_Init+0x2d4>)
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	4b56      	ldr	r3, [pc, #344]	; (8002d54 <HAL_GPIO_Init+0x2d4>)
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	619a      	str	r2, [r3, #24]
 8002c00:	4b54      	ldr	r3, [pc, #336]	; (8002d54 <HAL_GPIO_Init+0x2d4>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2201      	movs	r2, #1
 8002c06:	4013      	ands	r3, r2
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c0c:	4a52      	ldr	r2, [pc, #328]	; (8002d58 <HAL_GPIO_Init+0x2d8>)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	3302      	adds	r3, #2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	589b      	ldr	r3, [r3, r2]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	4013      	ands	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	220f      	movs	r2, #15
 8002c24:	409a      	lsls	r2, r3
 8002c26:	0013      	movs	r3, r2
 8002c28:	43da      	mvns	r2, r3
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	2390      	movs	r3, #144	; 0x90
 8002c34:	05db      	lsls	r3, r3, #23
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d019      	beq.n	8002c6e <HAL_GPIO_Init+0x1ee>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a47      	ldr	r2, [pc, #284]	; (8002d5c <HAL_GPIO_Init+0x2dc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_GPIO_Init+0x1ea>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a46      	ldr	r2, [pc, #280]	; (8002d60 <HAL_GPIO_Init+0x2e0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00d      	beq.n	8002c66 <HAL_GPIO_Init+0x1e6>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a45      	ldr	r2, [pc, #276]	; (8002d64 <HAL_GPIO_Init+0x2e4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d007      	beq.n	8002c62 <HAL_GPIO_Init+0x1e2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a44      	ldr	r2, [pc, #272]	; (8002d68 <HAL_GPIO_Init+0x2e8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_GPIO_Init+0x1de>
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	e008      	b.n	8002c70 <HAL_GPIO_Init+0x1f0>
 8002c5e:	2305      	movs	r3, #5
 8002c60:	e006      	b.n	8002c70 <HAL_GPIO_Init+0x1f0>
 8002c62:	2303      	movs	r3, #3
 8002c64:	e004      	b.n	8002c70 <HAL_GPIO_Init+0x1f0>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e002      	b.n	8002c70 <HAL_GPIO_Init+0x1f0>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_GPIO_Init+0x1f0>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	2103      	movs	r1, #3
 8002c74:	400a      	ands	r2, r1
 8002c76:	0092      	lsls	r2, r2, #2
 8002c78:	4093      	lsls	r3, r2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c80:	4935      	ldr	r1, [pc, #212]	; (8002d58 <HAL_GPIO_Init+0x2d8>)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	3302      	adds	r3, #2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c8e:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <HAL_GPIO_Init+0x2ec>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	43da      	mvns	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	025b      	lsls	r3, r3, #9
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_GPIO_Init+0x2ec>)
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	; (8002d6c <HAL_GPIO_Init+0x2ec>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	029b      	lsls	r3, r3, #10
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cdc:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <HAL_GPIO_Init+0x2ec>)
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_GPIO_Init+0x2ec>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	43da      	mvns	r2, r3
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	035b      	lsls	r3, r3, #13
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_GPIO_Init+0x2ec>)
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d0c:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <HAL_GPIO_Init+0x2ec>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	43da      	mvns	r2, r3
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	039b      	lsls	r3, r3, #14
 8002d24:	4013      	ands	r3, r2
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_GPIO_Init+0x2ec>)
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	40da      	lsrs	r2, r3
 8002d44:	1e13      	subs	r3, r2, #0
 8002d46:	d000      	beq.n	8002d4a <HAL_GPIO_Init+0x2ca>
 8002d48:	e6a2      	b.n	8002a90 <HAL_GPIO_Init+0x10>
  } 
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b006      	add	sp, #24
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40010000 	.word	0x40010000
 8002d5c:	48000400 	.word	0x48000400
 8002d60:	48000800 	.word	0x48000800
 8002d64:	48000c00 	.word	0x48000c00
 8002d68:	48001000 	.word	0x48001000
 8002d6c:	40010400 	.word	0x40010400

08002d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	000a      	movs	r2, r1
 8002d7a:	1cbb      	adds	r3, r7, #2
 8002d7c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	1cba      	adds	r2, r7, #2
 8002d84:	8812      	ldrh	r2, [r2, #0]
 8002d86:	4013      	ands	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d8a:	230f      	movs	r3, #15
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e003      	b.n	8002d9c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d94:	230f      	movs	r3, #15
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d9c:	230f      	movs	r3, #15
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	781b      	ldrb	r3, [r3, #0]
  }
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	0008      	movs	r0, r1
 8002db4:	0011      	movs	r1, r2
 8002db6:	1cbb      	adds	r3, r7, #2
 8002db8:	1c02      	adds	r2, r0, #0
 8002dba:	801a      	strh	r2, [r3, #0]
 8002dbc:	1c7b      	adds	r3, r7, #1
 8002dbe:	1c0a      	adds	r2, r1, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dc2:	1c7b      	adds	r3, r7, #1
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dca:	1cbb      	adds	r3, r7, #2
 8002dcc:	881a      	ldrh	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dd2:	e003      	b.n	8002ddc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dd4:	1cbb      	adds	r3, r7, #2
 8002dd6:	881a      	ldrh	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b002      	add	sp, #8
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	0002      	movs	r2, r0
 8002dec:	1dbb      	adds	r3, r7, #6
 8002dee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	1dba      	adds	r2, r7, #6
 8002df6:	8812      	ldrh	r2, [r2, #0]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d008      	beq.n	8002e0e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002dfe:	1dba      	adds	r2, r7, #6
 8002e00:	8812      	ldrh	r2, [r2, #0]
 8002e02:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e04:	1dbb      	adds	r3, r7, #6
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f7fd fe19 	bl	8000a40 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b002      	add	sp, #8
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	40010400 	.word	0x40010400

08002e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f000 fb76 	bl	800351c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2201      	movs	r2, #1
 8002e36:	4013      	ands	r3, r2
 8002e38:	d100      	bne.n	8002e3c <HAL_RCC_OscConfig+0x20>
 8002e3a:	e08e      	b.n	8002f5a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e3c:	4bc5      	ldr	r3, [pc, #788]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	220c      	movs	r2, #12
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d00e      	beq.n	8002e66 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e48:	4bc2      	ldr	r3, [pc, #776]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	220c      	movs	r2, #12
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d117      	bne.n	8002e84 <HAL_RCC_OscConfig+0x68>
 8002e54:	4bbf      	ldr	r3, [pc, #764]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	23c0      	movs	r3, #192	; 0xc0
 8002e5a:	025b      	lsls	r3, r3, #9
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	025b      	lsls	r3, r3, #9
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d10e      	bne.n	8002e84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e66:	4bbb      	ldr	r3, [pc, #748]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	029b      	lsls	r3, r3, #10
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d100      	bne.n	8002e74 <HAL_RCC_OscConfig+0x58>
 8002e72:	e071      	b.n	8002f58 <HAL_RCC_OscConfig+0x13c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d000      	beq.n	8002e7e <HAL_RCC_OscConfig+0x62>
 8002e7c:	e06c      	b.n	8002f58 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f000 fb4c 	bl	800351c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_OscConfig+0x80>
 8002e8c:	4bb1      	ldr	r3, [pc, #708]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4bb0      	ldr	r3, [pc, #704]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	0249      	lsls	r1, r1, #9
 8002e96:	430a      	orrs	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e02f      	b.n	8002efc <HAL_RCC_OscConfig+0xe0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10c      	bne.n	8002ebe <HAL_RCC_OscConfig+0xa2>
 8002ea4:	4bab      	ldr	r3, [pc, #684]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4baa      	ldr	r3, [pc, #680]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002eaa:	49ab      	ldr	r1, [pc, #684]	; (8003158 <HAL_RCC_OscConfig+0x33c>)
 8002eac:	400a      	ands	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	4ba8      	ldr	r3, [pc, #672]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4ba7      	ldr	r3, [pc, #668]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002eb6:	49a9      	ldr	r1, [pc, #676]	; (800315c <HAL_RCC_OscConfig+0x340>)
 8002eb8:	400a      	ands	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e01e      	b.n	8002efc <HAL_RCC_OscConfig+0xe0>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_RCC_OscConfig+0xc8>
 8002ec6:	4ba3      	ldr	r3, [pc, #652]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4ba2      	ldr	r3, [pc, #648]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002ecc:	2180      	movs	r1, #128	; 0x80
 8002ece:	02c9      	lsls	r1, r1, #11
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	4b9f      	ldr	r3, [pc, #636]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b9e      	ldr	r3, [pc, #632]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	0249      	lsls	r1, r1, #9
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0xe0>
 8002ee4:	4b9b      	ldr	r3, [pc, #620]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b9a      	ldr	r3, [pc, #616]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002eea:	499b      	ldr	r1, [pc, #620]	; (8003158 <HAL_RCC_OscConfig+0x33c>)
 8002eec:	400a      	ands	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	4b98      	ldr	r3, [pc, #608]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b97      	ldr	r3, [pc, #604]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002ef6:	4999      	ldr	r1, [pc, #612]	; (800315c <HAL_RCC_OscConfig+0x340>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d014      	beq.n	8002f2e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fa58 	bl	80013b8 <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0e:	f7fe fa53 	bl	80013b8 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b64      	cmp	r3, #100	; 0x64
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e2fd      	b.n	800351c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f20:	4b8c      	ldr	r3, [pc, #560]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	029b      	lsls	r3, r3, #10
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0xf2>
 8002f2c:	e015      	b.n	8002f5a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fa43 	bl	80013b8 <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fe fa3e 	bl	80013b8 <HAL_GetTick>
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e2e8      	b.n	800351c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	4b82      	ldr	r3, [pc, #520]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	029b      	lsls	r3, r3, #10
 8002f52:	4013      	ands	r3, r2
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x11c>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	4013      	ands	r3, r2
 8002f62:	d100      	bne.n	8002f66 <HAL_RCC_OscConfig+0x14a>
 8002f64:	e06c      	b.n	8003040 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f66:	4b7b      	ldr	r3, [pc, #492]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d00e      	beq.n	8002f8e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f70:	4b78      	ldr	r3, [pc, #480]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	220c      	movs	r2, #12
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d11f      	bne.n	8002fbc <HAL_RCC_OscConfig+0x1a0>
 8002f7c:	4b75      	ldr	r3, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	23c0      	movs	r3, #192	; 0xc0
 8002f82:	025b      	lsls	r3, r3, #9
 8002f84:	401a      	ands	r2, r3
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d116      	bne.n	8002fbc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	4b71      	ldr	r3, [pc, #452]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2202      	movs	r2, #2
 8002f94:	4013      	ands	r3, r2
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x188>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e2bb      	b.n	800351c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa4:	4b6b      	ldr	r3, [pc, #428]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	22f8      	movs	r2, #248	; 0xf8
 8002faa:	4393      	bics	r3, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00da      	lsls	r2, r3, #3
 8002fb4:	4b67      	ldr	r3, [pc, #412]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	e041      	b.n	8003040 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d024      	beq.n	800300e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc4:	4b63      	ldr	r3, [pc, #396]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b62      	ldr	r3, [pc, #392]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f9f2 	bl	80013b8 <HAL_GetTick>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fda:	f7fe f9ed 	bl	80013b8 <HAL_GetTick>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e297      	b.n	800351c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	4b59      	ldr	r3, [pc, #356]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d0f1      	beq.n	8002fda <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff6:	4b57      	ldr	r3, [pc, #348]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	22f8      	movs	r2, #248	; 0xf8
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	00da      	lsls	r2, r3, #3
 8003006:	4b53      	ldr	r3, [pc, #332]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e018      	b.n	8003040 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300e:	4b51      	ldr	r3, [pc, #324]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8003014:	2101      	movs	r1, #1
 8003016:	438a      	bics	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe f9cd 	bl	80013b8 <HAL_GetTick>
 800301e:	0003      	movs	r3, r0
 8003020:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003024:	f7fe f9c8 	bl	80013b8 <HAL_GetTick>
 8003028:	0002      	movs	r2, r0
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e272      	b.n	800351c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2202      	movs	r2, #2
 800303c:	4013      	ands	r3, r2
 800303e:	d1f1      	bne.n	8003024 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2208      	movs	r2, #8
 8003046:	4013      	ands	r3, r2
 8003048:	d036      	beq.n	80030b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d019      	beq.n	8003086 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003052:	4b40      	ldr	r3, [pc, #256]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8003054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003056:	4b3f      	ldr	r3, [pc, #252]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8003058:	2101      	movs	r1, #1
 800305a:	430a      	orrs	r2, r1
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7fe f9ab 	bl	80013b8 <HAL_GetTick>
 8003062:	0003      	movs	r3, r0
 8003064:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003068:	f7fe f9a6 	bl	80013b8 <HAL_GetTick>
 800306c:	0002      	movs	r2, r0
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e250      	b.n	800351c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	2202      	movs	r2, #2
 8003080:	4013      	ands	r3, r2
 8003082:	d0f1      	beq.n	8003068 <HAL_RCC_OscConfig+0x24c>
 8003084:	e018      	b.n	80030b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003086:	4b33      	ldr	r3, [pc, #204]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8003088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308a:	4b32      	ldr	r3, [pc, #200]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 800308c:	2101      	movs	r1, #1
 800308e:	438a      	bics	r2, r1
 8003090:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7fe f991 	bl	80013b8 <HAL_GetTick>
 8003096:	0003      	movs	r3, r0
 8003098:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309c:	f7fe f98c 	bl	80013b8 <HAL_GetTick>
 80030a0:	0002      	movs	r2, r0
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e236      	b.n	800351c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ae:	4b29      	ldr	r3, [pc, #164]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2202      	movs	r2, #2
 80030b4:	4013      	ands	r3, r2
 80030b6:	d1f1      	bne.n	800309c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2204      	movs	r2, #4
 80030be:	4013      	ands	r3, r2
 80030c0:	d100      	bne.n	80030c4 <HAL_RCC_OscConfig+0x2a8>
 80030c2:	e0b5      	b.n	8003230 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c4:	201f      	movs	r0, #31
 80030c6:	183b      	adds	r3, r7, r0
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	055b      	lsls	r3, r3, #21
 80030d4:	4013      	ands	r3, r2
 80030d6:	d110      	bne.n	80030fa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d8:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	0549      	lsls	r1, r1, #21
 80030e2:	430a      	orrs	r2, r1
 80030e4:	61da      	str	r2, [r3, #28]
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	055b      	lsls	r3, r3, #21
 80030ee:	4013      	ands	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030f4:	183b      	adds	r3, r7, r0
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fa:	4b19      	ldr	r3, [pc, #100]	; (8003160 <HAL_RCC_OscConfig+0x344>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4013      	ands	r3, r2
 8003104:	d11a      	bne.n	800313c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003106:	4b16      	ldr	r3, [pc, #88]	; (8003160 <HAL_RCC_OscConfig+0x344>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <HAL_RCC_OscConfig+0x344>)
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	0049      	lsls	r1, r1, #1
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003114:	f7fe f950 	bl	80013b8 <HAL_GetTick>
 8003118:	0003      	movs	r3, r0
 800311a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311e:	f7fe f94b 	bl	80013b8 <HAL_GetTick>
 8003122:	0002      	movs	r2, r0
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b64      	cmp	r3, #100	; 0x64
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e1f5      	b.n	800351c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_RCC_OscConfig+0x344>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4013      	ands	r3, r2
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d10f      	bne.n	8003164 <HAL_RCC_OscConfig+0x348>
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 8003146:	6a1a      	ldr	r2, [r3, #32]
 8003148:	4b02      	ldr	r3, [pc, #8]	; (8003154 <HAL_RCC_OscConfig+0x338>)
 800314a:	2101      	movs	r1, #1
 800314c:	430a      	orrs	r2, r1
 800314e:	621a      	str	r2, [r3, #32]
 8003150:	e036      	b.n	80031c0 <HAL_RCC_OscConfig+0x3a4>
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	40021000 	.word	0x40021000
 8003158:	fffeffff 	.word	0xfffeffff
 800315c:	fffbffff 	.word	0xfffbffff
 8003160:	40007000 	.word	0x40007000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10c      	bne.n	8003186 <HAL_RCC_OscConfig+0x36a>
 800316c:	4bca      	ldr	r3, [pc, #808]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 800316e:	6a1a      	ldr	r2, [r3, #32]
 8003170:	4bc9      	ldr	r3, [pc, #804]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003172:	2101      	movs	r1, #1
 8003174:	438a      	bics	r2, r1
 8003176:	621a      	str	r2, [r3, #32]
 8003178:	4bc7      	ldr	r3, [pc, #796]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	4bc6      	ldr	r3, [pc, #792]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 800317e:	2104      	movs	r1, #4
 8003180:	438a      	bics	r2, r1
 8003182:	621a      	str	r2, [r3, #32]
 8003184:	e01c      	b.n	80031c0 <HAL_RCC_OscConfig+0x3a4>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b05      	cmp	r3, #5
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x38c>
 800318e:	4bc2      	ldr	r3, [pc, #776]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003190:	6a1a      	ldr	r2, [r3, #32]
 8003192:	4bc1      	ldr	r3, [pc, #772]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003194:	2104      	movs	r1, #4
 8003196:	430a      	orrs	r2, r1
 8003198:	621a      	str	r2, [r3, #32]
 800319a:	4bbf      	ldr	r3, [pc, #764]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 800319c:	6a1a      	ldr	r2, [r3, #32]
 800319e:	4bbe      	ldr	r3, [pc, #760]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80031a0:	2101      	movs	r1, #1
 80031a2:	430a      	orrs	r2, r1
 80031a4:	621a      	str	r2, [r3, #32]
 80031a6:	e00b      	b.n	80031c0 <HAL_RCC_OscConfig+0x3a4>
 80031a8:	4bbb      	ldr	r3, [pc, #748]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80031aa:	6a1a      	ldr	r2, [r3, #32]
 80031ac:	4bba      	ldr	r3, [pc, #744]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	438a      	bics	r2, r1
 80031b2:	621a      	str	r2, [r3, #32]
 80031b4:	4bb8      	ldr	r3, [pc, #736]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80031b6:	6a1a      	ldr	r2, [r3, #32]
 80031b8:	4bb7      	ldr	r3, [pc, #732]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80031ba:	2104      	movs	r1, #4
 80031bc:	438a      	bics	r2, r1
 80031be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d014      	beq.n	80031f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c8:	f7fe f8f6 	bl	80013b8 <HAL_GetTick>
 80031cc:	0003      	movs	r3, r0
 80031ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d0:	e009      	b.n	80031e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fe f8f1 	bl	80013b8 <HAL_GetTick>
 80031d6:	0002      	movs	r2, r0
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	4aaf      	ldr	r2, [pc, #700]	; (800349c <HAL_RCC_OscConfig+0x680>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e19a      	b.n	800351c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	4bac      	ldr	r3, [pc, #688]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	2202      	movs	r2, #2
 80031ec:	4013      	ands	r3, r2
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCC_OscConfig+0x3b6>
 80031f0:	e013      	b.n	800321a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f2:	f7fe f8e1 	bl	80013b8 <HAL_GetTick>
 80031f6:	0003      	movs	r3, r0
 80031f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fa:	e009      	b.n	8003210 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fe f8dc 	bl	80013b8 <HAL_GetTick>
 8003200:	0002      	movs	r2, r0
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	4aa5      	ldr	r2, [pc, #660]	; (800349c <HAL_RCC_OscConfig+0x680>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e185      	b.n	800351c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003210:	4ba1      	ldr	r3, [pc, #644]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	2202      	movs	r2, #2
 8003216:	4013      	ands	r3, r2
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800321a:	231f      	movs	r3, #31
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d105      	bne.n	8003230 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003224:	4b9c      	ldr	r3, [pc, #624]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003226:	69da      	ldr	r2, [r3, #28]
 8003228:	4b9b      	ldr	r3, [pc, #620]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 800322a:	499d      	ldr	r1, [pc, #628]	; (80034a0 <HAL_RCC_OscConfig+0x684>)
 800322c:	400a      	ands	r2, r1
 800322e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2210      	movs	r2, #16
 8003236:	4013      	ands	r3, r2
 8003238:	d063      	beq.n	8003302 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d12a      	bne.n	8003298 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003242:	4b95      	ldr	r3, [pc, #596]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003246:	4b94      	ldr	r3, [pc, #592]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003248:	2104      	movs	r1, #4
 800324a:	430a      	orrs	r2, r1
 800324c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800324e:	4b92      	ldr	r3, [pc, #584]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003252:	4b91      	ldr	r3, [pc, #580]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003254:	2101      	movs	r1, #1
 8003256:	430a      	orrs	r2, r1
 8003258:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325a:	f7fe f8ad 	bl	80013b8 <HAL_GetTick>
 800325e:	0003      	movs	r3, r0
 8003260:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003264:	f7fe f8a8 	bl	80013b8 <HAL_GetTick>
 8003268:	0002      	movs	r2, r0
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e152      	b.n	800351c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003276:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	2202      	movs	r2, #2
 800327c:	4013      	ands	r3, r2
 800327e:	d0f1      	beq.n	8003264 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003280:	4b85      	ldr	r3, [pc, #532]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	22f8      	movs	r2, #248	; 0xf8
 8003286:	4393      	bics	r3, r2
 8003288:	0019      	movs	r1, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	00da      	lsls	r2, r3, #3
 8003290:	4b81      	ldr	r3, [pc, #516]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003292:	430a      	orrs	r2, r1
 8003294:	635a      	str	r2, [r3, #52]	; 0x34
 8003296:	e034      	b.n	8003302 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	3305      	adds	r3, #5
 800329e:	d111      	bne.n	80032c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032a0:	4b7d      	ldr	r3, [pc, #500]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80032a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a4:	4b7c      	ldr	r3, [pc, #496]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80032a6:	2104      	movs	r1, #4
 80032a8:	438a      	bics	r2, r1
 80032aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032ac:	4b7a      	ldr	r3, [pc, #488]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80032ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b0:	22f8      	movs	r2, #248	; 0xf8
 80032b2:	4393      	bics	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	00da      	lsls	r2, r3, #3
 80032bc:	4b76      	ldr	r3, [pc, #472]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80032be:	430a      	orrs	r2, r1
 80032c0:	635a      	str	r2, [r3, #52]	; 0x34
 80032c2:	e01e      	b.n	8003302 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80032c4:	4b74      	ldr	r3, [pc, #464]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80032c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c8:	4b73      	ldr	r3, [pc, #460]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80032ca:	2104      	movs	r1, #4
 80032cc:	430a      	orrs	r2, r1
 80032ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80032d0:	4b71      	ldr	r3, [pc, #452]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80032d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d4:	4b70      	ldr	r3, [pc, #448]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80032d6:	2101      	movs	r1, #1
 80032d8:	438a      	bics	r2, r1
 80032da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032dc:	f7fe f86c 	bl	80013b8 <HAL_GetTick>
 80032e0:	0003      	movs	r3, r0
 80032e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80032e6:	f7fe f867 	bl	80013b8 <HAL_GetTick>
 80032ea:	0002      	movs	r2, r0
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e111      	b.n	800351c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80032f8:	4b67      	ldr	r3, [pc, #412]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	2202      	movs	r2, #2
 80032fe:	4013      	ands	r3, r2
 8003300:	d1f1      	bne.n	80032e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2220      	movs	r2, #32
 8003308:	4013      	ands	r3, r2
 800330a:	d05c      	beq.n	80033c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800330c:	4b62      	ldr	r3, [pc, #392]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	220c      	movs	r2, #12
 8003312:	4013      	ands	r3, r2
 8003314:	2b0c      	cmp	r3, #12
 8003316:	d00e      	beq.n	8003336 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003318:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	220c      	movs	r2, #12
 800331e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003320:	2b08      	cmp	r3, #8
 8003322:	d114      	bne.n	800334e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003324:	4b5c      	ldr	r3, [pc, #368]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	23c0      	movs	r3, #192	; 0xc0
 800332a:	025b      	lsls	r3, r3, #9
 800332c:	401a      	ands	r2, r3
 800332e:	23c0      	movs	r3, #192	; 0xc0
 8003330:	025b      	lsls	r3, r3, #9
 8003332:	429a      	cmp	r2, r3
 8003334:	d10b      	bne.n	800334e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003336:	4b58      	ldr	r3, [pc, #352]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	025b      	lsls	r3, r3, #9
 800333e:	4013      	ands	r3, r2
 8003340:	d040      	beq.n	80033c4 <HAL_RCC_OscConfig+0x5a8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d03c      	beq.n	80033c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0e6      	b.n	800351c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d01b      	beq.n	800338e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003356:	4b50      	ldr	r3, [pc, #320]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335a:	4b4f      	ldr	r3, [pc, #316]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	0249      	lsls	r1, r1, #9
 8003360:	430a      	orrs	r2, r1
 8003362:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe f828 	bl	80013b8 <HAL_GetTick>
 8003368:	0003      	movs	r3, r0
 800336a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800336e:	f7fe f823 	bl	80013b8 <HAL_GetTick>
 8003372:	0002      	movs	r2, r0
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0cd      	b.n	800351c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003380:	4b45      	ldr	r3, [pc, #276]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	025b      	lsls	r3, r3, #9
 8003388:	4013      	ands	r3, r2
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x552>
 800338c:	e01b      	b.n	80033c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800338e:	4b42      	ldr	r3, [pc, #264]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003392:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003394:	4943      	ldr	r1, [pc, #268]	; (80034a4 <HAL_RCC_OscConfig+0x688>)
 8003396:	400a      	ands	r2, r1
 8003398:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7fe f80d 	bl	80013b8 <HAL_GetTick>
 800339e:	0003      	movs	r3, r0
 80033a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033a4:	f7fe f808 	bl	80013b8 <HAL_GetTick>
 80033a8:	0002      	movs	r2, r0
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0b2      	b.n	800351c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033b6:	4b38      	ldr	r3, [pc, #224]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80033b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	025b      	lsls	r3, r3, #9
 80033be:	4013      	ands	r3, r2
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x588>
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80033c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d100      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5b4>
 80033ce:	e0a4      	b.n	800351a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d0:	4b31      	ldr	r3, [pc, #196]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	220c      	movs	r2, #12
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d100      	bne.n	80033de <HAL_RCC_OscConfig+0x5c2>
 80033dc:	e078      	b.n	80034d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d14c      	bne.n	8003480 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 80033ec:	492e      	ldr	r1, [pc, #184]	; (80034a8 <HAL_RCC_OscConfig+0x68c>)
 80033ee:	400a      	ands	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7fd ffe1 	bl	80013b8 <HAL_GetTick>
 80033f6:	0003      	movs	r3, r0
 80033f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fd ffdc 	bl	80013b8 <HAL_GetTick>
 8003400:	0002      	movs	r2, r0
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e086      	b.n	800351c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340e:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	049b      	lsls	r3, r3, #18
 8003416:	4013      	ands	r3, r2
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800341a:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	220f      	movs	r2, #15
 8003420:	4393      	bics	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 800342a:	430a      	orrs	r2, r1
 800342c:	62da      	str	r2, [r3, #44]	; 0x2c
 800342e:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <HAL_RCC_OscConfig+0x690>)
 8003434:	4013      	ands	r3, r2
 8003436:	0019      	movs	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	431a      	orrs	r2, r3
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003444:	430a      	orrs	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003448:	4b13      	ldr	r3, [pc, #76]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b12      	ldr	r3, [pc, #72]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	0449      	lsls	r1, r1, #17
 8003452:	430a      	orrs	r2, r1
 8003454:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7fd ffaf 	bl	80013b8 <HAL_GetTick>
 800345a:	0003      	movs	r3, r0
 800345c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003460:	f7fd ffaa 	bl	80013b8 <HAL_GetTick>
 8003464:	0002      	movs	r2, r0
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e054      	b.n	800351c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	049b      	lsls	r3, r3, #18
 800347a:	4013      	ands	r3, r2
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0x644>
 800347e:	e04c      	b.n	800351a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_RCC_OscConfig+0x67c>)
 8003486:	4908      	ldr	r1, [pc, #32]	; (80034a8 <HAL_RCC_OscConfig+0x68c>)
 8003488:	400a      	ands	r2, r1
 800348a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fd ff94 	bl	80013b8 <HAL_GetTick>
 8003490:	0003      	movs	r3, r0
 8003492:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x6a6>
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	40021000 	.word	0x40021000
 800349c:	00001388 	.word	0x00001388
 80034a0:	efffffff 	.word	0xefffffff
 80034a4:	fffeffff 	.word	0xfffeffff
 80034a8:	feffffff 	.word	0xfeffffff
 80034ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fd ff82 	bl	80013b8 <HAL_GetTick>
 80034b4:	0002      	movs	r2, r0
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e02c      	b.n	800351c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <HAL_RCC_OscConfig+0x708>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	049b      	lsls	r3, r3, #18
 80034ca:	4013      	ands	r3, r2
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x694>
 80034ce:	e024      	b.n	800351a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e01f      	b.n	800351c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCC_OscConfig+0x708>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_RCC_OscConfig+0x708>)
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	23c0      	movs	r3, #192	; 0xc0
 80034ec:	025b      	lsls	r3, r3, #9
 80034ee:	401a      	ands	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d10e      	bne.n	8003516 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	220f      	movs	r2, #15
 80034fc:	401a      	ands	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d107      	bne.n	8003516 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	23f0      	movs	r3, #240	; 0xf0
 800350a:	039b      	lsls	r3, r3, #14
 800350c:	401a      	ands	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d001      	beq.n	800351a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b008      	add	sp, #32
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000

08003528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0bf      	b.n	80036bc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800353c:	4b61      	ldr	r3, [pc, #388]	; (80036c4 <HAL_RCC_ClockConfig+0x19c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2201      	movs	r2, #1
 8003542:	4013      	ands	r3, r2
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d911      	bls.n	800356e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b5e      	ldr	r3, [pc, #376]	; (80036c4 <HAL_RCC_ClockConfig+0x19c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2201      	movs	r2, #1
 8003550:	4393      	bics	r3, r2
 8003552:	0019      	movs	r1, r3
 8003554:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <HAL_RCC_ClockConfig+0x19c>)
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_ClockConfig+0x19c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2201      	movs	r2, #1
 8003562:	4013      	ands	r3, r2
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d001      	beq.n	800356e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e0a6      	b.n	80036bc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2202      	movs	r2, #2
 8003574:	4013      	ands	r3, r2
 8003576:	d015      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2204      	movs	r2, #4
 800357e:	4013      	ands	r3, r2
 8003580:	d006      	beq.n	8003590 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003582:	4b51      	ldr	r3, [pc, #324]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	4b50      	ldr	r3, [pc, #320]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003588:	21e0      	movs	r1, #224	; 0xe0
 800358a:	00c9      	lsls	r1, r1, #3
 800358c:	430a      	orrs	r2, r1
 800358e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b4d      	ldr	r3, [pc, #308]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	22f0      	movs	r2, #240	; 0xf0
 8003596:	4393      	bics	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	4b4a      	ldr	r3, [pc, #296]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2201      	movs	r2, #1
 80035aa:	4013      	ands	r3, r2
 80035ac:	d04c      	beq.n	8003648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b44      	ldr	r3, [pc, #272]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	029b      	lsls	r3, r3, #10
 80035be:	4013      	ands	r3, r2
 80035c0:	d120      	bne.n	8003604 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07a      	b.n	80036bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	049b      	lsls	r3, r3, #18
 80035d6:	4013      	ands	r3, r2
 80035d8:	d114      	bne.n	8003604 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06e      	b.n	80036bc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80035e6:	4b38      	ldr	r3, [pc, #224]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 80035e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	025b      	lsls	r3, r3, #9
 80035ee:	4013      	ands	r3, r2
 80035f0:	d108      	bne.n	8003604 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e062      	b.n	80036bc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f6:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2202      	movs	r2, #2
 80035fc:	4013      	ands	r3, r2
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e05b      	b.n	80036bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003604:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2203      	movs	r2, #3
 800360a:	4393      	bics	r3, r2
 800360c:	0019      	movs	r1, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	4b2d      	ldr	r3, [pc, #180]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003618:	f7fd fece 	bl	80013b8 <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003620:	e009      	b.n	8003636 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003622:	f7fd fec9 	bl	80013b8 <HAL_GetTick>
 8003626:	0002      	movs	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	4a27      	ldr	r2, [pc, #156]	; (80036cc <HAL_RCC_ClockConfig+0x1a4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e042      	b.n	80036bc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	220c      	movs	r2, #12
 800363c:	401a      	ands	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	429a      	cmp	r2, r3
 8003646:	d1ec      	bne.n	8003622 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003648:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <HAL_RCC_ClockConfig+0x19c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2201      	movs	r2, #1
 800364e:	4013      	ands	r3, r2
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d211      	bcs.n	800367a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <HAL_RCC_ClockConfig+0x19c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2201      	movs	r2, #1
 800365c:	4393      	bics	r3, r2
 800365e:	0019      	movs	r1, r3
 8003660:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <HAL_RCC_ClockConfig+0x19c>)
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003668:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x19c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2201      	movs	r2, #1
 800366e:	4013      	ands	r3, r2
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d001      	beq.n	800367a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e020      	b.n	80036bc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2204      	movs	r2, #4
 8003680:	4013      	ands	r3, r2
 8003682:	d009      	beq.n	8003698 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003684:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <HAL_RCC_ClockConfig+0x1a8>)
 800368a:	4013      	ands	r3, r2
 800368c:	0019      	movs	r1, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003698:	f000 f820 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800369c:	0001      	movs	r1, r0
 800369e:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <HAL_RCC_ClockConfig+0x1a0>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	220f      	movs	r2, #15
 80036a6:	4013      	ands	r3, r2
 80036a8:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_RCC_ClockConfig+0x1ac>)
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	000a      	movs	r2, r1
 80036ae:	40da      	lsrs	r2, r3
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_RCC_ClockConfig+0x1b0>)
 80036b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036b4:	2003      	movs	r0, #3
 80036b6:	f7fd fe39 	bl	800132c <HAL_InitTick>
  
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	b004      	add	sp, #16
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40022000 	.word	0x40022000
 80036c8:	40021000 	.word	0x40021000
 80036cc:	00001388 	.word	0x00001388
 80036d0:	fffff8ff 	.word	0xfffff8ff
 80036d4:	08004070 	.word	0x08004070
 80036d8:	20000000 	.word	0x20000000

080036dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b08f      	sub	sp, #60	; 0x3c
 80036e0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80036e2:	2314      	movs	r3, #20
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	4a38      	ldr	r2, [pc, #224]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xec>)
 80036e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80036ea:	c313      	stmia	r3!, {r0, r1, r4}
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80036f0:	1d3b      	adds	r3, r7, #4
 80036f2:	4a36      	ldr	r2, [pc, #216]	; (80037cc <HAL_RCC_GetSysClockFreq+0xf0>)
 80036f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80036f6:	c313      	stmia	r3!, {r0, r1, r4}
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003700:	2300      	movs	r3, #0
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
 8003704:	2300      	movs	r3, #0
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003710:	4b2f      	ldr	r3, [pc, #188]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	220c      	movs	r2, #12
 800371a:	4013      	ands	r3, r2
 800371c:	2b0c      	cmp	r3, #12
 800371e:	d047      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0xd4>
 8003720:	d849      	bhi.n	80037b6 <HAL_RCC_GetSysClockFreq+0xda>
 8003722:	2b04      	cmp	r3, #4
 8003724:	d002      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x50>
 8003726:	2b08      	cmp	r3, #8
 8003728:	d003      	beq.n	8003732 <HAL_RCC_GetSysClockFreq+0x56>
 800372a:	e044      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800372c:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800372e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003730:	e044      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	0c9b      	lsrs	r3, r3, #18
 8003736:	220f      	movs	r2, #15
 8003738:	4013      	ands	r3, r2
 800373a:	2214      	movs	r2, #20
 800373c:	18ba      	adds	r2, r7, r2
 800373e:	5cd3      	ldrb	r3, [r2, r3]
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003742:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	220f      	movs	r2, #15
 8003748:	4013      	ands	r3, r2
 800374a:	1d3a      	adds	r2, r7, #4
 800374c:	5cd3      	ldrb	r3, [r2, r3]
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003752:	23c0      	movs	r3, #192	; 0xc0
 8003754:	025b      	lsls	r3, r3, #9
 8003756:	401a      	ands	r2, r3
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	025b      	lsls	r3, r3, #9
 800375c:	429a      	cmp	r2, r3
 800375e:	d109      	bne.n	8003774 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003762:	481c      	ldr	r0, [pc, #112]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003764:	f7fc fcce 	bl	8000104 <__udivsi3>
 8003768:	0003      	movs	r3, r0
 800376a:	001a      	movs	r2, r3
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	4353      	muls	r3, r2
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
 8003772:	e01a      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003776:	23c0      	movs	r3, #192	; 0xc0
 8003778:	025b      	lsls	r3, r3, #9
 800377a:	401a      	ands	r2, r3
 800377c:	23c0      	movs	r3, #192	; 0xc0
 800377e:	025b      	lsls	r3, r3, #9
 8003780:	429a      	cmp	r2, r3
 8003782:	d109      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003786:	4814      	ldr	r0, [pc, #80]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003788:	f7fc fcbc 	bl	8000104 <__udivsi3>
 800378c:	0003      	movs	r3, r0
 800378e:	001a      	movs	r2, r3
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	4353      	muls	r3, r2
 8003794:	637b      	str	r3, [r7, #52]	; 0x34
 8003796:	e008      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800379a:	4810      	ldr	r0, [pc, #64]	; (80037dc <HAL_RCC_GetSysClockFreq+0x100>)
 800379c:	f7fc fcb2 	bl	8000104 <__udivsi3>
 80037a0:	0003      	movs	r3, r0
 80037a2:	001a      	movs	r2, r3
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	4353      	muls	r3, r2
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80037aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037ae:	e005      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037b4:	e002      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_RCC_GetSysClockFreq+0x100>)
 80037b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b00f      	add	sp, #60	; 0x3c
 80037c4:	bd90      	pop	{r4, r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	08004050 	.word	0x08004050
 80037cc:	08004060 	.word	0x08004060
 80037d0:	40021000 	.word	0x40021000
 80037d4:	00b71b00 	.word	0x00b71b00
 80037d8:	02dc6c00 	.word	0x02dc6c00
 80037dc:	007a1200 	.word	0x007a1200

080037e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0a8      	b.n	8003944 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	2382      	movs	r3, #130	; 0x82
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	429a      	cmp	r2, r3
 8003804:	d009      	beq.n	800381a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	61da      	str	r2, [r3, #28]
 800380c:	e005      	b.n	800381a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	225d      	movs	r2, #93	; 0x5d
 8003824:	5c9b      	ldrb	r3, [r3, r2]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d107      	bne.n	800383c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	225c      	movs	r2, #92	; 0x5c
 8003830:	2100      	movs	r1, #0
 8003832:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0018      	movs	r0, r3
 8003838:	f7fd fc7e 	bl	8001138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	225d      	movs	r2, #93	; 0x5d
 8003840:	2102      	movs	r1, #2
 8003842:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2140      	movs	r1, #64	; 0x40
 8003850:	438a      	bics	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	23e0      	movs	r3, #224	; 0xe0
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	429a      	cmp	r2, r3
 800385e:	d902      	bls.n	8003866 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e002      	b.n	800386c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	015b      	lsls	r3, r3, #5
 800386a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	23f0      	movs	r3, #240	; 0xf0
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	429a      	cmp	r2, r3
 8003876:	d008      	beq.n	800388a <HAL_SPI_Init+0xaa>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	23e0      	movs	r3, #224	; 0xe0
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	429a      	cmp	r2, r3
 8003882:	d002      	beq.n	800388a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	2382      	movs	r3, #130	; 0x82
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	401a      	ands	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6899      	ldr	r1, [r3, #8]
 8003898:	2384      	movs	r3, #132	; 0x84
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	400b      	ands	r3, r1
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2102      	movs	r1, #2
 80038a6:	400b      	ands	r3, r1
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	2101      	movs	r1, #1
 80038b0:	400b      	ands	r3, r1
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6999      	ldr	r1, [r3, #24]
 80038b8:	2380      	movs	r3, #128	; 0x80
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	400b      	ands	r3, r1
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	2138      	movs	r1, #56	; 0x38
 80038c6:	400b      	ands	r3, r1
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	400b      	ands	r3, r1
 80038d2:	431a      	orrs	r2, r3
 80038d4:	0011      	movs	r1, r2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	401a      	ands	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	2204      	movs	r2, #4
 80038f0:	401a      	ands	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	2110      	movs	r1, #16
 80038f8:	400b      	ands	r3, r1
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003900:	2108      	movs	r1, #8
 8003902:	400b      	ands	r3, r1
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68d9      	ldr	r1, [r3, #12]
 800390a:	23f0      	movs	r3, #240	; 0xf0
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	400b      	ands	r3, r1
 8003910:	431a      	orrs	r2, r3
 8003912:	0011      	movs	r1, r2
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	015b      	lsls	r3, r3, #5
 800391a:	401a      	ands	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4907      	ldr	r1, [pc, #28]	; (800394c <HAL_SPI_Init+0x16c>)
 8003930:	400a      	ands	r2, r1
 8003932:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	225d      	movs	r2, #93	; 0x5d
 800393e:	2101      	movs	r1, #1
 8003940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b004      	add	sp, #16
 800394a:	bd80      	pop	{r7, pc}
 800394c:	fffff7ff 	.word	0xfffff7ff

08003950 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	001a      	movs	r2, r3
 800395e:	1cbb      	adds	r3, r7, #2
 8003960:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003962:	2301      	movs	r3, #1
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003966:	2323      	movs	r3, #35	; 0x23
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	225c      	movs	r2, #92	; 0x5c
 8003972:	5c9b      	ldrb	r3, [r3, r2]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_SPI_TransmitReceive+0x2c>
 8003978:	2302      	movs	r3, #2
 800397a:	e1b5      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x398>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	225c      	movs	r2, #92	; 0x5c
 8003980:	2101      	movs	r1, #1
 8003982:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003984:	f7fd fd18 	bl	80013b8 <HAL_GetTick>
 8003988:	0003      	movs	r3, r0
 800398a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800398c:	201b      	movs	r0, #27
 800398e:	183b      	adds	r3, r7, r0
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	215d      	movs	r1, #93	; 0x5d
 8003994:	5c52      	ldrb	r2, [r2, r1]
 8003996:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800399e:	2312      	movs	r3, #18
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	1cba      	adds	r2, r7, #2
 80039a4:	8812      	ldrh	r2, [r2, #0]
 80039a6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039a8:	183b      	adds	r3, r7, r0
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d011      	beq.n	80039d4 <HAL_SPI_TransmitReceive+0x84>
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	2382      	movs	r3, #130	; 0x82
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d107      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x7a>
 80039c2:	183b      	adds	r3, r7, r0
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d004      	beq.n	80039d4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80039ca:	2323      	movs	r3, #35	; 0x23
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	2202      	movs	r2, #2
 80039d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80039d2:	e17e      	b.n	8003cd2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d006      	beq.n	80039e8 <HAL_SPI_TransmitReceive+0x98>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_SPI_TransmitReceive+0x98>
 80039e0:	1cbb      	adds	r3, r7, #2
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80039e8:	2323      	movs	r3, #35	; 0x23
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
    goto error;
 80039f0:	e16f      	b.n	8003cd2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	225d      	movs	r2, #93	; 0x5d
 80039f6:	5c9b      	ldrb	r3, [r3, r2]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d003      	beq.n	8003a06 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	225d      	movs	r2, #93	; 0x5d
 8003a02:	2105      	movs	r1, #5
 8003a04:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1cba      	adds	r2, r7, #2
 8003a16:	2146      	movs	r1, #70	; 0x46
 8003a18:	8812      	ldrh	r2, [r2, #0]
 8003a1a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1cba      	adds	r2, r7, #2
 8003a20:	2144      	movs	r1, #68	; 0x44
 8003a22:	8812      	ldrh	r2, [r2, #0]
 8003a24:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1cba      	adds	r2, r7, #2
 8003a30:	8812      	ldrh	r2, [r2, #0]
 8003a32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1cba      	adds	r2, r7, #2
 8003a38:	8812      	ldrh	r2, [r2, #0]
 8003a3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	23e0      	movs	r3, #224	; 0xe0
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d908      	bls.n	8003a66 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	49a4      	ldr	r1, [pc, #656]	; (8003cf0 <HAL_SPI_TransmitReceive+0x3a0>)
 8003a60:	400a      	ands	r2, r1
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	e008      	b.n	8003a78 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2180      	movs	r1, #128	; 0x80
 8003a72:	0149      	lsls	r1, r1, #5
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2240      	movs	r2, #64	; 0x40
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d007      	beq.n	8003a96 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2140      	movs	r1, #64	; 0x40
 8003a92:	430a      	orrs	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	23e0      	movs	r3, #224	; 0xe0
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d800      	bhi.n	8003aa4 <HAL_SPI_TransmitReceive+0x154>
 8003aa2:	e07f      	b.n	8003ba4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_SPI_TransmitReceive+0x168>
 8003aac:	2312      	movs	r3, #18
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d000      	beq.n	8003ab8 <HAL_SPI_TransmitReceive+0x168>
 8003ab6:	e069      	b.n	8003b8c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	881a      	ldrh	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	1c9a      	adds	r2, r3, #2
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003adc:	e056      	b.n	8003b8c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d11b      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x1d4>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_SPI_TransmitReceive+0x1d4>
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d113      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	881a      	ldrh	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	1c9a      	adds	r2, r3, #2
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d11c      	bne.n	8003b6c <HAL_SPI_TransmitReceive+0x21c>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2246      	movs	r2, #70	; 0x46
 8003b36:	5a9b      	ldrh	r3, [r3, r2]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d016      	beq.n	8003b6c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	b292      	uxth	r2, r2
 8003b4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	1c9a      	adds	r2, r3, #2
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2246      	movs	r2, #70	; 0x46
 8003b5a:	5a9b      	ldrh	r3, [r3, r2]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b299      	uxth	r1, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2246      	movs	r2, #70	; 0x46
 8003b66:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b6c:	f7fd fc24 	bl	80013b8 <HAL_GetTick>
 8003b70:	0002      	movs	r2, r0
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d807      	bhi.n	8003b8c <HAL_SPI_TransmitReceive+0x23c>
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	3301      	adds	r3, #1
 8003b80:	d004      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003b82:	2323      	movs	r3, #35	; 0x23
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	2203      	movs	r2, #3
 8003b88:	701a      	strb	r2, [r3, #0]
        goto error;
 8003b8a:	e0a2      	b.n	8003cd2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1a3      	bne.n	8003ade <HAL_SPI_TransmitReceive+0x18e>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2246      	movs	r2, #70	; 0x46
 8003b9a:	5a9b      	ldrh	r3, [r3, r2]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d19d      	bne.n	8003ade <HAL_SPI_TransmitReceive+0x18e>
 8003ba2:	e085      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x268>
 8003bac:	2312      	movs	r3, #18
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d000      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x268>
 8003bb6:	e070      	b.n	8003c9a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	7812      	ldrb	r2, [r2, #0]
 8003bc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bde:	e05c      	b.n	8003c9a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2202      	movs	r2, #2
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d11c      	bne.n	8003c28 <HAL_SPI_TransmitReceive+0x2d8>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d017      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x2d8>
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d114      	bne.n	8003c28 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	330c      	adds	r3, #12
 8003c08:	7812      	ldrb	r2, [r2, #0]
 8003c0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d11e      	bne.n	8003c74 <HAL_SPI_TransmitReceive+0x324>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2246      	movs	r2, #70	; 0x46
 8003c3a:	5a9b      	ldrh	r3, [r3, r2]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d018      	beq.n	8003c74 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	001a      	movs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	7812      	ldrb	r2, [r2, #0]
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2246      	movs	r2, #70	; 0x46
 8003c62:	5a9b      	ldrh	r3, [r3, r2]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b299      	uxth	r1, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2246      	movs	r2, #70	; 0x46
 8003c6e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c70:	2301      	movs	r3, #1
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c74:	f7fd fba0 	bl	80013b8 <HAL_GetTick>
 8003c78:	0002      	movs	r2, r0
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d802      	bhi.n	8003c8a <HAL_SPI_TransmitReceive+0x33a>
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	3301      	adds	r3, #1
 8003c88:	d102      	bne.n	8003c90 <HAL_SPI_TransmitReceive+0x340>
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d104      	bne.n	8003c9a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003c90:	2323      	movs	r3, #35	; 0x23
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	2203      	movs	r2, #3
 8003c96:	701a      	strb	r2, [r3, #0]
        goto error;
 8003c98:	e01b      	b.n	8003cd2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d19d      	bne.n	8003be0 <HAL_SPI_TransmitReceive+0x290>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2246      	movs	r2, #70	; 0x46
 8003ca8:	5a9b      	ldrh	r3, [r3, r2]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d197      	bne.n	8003be0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 f94c 	bl	8003f54 <SPI_EndRxTxTransaction>
 8003cbc:	1e03      	subs	r3, r0, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003cc0:	2323      	movs	r3, #35	; 0x23
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	661a      	str	r2, [r3, #96]	; 0x60
 8003cce:	e000      	b.n	8003cd2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003cd0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	225d      	movs	r2, #93	; 0x5d
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	225c      	movs	r2, #92	; 0x5c
 8003cde:	2100      	movs	r1, #0
 8003ce0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ce2:	2323      	movs	r3, #35	; 0x23
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	781b      	ldrb	r3, [r3, #0]
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b00a      	add	sp, #40	; 0x28
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	ffffefff 	.word	0xffffefff

08003cf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	1dfb      	adds	r3, r7, #7
 8003d02:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d04:	f7fd fb58 	bl	80013b8 <HAL_GetTick>
 8003d08:	0002      	movs	r2, r0
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	18d3      	adds	r3, r2, r3
 8003d12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d14:	f7fd fb50 	bl	80013b8 <HAL_GetTick>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d1c:	4b3a      	ldr	r3, [pc, #232]	; (8003e08 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	015b      	lsls	r3, r3, #5
 8003d22:	0d1b      	lsrs	r3, r3, #20
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	4353      	muls	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d2a:	e058      	b.n	8003dde <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	d055      	beq.n	8003dde <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d32:	f7fd fb41 	bl	80013b8 <HAL_GetTick>
 8003d36:	0002      	movs	r2, r0
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d902      	bls.n	8003d48 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d142      	bne.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	21e0      	movs	r1, #224	; 0xe0
 8003d54:	438a      	bics	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	2382      	movs	r3, #130	; 0x82
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d113      	bne.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d005      	beq.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d107      	bne.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2140      	movs	r1, #64	; 0x40
 8003d88:	438a      	bics	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	019b      	lsls	r3, r3, #6
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d110      	bne.n	8003dba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	491a      	ldr	r1, [pc, #104]	; (8003e0c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003da4:	400a      	ands	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2180      	movs	r1, #128	; 0x80
 8003db4:	0189      	lsls	r1, r1, #6
 8003db6:	430a      	orrs	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	225d      	movs	r2, #93	; 0x5d
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	225c      	movs	r2, #92	; 0x5c
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e017      	b.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	4013      	ands	r3, r2
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	425a      	negs	r2, r3
 8003dee:	4153      	adcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	001a      	movs	r2, r3
 8003df4:	1dfb      	adds	r3, r7, #7
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d197      	bne.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b008      	add	sp, #32
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	ffffdfff 	.word	0xffffdfff

08003e10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e1e:	2317      	movs	r3, #23
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e26:	f7fd fac7 	bl	80013b8 <HAL_GetTick>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003e36:	f7fd fabf 	bl	80013b8 <HAL_GetTick>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e46:	4b41      	ldr	r3, [pc, #260]	; (8003f4c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	0013      	movs	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	00da      	lsls	r2, r3, #3
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	0d1b      	lsrs	r3, r3, #20
 8003e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e58:	4353      	muls	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e5c:	e068      	b.n	8003f30 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	23c0      	movs	r3, #192	; 0xc0
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d10a      	bne.n	8003e7e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d107      	bne.n	8003e7e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	2117      	movs	r1, #23
 8003e76:	187b      	adds	r3, r7, r1
 8003e78:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	d055      	beq.n	8003f30 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e84:	f7fd fa98 	bl	80013b8 <HAL_GetTick>
 8003e88:	0002      	movs	r2, r0
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d902      	bls.n	8003e9a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d142      	bne.n	8003f20 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	21e0      	movs	r1, #224	; 0xe0
 8003ea6:	438a      	bics	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	2382      	movs	r3, #130	; 0x82
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d113      	bne.n	8003ede <SPI_WaitFifoStateUntilTimeout+0xce>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	2380      	movs	r3, #128	; 0x80
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d005      	beq.n	8003ece <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d107      	bne.n	8003ede <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2140      	movs	r1, #64	; 0x40
 8003eda:	438a      	bics	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	019b      	lsls	r3, r3, #6
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d110      	bne.n	8003f0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4916      	ldr	r1, [pc, #88]	; (8003f50 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003ef6:	400a      	ands	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2180      	movs	r1, #128	; 0x80
 8003f06:	0189      	lsls	r1, r1, #6
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	225d      	movs	r2, #93	; 0x5d
 8003f10:	2101      	movs	r1, #1
 8003f12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	225c      	movs	r2, #92	; 0x5c
 8003f18:	2100      	movs	r1, #0
 8003f1a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e010      	b.n	8003f42 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d18e      	bne.n	8003e5e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	0018      	movs	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b00a      	add	sp, #40	; 0x28
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	20000000 	.word	0x20000000
 8003f50:	ffffdfff 	.word	0xffffdfff

08003f54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	23c0      	movs	r3, #192	; 0xc0
 8003f64:	0159      	lsls	r1, r3, #5
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	0013      	movs	r3, r2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f7ff ff4e 	bl	8003e10 <SPI_WaitFifoStateUntilTimeout>
 8003f74:	1e03      	subs	r3, r0, #0
 8003f76:	d007      	beq.n	8003f88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e027      	b.n	8003fd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	0013      	movs	r3, r2
 8003f92:	2200      	movs	r2, #0
 8003f94:	2180      	movs	r1, #128	; 0x80
 8003f96:	f7ff fead 	bl	8003cf4 <SPI_WaitFlagStateUntilTimeout>
 8003f9a:	1e03      	subs	r3, r0, #0
 8003f9c:	d007      	beq.n	8003fae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e014      	b.n	8003fd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	23c0      	movs	r3, #192	; 0xc0
 8003fb2:	00d9      	lsls	r1, r3, #3
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	0013      	movs	r3, r2
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f7ff ff27 	bl	8003e10 <SPI_WaitFifoStateUntilTimeout>
 8003fc2:	1e03      	subs	r3, r0, #0
 8003fc4:	d007      	beq.n	8003fd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fca:	2220      	movs	r2, #32
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e000      	b.n	8003fd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b004      	add	sp, #16
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <memset>:
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	1882      	adds	r2, r0, r2
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d100      	bne.n	8003fea <memset+0xa>
 8003fe8:	4770      	bx	lr
 8003fea:	7019      	strb	r1, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	e7f9      	b.n	8003fe4 <memset+0x4>

08003ff0 <__libc_init_array>:
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	2600      	movs	r6, #0
 8003ff4:	4c0c      	ldr	r4, [pc, #48]	; (8004028 <__libc_init_array+0x38>)
 8003ff6:	4d0d      	ldr	r5, [pc, #52]	; (800402c <__libc_init_array+0x3c>)
 8003ff8:	1b64      	subs	r4, r4, r5
 8003ffa:	10a4      	asrs	r4, r4, #2
 8003ffc:	42a6      	cmp	r6, r4
 8003ffe:	d109      	bne.n	8004014 <__libc_init_array+0x24>
 8004000:	2600      	movs	r6, #0
 8004002:	f000 f819 	bl	8004038 <_init>
 8004006:	4c0a      	ldr	r4, [pc, #40]	; (8004030 <__libc_init_array+0x40>)
 8004008:	4d0a      	ldr	r5, [pc, #40]	; (8004034 <__libc_init_array+0x44>)
 800400a:	1b64      	subs	r4, r4, r5
 800400c:	10a4      	asrs	r4, r4, #2
 800400e:	42a6      	cmp	r6, r4
 8004010:	d105      	bne.n	800401e <__libc_init_array+0x2e>
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	00b3      	lsls	r3, r6, #2
 8004016:	58eb      	ldr	r3, [r5, r3]
 8004018:	4798      	blx	r3
 800401a:	3601      	adds	r6, #1
 800401c:	e7ee      	b.n	8003ffc <__libc_init_array+0xc>
 800401e:	00b3      	lsls	r3, r6, #2
 8004020:	58eb      	ldr	r3, [r5, r3]
 8004022:	4798      	blx	r3
 8004024:	3601      	adds	r6, #1
 8004026:	e7f2      	b.n	800400e <__libc_init_array+0x1e>
 8004028:	08004080 	.word	0x08004080
 800402c:	08004080 	.word	0x08004080
 8004030:	08004084 	.word	0x08004084
 8004034:	08004080 	.word	0x08004080

08004038 <_init>:
 8004038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403e:	bc08      	pop	{r3}
 8004040:	469e      	mov	lr, r3
 8004042:	4770      	bx	lr

08004044 <_fini>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr
