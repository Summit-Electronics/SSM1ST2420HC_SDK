
1_AXIS_F091_Send.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c98  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d84  08002d84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d84  08002d84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d84  08002d84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d84  08002d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d88  08002d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  08002d98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08002d98  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007a2d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001721  00000000  00000000  00027aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  000291c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d7  00000000  00000000  00029980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014bc  00000000  00000000  00029f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000956e  00000000  00000000  0002b413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f445  00000000  00000000  00034981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001aac  00000000  00000000  000d3dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d5874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002d3c 	.word	0x08002d3c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002d3c 	.word	0x08002d3c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_CAN_RxFifo0MsgPendingCallback>:



/*  CAN RECEIVE INTERRUPT */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CANRxHeader, CANRxData);
 8000224:	4b08      	ldr	r3, [pc, #32]	; (8000248 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000226:	4a09      	ldr	r2, [pc, #36]	; (800024c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	2100      	movs	r1, #0
 800022c:	f001 f9f2 	bl	8001614 <HAL_CAN_GetRxMessage>

	if (CANRxData[0] == 0x01)
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d102      	bne.n	800023e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Datacheck = 1;
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800023a:	2201      	movs	r2, #1
 800023c:	601a      	str	r2, [r3, #0]
	}
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b002      	add	sp, #8
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000194 	.word	0x20000194
 800024c:	20000170 	.word	0x20000170
 8000250:	200001a8 	.word	0x200001a8

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000258:	f000 fc16 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025c:	f000 f864 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000260:	f000 f9ec 	bl	800063c <MX_GPIO_Init>
  MX_ADC_Init();
 8000264:	f000 f8a6 	bl	80003b4 <MX_ADC_Init>
  MX_CAN_Init();
 8000268:	f000 f900 	bl	800046c <MX_CAN_Init>
  MX_SPI1_Init();
 800026c:	f000 f96a 	bl	8000544 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000270:	f000 f9a6 	bl	80005c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000274:	4b27      	ldr	r3, [pc, #156]	; (8000314 <main+0xc0>)
 8000276:	0018      	movs	r0, r3
 8000278:	f001 f8a8 	bl	80013cc <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800027c:	4b25      	ldr	r3, [pc, #148]	; (8000314 <main+0xc0>)
 800027e:	2102      	movs	r1, #2
 8000280:	0018      	movs	r0, r3
 8000282:	f001 fae3 	bl	800184c <HAL_CAN_ActivateNotification>

  // DATA pakket opbouw CAN BUS

  CANTxHeader.DLC = 8;	// data length
 8000286:	4b24      	ldr	r3, [pc, #144]	; (8000318 <main+0xc4>)
 8000288:	2208      	movs	r2, #8
 800028a:	611a      	str	r2, [r3, #16]
  CANTxHeader.ExtId = 0; // ext ID
 800028c:	4b22      	ldr	r3, [pc, #136]	; (8000318 <main+0xc4>)
 800028e:	2200      	movs	r2, #0
 8000290:	605a      	str	r2, [r3, #4]
  CANTxHeader.IDE = CAN_ID_STD;
 8000292:	4b21      	ldr	r3, [pc, #132]	; (8000318 <main+0xc4>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  CANTxHeader.RTR = CAN_RTR_DATA;
 8000298:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <main+0xc4>)
 800029a:	2200      	movs	r2, #0
 800029c:	60da      	str	r2, [r3, #12]
  CANTxHeader.StdId = 0x111; // ID
 800029e:	4b1e      	ldr	r3, [pc, #120]	; (8000318 <main+0xc4>)
 80002a0:	2212      	movs	r2, #18
 80002a2:	32ff      	adds	r2, #255	; 0xff
 80002a4:	601a      	str	r2, [r3, #0]
  CANTxHeader.TransmitGlobalTime = DISABLE;
 80002a6:	4b1c      	ldr	r3, [pc, #112]	; (8000318 <main+0xc4>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	751a      	strb	r2, [r3, #20]

  CANTxData[0] = 0x01; // dummy data
 80002ac:	4b1b      	ldr	r3, [pc, #108]	; (800031c <main+0xc8>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]
  CANTxData[1] = 0x02; // dummy data
 80002b2:	4b1a      	ldr	r3, [pc, #104]	; (800031c <main+0xc8>)
 80002b4:	2202      	movs	r2, #2
 80002b6:	705a      	strb	r2, [r3, #1]
  CANTxData[2] = 0x03; // dummy data
 80002b8:	4b18      	ldr	r3, [pc, #96]	; (800031c <main+0xc8>)
 80002ba:	2203      	movs	r2, #3
 80002bc:	709a      	strb	r2, [r3, #2]
  CANTxData[3] = 0x04; // dummy data
 80002be:	4b17      	ldr	r3, [pc, #92]	; (800031c <main+0xc8>)
 80002c0:	2204      	movs	r2, #4
 80002c2:	70da      	strb	r2, [r3, #3]
  CANTxData[4] = 0x05; // dummy data
 80002c4:	4b15      	ldr	r3, [pc, #84]	; (800031c <main+0xc8>)
 80002c6:	2205      	movs	r2, #5
 80002c8:	711a      	strb	r2, [r3, #4]
  CANTxData[5] = 0x06; // dummy data
 80002ca:	4b14      	ldr	r3, [pc, #80]	; (800031c <main+0xc8>)
 80002cc:	2206      	movs	r2, #6
 80002ce:	715a      	strb	r2, [r3, #5]
  CANTxData[6] = 0x07; // dummy data
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <main+0xc8>)
 80002d2:	2207      	movs	r2, #7
 80002d4:	719a      	strb	r2, [r3, #6]
  CANTxData[7] = 0x08; // dummy data
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <main+0xc8>)
 80002d8:	2208      	movs	r2, #8
 80002da:	71da      	strb	r2, [r3, #7]

  if (HAL_CAN_AddTxMessage(&hcan, &CANTxHeader, &CANTxData, &TxMailbox) != HAL_OK)
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <main+0xcc>)
 80002de:	4a0f      	ldr	r2, [pc, #60]	; (800031c <main+0xc8>)
 80002e0:	490d      	ldr	r1, [pc, #52]	; (8000318 <main+0xc4>)
 80002e2:	480c      	ldr	r0, [pc, #48]	; (8000314 <main+0xc0>)
 80002e4:	f001 f8b8 	bl	8001458 <HAL_CAN_AddTxMessage>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <main+0x9c>
  {
	  Error_Handler();
 80002ec:	f000 fa28 	bl	8000740 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Datacheck == 1)
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <main+0xd0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d1fb      	bne.n	80002f0 <main+0x9c>
		{
			Datacheck = 0;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <main+0xd0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
			  if (HAL_CAN_AddTxMessage(&hcan, &CANTxHeader, &CANTxData, &TxMailbox) != HAL_OK)
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <main+0xcc>)
 8000300:	4a06      	ldr	r2, [pc, #24]	; (800031c <main+0xc8>)
 8000302:	4905      	ldr	r1, [pc, #20]	; (8000318 <main+0xc4>)
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <main+0xc0>)
 8000306:	f001 f8a7 	bl	8001458 <HAL_CAN_AddTxMessage>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d0f0      	beq.n	80002f0 <main+0x9c>
			  {
				  Error_Handler();
 800030e:	f000 fa17 	bl	8000740 <Error_Handler>
		if (Datacheck == 1)
 8000312:	e7ed      	b.n	80002f0 <main+0x9c>
 8000314:	20000068 	.word	0x20000068
 8000318:	20000158 	.word	0x20000158
 800031c:	2000018c 	.word	0x2000018c
 8000320:	2000019c 	.word	0x2000019c
 8000324:	200001a8 	.word	0x200001a8

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b093      	sub	sp, #76	; 0x4c
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	2414      	movs	r4, #20
 8000330:	193b      	adds	r3, r7, r4
 8000332:	0018      	movs	r0, r3
 8000334:	2334      	movs	r3, #52	; 0x34
 8000336:	001a      	movs	r2, r3
 8000338:	2100      	movs	r1, #0
 800033a:	f002 fcd3 	bl	8002ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	0018      	movs	r0, r3
 8000342:	2310      	movs	r3, #16
 8000344:	001a      	movs	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f002 fccc 	bl	8002ce4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800034c:	0021      	movs	r1, r4
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2212      	movs	r2, #18
 8000352:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2201      	movs	r2, #1
 8000358:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2201      	movs	r2, #1
 800035e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2210      	movs	r2, #16
 8000364:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2210      	movs	r2, #16
 800036a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2200      	movs	r2, #0
 8000370:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000372:	187b      	adds	r3, r7, r1
 8000374:	0018      	movs	r0, r3
 8000376:	f001 ff1b 	bl	80021b0 <HAL_RCC_OscConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800037e:	f000 f9df 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2207      	movs	r2, #7
 8000386:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2100      	movs	r1, #0
 800039e:	0018      	movs	r0, r3
 80003a0:	f002 fa8c 	bl	80028bc <HAL_RCC_ClockConfig>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003a8:	f000 f9ca 	bl	8000740 <Error_Handler>
  }
}
 80003ac:	46c0      	nop			; (mov r8, r8)
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b013      	add	sp, #76	; 0x4c
 80003b2:	bd90      	pop	{r4, r7, pc}

080003b4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	0018      	movs	r0, r3
 80003be:	230c      	movs	r3, #12
 80003c0:	001a      	movs	r2, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	f002 fc8e 	bl	8002ce4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80003c8:	4b26      	ldr	r3, [pc, #152]	; (8000464 <MX_ADC_Init+0xb0>)
 80003ca:	4a27      	ldr	r2, [pc, #156]	; (8000468 <MX_ADC_Init+0xb4>)
 80003cc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003ce:	4b25      	ldr	r3, [pc, #148]	; (8000464 <MX_ADC_Init+0xb0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003d4:	4b23      	ldr	r3, [pc, #140]	; (8000464 <MX_ADC_Init+0xb0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003da:	4b22      	ldr	r3, [pc, #136]	; (8000464 <MX_ADC_Init+0xb0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003e0:	4b20      	ldr	r3, [pc, #128]	; (8000464 <MX_ADC_Init+0xb0>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e6:	4b1f      	ldr	r3, [pc, #124]	; (8000464 <MX_ADC_Init+0xb0>)
 80003e8:	2204      	movs	r2, #4
 80003ea:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003ec:	4b1d      	ldr	r3, [pc, #116]	; (8000464 <MX_ADC_Init+0xb0>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003f2:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <MX_ADC_Init+0xb0>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003f8:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <MX_ADC_Init+0xb0>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003fe:	4b19      	ldr	r3, [pc, #100]	; (8000464 <MX_ADC_Init+0xb0>)
 8000400:	2200      	movs	r2, #0
 8000402:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000404:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MX_ADC_Init+0xb0>)
 8000406:	22c2      	movs	r2, #194	; 0xc2
 8000408:	32ff      	adds	r2, #255	; 0xff
 800040a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_ADC_Init+0xb0>)
 800040e:	2200      	movs	r2, #0
 8000410:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <MX_ADC_Init+0xb0>)
 8000414:	2224      	movs	r2, #36	; 0x24
 8000416:	2100      	movs	r1, #0
 8000418:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_ADC_Init+0xb0>)
 800041c:	2201      	movs	r2, #1
 800041e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000420:	4b10      	ldr	r3, [pc, #64]	; (8000464 <MX_ADC_Init+0xb0>)
 8000422:	0018      	movs	r0, r3
 8000424:	f000 fb94 	bl	8000b50 <HAL_ADC_Init>
 8000428:	1e03      	subs	r3, r0, #0
 800042a:	d001      	beq.n	8000430 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800042c:	f000 f988 	bl	8000740 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2280      	movs	r2, #128	; 0x80
 800043a:	0152      	lsls	r2, r2, #5
 800043c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	0552      	lsls	r2, r2, #21
 8000444:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000446:	1d3a      	adds	r2, r7, #4
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_ADC_Init+0xb0>)
 800044a:	0011      	movs	r1, r2
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fcbf 	bl	8000dd0 <HAL_ADC_ConfigChannel>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000456:	f000 f973 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b004      	add	sp, #16
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	20000028 	.word	0x20000028
 8000468:	40012400 	.word	0x40012400

0800046c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN_Init 0 */
	HAL_GPIO_WritePin(GPIOA,CAN_STB_Pin,0); // Set STB pin LOW for normal operation
 8000472:	2390      	movs	r3, #144	; 0x90
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2200      	movs	r2, #0
 8000478:	2104      	movs	r1, #4
 800047a:	0018      	movs	r0, r3
 800047c:	f001 fe7a 	bl	8002174 <HAL_GPIO_WritePin>
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000480:	4b2e      	ldr	r3, [pc, #184]	; (800053c <MX_CAN_Init+0xd0>)
 8000482:	4a2f      	ldr	r2, [pc, #188]	; (8000540 <MX_CAN_Init+0xd4>)
 8000484:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000486:	4b2d      	ldr	r3, [pc, #180]	; (800053c <MX_CAN_Init+0xd0>)
 8000488:	2202      	movs	r2, #2
 800048a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800048c:	4b2b      	ldr	r3, [pc, #172]	; (800053c <MX_CAN_Init+0xd0>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000492:	4b2a      	ldr	r3, [pc, #168]	; (800053c <MX_CAN_Init+0xd0>)
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000498:	4b28      	ldr	r3, [pc, #160]	; (800053c <MX_CAN_Init+0xd0>)
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	0252      	lsls	r2, r2, #9
 800049e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004a0:	4b26      	ldr	r3, [pc, #152]	; (800053c <MX_CAN_Init+0xd0>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004a6:	4b25      	ldr	r3, [pc, #148]	; (800053c <MX_CAN_Init+0xd0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004ac:	4b23      	ldr	r3, [pc, #140]	; (800053c <MX_CAN_Init+0xd0>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004b2:	4b22      	ldr	r3, [pc, #136]	; (800053c <MX_CAN_Init+0xd0>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004b8:	4b20      	ldr	r3, [pc, #128]	; (800053c <MX_CAN_Init+0xd0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004be:	4b1f      	ldr	r3, [pc, #124]	; (800053c <MX_CAN_Init+0xd0>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004c4:	4b1d      	ldr	r3, [pc, #116]	; (800053c <MX_CAN_Init+0xd0>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004ca:	4b1c      	ldr	r3, [pc, #112]	; (800053c <MX_CAN_Init+0xd0>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fd8d 	bl	8000fec <HAL_CAN_Init>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_CAN_Init+0x6e>
  {
    Error_Handler();
 80004d6:	f000 f933 	bl	8000740 <Error_Handler>

  /* CAN filter */

  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 80004da:	003b      	movs	r3, r7
 80004dc:	2201      	movs	r2, #1
 80004de:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 10;
 80004e0:	003b      	movs	r3, r7
 80004e2:	220a      	movs	r2, #10
 80004e4:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x0000;
 80004ec:	003b      	movs	r3, r7
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80004f2:	003b      	movs	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80004f8:	003b      	movs	r3, r7
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80004fe:	003b      	movs	r3, r7
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000504:	003b      	movs	r3, r7
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800050a:	003b      	movs	r3, r7
 800050c:	2201      	movs	r2, #1
 800050e:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 0;
 8000510:	003b      	movs	r3, r7
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000516:	003a      	movs	r2, r7
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_CAN_Init+0xd0>)
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fe63 	bl	80011e8 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_CAN_Init+0xd0>)
 8000524:	0018      	movs	r0, r3
 8000526:	f000 ff51 	bl	80013cc <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <MX_CAN_Init+0xd0>)
 800052c:	2102      	movs	r1, #2
 800052e:	0018      	movs	r0, r3
 8000530:	f001 f98c 	bl	800184c <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b00a      	add	sp, #40	; 0x28
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000068 	.word	0x20000068
 8000540:	40006400 	.word	0x40006400

08000544 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000548:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_SPI1_Init+0x74>)
 800054a:	4a1c      	ldr	r2, [pc, #112]	; (80005bc <MX_SPI1_Init+0x78>)
 800054c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800054e:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <MX_SPI1_Init+0x74>)
 8000550:	2282      	movs	r2, #130	; 0x82
 8000552:	0052      	lsls	r2, r2, #1
 8000554:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <MX_SPI1_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_SPI1_Init+0x74>)
 800055e:	22c0      	movs	r2, #192	; 0xc0
 8000560:	0092      	lsls	r2, r2, #2
 8000562:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_SPI1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <MX_SPI1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_SPI1_Init+0x74>)
 8000572:	2280      	movs	r2, #128	; 0x80
 8000574:	0092      	lsls	r2, r2, #2
 8000576:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_SPI1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_SPI1_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_SPI1_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_SPI1_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_SPI1_Init+0x74>)
 8000592:	2207      	movs	r2, #7
 8000594:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <MX_SPI1_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_SPI1_Init+0x74>)
 800059e:	2208      	movs	r2, #8
 80005a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <MX_SPI1_Init+0x74>)
 80005a4:	0018      	movs	r0, r3
 80005a6:	f002 fae5 	bl	8002b74 <HAL_SPI_Init>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005ae:	f000 f8c7 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000090 	.word	0x20000090
 80005bc:	40013000 	.word	0x40013000

080005c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <MX_SPI2_Init+0x74>)
 80005c6:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <MX_SPI2_Init+0x78>)
 80005c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_SPI2_Init+0x74>)
 80005cc:	2282      	movs	r2, #130	; 0x82
 80005ce:	0052      	lsls	r2, r2, #1
 80005d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_SPI2_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <MX_SPI2_Init+0x74>)
 80005da:	22c0      	movs	r2, #192	; 0xc0
 80005dc:	0092      	lsls	r2, r2, #2
 80005de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_SPI2_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <MX_SPI2_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_SPI2_Init+0x74>)
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	0092      	lsls	r2, r2, #2
 80005f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_SPI2_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_SPI2_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_SPI2_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_SPI2_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_SPI2_Init+0x74>)
 800060e:	2207      	movs	r2, #7
 8000610:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_SPI2_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_SPI2_Init+0x74>)
 800061a:	2208      	movs	r2, #8
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MX_SPI2_Init+0x74>)
 8000620:	0018      	movs	r0, r3
 8000622:	f002 faa7 	bl	8002b74 <HAL_SPI_Init>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f889 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000f4 	.word	0x200000f4
 8000638:	40003800 	.word	0x40003800

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b089      	sub	sp, #36	; 0x24
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	240c      	movs	r4, #12
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2314      	movs	r3, #20
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f002 fb49 	bl	8002ce4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b39      	ldr	r3, [pc, #228]	; (8000738 <MX_GPIO_Init+0xfc>)
 8000654:	695a      	ldr	r2, [r3, #20]
 8000656:	4b38      	ldr	r3, [pc, #224]	; (8000738 <MX_GPIO_Init+0xfc>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	0289      	lsls	r1, r1, #10
 800065c:	430a      	orrs	r2, r1
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	4b35      	ldr	r3, [pc, #212]	; (8000738 <MX_GPIO_Init+0xfc>)
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	029b      	lsls	r3, r3, #10
 8000668:	4013      	ands	r3, r2
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b32      	ldr	r3, [pc, #200]	; (8000738 <MX_GPIO_Init+0xfc>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <MX_GPIO_Init+0xfc>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	02c9      	lsls	r1, r1, #11
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <MX_GPIO_Init+0xfc>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	02db      	lsls	r3, r3, #11
 8000684:	4013      	ands	r3, r2
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN_STB_Pin|DRV_ENN_Pin, GPIO_PIN_RESET);
 800068a:	2382      	movs	r3, #130	; 0x82
 800068c:	0059      	lsls	r1, r3, #1
 800068e:	2390      	movs	r3, #144	; 0x90
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2200      	movs	r2, #0
 8000694:	0018      	movs	r0, r3
 8000696:	f001 fd6d 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EXT_OUT_1_Pin|EXT_OUT_2_Pin, GPIO_PIN_RESET);
 800069a:	4b28      	ldr	r3, [pc, #160]	; (800073c <MX_GPIO_Init+0x100>)
 800069c:	2200      	movs	r2, #0
 800069e:	2130      	movs	r1, #48	; 0x30
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 fd67 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_STB_Pin DRV_ENN_Pin */
  GPIO_InitStruct.Pin = CAN_STB_Pin|DRV_ENN_Pin;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2282      	movs	r2, #130	; 0x82
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2201      	movs	r2, #1
 80006b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	193a      	adds	r2, r7, r4
 80006c2:	2390      	movs	r3, #144	; 0x90
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	0011      	movs	r1, r2
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fbdb 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_OUT_1_Pin EXT_OUT_2_Pin */
  GPIO_InitStruct.Pin = EXT_OUT_1_Pin|EXT_OUT_2_Pin;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2230      	movs	r2, #48	; 0x30
 80006d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2201      	movs	r2, #1
 80006d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <MX_GPIO_Init+0x100>)
 80006ea:	0019      	movs	r1, r3
 80006ec:	0010      	movs	r0, r2
 80006ee:	f001 fbc9 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : REFL_UC_Pin */
  GPIO_InitStruct.Pin = REFL_UC_Pin;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2240      	movs	r2, #64	; 0x40
 80006f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2201      	movs	r2, #1
 8000702:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REFL_UC_GPIO_Port, &GPIO_InitStruct);
 8000704:	193b      	adds	r3, r7, r4
 8000706:	4a0d      	ldr	r2, [pc, #52]	; (800073c <MX_GPIO_Init+0x100>)
 8000708:	0019      	movs	r1, r3
 800070a:	0010      	movs	r0, r2
 800070c:	f001 fbba 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : REFR_UC_Pin */
  GPIO_InitStruct.Pin = REFR_UC_Pin;
 8000710:	0021      	movs	r1, r4
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REFR_UC_GPIO_Port, &GPIO_InitStruct);
 8000724:	187b      	adds	r3, r7, r1
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <MX_GPIO_Init+0x100>)
 8000728:	0019      	movs	r1, r3
 800072a:	0010      	movs	r0, r2
 800072c:	f001 fbaa 	bl	8001e84 <HAL_GPIO_Init>

}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b009      	add	sp, #36	; 0x24
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	48000400 	.word	0x48000400

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_MspInit+0x44>)
 8000754:	699a      	ldr	r2, [r3, #24]
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_MspInit+0x44>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	619a      	str	r2, [r3, #24]
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_MspInit+0x44>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_MspInit+0x44>)
 800076c:	69da      	ldr	r2, [r3, #28]
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_MspInit+0x44>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0549      	lsls	r1, r1, #21
 8000774:	430a      	orrs	r2, r1
 8000776:	61da      	str	r2, [r3, #28]
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_MspInit+0x44>)
 800077a:	69da      	ldr	r2, [r3, #28]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	055b      	lsls	r3, r3, #21
 8000780:	4013      	ands	r3, r2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b08b      	sub	sp, #44	; 0x2c
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	2414      	movs	r4, #20
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	0018      	movs	r0, r3
 80007a2:	2314      	movs	r3, #20
 80007a4:	001a      	movs	r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	f002 fa9c 	bl	8002ce4 <memset>
  if(hadc->Instance==ADC1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a19      	ldr	r2, [pc, #100]	; (8000818 <HAL_ADC_MspInit+0x84>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d12b      	bne.n	800080e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <HAL_ADC_MspInit+0x88>)
 80007b8:	699a      	ldr	r2, [r3, #24]
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <HAL_ADC_MspInit+0x88>)
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	0089      	lsls	r1, r1, #2
 80007c0:	430a      	orrs	r2, r1
 80007c2:	619a      	str	r2, [r3, #24]
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <HAL_ADC_MspInit+0x88>)
 80007c6:	699a      	ldr	r2, [r3, #24]
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4013      	ands	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_ADC_MspInit+0x88>)
 80007d4:	695a      	ldr	r2, [r3, #20]
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_ADC_MspInit+0x88>)
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	0289      	lsls	r1, r1, #10
 80007dc:	430a      	orrs	r2, r1
 80007de:	615a      	str	r2, [r3, #20]
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_ADC_MspInit+0x88>)
 80007e2:	695a      	ldr	r2, [r3, #20]
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	029b      	lsls	r3, r3, #10
 80007e8:	4013      	ands	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = AIN_MCU_Pin;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2201      	movs	r2, #1
 80007f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2203      	movs	r2, #3
 80007f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AIN_MCU_GPIO_Port, &GPIO_InitStruct);
 8000800:	193a      	adds	r2, r7, r4
 8000802:	2390      	movs	r3, #144	; 0x90
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	0011      	movs	r1, r2
 8000808:	0018      	movs	r0, r3
 800080a:	f001 fb3b 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b00b      	add	sp, #44	; 0x2c
 8000814:	bd90      	pop	{r4, r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40012400 	.word	0x40012400
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b08b      	sub	sp, #44	; 0x2c
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	2414      	movs	r4, #20
 800082a:	193b      	adds	r3, r7, r4
 800082c:	0018      	movs	r0, r3
 800082e:	2314      	movs	r3, #20
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f002 fa56 	bl	8002ce4 <memset>
  if(hcan->Instance==CAN)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a20      	ldr	r2, [pc, #128]	; (80008c0 <HAL_CAN_MspInit+0xa0>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d13a      	bne.n	80008b8 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <HAL_CAN_MspInit+0xa4>)
 8000844:	69da      	ldr	r2, [r3, #28]
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <HAL_CAN_MspInit+0xa4>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	0489      	lsls	r1, r1, #18
 800084c:	430a      	orrs	r2, r1
 800084e:	61da      	str	r2, [r3, #28]
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <HAL_CAN_MspInit+0xa4>)
 8000852:	69da      	ldr	r2, [r3, #28]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	049b      	lsls	r3, r3, #18
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <HAL_CAN_MspInit+0xa4>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <HAL_CAN_MspInit+0xa4>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	02c9      	lsls	r1, r1, #11
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_CAN_MspInit+0xa4>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	02db      	lsls	r3, r3, #11
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	22c0      	movs	r2, #192	; 0xc0
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2202      	movs	r2, #2
 8000888:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2203      	movs	r2, #3
 8000894:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2204      	movs	r2, #4
 800089a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	187b      	adds	r3, r7, r1
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_CAN_MspInit+0xa8>)
 80008a0:	0019      	movs	r1, r3
 80008a2:	0010      	movs	r0, r2
 80008a4:	f001 faee 	bl	8001e84 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	201e      	movs	r0, #30
 80008ae:	f001 fab7 	bl	8001e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80008b2:	201e      	movs	r0, #30
 80008b4:	f001 fac9 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b00b      	add	sp, #44	; 0x2c
 80008be:	bd90      	pop	{r4, r7, pc}
 80008c0:	40006400 	.word	0x40006400
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000400 	.word	0x48000400

080008cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b08d      	sub	sp, #52	; 0x34
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	241c      	movs	r4, #28
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	0018      	movs	r0, r3
 80008da:	2314      	movs	r3, #20
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f002 fa00 	bl	8002ce4 <memset>
  if(hspi->Instance==SPI1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a39      	ldr	r2, [pc, #228]	; (80009d0 <HAL_SPI_MspInit+0x104>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d133      	bne.n	8000956 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ee:	4b39      	ldr	r3, [pc, #228]	; (80009d4 <HAL_SPI_MspInit+0x108>)
 80008f0:	699a      	ldr	r2, [r3, #24]
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <HAL_SPI_MspInit+0x108>)
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	0149      	lsls	r1, r1, #5
 80008f8:	430a      	orrs	r2, r1
 80008fa:	619a      	str	r2, [r3, #24]
 80008fc:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <HAL_SPI_MspInit+0x108>)
 80008fe:	699a      	ldr	r2, [r3, #24]
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	015b      	lsls	r3, r3, #5
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <HAL_SPI_MspInit+0x108>)
 800090c:	695a      	ldr	r2, [r3, #20]
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <HAL_SPI_MspInit+0x108>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0289      	lsls	r1, r1, #10
 8000914:	430a      	orrs	r2, r1
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <HAL_SPI_MspInit+0x108>)
 800091a:	695a      	ldr	r2, [r3, #20]
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	029b      	lsls	r3, r3, #10
 8000920:	4013      	ands	r3, r2
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AMS_CS_Pin|AMS_SCK_Pin|AMS_MISO_Pin|AMS_MOSI_Pin;
 8000926:	0021      	movs	r1, r4
 8000928:	187b      	adds	r3, r7, r1
 800092a:	22f0      	movs	r2, #240	; 0xf0
 800092c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2202      	movs	r2, #2
 8000932:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2203      	movs	r2, #3
 800093e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	187a      	adds	r2, r7, r1
 8000948:	2390      	movs	r3, #144	; 0x90
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f001 fa98 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000954:	e037      	b.n	80009c6 <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <HAL_SPI_MspInit+0x10c>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d132      	bne.n	80009c6 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <HAL_SPI_MspInit+0x108>)
 8000962:	69da      	ldr	r2, [r3, #28]
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <HAL_SPI_MspInit+0x108>)
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	01c9      	lsls	r1, r1, #7
 800096a:	430a      	orrs	r2, r1
 800096c:	61da      	str	r2, [r3, #28]
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <HAL_SPI_MspInit+0x108>)
 8000970:	69da      	ldr	r2, [r3, #28]
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	01db      	lsls	r3, r3, #7
 8000976:	4013      	ands	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_SPI_MspInit+0x108>)
 800097e:	695a      	ldr	r2, [r3, #20]
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_SPI_MspInit+0x108>)
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	02c9      	lsls	r1, r1, #11
 8000986:	430a      	orrs	r2, r1
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_SPI_MspInit+0x108>)
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	02db      	lsls	r3, r3, #11
 8000992:	4013      	ands	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMC_CS_Pin|TMC_SCK_Pin|TMC_MISO_Pin|TMC_MOSI_Pin;
 8000998:	211c      	movs	r1, #28
 800099a:	187b      	adds	r3, r7, r1
 800099c:	22f0      	movs	r2, #240	; 0xf0
 800099e:	0212      	lsls	r2, r2, #8
 80009a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2202      	movs	r2, #2
 80009a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2203      	movs	r2, #3
 80009b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_SPI_MspInit+0x110>)
 80009be:	0019      	movs	r1, r3
 80009c0:	0010      	movs	r0, r2
 80009c2:	f001 fa5f 	bl	8001e84 <HAL_GPIO_Init>
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b00d      	add	sp, #52	; 0x34
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	40013000 	.word	0x40013000
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40003800 	.word	0x40003800
 80009dc:	48000400 	.word	0x48000400

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f888 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <CEC_CAN_IRQHandler+0x14>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 ff42 	bl	80018a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000068 	.word	0x20000068

08000a28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490e      	ldr	r1, [pc, #56]	; (8000a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0b      	ldr	r4, [pc, #44]	; (8000a80 <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a5e:	f7ff ffe3 	bl	8000a28 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a62:	f002 f947 	bl	8002cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a66:	f7ff fbf5 	bl	8000254 <main>

08000a6a <LoopForever>:

LoopForever:
    b LoopForever
 8000a6a:	e7fe      	b.n	8000a6a <LoopForever>
  ldr   r0, =_estack
 8000a6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a78:	08002d8c 	.word	0x08002d8c
  ldr r2, =_sbss
 8000a7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a80:	200001b0 	.word	0x200001b0

08000a84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_COMP_IRQHandler>
	...

08000a88 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <HAL_Init+0x24>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_Init+0x24>)
 8000a92:	2110      	movs	r1, #16
 8000a94:	430a      	orrs	r2, r1
 8000a96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f809 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9e:	f7ff fe55 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_InitTick+0x5c>)
 8000aba:	681c      	ldr	r4, [r3, #0]
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_InitTick+0x60>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	23fa      	movs	r3, #250	; 0xfa
 8000ac4:	0098      	lsls	r0, r3, #2
 8000ac6:	f7ff fb1d 	bl	8000104 <__udivsi3>
 8000aca:	0003      	movs	r3, r0
 8000acc:	0019      	movs	r1, r3
 8000ace:	0020      	movs	r0, r4
 8000ad0:	f7ff fb18 	bl	8000104 <__udivsi3>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f001 f9c7 	bl	8001e6a <HAL_SYSTICK_Config>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e00f      	b.n	8000b04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d80b      	bhi.n	8000b02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2301      	movs	r3, #1
 8000aee:	425b      	negs	r3, r3
 8000af0:	2200      	movs	r2, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f001 f994 	bl	8001e20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_InitTick+0x64>)
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b003      	add	sp, #12
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	001a      	movs	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	18d2      	adds	r2, r2, r3
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	20000008 	.word	0x20000008
 8000b38:	200001ac 	.word	0x200001ac

08000b3c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	200001ac 	.word	0x200001ac

08000b50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b58:	230f      	movs	r3, #15
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e125      	b.n	8000dba <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10a      	bne.n	8000b8c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2234      	movs	r2, #52	; 0x34
 8000b80:	2100      	movs	r1, #0
 8000b82:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff fe04 	bl	8000794 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b90:	2210      	movs	r2, #16
 8000b92:	4013      	ands	r3, r2
 8000b94:	d000      	beq.n	8000b98 <HAL_ADC_Init+0x48>
 8000b96:	e103      	b.n	8000da0 <HAL_ADC_Init+0x250>
 8000b98:	230f      	movs	r3, #15
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d000      	beq.n	8000ba4 <HAL_ADC_Init+0x54>
 8000ba2:	e0fd      	b.n	8000da0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	2204      	movs	r2, #4
 8000bac:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000bae:	d000      	beq.n	8000bb2 <HAL_ADC_Init+0x62>
 8000bb0:	e0f6      	b.n	8000da0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb6:	4a83      	ldr	r2, [pc, #524]	; (8000dc4 <HAL_ADC_Init+0x274>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	2202      	movs	r2, #2
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	2203      	movs	r2, #3
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d112      	bne.n	8000bf6 <HAL_ADC_Init+0xa6>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4013      	ands	r3, r2
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d009      	beq.n	8000bf2 <HAL_ADC_Init+0xa2>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	401a      	ands	r2, r3
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d101      	bne.n	8000bf6 <HAL_ADC_Init+0xa6>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <HAL_ADC_Init+0xa8>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d116      	bne.n	8000c2a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	2218      	movs	r2, #24
 8000c04:	4393      	bics	r3, r2
 8000c06:	0019      	movs	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	0899      	lsrs	r1, r3, #2
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	430a      	orrs	r2, r1
 8000c28:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4964      	ldr	r1, [pc, #400]	; (8000dc8 <HAL_ADC_Init+0x278>)
 8000c36:	400a      	ands	r2, r1
 8000c38:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7e1b      	ldrb	r3, [r3, #24]
 8000c3e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7e5b      	ldrb	r3, [r3, #25]
 8000c44:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c46:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7e9b      	ldrb	r3, [r3, #26]
 8000c4c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c4e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d002      	beq.n	8000c5e <HAL_ADC_Init+0x10e>
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	015b      	lsls	r3, r3, #5
 8000c5c:	e000      	b.n	8000c60 <HAL_ADC_Init+0x110>
 8000c5e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c60:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c66:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d101      	bne.n	8000c74 <HAL_ADC_Init+0x124>
 8000c70:	2304      	movs	r3, #4
 8000c72:	e000      	b.n	8000c76 <HAL_ADC_Init+0x126>
 8000c74:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000c76:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2124      	movs	r1, #36	; 0x24
 8000c7c:	5c5b      	ldrb	r3, [r3, r1]
 8000c7e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c80:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7edb      	ldrb	r3, [r3, #27]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d115      	bne.n	8000cbc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7e9b      	ldrb	r3, [r3, #26]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d105      	bne.n	8000ca4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	0252      	lsls	r2, r2, #9
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	e00b      	b.n	8000cbc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca8:	2220      	movs	r2, #32
 8000caa:	431a      	orrs	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69da      	ldr	r2, [r3, #28]
 8000cc0:	23c2      	movs	r3, #194	; 0xc2
 8000cc2:	33ff      	adds	r3, #255	; 0xff
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d007      	beq.n	8000cd8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	68d9      	ldr	r1, [r3, #12]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	055b      	lsls	r3, r3, #21
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d01b      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d017      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d013      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d00f      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d00b      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	d007      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	2b06      	cmp	r3, #6
 8000d22:	d003      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d28:	2b07      	cmp	r3, #7
 8000d2a:	d112      	bne.n	8000d52 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2107      	movs	r1, #7
 8000d38:	438a      	bics	r2, r1
 8000d3a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6959      	ldr	r1, [r3, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d46:	2207      	movs	r2, #7
 8000d48:	401a      	ands	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <HAL_ADC_Init+0x27c>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d10b      	bne.n	8000d7a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	4393      	bics	r3, r2
 8000d70:	2201      	movs	r2, #1
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d78:	e01c      	b.n	8000db4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7e:	2212      	movs	r2, #18
 8000d80:	4393      	bics	r3, r2
 8000d82:	2210      	movs	r2, #16
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d8e:	2201      	movs	r2, #1
 8000d90:	431a      	orrs	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000d96:	230f      	movs	r3, #15
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d9e:	e009      	b.n	8000db4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da4:	2210      	movs	r2, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	781b      	ldrb	r3, [r3, #0]
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b004      	add	sp, #16
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	fffffefd 	.word	0xfffffefd
 8000dc8:	fffe0219 	.word	0xfffe0219
 8000dcc:	833fffe7 	.word	0x833fffe7

08000dd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dda:	230f      	movs	r3, #15
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	055b      	lsls	r3, r3, #21
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d011      	beq.n	8000e16 <HAL_ADC_ConfigChannel+0x46>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d00d      	beq.n	8000e16 <HAL_ADC_ConfigChannel+0x46>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d009      	beq.n	8000e16 <HAL_ADC_ConfigChannel+0x46>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d005      	beq.n	8000e16 <HAL_ADC_ConfigChannel+0x46>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d001      	beq.n	8000e16 <HAL_ADC_ConfigChannel+0x46>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2234      	movs	r2, #52	; 0x34
 8000e1a:	5c9b      	ldrb	r3, [r3, r2]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d101      	bne.n	8000e24 <HAL_ADC_ConfigChannel+0x54>
 8000e20:	2302      	movs	r3, #2
 8000e22:	e0d0      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x1f6>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2234      	movs	r2, #52	; 0x34
 8000e28:	2101      	movs	r1, #1
 8000e2a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2204      	movs	r2, #4
 8000e34:	4013      	ands	r3, r2
 8000e36:	d000      	beq.n	8000e3a <HAL_ADC_ConfigChannel+0x6a>
 8000e38:	e0b4      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	4a64      	ldr	r2, [pc, #400]	; (8000fd0 <HAL_ADC_ConfigChannel+0x200>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d100      	bne.n	8000e46 <HAL_ADC_ConfigChannel+0x76>
 8000e44:	e082      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2201      	movs	r2, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	055b      	lsls	r3, r3, #21
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d037      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d033      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d02f      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d02b      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d027      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d023      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	2b06      	cmp	r3, #6
 8000e96:	d01f      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	2b07      	cmp	r3, #7
 8000e9e:	d01b      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	2107      	movs	r1, #7
 8000eac:	400b      	ands	r3, r1
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d012      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	695a      	ldr	r2, [r3, #20]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2107      	movs	r1, #7
 8000ebe:	438a      	bics	r2, r1
 8000ec0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6959      	ldr	r1, [r3, #20]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2207      	movs	r2, #7
 8000ece:	401a      	ands	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b10      	cmp	r3, #16
 8000ede:	d007      	beq.n	8000ef0 <HAL_ADC_ConfigChannel+0x120>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b11      	cmp	r3, #17
 8000ee6:	d003      	beq.n	8000ef0 <HAL_ADC_ConfigChannel+0x120>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b12      	cmp	r3, #18
 8000eee:	d163      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <HAL_ADC_ConfigChannel+0x204>)
 8000ef2:	6819      	ldr	r1, [r3, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b10      	cmp	r3, #16
 8000efa:	d009      	beq.n	8000f10 <HAL_ADC_ConfigChannel+0x140>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b11      	cmp	r3, #17
 8000f02:	d102      	bne.n	8000f0a <HAL_ADC_ConfigChannel+0x13a>
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	03db      	lsls	r3, r3, #15
 8000f08:	e004      	b.n	8000f14 <HAL_ADC_ConfigChannel+0x144>
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	045b      	lsls	r3, r3, #17
 8000f0e:	e001      	b.n	8000f14 <HAL_ADC_ConfigChannel+0x144>
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <HAL_ADC_ConfigChannel+0x204>)
 8000f16:	430b      	orrs	r3, r1
 8000f18:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b10      	cmp	r3, #16
 8000f20:	d14a      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_ADC_ConfigChannel+0x208>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	492d      	ldr	r1, [pc, #180]	; (8000fdc <HAL_ADC_ConfigChannel+0x20c>)
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff f8eb 	bl	8000104 <__udivsi3>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	001a      	movs	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	189b      	adds	r3, r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f3c:	e002      	b.n	8000f44 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f9      	bne.n	8000f3e <HAL_ADC_ConfigChannel+0x16e>
 8000f4a:	e035      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2101      	movs	r1, #1
 8000f58:	4099      	lsls	r1, r3
 8000f5a:	000b      	movs	r3, r1
 8000f5c:	43d9      	mvns	r1, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	400a      	ands	r2, r1
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b10      	cmp	r3, #16
 8000f6c:	d007      	beq.n	8000f7e <HAL_ADC_ConfigChannel+0x1ae>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b11      	cmp	r3, #17
 8000f74:	d003      	beq.n	8000f7e <HAL_ADC_ConfigChannel+0x1ae>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b12      	cmp	r3, #18
 8000f7c:	d11c      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_ADC_ConfigChannel+0x204>)
 8000f80:	6819      	ldr	r1, [r3, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b10      	cmp	r3, #16
 8000f88:	d007      	beq.n	8000f9a <HAL_ADC_ConfigChannel+0x1ca>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b11      	cmp	r3, #17
 8000f90:	d101      	bne.n	8000f96 <HAL_ADC_ConfigChannel+0x1c6>
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_ADC_ConfigChannel+0x210>)
 8000f94:	e002      	b.n	8000f9c <HAL_ADC_ConfigChannel+0x1cc>
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_ADC_ConfigChannel+0x214>)
 8000f98:	e000      	b.n	8000f9c <HAL_ADC_ConfigChannel+0x1cc>
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_ADC_ConfigChannel+0x218>)
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_ADC_ConfigChannel+0x204>)
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e009      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa8:	2220      	movs	r2, #32
 8000faa:	431a      	orrs	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2234      	movs	r2, #52	; 0x34
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	781b      	ldrb	r3, [r3, #0]
}
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b004      	add	sp, #16
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	00001001 	.word	0x00001001
 8000fd4:	40012708 	.word	0x40012708
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	000f4240 	.word	0x000f4240
 8000fe0:	ffbfffff 	.word	0xffbfffff
 8000fe4:	feffffff 	.word	0xfeffffff
 8000fe8:	ff7fffff 	.word	0xff7fffff

08000fec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e0f0      	b.n	80011e0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2220      	movs	r2, #32
 8001002:	5c9b      	ldrb	r3, [r3, r2]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d103      	bne.n	8001012 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff fc07 	bl	8000820 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001022:	f7ff fd8b 	bl	8000b3c <HAL_GetTick>
 8001026:	0003      	movs	r3, r0
 8001028:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800102a:	e013      	b.n	8001054 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800102c:	f7ff fd86 	bl	8000b3c <HAL_GetTick>
 8001030:	0002      	movs	r2, r0
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b0a      	cmp	r3, #10
 8001038:	d90c      	bls.n	8001054 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	0292      	lsls	r2, r2, #10
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2220      	movs	r2, #32
 800104c:	2105      	movs	r1, #5
 800104e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e0c5      	b.n	80011e0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	4013      	ands	r3, r2
 800105e:	d0e5      	beq.n	800102c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2102      	movs	r1, #2
 800106c:	438a      	bics	r2, r1
 800106e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001070:	f7ff fd64 	bl	8000b3c <HAL_GetTick>
 8001074:	0003      	movs	r3, r0
 8001076:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001078:	e013      	b.n	80010a2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800107a:	f7ff fd5f 	bl	8000b3c <HAL_GetTick>
 800107e:	0002      	movs	r2, r0
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b0a      	cmp	r3, #10
 8001086:	d90c      	bls.n	80010a2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	0292      	lsls	r2, r2, #10
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2220      	movs	r2, #32
 800109a:	2105      	movs	r1, #5
 800109c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e09e      	b.n	80011e0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2202      	movs	r2, #2
 80010aa:	4013      	ands	r3, r2
 80010ac:	d1e5      	bne.n	800107a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7e1b      	ldrb	r3, [r3, #24]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d108      	bne.n	80010c8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	430a      	orrs	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e007      	b.n	80010d8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	438a      	bics	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7e5b      	ldrb	r3, [r3, #25]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	430a      	orrs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e007      	b.n	8001102 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	438a      	bics	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7e9b      	ldrb	r3, [r3, #26]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d108      	bne.n	800111c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2120      	movs	r1, #32
 8001116:	430a      	orrs	r2, r1
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e007      	b.n	800112c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2120      	movs	r1, #32
 8001128:	438a      	bics	r2, r1
 800112a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7edb      	ldrb	r3, [r3, #27]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2110      	movs	r1, #16
 8001140:	438a      	bics	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2110      	movs	r1, #16
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7f1b      	ldrb	r3, [r3, #28]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2108      	movs	r1, #8
 800116a:	430a      	orrs	r2, r1
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e007      	b.n	8001180 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2108      	movs	r1, #8
 800117c:	438a      	bics	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7f5b      	ldrb	r3, [r3, #29]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2104      	movs	r1, #4
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e007      	b.n	80011aa <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2104      	movs	r1, #4
 80011a6:	438a      	bics	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	431a      	orrs	r2, r3
 80011c0:	0011      	movs	r1, r2
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	1e5a      	subs	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2220      	movs	r2, #32
 80011da:	2101      	movs	r1, #1
 80011dc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b004      	add	sp, #16
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011f8:	2013      	movs	r0, #19
 80011fa:	183b      	adds	r3, r7, r0
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	2120      	movs	r1, #32
 8001200:	5c52      	ldrb	r2, [r2, r1]
 8001202:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001204:	0002      	movs	r2, r0
 8001206:	18bb      	adds	r3, r7, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d004      	beq.n	8001218 <HAL_CAN_ConfigFilter+0x30>
 800120e:	18bb      	adds	r3, r7, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d000      	beq.n	8001218 <HAL_CAN_ConfigFilter+0x30>
 8001216:	e0cd      	b.n	80013b4 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	58d3      	ldr	r3, [r2, r3]
 8001220:	2201      	movs	r2, #1
 8001222:	431a      	orrs	r2, r3
 8001224:	0011      	movs	r1, r2
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	221f      	movs	r2, #31
 8001234:	4013      	ands	r3, r2
 8001236:	2201      	movs	r2, #1
 8001238:	409a      	lsls	r2, r3
 800123a:	0013      	movs	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	2387      	movs	r3, #135	; 0x87
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	58d3      	ldr	r3, [r2, r3]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	43d2      	mvns	r2, r2
 800124a:	401a      	ands	r2, r3
 800124c:	0011      	movs	r1, r2
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	2387      	movs	r3, #135	; 0x87
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d129      	bne.n	80012b2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	2383      	movs	r3, #131	; 0x83
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	58d3      	ldr	r3, [r2, r3]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	43d2      	mvns	r2, r2
 800126a:	401a      	ands	r2, r3
 800126c:	0011      	movs	r1, r2
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	2383      	movs	r3, #131	; 0x83
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	041b      	lsls	r3, r3, #16
 8001282:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001288:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3248      	adds	r2, #72	; 0x48
 800128e:	00d2      	lsls	r2, r2, #3
 8001290:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	041b      	lsls	r3, r3, #16
 800129e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012a6:	6979      	ldr	r1, [r7, #20]
 80012a8:	3348      	adds	r3, #72	; 0x48
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	18cb      	adds	r3, r1, r3
 80012ae:	3304      	adds	r3, #4
 80012b0:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d128      	bne.n	800130c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	2383      	movs	r3, #131	; 0x83
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	58d2      	ldr	r2, [r2, r3]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	0011      	movs	r1, r2
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	2383      	movs	r3, #131	; 0x83
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012e2:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3248      	adds	r2, #72	; 0x48
 80012e8:	00d2      	lsls	r2, r2, #3
 80012ea:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	041b      	lsls	r3, r3, #16
 80012f8:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001300:	6979      	ldr	r1, [r7, #20]
 8001302:	3348      	adds	r3, #72	; 0x48
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	18cb      	adds	r3, r1, r3
 8001308:	3304      	adds	r3, #4
 800130a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10c      	bne.n	800132e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	2381      	movs	r3, #129	; 0x81
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	58d3      	ldr	r3, [r2, r3]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	43d2      	mvns	r2, r2
 8001320:	401a      	ands	r2, r3
 8001322:	0011      	movs	r1, r2
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	2381      	movs	r3, #129	; 0x81
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	50d1      	str	r1, [r2, r3]
 800132c:	e00a      	b.n	8001344 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	2381      	movs	r3, #129	; 0x81
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	58d2      	ldr	r2, [r2, r3]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	431a      	orrs	r2, r3
 800133a:	0011      	movs	r1, r2
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	2381      	movs	r3, #129	; 0x81
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10c      	bne.n	8001366 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	2385      	movs	r3, #133	; 0x85
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	58d3      	ldr	r3, [r2, r3]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	43d2      	mvns	r2, r2
 8001358:	401a      	ands	r2, r3
 800135a:	0011      	movs	r1, r2
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	2385      	movs	r3, #133	; 0x85
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	50d1      	str	r1, [r2, r3]
 8001364:	e00a      	b.n	800137c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	2385      	movs	r3, #133	; 0x85
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	58d2      	ldr	r2, [r2, r3]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	431a      	orrs	r2, r3
 8001372:	0011      	movs	r1, r2
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	2385      	movs	r3, #133	; 0x85
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10a      	bne.n	800139a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	2387      	movs	r3, #135	; 0x87
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	58d2      	ldr	r2, [r2, r3]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	431a      	orrs	r2, r3
 8001390:	0011      	movs	r1, r2
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	2387      	movs	r3, #135	; 0x87
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	58d3      	ldr	r3, [r2, r3]
 80013a2:	2201      	movs	r2, #1
 80013a4:	4393      	bics	r3, r2
 80013a6:	0019      	movs	r1, r3
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e007      	b.n	80013c4 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	02d2      	lsls	r2, r2, #11
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
  }
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b006      	add	sp, #24
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2220      	movs	r2, #32
 80013d8:	5c9b      	ldrb	r3, [r3, r2]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d12f      	bne.n	8001440 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2220      	movs	r2, #32
 80013e4:	2102      	movs	r1, #2
 80013e6:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2101      	movs	r1, #1
 80013f4:	438a      	bics	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013f8:	f7ff fba0 	bl	8000b3c <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001400:	e013      	b.n	800142a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001402:	f7ff fb9b 	bl	8000b3c <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b0a      	cmp	r3, #10
 800140e:	d90c      	bls.n	800142a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	0292      	lsls	r2, r2, #10
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2220      	movs	r2, #32
 8001422:	2105      	movs	r1, #5
 8001424:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e012      	b.n	8001450 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	4013      	ands	r3, r2
 8001434:	d1e5      	bne.n	8001402 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	e007      	b.n	8001450 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	0312      	lsls	r2, r2, #12
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
  }
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b004      	add	sp, #16
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001466:	201f      	movs	r0, #31
 8001468:	183b      	adds	r3, r7, r0
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	2120      	movs	r1, #32
 800146e:	5c52      	ldrb	r2, [r2, r1]
 8001470:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800147a:	183b      	adds	r3, r7, r0
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d004      	beq.n	800148c <HAL_CAN_AddTxMessage+0x34>
 8001482:	183b      	adds	r3, r7, r0
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d000      	beq.n	800148c <HAL_CAN_AddTxMessage+0x34>
 800148a:	e0b7      	b.n	80015fc <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	04db      	lsls	r3, r3, #19
 8001492:	4013      	ands	r3, r2
 8001494:	d10a      	bne.n	80014ac <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	051b      	lsls	r3, r3, #20
 800149c:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800149e:	d105      	bne.n	80014ac <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	055b      	lsls	r3, r3, #21
 80014a6:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014a8:	d100      	bne.n	80014ac <HAL_CAN_AddTxMessage+0x54>
 80014aa:	e09e      	b.n	80015ea <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	0e1b      	lsrs	r3, r3, #24
 80014b0:	2203      	movs	r2, #3
 80014b2:	4013      	ands	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d908      	bls.n	80014ce <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	0412      	lsls	r2, r2, #16
 80014c4:	431a      	orrs	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e09e      	b.n	800160c <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014ce:	2201      	movs	r2, #1
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10c      	bne.n	80014fa <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4311      	orrs	r1, r2
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	3218      	adds	r2, #24
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	50d1      	str	r1, [r2, r3]
 80014f8:	e00f      	b.n	800151a <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001504:	431a      	orrs	r2, r3
 8001506:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001510:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	3218      	adds	r2, #24
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6819      	ldr	r1, [r3, #0]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3318      	adds	r3, #24
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	18cb      	adds	r3, r1, r3
 800152a:	3304      	adds	r3, #4
 800152c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	7d1b      	ldrb	r3, [r3, #20]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d112      	bne.n	800155c <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3318      	adds	r3, #24
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	18d3      	adds	r3, r2, r3
 8001542:	3304      	adds	r3, #4
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	431a      	orrs	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3318      	adds	r3, #24
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	18cb      	adds	r3, r1, r3
 8001558:	3304      	adds	r3, #4
 800155a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3307      	adds	r3, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	061a      	lsls	r2, r3, #24
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3306      	adds	r3, #6
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	041b      	lsls	r3, r3, #16
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3305      	adds	r3, #5
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3304      	adds	r3, #4
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	0019      	movs	r1, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	6979      	ldr	r1, [r7, #20]
 8001588:	23c6      	movs	r3, #198	; 0xc6
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	0109      	lsls	r1, r1, #4
 800158e:	1841      	adds	r1, r0, r1
 8001590:	18cb      	adds	r3, r1, r3
 8001592:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3303      	adds	r3, #3
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	061a      	lsls	r2, r3, #24
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3302      	adds	r3, #2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3301      	adds	r3, #1
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	0019      	movs	r1, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	6979      	ldr	r1, [r7, #20]
 80015be:	23c4      	movs	r3, #196	; 0xc4
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	0109      	lsls	r1, r1, #4
 80015c4:	1841      	adds	r1, r0, r1
 80015c6:	18cb      	adds	r3, r1, r3
 80015c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	3218      	adds	r2, #24
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	58d2      	ldr	r2, [r2, r3]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2101      	movs	r1, #1
 80015dc:	4311      	orrs	r1, r2
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	3218      	adds	r2, #24
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e010      	b.n	800160c <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	2280      	movs	r2, #128	; 0x80
 80015f0:	0392      	lsls	r2, r2, #14
 80015f2:	431a      	orrs	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e007      	b.n	800160c <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	02d2      	lsls	r2, r2, #11
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
  }
}
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	b008      	add	sp, #32
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001622:	2017      	movs	r0, #23
 8001624:	183b      	adds	r3, r7, r0
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	2120      	movs	r1, #32
 800162a:	5c52      	ldrb	r2, [r2, r1]
 800162c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800162e:	0002      	movs	r2, r0
 8001630:	18bb      	adds	r3, r7, r2
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d004      	beq.n	8001642 <HAL_CAN_GetRxMessage+0x2e>
 8001638:	18bb      	adds	r3, r7, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d000      	beq.n	8001642 <HAL_CAN_GetRxMessage+0x2e>
 8001640:	e0f8      	b.n	8001834 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10e      	bne.n	8001666 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2203      	movs	r2, #3
 8001650:	4013      	ands	r3, r2
 8001652:	d117      	bne.n	8001684 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	2280      	movs	r2, #128	; 0x80
 800165a:	0392      	lsls	r2, r2, #14
 800165c:	431a      	orrs	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0ee      	b.n	8001844 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	2203      	movs	r2, #3
 800166e:	4013      	ands	r3, r2
 8001670:	d108      	bne.n	8001684 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	0392      	lsls	r2, r2, #14
 800167a:	431a      	orrs	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0df      	b.n	8001844 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	321b      	adds	r2, #27
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	58d3      	ldr	r3, [r2, r3]
 8001690:	2204      	movs	r2, #4
 8001692:	401a      	ands	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10b      	bne.n	80016b8 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	321b      	adds	r2, #27
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	58d3      	ldr	r3, [r2, r3]
 80016ac:	0d5b      	lsrs	r3, r3, #21
 80016ae:	055b      	lsls	r3, r3, #21
 80016b0:	0d5a      	lsrs	r2, r3, #21
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e00a      	b.n	80016ce <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	321b      	adds	r2, #27
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	58d3      	ldr	r3, [r2, r3]
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	321b      	adds	r2, #27
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	58d3      	ldr	r3, [r2, r3]
 80016da:	2202      	movs	r2, #2
 80016dc:	401a      	ands	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	331b      	adds	r3, #27
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	18d3      	adds	r3, r2, r3
 80016ee:	3304      	adds	r3, #4
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	220f      	movs	r2, #15
 80016f4:	401a      	ands	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	331b      	adds	r3, #27
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	18d3      	adds	r3, r2, r3
 8001706:	3304      	adds	r3, #4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	22ff      	movs	r2, #255	; 0xff
 800170e:	401a      	ands	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	331b      	adds	r3, #27
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	18d3      	adds	r3, r2, r3
 8001720:	3304      	adds	r3, #4
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0c1b      	lsrs	r3, r3, #16
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	0c1a      	lsrs	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6819      	ldr	r1, [r3, #0]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	23dc      	movs	r3, #220	; 0xdc
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	188a      	adds	r2, r1, r2
 800173c:	18d3      	adds	r3, r2, r3
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6819      	ldr	r1, [r3, #0]
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	23dc      	movs	r3, #220	; 0xdc
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	188a      	adds	r2, r1, r2
 8001754:	18d3      	adds	r3, r2, r3
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0a1a      	lsrs	r2, r3, #8
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6819      	ldr	r1, [r3, #0]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	23dc      	movs	r3, #220	; 0xdc
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	188a      	adds	r2, r1, r2
 8001770:	18d3      	adds	r3, r2, r3
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0c1a      	lsrs	r2, r3, #16
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	3302      	adds	r3, #2
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	23dc      	movs	r3, #220	; 0xdc
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	0112      	lsls	r2, r2, #4
 800178a:	188a      	adds	r2, r1, r2
 800178c:	18d3      	adds	r3, r2, r3
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	0e1a      	lsrs	r2, r3, #24
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	3303      	adds	r3, #3
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6819      	ldr	r1, [r3, #0]
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	23de      	movs	r3, #222	; 0xde
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	188a      	adds	r2, r1, r2
 80017a8:	18d3      	adds	r3, r2, r3
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	3304      	adds	r3, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	23de      	movs	r3, #222	; 0xde
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	188a      	adds	r2, r1, r2
 80017c2:	18d3      	adds	r3, r2, r3
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	0a1a      	lsrs	r2, r3, #8
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	3305      	adds	r3, #5
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	23de      	movs	r3, #222	; 0xde
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	188a      	adds	r2, r1, r2
 80017de:	18d3      	adds	r3, r2, r3
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	0c1a      	lsrs	r2, r3, #16
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	3306      	adds	r3, #6
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6819      	ldr	r1, [r3, #0]
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	23de      	movs	r3, #222	; 0xde
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	188a      	adds	r2, r1, r2
 80017fa:	18d3      	adds	r3, r2, r3
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	0e1a      	lsrs	r2, r3, #24
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	3307      	adds	r3, #7
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d108      	bne.n	8001820 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2120      	movs	r1, #32
 800181a:	430a      	orrs	r2, r1
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	e007      	b.n	8001830 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2120      	movs	r1, #32
 800182c:	430a      	orrs	r2, r1
 800182e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	e007      	b.n	8001844 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	2280      	movs	r2, #128	; 0x80
 800183a:	02d2      	lsls	r2, r2, #11
 800183c:	431a      	orrs	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
  }
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b006      	add	sp, #24
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001856:	200f      	movs	r0, #15
 8001858:	183b      	adds	r3, r7, r0
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	2120      	movs	r1, #32
 800185e:	5c52      	ldrb	r2, [r2, r1]
 8001860:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001862:	0002      	movs	r2, r0
 8001864:	18bb      	adds	r3, r7, r2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d003      	beq.n	8001874 <HAL_CAN_ActivateNotification+0x28>
 800186c:	18bb      	adds	r3, r7, r2
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d109      	bne.n	8001888 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6959      	ldr	r1, [r3, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	e007      	b.n	8001898 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	02d2      	lsls	r2, r2, #11
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
  }
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b004      	add	sp, #16
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	2201      	movs	r2, #1
 80018e0:	4013      	ands	r3, r2
 80018e2:	d100      	bne.n	80018e6 <HAL_CAN_IRQHandler+0x46>
 80018e4:	e084      	b.n	80019f0 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	d024      	beq.n	8001938 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2201      	movs	r2, #1
 80018f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2202      	movs	r2, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d004      	beq.n	8001908 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0018      	movs	r0, r3
 8001902:	f000 f981 	bl	8001c08 <HAL_CAN_TxMailbox0CompleteCallback>
 8001906:	e017      	b.n	8001938 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2204      	movs	r2, #4
 800190c:	4013      	ands	r3, r2
 800190e:	d005      	beq.n	800191c <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	2280      	movs	r2, #128	; 0x80
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	4313      	orrs	r3, r2
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
 800191a:	e00d      	b.n	8001938 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2208      	movs	r2, #8
 8001920:	4013      	ands	r3, r2
 8001922:	d005      	beq.n	8001930 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	0152      	lsls	r2, r2, #5
 800192a:	4313      	orrs	r3, r2
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
 800192e:	e003      	b.n	8001938 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	0018      	movs	r0, r3
 8001934:	f000 f980 	bl	8001c38 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4013      	ands	r3, r2
 8001940:	d028      	beq.n	8001994 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2280      	movs	r2, #128	; 0x80
 8001948:	0052      	lsls	r2, r2, #1
 800194a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4013      	ands	r3, r2
 8001954:	d004      	beq.n	8001960 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0018      	movs	r0, r3
 800195a:	f000 f95d 	bl	8001c18 <HAL_CAN_TxMailbox1CompleteCallback>
 800195e:	e019      	b.n	8001994 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4013      	ands	r3, r2
 8001968:	d005      	beq.n	8001976 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	0192      	lsls	r2, r2, #6
 8001970:	4313      	orrs	r3, r2
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
 8001974:	e00e      	b.n	8001994 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	4013      	ands	r3, r2
 800197e:	d005      	beq.n	800198c <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	2280      	movs	r2, #128	; 0x80
 8001984:	01d2      	lsls	r2, r2, #7
 8001986:	4313      	orrs	r3, r2
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
 800198a:	e003      	b.n	8001994 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	0018      	movs	r0, r3
 8001990:	f000 f95a 	bl	8001c48 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	4013      	ands	r3, r2
 800199c:	d028      	beq.n	80019f0 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	0252      	lsls	r2, r2, #9
 80019a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	029b      	lsls	r3, r3, #10
 80019ae:	4013      	ands	r3, r2
 80019b0:	d004      	beq.n	80019bc <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f000 f937 	bl	8001c28 <HAL_CAN_TxMailbox2CompleteCallback>
 80019ba:	e019      	b.n	80019f0 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	02db      	lsls	r3, r3, #11
 80019c2:	4013      	ands	r3, r2
 80019c4:	d005      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	2280      	movs	r2, #128	; 0x80
 80019ca:	0212      	lsls	r2, r2, #8
 80019cc:	4313      	orrs	r3, r2
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
 80019d0:	e00e      	b.n	80019f0 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	031b      	lsls	r3, r3, #12
 80019d8:	4013      	ands	r3, r2
 80019da:	d005      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	0252      	lsls	r2, r2, #9
 80019e2:	4313      	orrs	r3, r2
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
 80019e6:	e003      	b.n	80019f0 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	0018      	movs	r0, r3
 80019ec:	f000 f934 	bl	8001c58 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	2208      	movs	r2, #8
 80019f4:	4013      	ands	r3, r2
 80019f6:	d00c      	beq.n	8001a12 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2210      	movs	r2, #16
 80019fc:	4013      	ands	r3, r2
 80019fe:	d008      	beq.n	8001a12 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	4313      	orrs	r3, r2
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2210      	movs	r2, #16
 8001a10:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	2204      	movs	r2, #4
 8001a16:	4013      	ands	r3, r2
 8001a18:	d00b      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d007      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2208      	movs	r2, #8
 8001a28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f000 f91b 	bl	8001c68 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	2202      	movs	r2, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	d009      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2203      	movs	r2, #3
 8001a42:	4013      	ands	r3, r2
 8001a44:	d003      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7fe fbe7 	bl	800021c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	2240      	movs	r2, #64	; 0x40
 8001a52:	4013      	ands	r3, r2
 8001a54:	d00c      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d008      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	00d2      	lsls	r2, r2, #3
 8001a64:	4313      	orrs	r3, r2
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	2220      	movs	r2, #32
 8001a74:	4013      	ands	r3, r2
 8001a76:	d00b      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d007      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2208      	movs	r2, #8
 8001a86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 f8fc 	bl	8001c88 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	2210      	movs	r2, #16
 8001a94:	4013      	ands	r3, r2
 8001a96:	d009      	beq.n	8001aac <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d003      	beq.n	8001aac <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 f8e6 	bl	8001c78 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001aac:	6a3a      	ldr	r2, [r7, #32]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	029b      	lsls	r3, r3, #10
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d00b      	beq.n	8001ace <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	4013      	ands	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 f8e5 	bl	8001c98 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ace:	6a3a      	ldr	r2, [r7, #32]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	025b      	lsls	r3, r3, #9
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d00b      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2208      	movs	r2, #8
 8001adc:	4013      	ands	r3, r2
 8001ade:	d007      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	0018      	movs	r0, r3
 8001aec:	f000 f8dc 	bl	8001ca8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001af0:	6a3a      	ldr	r2, [r7, #32]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	4013      	ands	r3, r2
 8001af8:	d100      	bne.n	8001afc <HAL_CAN_IRQHandler+0x25c>
 8001afa:	e074      	b.n	8001be6 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2204      	movs	r2, #4
 8001b00:	4013      	ands	r3, r2
 8001b02:	d100      	bne.n	8001b06 <HAL_CAN_IRQHandler+0x266>
 8001b04:	e06b      	b.n	8001bde <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b06:	6a3a      	ldr	r2, [r7, #32]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d007      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b16:	d003      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b20:	6a3a      	ldr	r2, [r7, #32]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4013      	ands	r3, r2
 8001b28:	d007      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b30:	d003      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	2202      	movs	r2, #2
 8001b36:	4313      	orrs	r3, r2
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b3a:	6a3a      	ldr	r2, [r7, #32]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4013      	ands	r3, r2
 8001b42:	d007      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2204      	movs	r2, #4
 8001b48:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b4a:	d003      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	2204      	movs	r2, #4
 8001b50:	4313      	orrs	r3, r2
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b54:	6a3a      	ldr	r2, [r7, #32]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d03f      	beq.n	8001bde <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2270      	movs	r2, #112	; 0x70
 8001b62:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b64:	d03b      	beq.n	8001bde <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2270      	movs	r2, #112	; 0x70
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b60      	cmp	r3, #96	; 0x60
 8001b6e:	d027      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0x320>
 8001b70:	d82c      	bhi.n	8001bcc <HAL_CAN_IRQHandler+0x32c>
 8001b72:	2b50      	cmp	r3, #80	; 0x50
 8001b74:	d01f      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x316>
 8001b76:	d829      	bhi.n	8001bcc <HAL_CAN_IRQHandler+0x32c>
 8001b78:	2b40      	cmp	r3, #64	; 0x40
 8001b7a:	d017      	beq.n	8001bac <HAL_CAN_IRQHandler+0x30c>
 8001b7c:	d826      	bhi.n	8001bcc <HAL_CAN_IRQHandler+0x32c>
 8001b7e:	2b30      	cmp	r3, #48	; 0x30
 8001b80:	d00f      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x302>
 8001b82:	d823      	bhi.n	8001bcc <HAL_CAN_IRQHandler+0x32c>
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d002      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x2ee>
 8001b88:	2b20      	cmp	r3, #32
 8001b8a:	d005      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b8c:	e01e      	b.n	8001bcc <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	2208      	movs	r2, #8
 8001b92:	4313      	orrs	r3, r2
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b96:	e01a      	b.n	8001bce <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ba0:	e015      	b.n	8001bce <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001baa:	e010      	b.n	8001bce <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bb4:	e00b      	b.n	8001bce <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bbe:	e006      	b.n	8001bce <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	0052      	lsls	r2, r2, #1
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bca:	e000      	b.n	8001bce <HAL_CAN_IRQHandler+0x32e>
            break;
 8001bcc:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	699a      	ldr	r2, [r3, #24]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2170      	movs	r1, #112	; 0x70
 8001bda:	438a      	bics	r2, r1
 8001bdc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2204      	movs	r2, #4
 8001be4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d009      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 f85c 	bl	8001cb8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b00a      	add	sp, #40	; 0x28
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c10:	46c0      	nop			; (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b002      	add	sp, #8
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b002      	add	sp, #8
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c50:	46c0      	nop			; (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c70:	46c0      	nop			; (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b002      	add	sp, #8
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	0002      	movs	r2, r0
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	1dfb      	adds	r3, r7, #7
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cda:	d809      	bhi.n	8001cf0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	231f      	movs	r3, #31
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_EnableIRQ+0x30>)
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4091      	lsls	r1, r2
 8001cec:	000a      	movs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
  }
}
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	0002      	movs	r2, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	1dfb      	adds	r3, r7, #7
 8001d08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d10:	d828      	bhi.n	8001d64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d12:	4a2f      	ldr	r2, [pc, #188]	; (8001dd0 <__NVIC_SetPriority+0xd4>)
 8001d14:	1dfb      	adds	r3, r7, #7
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	33c0      	adds	r3, #192	; 0xc0
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	589b      	ldr	r3, [r3, r2]
 8001d22:	1dfa      	adds	r2, r7, #7
 8001d24:	7812      	ldrb	r2, [r2, #0]
 8001d26:	0011      	movs	r1, r2
 8001d28:	2203      	movs	r2, #3
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	00d2      	lsls	r2, r2, #3
 8001d2e:	21ff      	movs	r1, #255	; 0xff
 8001d30:	4091      	lsls	r1, r2
 8001d32:	000a      	movs	r2, r1
 8001d34:	43d2      	mvns	r2, r2
 8001d36:	401a      	ands	r2, r3
 8001d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	019b      	lsls	r3, r3, #6
 8001d3e:	22ff      	movs	r2, #255	; 0xff
 8001d40:	401a      	ands	r2, r3
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	0018      	movs	r0, r3
 8001d48:	2303      	movs	r3, #3
 8001d4a:	4003      	ands	r3, r0
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d50:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <__NVIC_SetPriority+0xd4>)
 8001d52:	1dfb      	adds	r3, r7, #7
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b25b      	sxtb	r3, r3
 8001d58:	089b      	lsrs	r3, r3, #2
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	33c0      	adds	r3, #192	; 0xc0
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d62:	e031      	b.n	8001dc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d64:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <__NVIC_SetPriority+0xd8>)
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	400b      	ands	r3, r1
 8001d70:	3b08      	subs	r3, #8
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	3306      	adds	r3, #6
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	18d3      	adds	r3, r2, r3
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	1dfa      	adds	r2, r7, #7
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	0011      	movs	r1, r2
 8001d84:	2203      	movs	r2, #3
 8001d86:	400a      	ands	r2, r1
 8001d88:	00d2      	lsls	r2, r2, #3
 8001d8a:	21ff      	movs	r1, #255	; 0xff
 8001d8c:	4091      	lsls	r1, r2
 8001d8e:	000a      	movs	r2, r1
 8001d90:	43d2      	mvns	r2, r2
 8001d92:	401a      	ands	r2, r3
 8001d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	019b      	lsls	r3, r3, #6
 8001d9a:	22ff      	movs	r2, #255	; 0xff
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	0018      	movs	r0, r3
 8001da4:	2303      	movs	r3, #3
 8001da6:	4003      	ands	r3, r0
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dac:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <__NVIC_SetPriority+0xd8>)
 8001dae:	1dfb      	adds	r3, r7, #7
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	001c      	movs	r4, r3
 8001db4:	230f      	movs	r3, #15
 8001db6:	4023      	ands	r3, r4
 8001db8:	3b08      	subs	r3, #8
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	3306      	adds	r3, #6
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	18c3      	adds	r3, r0, r3
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	601a      	str	r2, [r3, #0]
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b003      	add	sp, #12
 8001dce:	bd90      	pop	{r4, r7, pc}
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	1e5a      	subs	r2, r3, #1
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	045b      	lsls	r3, r3, #17
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d301      	bcc.n	8001df0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dec:	2301      	movs	r3, #1
 8001dee:	e010      	b.n	8001e12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <SysTick_Config+0x44>)
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	3a01      	subs	r2, #1
 8001df6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df8:	2301      	movs	r3, #1
 8001dfa:	425b      	negs	r3, r3
 8001dfc:	2103      	movs	r1, #3
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f7ff ff7c 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SysTick_Config+0x44>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SysTick_Config+0x44>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	1c02      	adds	r2, r0, #0
 8001e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b25b      	sxtb	r3, r3
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff ff5d 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b004      	add	sp, #16
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	0002      	movs	r2, r0
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e56:	1dfb      	adds	r3, r7, #7
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b25b      	sxtb	r3, r3
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7ff ff33 	bl	8001cc8 <__NVIC_EnableIRQ>
}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff ffaf 	bl	8001dd8 <SysTick_Config>
 8001e7a:	0003      	movs	r3, r0
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e92:	e155      	b.n	8002140 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2101      	movs	r1, #1
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4091      	lsls	r1, r2
 8001e9e:	000a      	movs	r2, r1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d100      	bne.n	8001eac <HAL_GPIO_Init+0x28>
 8001eaa:	e146      	b.n	800213a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d005      	beq.n	8001ec4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d130      	bne.n	8001f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	0013      	movs	r3, r2
 8001ed4:	43da      	mvns	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efa:	2201      	movs	r2, #1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
 8001f00:	0013      	movs	r3, r2
 8001f02:	43da      	mvns	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	2201      	movs	r2, #1
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
 8001f18:	0013      	movs	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d017      	beq.n	8001f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	0013      	movs	r3, r2
 8001f42:	43da      	mvns	r2, r3
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	409a      	lsls	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2203      	movs	r2, #3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d123      	bne.n	8001fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	58d3      	ldr	r3, [r2, r3]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4013      	ands	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	409a      	lsls	r2, r3
 8001f88:	0013      	movs	r3, r2
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2107      	movs	r1, #7
 8001f9a:	400b      	ands	r3, r1
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	0013      	movs	r3, r2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	0092      	lsls	r2, r2, #2
 8001fb2:	6939      	ldr	r1, [r7, #16]
 8001fb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	0013      	movs	r3, r2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	23c0      	movs	r3, #192	; 0xc0
 8001ff0:	029b      	lsls	r3, r3, #10
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d100      	bne.n	8001ff8 <HAL_GPIO_Init+0x174>
 8001ff6:	e0a0      	b.n	800213a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff8:	4b57      	ldr	r3, [pc, #348]	; (8002158 <HAL_GPIO_Init+0x2d4>)
 8001ffa:	699a      	ldr	r2, [r3, #24]
 8001ffc:	4b56      	ldr	r3, [pc, #344]	; (8002158 <HAL_GPIO_Init+0x2d4>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	430a      	orrs	r2, r1
 8002002:	619a      	str	r2, [r3, #24]
 8002004:	4b54      	ldr	r3, [pc, #336]	; (8002158 <HAL_GPIO_Init+0x2d4>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002010:	4a52      	ldr	r2, [pc, #328]	; (800215c <HAL_GPIO_Init+0x2d8>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	589b      	ldr	r3, [r3, r2]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2203      	movs	r2, #3
 8002022:	4013      	ands	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	409a      	lsls	r2, r3
 800202a:	0013      	movs	r3, r2
 800202c:	43da      	mvns	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	2390      	movs	r3, #144	; 0x90
 8002038:	05db      	lsls	r3, r3, #23
 800203a:	429a      	cmp	r2, r3
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0x1ee>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a47      	ldr	r2, [pc, #284]	; (8002160 <HAL_GPIO_Init+0x2dc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x1ea>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a46      	ldr	r2, [pc, #280]	; (8002164 <HAL_GPIO_Init+0x2e0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x1e6>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a45      	ldr	r2, [pc, #276]	; (8002168 <HAL_GPIO_Init+0x2e4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x1e2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a44      	ldr	r2, [pc, #272]	; (800216c <HAL_GPIO_Init+0x2e8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x1de>
 800205e:	2304      	movs	r3, #4
 8002060:	e008      	b.n	8002074 <HAL_GPIO_Init+0x1f0>
 8002062:	2305      	movs	r3, #5
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x1f0>
 8002066:	2303      	movs	r3, #3
 8002068:	e004      	b.n	8002074 <HAL_GPIO_Init+0x1f0>
 800206a:	2302      	movs	r3, #2
 800206c:	e002      	b.n	8002074 <HAL_GPIO_Init+0x1f0>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x1f0>
 8002072:	2300      	movs	r3, #0
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	2103      	movs	r1, #3
 8002078:	400a      	ands	r2, r1
 800207a:	0092      	lsls	r2, r2, #2
 800207c:	4093      	lsls	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002084:	4935      	ldr	r1, [pc, #212]	; (800215c <HAL_GPIO_Init+0x2d8>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002092:	4b37      	ldr	r3, [pc, #220]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43da      	mvns	r2, r3
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	025b      	lsls	r3, r3, #9
 80020aa:	4013      	ands	r3, r2
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020b6:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43da      	mvns	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	029b      	lsls	r3, r3, #10
 80020d4:	4013      	ands	r3, r2
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020e0:	4b23      	ldr	r3, [pc, #140]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43da      	mvns	r2, r3
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	035b      	lsls	r3, r3, #13
 80020fe:	4013      	ands	r3, r2
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002110:	4b17      	ldr	r3, [pc, #92]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43da      	mvns	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	039b      	lsls	r3, r3, #14
 8002128:	4013      	ands	r3, r2
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3301      	adds	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	40da      	lsrs	r2, r3
 8002148:	1e13      	subs	r3, r2, #0
 800214a:	d000      	beq.n	800214e <HAL_GPIO_Init+0x2ca>
 800214c:	e6a2      	b.n	8001e94 <HAL_GPIO_Init+0x10>
  } 
}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b006      	add	sp, #24
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000
 8002160:	48000400 	.word	0x48000400
 8002164:	48000800 	.word	0x48000800
 8002168:	48000c00 	.word	0x48000c00
 800216c:	48001000 	.word	0x48001000
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	0008      	movs	r0, r1
 800217e:	0011      	movs	r1, r2
 8002180:	1cbb      	adds	r3, r7, #2
 8002182:	1c02      	adds	r2, r0, #0
 8002184:	801a      	strh	r2, [r3, #0]
 8002186:	1c7b      	adds	r3, r7, #1
 8002188:	1c0a      	adds	r2, r1, #0
 800218a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800218c:	1c7b      	adds	r3, r7, #1
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002194:	1cbb      	adds	r3, r7, #2
 8002196:	881a      	ldrh	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800219c:	e003      	b.n	80021a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800219e:	1cbb      	adds	r3, r7, #2
 80021a0:	881a      	ldrh	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b002      	add	sp, #8
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f000 fb76 	bl	80028b0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	d100      	bne.n	80021d0 <HAL_RCC_OscConfig+0x20>
 80021ce:	e08e      	b.n	80022ee <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021d0:	4bc5      	ldr	r3, [pc, #788]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	220c      	movs	r2, #12
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d00e      	beq.n	80021fa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021dc:	4bc2      	ldr	r3, [pc, #776]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	220c      	movs	r2, #12
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d117      	bne.n	8002218 <HAL_RCC_OscConfig+0x68>
 80021e8:	4bbf      	ldr	r3, [pc, #764]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	23c0      	movs	r3, #192	; 0xc0
 80021ee:	025b      	lsls	r3, r3, #9
 80021f0:	401a      	ands	r2, r3
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	025b      	lsls	r3, r3, #9
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d10e      	bne.n	8002218 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fa:	4bbb      	ldr	r3, [pc, #748]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	4013      	ands	r3, r2
 8002204:	d100      	bne.n	8002208 <HAL_RCC_OscConfig+0x58>
 8002206:	e071      	b.n	80022ec <HAL_RCC_OscConfig+0x13c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d000      	beq.n	8002212 <HAL_RCC_OscConfig+0x62>
 8002210:	e06c      	b.n	80022ec <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	f000 fb4c 	bl	80028b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d107      	bne.n	8002230 <HAL_RCC_OscConfig+0x80>
 8002220:	4bb1      	ldr	r3, [pc, #708]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4bb0      	ldr	r3, [pc, #704]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	0249      	lsls	r1, r1, #9
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e02f      	b.n	8002290 <HAL_RCC_OscConfig+0xe0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10c      	bne.n	8002252 <HAL_RCC_OscConfig+0xa2>
 8002238:	4bab      	ldr	r3, [pc, #684]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4baa      	ldr	r3, [pc, #680]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800223e:	49ab      	ldr	r1, [pc, #684]	; (80024ec <HAL_RCC_OscConfig+0x33c>)
 8002240:	400a      	ands	r2, r1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	4ba8      	ldr	r3, [pc, #672]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4ba7      	ldr	r3, [pc, #668]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800224a:	49a9      	ldr	r1, [pc, #676]	; (80024f0 <HAL_RCC_OscConfig+0x340>)
 800224c:	400a      	ands	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e01e      	b.n	8002290 <HAL_RCC_OscConfig+0xe0>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b05      	cmp	r3, #5
 8002258:	d10e      	bne.n	8002278 <HAL_RCC_OscConfig+0xc8>
 800225a:	4ba3      	ldr	r3, [pc, #652]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4ba2      	ldr	r3, [pc, #648]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	02c9      	lsls	r1, r1, #11
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	4b9f      	ldr	r3, [pc, #636]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b9e      	ldr	r3, [pc, #632]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	0249      	lsls	r1, r1, #9
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xe0>
 8002278:	4b9b      	ldr	r3, [pc, #620]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b9a      	ldr	r3, [pc, #616]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800227e:	499b      	ldr	r1, [pc, #620]	; (80024ec <HAL_RCC_OscConfig+0x33c>)
 8002280:	400a      	ands	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	4b98      	ldr	r3, [pc, #608]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b97      	ldr	r3, [pc, #604]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800228a:	4999      	ldr	r1, [pc, #612]	; (80024f0 <HAL_RCC_OscConfig+0x340>)
 800228c:	400a      	ands	r2, r1
 800228e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d014      	beq.n	80022c2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe fc50 	bl	8000b3c <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a2:	f7fe fc4b 	bl	8000b3c <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	; 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e2fd      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b4:	4b8c      	ldr	r3, [pc, #560]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	029b      	lsls	r3, r3, #10
 80022bc:	4013      	ands	r3, r2
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0xf2>
 80022c0:	e015      	b.n	80022ee <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe fc3b 	bl	8000b3c <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fc36 	bl	8000b3c <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e2e8      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	4b82      	ldr	r3, [pc, #520]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	029b      	lsls	r3, r3, #10
 80022e6:	4013      	ands	r3, r2
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x11c>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2202      	movs	r2, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	d100      	bne.n	80022fa <HAL_RCC_OscConfig+0x14a>
 80022f8:	e06c      	b.n	80023d4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022fa:	4b7b      	ldr	r3, [pc, #492]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	220c      	movs	r2, #12
 8002300:	4013      	ands	r3, r2
 8002302:	d00e      	beq.n	8002322 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002304:	4b78      	ldr	r3, [pc, #480]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	220c      	movs	r2, #12
 800230a:	4013      	ands	r3, r2
 800230c:	2b08      	cmp	r3, #8
 800230e:	d11f      	bne.n	8002350 <HAL_RCC_OscConfig+0x1a0>
 8002310:	4b75      	ldr	r3, [pc, #468]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	23c0      	movs	r3, #192	; 0xc0
 8002316:	025b      	lsls	r3, r3, #9
 8002318:	401a      	ands	r2, r3
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	429a      	cmp	r2, r3
 8002320:	d116      	bne.n	8002350 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	4b71      	ldr	r3, [pc, #452]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2202      	movs	r2, #2
 8002328:	4013      	ands	r3, r2
 800232a:	d005      	beq.n	8002338 <HAL_RCC_OscConfig+0x188>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d001      	beq.n	8002338 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e2bb      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002338:	4b6b      	ldr	r3, [pc, #428]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	22f8      	movs	r2, #248	; 0xf8
 800233e:	4393      	bics	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00da      	lsls	r2, r3, #3
 8002348:	4b67      	ldr	r3, [pc, #412]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	e041      	b.n	80023d4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d024      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002358:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b62      	ldr	r3, [pc, #392]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800235e:	2101      	movs	r1, #1
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fbea 	bl	8000b3c <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236e:	f7fe fbe5 	bl	8000b3c <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e297      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2202      	movs	r2, #2
 8002386:	4013      	ands	r3, r2
 8002388:	d0f1      	beq.n	800236e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	22f8      	movs	r2, #248	; 0xf8
 8002390:	4393      	bics	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	00da      	lsls	r2, r3, #3
 800239a:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e018      	b.n	80023d4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a2:	4b51      	ldr	r3, [pc, #324]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80023a8:	2101      	movs	r1, #1
 80023aa:	438a      	bics	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe fbc5 	bl	8000b3c <HAL_GetTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b8:	f7fe fbc0 	bl	8000b3c <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e272      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2202      	movs	r2, #2
 80023d0:	4013      	ands	r3, r2
 80023d2:	d1f1      	bne.n	80023b8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2208      	movs	r2, #8
 80023da:	4013      	ands	r3, r2
 80023dc:	d036      	beq.n	800244c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d019      	beq.n	800241a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e6:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80023e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ea:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80023ec:	2101      	movs	r1, #1
 80023ee:	430a      	orrs	r2, r1
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fba3 	bl	8000b3c <HAL_GetTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023fc:	f7fe fb9e 	bl	8000b3c <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e250      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	2202      	movs	r2, #2
 8002414:	4013      	ands	r3, r2
 8002416:	d0f1      	beq.n	80023fc <HAL_RCC_OscConfig+0x24c>
 8002418:	e018      	b.n	800244c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800241c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241e:	4b32      	ldr	r3, [pc, #200]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002420:	2101      	movs	r1, #1
 8002422:	438a      	bics	r2, r1
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7fe fb89 	bl	8000b3c <HAL_GetTick>
 800242a:	0003      	movs	r3, r0
 800242c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002430:	f7fe fb84 	bl	8000b3c <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e236      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002442:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2202      	movs	r2, #2
 8002448:	4013      	ands	r3, r2
 800244a:	d1f1      	bne.n	8002430 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2204      	movs	r2, #4
 8002452:	4013      	ands	r3, r2
 8002454:	d100      	bne.n	8002458 <HAL_RCC_OscConfig+0x2a8>
 8002456:	e0b5      	b.n	80025c4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002458:	201f      	movs	r0, #31
 800245a:	183b      	adds	r3, r7, r0
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	055b      	lsls	r3, r3, #21
 8002468:	4013      	ands	r3, r2
 800246a:	d110      	bne.n	800248e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002472:	2180      	movs	r1, #128	; 0x80
 8002474:	0549      	lsls	r1, r1, #21
 8002476:	430a      	orrs	r2, r1
 8002478:	61da      	str	r2, [r3, #28]
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	055b      	lsls	r3, r3, #21
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002488:	183b      	adds	r3, r7, r0
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_OscConfig+0x344>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4013      	ands	r3, r2
 8002498:	d11a      	bne.n	80024d0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249a:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <HAL_RCC_OscConfig+0x344>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_RCC_OscConfig+0x344>)
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	0049      	lsls	r1, r1, #1
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a8:	f7fe fb48 	bl	8000b3c <HAL_GetTick>
 80024ac:	0003      	movs	r3, r0
 80024ae:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b2:	f7fe fb43 	bl	8000b3c <HAL_GetTick>
 80024b6:	0002      	movs	r2, r0
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b64      	cmp	r3, #100	; 0x64
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e1f5      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_OscConfig+0x344>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d10f      	bne.n	80024f8 <HAL_RCC_OscConfig+0x348>
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80024da:	6a1a      	ldr	r2, [r3, #32]
 80024dc:	4b02      	ldr	r3, [pc, #8]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80024de:	2101      	movs	r1, #1
 80024e0:	430a      	orrs	r2, r1
 80024e2:	621a      	str	r2, [r3, #32]
 80024e4:	e036      	b.n	8002554 <HAL_RCC_OscConfig+0x3a4>
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	40021000 	.word	0x40021000
 80024ec:	fffeffff 	.word	0xfffeffff
 80024f0:	fffbffff 	.word	0xfffbffff
 80024f4:	40007000 	.word	0x40007000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10c      	bne.n	800251a <HAL_RCC_OscConfig+0x36a>
 8002500:	4bca      	ldr	r3, [pc, #808]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002502:	6a1a      	ldr	r2, [r3, #32]
 8002504:	4bc9      	ldr	r3, [pc, #804]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002506:	2101      	movs	r1, #1
 8002508:	438a      	bics	r2, r1
 800250a:	621a      	str	r2, [r3, #32]
 800250c:	4bc7      	ldr	r3, [pc, #796]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800250e:	6a1a      	ldr	r2, [r3, #32]
 8002510:	4bc6      	ldr	r3, [pc, #792]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002512:	2104      	movs	r1, #4
 8002514:	438a      	bics	r2, r1
 8002516:	621a      	str	r2, [r3, #32]
 8002518:	e01c      	b.n	8002554 <HAL_RCC_OscConfig+0x3a4>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b05      	cmp	r3, #5
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x38c>
 8002522:	4bc2      	ldr	r3, [pc, #776]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002524:	6a1a      	ldr	r2, [r3, #32]
 8002526:	4bc1      	ldr	r3, [pc, #772]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002528:	2104      	movs	r1, #4
 800252a:	430a      	orrs	r2, r1
 800252c:	621a      	str	r2, [r3, #32]
 800252e:	4bbf      	ldr	r3, [pc, #764]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002530:	6a1a      	ldr	r2, [r3, #32]
 8002532:	4bbe      	ldr	r3, [pc, #760]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002534:	2101      	movs	r1, #1
 8002536:	430a      	orrs	r2, r1
 8002538:	621a      	str	r2, [r3, #32]
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0x3a4>
 800253c:	4bbb      	ldr	r3, [pc, #748]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800253e:	6a1a      	ldr	r2, [r3, #32]
 8002540:	4bba      	ldr	r3, [pc, #744]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002542:	2101      	movs	r1, #1
 8002544:	438a      	bics	r2, r1
 8002546:	621a      	str	r2, [r3, #32]
 8002548:	4bb8      	ldr	r3, [pc, #736]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800254a:	6a1a      	ldr	r2, [r3, #32]
 800254c:	4bb7      	ldr	r3, [pc, #732]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800254e:	2104      	movs	r1, #4
 8002550:	438a      	bics	r2, r1
 8002552:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d014      	beq.n	8002586 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255c:	f7fe faee 	bl	8000b3c <HAL_GetTick>
 8002560:	0003      	movs	r3, r0
 8002562:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	e009      	b.n	800257a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fae9 	bl	8000b3c <HAL_GetTick>
 800256a:	0002      	movs	r2, r0
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	4aaf      	ldr	r2, [pc, #700]	; (8002830 <HAL_RCC_OscConfig+0x680>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e19a      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	4bac      	ldr	r3, [pc, #688]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x3b6>
 8002584:	e013      	b.n	80025ae <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002586:	f7fe fad9 	bl	8000b3c <HAL_GetTick>
 800258a:	0003      	movs	r3, r0
 800258c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258e:	e009      	b.n	80025a4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7fe fad4 	bl	8000b3c <HAL_GetTick>
 8002594:	0002      	movs	r2, r0
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	4aa5      	ldr	r2, [pc, #660]	; (8002830 <HAL_RCC_OscConfig+0x680>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e185      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a4:	4ba1      	ldr	r3, [pc, #644]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	2202      	movs	r2, #2
 80025aa:	4013      	ands	r3, r2
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025ae:	231f      	movs	r3, #31
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4b9c      	ldr	r3, [pc, #624]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	4b9b      	ldr	r3, [pc, #620]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80025be:	499d      	ldr	r1, [pc, #628]	; (8002834 <HAL_RCC_OscConfig+0x684>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2210      	movs	r2, #16
 80025ca:	4013      	ands	r3, r2
 80025cc:	d063      	beq.n	8002696 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d12a      	bne.n	800262c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025d6:	4b95      	ldr	r3, [pc, #596]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80025d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025da:	4b94      	ldr	r3, [pc, #592]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80025dc:	2104      	movs	r1, #4
 80025de:	430a      	orrs	r2, r1
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80025e2:	4b92      	ldr	r3, [pc, #584]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80025e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e6:	4b91      	ldr	r3, [pc, #580]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	430a      	orrs	r2, r1
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7fe faa5 	bl	8000b3c <HAL_GetTick>
 80025f2:	0003      	movs	r3, r0
 80025f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025f8:	f7fe faa0 	bl	8000b3c <HAL_GetTick>
 80025fc:	0002      	movs	r2, r0
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e152      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800260a:	4b88      	ldr	r3, [pc, #544]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	d0f1      	beq.n	80025f8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002614:	4b85      	ldr	r3, [pc, #532]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002618:	22f8      	movs	r2, #248	; 0xf8
 800261a:	4393      	bics	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	00da      	lsls	r2, r3, #3
 8002624:	4b81      	ldr	r3, [pc, #516]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002626:	430a      	orrs	r2, r1
 8002628:	635a      	str	r2, [r3, #52]	; 0x34
 800262a:	e034      	b.n	8002696 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	3305      	adds	r3, #5
 8002632:	d111      	bne.n	8002658 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002634:	4b7d      	ldr	r3, [pc, #500]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002638:	4b7c      	ldr	r3, [pc, #496]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800263a:	2104      	movs	r1, #4
 800263c:	438a      	bics	r2, r1
 800263e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002640:	4b7a      	ldr	r3, [pc, #488]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	22f8      	movs	r2, #248	; 0xf8
 8002646:	4393      	bics	r3, r2
 8002648:	0019      	movs	r1, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	00da      	lsls	r2, r3, #3
 8002650:	4b76      	ldr	r3, [pc, #472]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002652:	430a      	orrs	r2, r1
 8002654:	635a      	str	r2, [r3, #52]	; 0x34
 8002656:	e01e      	b.n	8002696 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002658:	4b74      	ldr	r3, [pc, #464]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800265a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800265c:	4b73      	ldr	r3, [pc, #460]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800265e:	2104      	movs	r1, #4
 8002660:	430a      	orrs	r2, r1
 8002662:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002664:	4b71      	ldr	r3, [pc, #452]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002668:	4b70      	ldr	r3, [pc, #448]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800266a:	2101      	movs	r1, #1
 800266c:	438a      	bics	r2, r1
 800266e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002670:	f7fe fa64 	bl	8000b3c <HAL_GetTick>
 8002674:	0003      	movs	r3, r0
 8002676:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800267a:	f7fe fa5f 	bl	8000b3c <HAL_GetTick>
 800267e:	0002      	movs	r2, r0
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e111      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800268c:	4b67      	ldr	r3, [pc, #412]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	2202      	movs	r2, #2
 8002692:	4013      	ands	r3, r2
 8002694:	d1f1      	bne.n	800267a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2220      	movs	r2, #32
 800269c:	4013      	ands	r3, r2
 800269e:	d05c      	beq.n	800275a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80026a0:	4b62      	ldr	r3, [pc, #392]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	220c      	movs	r2, #12
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d00e      	beq.n	80026ca <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80026ac:	4b5f      	ldr	r3, [pc, #380]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	220c      	movs	r2, #12
 80026b2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d114      	bne.n	80026e2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80026b8:	4b5c      	ldr	r3, [pc, #368]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	23c0      	movs	r3, #192	; 0xc0
 80026be:	025b      	lsls	r3, r3, #9
 80026c0:	401a      	ands	r2, r3
 80026c2:	23c0      	movs	r3, #192	; 0xc0
 80026c4:	025b      	lsls	r3, r3, #9
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d10b      	bne.n	80026e2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80026ca:	4b58      	ldr	r3, [pc, #352]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80026cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	025b      	lsls	r3, r3, #9
 80026d2:	4013      	ands	r3, r2
 80026d4:	d040      	beq.n	8002758 <HAL_RCC_OscConfig+0x5a8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d03c      	beq.n	8002758 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e0e6      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01b      	beq.n	8002722 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80026ea:	4b50      	ldr	r3, [pc, #320]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80026ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ee:	4b4f      	ldr	r3, [pc, #316]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	0249      	lsls	r1, r1, #9
 80026f4:	430a      	orrs	r2, r1
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fa20 	bl	8000b3c <HAL_GetTick>
 80026fc:	0003      	movs	r3, r0
 80026fe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002702:	f7fe fa1b 	bl	8000b3c <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0cd      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002714:	4b45      	ldr	r3, [pc, #276]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	025b      	lsls	r3, r3, #9
 800271c:	4013      	ands	r3, r2
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x552>
 8002720:	e01b      	b.n	800275a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002722:	4b42      	ldr	r3, [pc, #264]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002726:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002728:	4943      	ldr	r1, [pc, #268]	; (8002838 <HAL_RCC_OscConfig+0x688>)
 800272a:	400a      	ands	r2, r1
 800272c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fe fa05 	bl	8000b3c <HAL_GetTick>
 8002732:	0003      	movs	r3, r0
 8002734:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002738:	f7fe fa00 	bl	8000b3c <HAL_GetTick>
 800273c:	0002      	movs	r2, r0
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0b2      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800274a:	4b38      	ldr	r3, [pc, #224]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800274c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	025b      	lsls	r3, r3, #9
 8002752:	4013      	ands	r3, r2
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x588>
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002758:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	2b00      	cmp	r3, #0
 8002760:	d100      	bne.n	8002764 <HAL_RCC_OscConfig+0x5b4>
 8002762:	e0a4      	b.n	80028ae <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002764:	4b31      	ldr	r3, [pc, #196]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	220c      	movs	r2, #12
 800276a:	4013      	ands	r3, r2
 800276c:	2b08      	cmp	r3, #8
 800276e:	d100      	bne.n	8002772 <HAL_RCC_OscConfig+0x5c2>
 8002770:	e078      	b.n	8002864 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	2b02      	cmp	r3, #2
 8002778:	d14c      	bne.n	8002814 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277a:	4b2c      	ldr	r3, [pc, #176]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b2b      	ldr	r3, [pc, #172]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002780:	492e      	ldr	r1, [pc, #184]	; (800283c <HAL_RCC_OscConfig+0x68c>)
 8002782:	400a      	ands	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe f9d9 	bl	8000b3c <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe f9d4 	bl	8000b3c <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e086      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	049b      	lsls	r3, r3, #18
 80027aa:	4013      	ands	r3, r2
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ae:	4b1f      	ldr	r3, [pc, #124]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	220f      	movs	r2, #15
 80027b4:	4393      	bics	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80027be:	430a      	orrs	r2, r1
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a1e      	ldr	r2, [pc, #120]	; (8002840 <HAL_RCC_OscConfig+0x690>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	0019      	movs	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	431a      	orrs	r2, r3
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80027d8:	430a      	orrs	r2, r1
 80027da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 80027e2:	2180      	movs	r1, #128	; 0x80
 80027e4:	0449      	lsls	r1, r1, #17
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ea:	f7fe f9a7 	bl	8000b3c <HAL_GetTick>
 80027ee:	0003      	movs	r3, r0
 80027f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe f9a2 	bl	8000b3c <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e054      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	049b      	lsls	r3, r3, #18
 800280e:	4013      	ands	r3, r2
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x644>
 8002812:	e04c      	b.n	80028ae <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <HAL_RCC_OscConfig+0x67c>)
 800281a:	4908      	ldr	r1, [pc, #32]	; (800283c <HAL_RCC_OscConfig+0x68c>)
 800281c:	400a      	ands	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe f98c 	bl	8000b3c <HAL_GetTick>
 8002824:	0003      	movs	r3, r0
 8002826:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002828:	e015      	b.n	8002856 <HAL_RCC_OscConfig+0x6a6>
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	40021000 	.word	0x40021000
 8002830:	00001388 	.word	0x00001388
 8002834:	efffffff 	.word	0xefffffff
 8002838:	fffeffff 	.word	0xfffeffff
 800283c:	feffffff 	.word	0xfeffffff
 8002840:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe f97a 	bl	8000b3c <HAL_GetTick>
 8002848:	0002      	movs	r2, r0
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e02c      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002856:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_RCC_OscConfig+0x708>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	049b      	lsls	r3, r3, #18
 800285e:	4013      	ands	r3, r2
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x694>
 8002862:	e024      	b.n	80028ae <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e01f      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_RCC_OscConfig+0x708>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_RCC_OscConfig+0x708>)
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	23c0      	movs	r3, #192	; 0xc0
 8002880:	025b      	lsls	r3, r3, #9
 8002882:	401a      	ands	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	429a      	cmp	r2, r3
 800288a:	d10e      	bne.n	80028aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	220f      	movs	r2, #15
 8002890:	401a      	ands	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d107      	bne.n	80028aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	23f0      	movs	r3, #240	; 0xf0
 800289e:	039b      	lsls	r3, r3, #14
 80028a0:	401a      	ands	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b008      	add	sp, #32
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0bf      	b.n	8002a50 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <HAL_RCC_ClockConfig+0x19c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2201      	movs	r2, #1
 80028d6:	4013      	ands	r3, r2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d911      	bls.n	8002902 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b5e      	ldr	r3, [pc, #376]	; (8002a58 <HAL_RCC_ClockConfig+0x19c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2201      	movs	r2, #1
 80028e4:	4393      	bics	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	4b5b      	ldr	r3, [pc, #364]	; (8002a58 <HAL_RCC_ClockConfig+0x19c>)
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f0:	4b59      	ldr	r3, [pc, #356]	; (8002a58 <HAL_RCC_ClockConfig+0x19c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2201      	movs	r2, #1
 80028f6:	4013      	ands	r3, r2
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d001      	beq.n	8002902 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0a6      	b.n	8002a50 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2202      	movs	r2, #2
 8002908:	4013      	ands	r3, r2
 800290a:	d015      	beq.n	8002938 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2204      	movs	r2, #4
 8002912:	4013      	ands	r3, r2
 8002914:	d006      	beq.n	8002924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002916:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4b50      	ldr	r3, [pc, #320]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 800291c:	21e0      	movs	r1, #224	; 0xe0
 800291e:	00c9      	lsls	r1, r1, #3
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	22f0      	movs	r2, #240	; 0xf0
 800292a:	4393      	bics	r3, r2
 800292c:	0019      	movs	r1, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2201      	movs	r2, #1
 800293e:	4013      	ands	r3, r2
 8002940:	d04c      	beq.n	80029dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b44      	ldr	r3, [pc, #272]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	029b      	lsls	r3, r3, #10
 8002952:	4013      	ands	r3, r2
 8002954:	d120      	bne.n	8002998 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e07a      	b.n	8002a50 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002962:	4b3e      	ldr	r3, [pc, #248]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	049b      	lsls	r3, r3, #18
 800296a:	4013      	ands	r3, r2
 800296c:	d114      	bne.n	8002998 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e06e      	b.n	8002a50 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b03      	cmp	r3, #3
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 800297c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	025b      	lsls	r3, r3, #9
 8002982:	4013      	ands	r3, r2
 8002984:	d108      	bne.n	8002998 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e062      	b.n	8002a50 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2202      	movs	r2, #2
 8002990:	4013      	ands	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e05b      	b.n	8002a50 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2203      	movs	r2, #3
 800299e:	4393      	bics	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ac:	f7fe f8c6 	bl	8000b3c <HAL_GetTick>
 80029b0:	0003      	movs	r3, r0
 80029b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b4:	e009      	b.n	80029ca <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b6:	f7fe f8c1 	bl	8000b3c <HAL_GetTick>
 80029ba:	0002      	movs	r2, r0
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	4a27      	ldr	r2, [pc, #156]	; (8002a60 <HAL_RCC_ClockConfig+0x1a4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e042      	b.n	8002a50 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	220c      	movs	r2, #12
 80029d0:	401a      	ands	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1ec      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <HAL_RCC_ClockConfig+0x19c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2201      	movs	r2, #1
 80029e2:	4013      	ands	r3, r2
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d211      	bcs.n	8002a0e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_RCC_ClockConfig+0x19c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	4393      	bics	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_RCC_ClockConfig+0x19c>)
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <HAL_RCC_ClockConfig+0x19c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	4013      	ands	r3, r2
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d001      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e020      	b.n	8002a50 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2204      	movs	r2, #4
 8002a14:	4013      	ands	r3, r2
 8002a16:	d009      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <HAL_RCC_ClockConfig+0x1a8>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a2c:	f000 f820 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8002a30:	0001      	movs	r1, r0
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_RCC_ClockConfig+0x1a0>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	220f      	movs	r2, #15
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <HAL_RCC_ClockConfig+0x1ac>)
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
 8002a40:	000a      	movs	r2, r1
 8002a42:	40da      	lsrs	r2, r3
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_ClockConfig+0x1b0>)
 8002a46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a48:	2003      	movs	r0, #3
 8002a4a:	f7fe f831 	bl	8000ab0 <HAL_InitTick>
  
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40022000 	.word	0x40022000
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	00001388 	.word	0x00001388
 8002a64:	fffff8ff 	.word	0xfffff8ff
 8002a68:	08002d74 	.word	0x08002d74
 8002a6c:	20000000 	.word	0x20000000

08002a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b08f      	sub	sp, #60	; 0x3c
 8002a74:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002a76:	2314      	movs	r3, #20
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	4a38      	ldr	r2, [pc, #224]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xec>)
 8002a7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a7e:	c313      	stmia	r3!, {r0, r1, r4}
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	4a36      	ldr	r2, [pc, #216]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002a88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a8a:	c313      	stmia	r3!, {r0, r1, r4}
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a94:	2300      	movs	r3, #0
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a98:	2300      	movs	r3, #0
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002aa4:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	220c      	movs	r2, #12
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b0c      	cmp	r3, #12
 8002ab2:	d047      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0xd4>
 8002ab4:	d849      	bhi.n	8002b4a <HAL_RCC_GetSysClockFreq+0xda>
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x50>
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x56>
 8002abe:	e044      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ac0:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ac4:	e044      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	0c9b      	lsrs	r3, r3, #18
 8002aca:	220f      	movs	r2, #15
 8002acc:	4013      	ands	r3, r2
 8002ace:	2214      	movs	r2, #20
 8002ad0:	18ba      	adds	r2, r7, r2
 8002ad2:	5cd3      	ldrb	r3, [r2, r3]
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	220f      	movs	r2, #15
 8002adc:	4013      	ands	r3, r2
 8002ade:	1d3a      	adds	r2, r7, #4
 8002ae0:	5cd3      	ldrb	r3, [r2, r3]
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae6:	23c0      	movs	r3, #192	; 0xc0
 8002ae8:	025b      	lsls	r3, r3, #9
 8002aea:	401a      	ands	r2, r3
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	025b      	lsls	r3, r3, #9
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d109      	bne.n	8002b08 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002af6:	481c      	ldr	r0, [pc, #112]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af8:	f7fd fb04 	bl	8000104 <__udivsi3>
 8002afc:	0003      	movs	r3, r0
 8002afe:	001a      	movs	r2, r3
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	4353      	muls	r3, r2
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
 8002b06:	e01a      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0a:	23c0      	movs	r3, #192	; 0xc0
 8002b0c:	025b      	lsls	r3, r3, #9
 8002b0e:	401a      	ands	r2, r3
 8002b10:	23c0      	movs	r3, #192	; 0xc0
 8002b12:	025b      	lsls	r3, r3, #9
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d109      	bne.n	8002b2c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b1a:	4814      	ldr	r0, [pc, #80]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b1c:	f7fd faf2 	bl	8000104 <__udivsi3>
 8002b20:	0003      	movs	r3, r0
 8002b22:	001a      	movs	r2, r3
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	4353      	muls	r3, r2
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b2e:	4810      	ldr	r0, [pc, #64]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b30:	f7fd fae8 	bl	8000104 <__udivsi3>
 8002b34:	0003      	movs	r3, r0
 8002b36:	001a      	movs	r2, r3
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	4353      	muls	r3, r2
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b42:	e005      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b48:	e002      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b4e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b00f      	add	sp, #60	; 0x3c
 8002b58:	bd90      	pop	{r4, r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	08002d54 	.word	0x08002d54
 8002b60:	08002d64 	.word	0x08002d64
 8002b64:	40021000 	.word	0x40021000
 8002b68:	00b71b00 	.word	0x00b71b00
 8002b6c:	02dc6c00 	.word	0x02dc6c00
 8002b70:	007a1200 	.word	0x007a1200

08002b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0a8      	b.n	8002cd8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	2382      	movs	r3, #130	; 0x82
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d009      	beq.n	8002bae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	61da      	str	r2, [r3, #28]
 8002ba0:	e005      	b.n	8002bae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	225d      	movs	r2, #93	; 0x5d
 8002bb8:	5c9b      	ldrb	r3, [r3, r2]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d107      	bne.n	8002bd0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	225c      	movs	r2, #92	; 0x5c
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f7fd fe7e 	bl	80008cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	225d      	movs	r2, #93	; 0x5d
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2140      	movs	r1, #64	; 0x40
 8002be4:	438a      	bics	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	23e0      	movs	r3, #224	; 0xe0
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d902      	bls.n	8002bfa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	e002      	b.n	8002c00 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	015b      	lsls	r3, r3, #5
 8002bfe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	23f0      	movs	r3, #240	; 0xf0
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d008      	beq.n	8002c1e <HAL_SPI_Init+0xaa>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	23e0      	movs	r3, #224	; 0xe0
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d002      	beq.n	8002c1e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	2382      	movs	r3, #130	; 0x82
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	401a      	ands	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6899      	ldr	r1, [r3, #8]
 8002c2c:	2384      	movs	r3, #132	; 0x84
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	400b      	ands	r3, r1
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2102      	movs	r1, #2
 8002c3a:	400b      	ands	r3, r1
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	2101      	movs	r1, #1
 8002c44:	400b      	ands	r3, r1
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6999      	ldr	r1, [r3, #24]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	400b      	ands	r3, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	2138      	movs	r1, #56	; 0x38
 8002c5a:	400b      	ands	r3, r1
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	400b      	ands	r3, r1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	0011      	movs	r1, r2
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	019b      	lsls	r3, r3, #6
 8002c72:	401a      	ands	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	2204      	movs	r2, #4
 8002c84:	401a      	ands	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	2110      	movs	r1, #16
 8002c8c:	400b      	ands	r3, r1
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c94:	2108      	movs	r1, #8
 8002c96:	400b      	ands	r3, r1
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68d9      	ldr	r1, [r3, #12]
 8002c9e:	23f0      	movs	r3, #240	; 0xf0
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	0011      	movs	r1, r2
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	015b      	lsls	r3, r3, #5
 8002cae:	401a      	ands	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4907      	ldr	r1, [pc, #28]	; (8002ce0 <HAL_SPI_Init+0x16c>)
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	225d      	movs	r2, #93	; 0x5d
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b004      	add	sp, #16
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	fffff7ff 	.word	0xfffff7ff

08002ce4 <memset>:
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	1882      	adds	r2, r0, r2
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d100      	bne.n	8002cee <memset+0xa>
 8002cec:	4770      	bx	lr
 8002cee:	7019      	strb	r1, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	e7f9      	b.n	8002ce8 <memset+0x4>

08002cf4 <__libc_init_array>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	2600      	movs	r6, #0
 8002cf8:	4c0c      	ldr	r4, [pc, #48]	; (8002d2c <__libc_init_array+0x38>)
 8002cfa:	4d0d      	ldr	r5, [pc, #52]	; (8002d30 <__libc_init_array+0x3c>)
 8002cfc:	1b64      	subs	r4, r4, r5
 8002cfe:	10a4      	asrs	r4, r4, #2
 8002d00:	42a6      	cmp	r6, r4
 8002d02:	d109      	bne.n	8002d18 <__libc_init_array+0x24>
 8002d04:	2600      	movs	r6, #0
 8002d06:	f000 f819 	bl	8002d3c <_init>
 8002d0a:	4c0a      	ldr	r4, [pc, #40]	; (8002d34 <__libc_init_array+0x40>)
 8002d0c:	4d0a      	ldr	r5, [pc, #40]	; (8002d38 <__libc_init_array+0x44>)
 8002d0e:	1b64      	subs	r4, r4, r5
 8002d10:	10a4      	asrs	r4, r4, #2
 8002d12:	42a6      	cmp	r6, r4
 8002d14:	d105      	bne.n	8002d22 <__libc_init_array+0x2e>
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
 8002d18:	00b3      	lsls	r3, r6, #2
 8002d1a:	58eb      	ldr	r3, [r5, r3]
 8002d1c:	4798      	blx	r3
 8002d1e:	3601      	adds	r6, #1
 8002d20:	e7ee      	b.n	8002d00 <__libc_init_array+0xc>
 8002d22:	00b3      	lsls	r3, r6, #2
 8002d24:	58eb      	ldr	r3, [r5, r3]
 8002d26:	4798      	blx	r3
 8002d28:	3601      	adds	r6, #1
 8002d2a:	e7f2      	b.n	8002d12 <__libc_init_array+0x1e>
 8002d2c:	08002d84 	.word	0x08002d84
 8002d30:	08002d84 	.word	0x08002d84
 8002d34:	08002d88 	.word	0x08002d88
 8002d38:	08002d84 	.word	0x08002d84

08002d3c <_init>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d42:	bc08      	pop	{r3}
 8002d44:	469e      	mov	lr, r3
 8002d46:	4770      	bx	lr

08002d48 <_fini>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr
