
1_AXIS_F091_AMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000393c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a28  08003a28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a28  08003a28  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a28  08003a28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001140  2000000c  08003a3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000114c  08003a3c  0002114c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f95  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5e  00000000  00000000  00028fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b373  00000000  00000000  0002bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009dcb  00000000  00000000  00046e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa2e7  00000000  00000000  00050c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000faf05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e78  00000000  00000000  000faf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080039e0 	.word	0x080039e0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080039e0 	.word	0x080039e0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <TMC5160_Basic_Init>:
	}*/
}


void TMC5160_Basic_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
		TMC5160_Stop();
 8000220:	f000 f926 	bl	8000470 <TMC5160_Stop>
		TMC5160_SPIWrite(0x00, 	0x00000008, 1); 		// writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 8000224:	2201      	movs	r2, #1
 8000226:	2108      	movs	r1, #8
 8000228:	2000      	movs	r0, #0
 800022a:	f000 fc23 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x00, 	0x00000008, 0); 		// writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 800022e:	2200      	movs	r2, #0
 8000230:	2108      	movs	r1, #8
 8000232:	2000      	movs	r0, #0
 8000234:	f000 fc1e 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x03, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 1 = 0x03(SLAVECONF)
 8000238:	2201      	movs	r2, #1
 800023a:	2100      	movs	r1, #0
 800023c:	2003      	movs	r0, #3
 800023e:	f000 fc19 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x05, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 2 = 0x05(X_COMPARE)
 8000242:	2201      	movs	r2, #1
 8000244:	2100      	movs	r1, #0
 8000246:	2005      	movs	r0, #5
 8000248:	f000 fc14 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x06, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 3 = 0x06(OTP_PROG)
 800024c:	2201      	movs	r2, #1
 800024e:	2100      	movs	r1, #0
 8000250:	2006      	movs	r0, #6
 8000252:	f000 fc0f 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x08, 	0x0000000F, 1); 		// writing value 0x0000000F = 15 = 0.0 to address 4 = 0x08(FACTORY_CONF)
 8000256:	2201      	movs	r2, #1
 8000258:	210f      	movs	r1, #15
 800025a:	2008      	movs	r0, #8
 800025c:	f000 fc0a 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x09, 	0x00010606, 1); 		// writing value 0x00010606 = 67078 = 0.0 to address 5 = 0x09(SHORT_CONF)
 8000260:	4b73      	ldr	r3, [pc, #460]	; (8000430 <TMC5160_Basic_Init+0x214>)
 8000262:	2201      	movs	r2, #1
 8000264:	0019      	movs	r1, r3
 8000266:	2009      	movs	r0, #9
 8000268:	f000 fc04 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x0A, 	0x00080400, 1); 		// writing value 0x00080400 = 525312 = 0.0 to address 6 = 0x0A(DRV_CONF)
 800026c:	4b71      	ldr	r3, [pc, #452]	; (8000434 <TMC5160_Basic_Init+0x218>)
 800026e:	2201      	movs	r2, #1
 8000270:	0019      	movs	r1, r3
 8000272:	200a      	movs	r0, #10
 8000274:	f000 fbfe 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x0B, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 7 = 0x0B(GLOBAL_SCALER)
 8000278:	2201      	movs	r2, #1
 800027a:	2100      	movs	r1, #0
 800027c:	200b      	movs	r0, #11
 800027e:	f000 fbf9 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x10, 	0x00070A03, 1); 		// writing value 0x00070A03 = 461315 = 0.0 to address 8 = 0x10(IHOLD_IRUN)
 8000282:	4b6d      	ldr	r3, [pc, #436]	; (8000438 <TMC5160_Basic_Init+0x21c>)
 8000284:	2201      	movs	r2, #1
 8000286:	0019      	movs	r1, r3
 8000288:	2010      	movs	r0, #16
 800028a:	f000 fbf3 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x11, 	0x0000000A, 1); 		// writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 800028e:	2201      	movs	r2, #1
 8000290:	210a      	movs	r1, #10
 8000292:	2011      	movs	r0, #17
 8000294:	f000 fbee 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x13, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 8000298:	2201      	movs	r2, #1
 800029a:	2100      	movs	r1, #0
 800029c:	2013      	movs	r0, #19
 800029e:	f000 fbe9 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x14, 	0x00000000, 1); 		// writing value 0x00000010 = 16 = 0.0 to address 11 = 0x14(TCOOLTHRS)
 80002a2:	2201      	movs	r2, #1
 80002a4:	2100      	movs	r1, #0
 80002a6:	2014      	movs	r0, #20
 80002a8:	f000 fbe4 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x15, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 12 = 0x15(THIGH)
 80002ac:	2201      	movs	r2, #1
 80002ae:	2100      	movs	r1, #0
 80002b0:	2015      	movs	r0, #21
 80002b2:	f000 fbdf 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x20, 	0x00000001, 1); 		// writing value 0x00000001 = 1 = 0.0 to address 13 = 0x20(RAMPMODE)
 80002b6:	2201      	movs	r2, #1
 80002b8:	2101      	movs	r1, #1
 80002ba:	2020      	movs	r0, #32
 80002bc:	f000 fbda 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x21, 	0x00000000, 1); 		// writing value 0x0016DFDD = 1499101 = 0.0 to address 14 = 0x21(XACTUAL)
 80002c0:	2201      	movs	r2, #1
 80002c2:	2100      	movs	r1, #0
 80002c4:	2021      	movs	r0, #33	; 0x21
 80002c6:	f000 fbd5 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x23, 	0x000003E8, 1); 		// writing value 0x000003E8 = 1000 = 0.0 to address 15 = 0x23(VSTART)
 80002ca:	23fa      	movs	r3, #250	; 0xfa
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	2201      	movs	r2, #1
 80002d0:	0019      	movs	r1, r3
 80002d2:	2023      	movs	r0, #35	; 0x23
 80002d4:	f000 fbce 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x24, 	0x000003E8, 1); 		// writing value 0x000003E8 = 1000 = 0.0 to address 16 = 0x24(A1)
 80002d8:	23fa      	movs	r3, #250	; 0xfa
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	2201      	movs	r2, #1
 80002de:	0019      	movs	r1, r3
 80002e0:	2024      	movs	r0, #36	; 0x24
 80002e2:	f000 fbc7 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x25, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 17 = 0x25(V1)
 80002e6:	2201      	movs	r2, #1
 80002e8:	2100      	movs	r1, #0
 80002ea:	2025      	movs	r0, #37	; 0x25
 80002ec:	f000 fbc2 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x26, 	0x000009C4, 1); 		// writing value 0x000009C4 = 2500 = 0.0 to address 18 = 0x26(AMAX)
 80002f0:	4b52      	ldr	r3, [pc, #328]	; (800043c <TMC5160_Basic_Init+0x220>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	0019      	movs	r1, r3
 80002f6:	2026      	movs	r0, #38	; 0x26
 80002f8:	f000 fbbc 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x27, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 19 = 0x27(VMAX)
 80002fc:	2201      	movs	r2, #1
 80002fe:	2100      	movs	r1, #0
 8000300:	2027      	movs	r0, #39	; 0x27
 8000302:	f000 fbb7 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x28, 	0x000002BC, 1); 		// writing value 0x000002BC = 700 = 0.0 to address 20 = 0x28(DMAX)
 8000306:	23af      	movs	r3, #175	; 0xaf
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	2201      	movs	r2, #1
 800030c:	0019      	movs	r1, r3
 800030e:	2028      	movs	r0, #40	; 0x28
 8000310:	f000 fbb0 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x2A, 	0x00000578, 1); 		// writing value 0x00000578 = 1400 = 0.0 to address 21 = 0x2A(D1)
 8000314:	23af      	movs	r3, #175	; 0xaf
 8000316:	00db      	lsls	r3, r3, #3
 8000318:	2201      	movs	r2, #1
 800031a:	0019      	movs	r1, r3
 800031c:	202a      	movs	r0, #42	; 0x2a
 800031e:	f000 fba9 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x2B, 	0x0000000A, 1); 		// writing value 0x0000000A = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 8000322:	2201      	movs	r2, #1
 8000324:	210a      	movs	r1, #10
 8000326:	202b      	movs	r0, #43	; 0x2b
 8000328:	f000 fba4 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x2C, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 23 = 0x2C(TZEROWAIT)
 800032c:	2201      	movs	r2, #1
 800032e:	2100      	movs	r1, #0
 8000330:	202c      	movs	r0, #44	; 0x2c
 8000332:	f000 fb9f 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x2D, 	0xFFFF9C00, 1); 		// writing value 0xFFFF9C00 = 0 = 0.0 to address 24 = 0x2D(XTARGET)
 8000336:	4b42      	ldr	r3, [pc, #264]	; (8000440 <TMC5160_Basic_Init+0x224>)
 8000338:	2201      	movs	r2, #1
 800033a:	0019      	movs	r1, r3
 800033c:	202d      	movs	r0, #45	; 0x2d
 800033e:	f000 fb99 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x33, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 25 = 0x33(VDCMIN)
 8000342:	2201      	movs	r2, #1
 8000344:	2100      	movs	r1, #0
 8000346:	2033      	movs	r0, #51	; 0x33
 8000348:	f000 fb94 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x34, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 26 = 0x34(SW_MODE)
 800034c:	2201      	movs	r2, #1
 800034e:	2100      	movs	r1, #0
 8000350:	2034      	movs	r0, #52	; 0x34
 8000352:	f000 fb8f 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x38, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 27 = 0x38(ENCMODE)
 8000356:	2201      	movs	r2, #1
 8000358:	2100      	movs	r1, #0
 800035a:	2038      	movs	r0, #56	; 0x38
 800035c:	f000 fb8a 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x39, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 28 = 0x39(X_ENC)
 8000360:	2201      	movs	r2, #1
 8000362:	2100      	movs	r1, #0
 8000364:	2039      	movs	r0, #57	; 0x39
 8000366:	f000 fb85 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x3A, 	0x00010000, 1); 		// writing value 0x00010000 = 65536 = 0.0 to address 29 = 0x3A(ENC_CONST)
 800036a:	2380      	movs	r3, #128	; 0x80
 800036c:	025b      	lsls	r3, r3, #9
 800036e:	2201      	movs	r2, #1
 8000370:	0019      	movs	r1, r3
 8000372:	203a      	movs	r0, #58	; 0x3a
 8000374:	f000 fb7e 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x3D, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 30 = 0x3D(ENC_DEVIATION)
 8000378:	2201      	movs	r2, #1
 800037a:	2100      	movs	r1, #0
 800037c:	203d      	movs	r0, #61	; 0x3d
 800037e:	f000 fb79 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x60, 	0xAAAAB554, 1); 		// writing value 0xAAAAB554 = 0 = 0.0 to address 31 = 0x60(MSLUT[0])
 8000382:	4b30      	ldr	r3, [pc, #192]	; (8000444 <TMC5160_Basic_Init+0x228>)
 8000384:	2201      	movs	r2, #1
 8000386:	0019      	movs	r1, r3
 8000388:	2060      	movs	r0, #96	; 0x60
 800038a:	f000 fb73 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x61, 	0x4A9554AA, 1); 		// writing value 0x4A9554AA = 1251300522 = 0.0 to address 32 = 0x61(MSLUT[1])
 800038e:	4b2e      	ldr	r3, [pc, #184]	; (8000448 <TMC5160_Basic_Init+0x22c>)
 8000390:	2201      	movs	r2, #1
 8000392:	0019      	movs	r1, r3
 8000394:	2061      	movs	r0, #97	; 0x61
 8000396:	f000 fb6d 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x62, 	0x24492929, 1); 		// writing value 0x24492929 = 608774441 = 0.0 to address 33 = 0x62(MSLUT[2])
 800039a:	4b2c      	ldr	r3, [pc, #176]	; (800044c <TMC5160_Basic_Init+0x230>)
 800039c:	2201      	movs	r2, #1
 800039e:	0019      	movs	r1, r3
 80003a0:	2062      	movs	r0, #98	; 0x62
 80003a2:	f000 fb67 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x63, 	0x10104222, 1); 		// writing value 0x10104222 = 269500962 = 0.0 to address 34 = 0x63(MSLUT[3])
 80003a6:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <TMC5160_Basic_Init+0x234>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	0019      	movs	r1, r3
 80003ac:	2063      	movs	r0, #99	; 0x63
 80003ae:	f000 fb61 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x64, 	0xFBFFFFFF, 1); 		// writing value 0xFBFFFFFF = 0 = 0.0 to address 35 = 0x64(MSLUT[4])
 80003b2:	4b28      	ldr	r3, [pc, #160]	; (8000454 <TMC5160_Basic_Init+0x238>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	0019      	movs	r1, r3
 80003b8:	2064      	movs	r0, #100	; 0x64
 80003ba:	f000 fb5b 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x65, 	0xB5BB777D, 1); 		// writing value 0xB5BB777D = 0 = 0.0 to address 36 = 0x65(MSLUT[5])
 80003be:	4b26      	ldr	r3, [pc, #152]	; (8000458 <TMC5160_Basic_Init+0x23c>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	0019      	movs	r1, r3
 80003c4:	2065      	movs	r0, #101	; 0x65
 80003c6:	f000 fb55 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x66, 	0x49295556, 1); 		// writing value 0x49295556 = 1227445590 = 0.0 to address 37 = 0x66(MSLUT[6])
 80003ca:	4b24      	ldr	r3, [pc, #144]	; (800045c <TMC5160_Basic_Init+0x240>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	0019      	movs	r1, r3
 80003d0:	2066      	movs	r0, #102	; 0x66
 80003d2:	f000 fb4f 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x67, 	0x00404222, 1); 		// writing value 0x00404222 = 4211234 = 0.0 to address 38 = 0x67(MSLUT[7])
 80003d6:	4b22      	ldr	r3, [pc, #136]	; (8000460 <TMC5160_Basic_Init+0x244>)
 80003d8:	2201      	movs	r2, #1
 80003da:	0019      	movs	r1, r3
 80003dc:	2067      	movs	r0, #103	; 0x67
 80003de:	f000 fb49 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x68, 	0xFFFF8056, 1); 		// writing value 0xFFFF8056 = 0 = 0.0 to address 39 = 0x68(MSLUTSEL)
 80003e2:	4b20      	ldr	r3, [pc, #128]	; (8000464 <TMC5160_Basic_Init+0x248>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	0019      	movs	r1, r3
 80003e8:	2068      	movs	r0, #104	; 0x68
 80003ea:	f000 fb43 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x69, 	0x00F70000, 1); 		// writing value 0x00F70000 = 16187392 = 0.0 to address 40 = 0x69(MSLUTSTART)
 80003ee:	23f7      	movs	r3, #247	; 0xf7
 80003f0:	041b      	lsls	r3, r3, #16
 80003f2:	2201      	movs	r2, #1
 80003f4:	0019      	movs	r1, r3
 80003f6:	2069      	movs	r0, #105	; 0x69
 80003f8:	f000 fb3c 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x6C, 	0x00410153, 1); 		// writing value 0x00410103 = 4260099 = 0.0 to address 41 = 0x6C(CHOPCONF)
 80003fc:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <TMC5160_Basic_Init+0x24c>)
 80003fe:	2201      	movs	r2, #1
 8000400:	0019      	movs	r1, r3
 8000402:	206c      	movs	r0, #108	; 0x6c
 8000404:	f000 fb36 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x6D, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 42 = 0x6D(COOLCONF)
 8000408:	2201      	movs	r2, #1
 800040a:	2100      	movs	r1, #0
 800040c:	206d      	movs	r0, #109	; 0x6d
 800040e:	f000 fb31 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x6E, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 43 = 0x6E(DCCTRL)
 8000412:	2201      	movs	r2, #1
 8000414:	2100      	movs	r1, #0
 8000416:	206e      	movs	r0, #110	; 0x6e
 8000418:	f000 fb2c 	bl	8000a74 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x70, 	0xC40C001E, 1); 		// writing value 0xC40C001E = 0 = 0.0 to address 44 = 0x70(PWMCONF)
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <TMC5160_Basic_Init+0x250>)
 800041e:	2201      	movs	r2, #1
 8000420:	0019      	movs	r1, r3
 8000422:	2070      	movs	r0, #112	; 0x70
 8000424:	f000 fb26 	bl	8000a74 <TMC5160_SPIWrite>
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	00010606 	.word	0x00010606
 8000434:	00080400 	.word	0x00080400
 8000438:	00070a03 	.word	0x00070a03
 800043c:	000009c4 	.word	0x000009c4
 8000440:	ffff9c00 	.word	0xffff9c00
 8000444:	aaaab554 	.word	0xaaaab554
 8000448:	4a9554aa 	.word	0x4a9554aa
 800044c:	24492929 	.word	0x24492929
 8000450:	10104222 	.word	0x10104222
 8000454:	fbffffff 	.word	0xfbffffff
 8000458:	b5bb777d 	.word	0xb5bb777d
 800045c:	49295556 	.word	0x49295556
 8000460:	00404222 	.word	0x00404222
 8000464:	ffff8056 	.word	0xffff8056
 8000468:	00410153 	.word	0x00410153
 800046c:	c40c001e 	.word	0xc40c001e

08000470 <TMC5160_Stop>:
		}
	}
}

void TMC5160_Stop(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	TMC5160_SPIWrite(0x26, 	0x00000000, 1); 		// writing value 0x000009C4 = 500 = 0.0 to address 18 = 0x26(AMAX)
 8000474:	2201      	movs	r2, #1
 8000476:	2100      	movs	r1, #0
 8000478:	2026      	movs	r0, #38	; 0x26
 800047a:	f000 fafb 	bl	8000a74 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x27, 	0x00000000, 1); 		// writing value 0x00000000 = 200 000 = 0.0 to address 19 = 0x27(VMAX)
 800047e:	2201      	movs	r2, #1
 8000480:	2100      	movs	r1, #0
 8000482:	2027      	movs	r0, #39	; 0x27
 8000484:	f000 faf6 	bl	8000a74 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x24, 	0x00000000, 1); 		// writing value 0x000003E8 = 1 000 = 0.0 to address 16 = 0x24(A1)
 8000488:	2201      	movs	r2, #1
 800048a:	2100      	movs	r1, #0
 800048c:	2024      	movs	r0, #36	; 0x24
 800048e:	f000 faf1 	bl	8000a74 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x25, 	0x00000000, 1); 		// writing value 0x00000000 = 50 000 = 0.0 to address 17 = 0x25(V1)
 8000492:	2201      	movs	r2, #1
 8000494:	2100      	movs	r1, #0
 8000496:	2025      	movs	r0, #37	; 0x25
 8000498:	f000 faec 	bl	8000a74 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x28, 	0x00000000, 1); 		// writing value 0x000002BC = 700 = 0.0 to address 20 = 0x28(DMAX)
 800049c:	2201      	movs	r2, #1
 800049e:	2100      	movs	r1, #0
 80004a0:	2028      	movs	r0, #40	; 0x28
 80004a2:	f000 fae7 	bl	8000a74 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2A, 	0x00000010, 1); 		// writing value 0x00000578 = 1 400 = 0.0 to address 21 = 0x2A(D1)
 80004a6:	2201      	movs	r2, #1
 80004a8:	2110      	movs	r1, #16
 80004aa:	202a      	movs	r0, #42	; 0x2a
 80004ac:	f000 fae2 	bl	8000a74 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2B, 	0x00000010, 1); 		// writing value 0x0000000A = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 80004b0:	2201      	movs	r2, #1
 80004b2:	2110      	movs	r1, #16
 80004b4:	202b      	movs	r0, #43	; 0x2b
 80004b6:	f000 fadd 	bl	8000a74 <TMC5160_SPIWrite>
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <HAL_CAN_RxFifo0MsgPendingCallback>:
int x;


/*  CAN RECEIVE INTERRUPT */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CANRxHeader, CANRxData);
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	2100      	movs	r1, #0
 80004d0:	f001 fb8e 	bl	8001bf0 <HAL_CAN_GetRxMessage>

	if (CANRxData[0] == 0x01)
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d102      	bne.n	80004e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Datacheck = 1;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
	}
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b002      	add	sp, #8
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	20000174 	.word	0x20000174
 80004f0:	20000158 	.word	0x20000158
 80004f4:	20001140 	.word	0x20001140

080004f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	0002      	movs	r2, r0
 8000500:	1dbb      	adds	r3, r7, #6
 8000502:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == AMS_INT_Pin && AMS_Ready == 0)
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d106      	bne.n	800051a <HAL_GPIO_EXTI_Callback+0x22>
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <HAL_GPIO_EXTI_Callback+0x2c>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d102      	bne.n	800051a <HAL_GPIO_EXTI_Callback+0x22>
	{
		AMS_Ready = 1;
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]

	}
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	2000113c 	.word	0x2000113c

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	4c36      	ldr	r4, [pc, #216]	; (8000604 <main+0xdc>)
 800052c:	44a5      	add	sp, r4
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int h = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	4a35      	ldr	r2, [pc, #212]	; (8000608 <main+0xe0>)
 8000534:	18ba      	adds	r2, r7, r2
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fe4e 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f86c 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f9ec 	bl	800091c <MX_GPIO_Init>
  MX_ADC_Init();
 8000544:	f000 f8ac 	bl	80006a0 <MX_ADC_Init>
  MX_CAN_Init();
 8000548:	f000 f906 	bl	8000758 <MX_CAN_Init>
  MX_SPI1_Init();
 800054c:	f000 f96a 	bl	8000824 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000550:	f000 f9a6 	bl	80008a0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  TMC5160_Stop();
 8000554:	f7ff ff8c 	bl	8000470 <TMC5160_Stop>
  HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,1); // LOW = ON
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	0059      	lsls	r1, r3, #1
 800055c:	2390      	movs	r3, #144	; 0x90
 800055e:	05db      	lsls	r3, r3, #23
 8000560:	2201      	movs	r2, #1
 8000562:	0018      	movs	r0, r3
 8000564:	f002 f8f4 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_Delay(2500);	//startup delay, so motor does not spin on debug
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <main+0xe4>)
 800056a:	0018      	movs	r0, r3
 800056c:	f000 fe98 	bl	80012a0 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,1); // set TMC CS high
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	015b      	lsls	r3, r3, #5
 8000574:	4826      	ldr	r0, [pc, #152]	; (8000610 <main+0xe8>)
 8000576:	2201      	movs	r2, #1
 8000578:	0019      	movs	r1, r3
 800057a:	f002 f8e9 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS low
 800057e:	2390      	movs	r3, #144	; 0x90
 8000580:	05db      	lsls	r3, r3, #23
 8000582:	2201      	movs	r2, #1
 8000584:	2110      	movs	r1, #16
 8000586:	0018      	movs	r0, r3
 8000588:	f002 f8e2 	bl	8002750 <HAL_GPIO_WritePin>

  /* Perform Basic Init of TMC5160 and AMS5055 */
  TMC5160_Basic_Init();
 800058c:	f7ff fe46 	bl	800021c <TMC5160_Basic_Init>
  AMS5055_Basic_Init();
 8000590:	f000 fb5a 	bl	8000c48 <AMS5055_Basic_Init>

  /* Enable DRV stage*/
  HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,0); // LOW = ON
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	0059      	lsls	r1, r3, #1
 8000598:	2390      	movs	r3, #144	; 0x90
 800059a:	05db      	lsls	r3, r3, #23
 800059c:	2200      	movs	r2, #0
 800059e:	0018      	movs	r0, r3
 80005a0:	f002 f8d6 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80005a4:	200a      	movs	r0, #10
 80005a6:	f000 fe7b 	bl	80012a0 <HAL_Delay>

  //TMC5160_Rotate_To(51200); // move to Position X

  HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,1); // LOW = ON
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	0059      	lsls	r1, r3, #1
 80005ae:	2390      	movs	r3, #144	; 0x90
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	2201      	movs	r2, #1
 80005b4:	0018      	movs	r0, r3
 80005b6:	f002 f8cb 	bl	8002750 <HAL_GPIO_WritePin>
  TMC5160_Stop();
 80005ba:	f7ff ff59 	bl	8000470 <TMC5160_Stop>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  Enc_Position[h] = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2039      	movs	r0, #57	; 0x39
 80005c4:	f000 fa56 	bl	8000a74 <TMC5160_SPIWrite>
 80005c8:	0001      	movs	r1, r0
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <main+0xec>)
 80005cc:	22fb      	movs	r2, #251	; 0xfb
 80005ce:	00d2      	lsls	r2, r2, #3
 80005d0:	189b      	adds	r3, r3, r2
 80005d2:	19db      	adds	r3, r3, r7
 80005d4:	4c0c      	ldr	r4, [pc, #48]	; (8000608 <main+0xe0>)
 80005d6:	193a      	adds	r2, r7, r4
 80005d8:	6812      	ldr	r2, [r2, #0]
 80005da:	0092      	lsls	r2, r2, #2
 80005dc:	50d1      	str	r1, [r2, r3]
	  HAL_Delay(5);
 80005de:	2005      	movs	r0, #5
 80005e0:	f000 fe5e 	bl	80012a0 <HAL_Delay>
	  h++;
 80005e4:	0021      	movs	r1, r4
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	187a      	adds	r2, r7, r1
 80005ee:	6013      	str	r3, [r2, #0]

	  if(h == 500)
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	23fa      	movs	r3, #250	; 0xfa
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d1e0      	bne.n	80005be <main+0x96>
	  {
			h = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	187a      	adds	r2, r7, r1
 8000600:	6013      	str	r3, [r2, #0]
	  Enc_Position[h] = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 8000602:	e7dc      	b.n	80005be <main+0x96>
 8000604:	fffff824 	.word	0xfffff824
 8000608:	000007d4 	.word	0x000007d4
 800060c:	000009c4 	.word	0x000009c4
 8000610:	48000400 	.word	0x48000400
 8000614:	fffff82c 	.word	0xfffff82c

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b093      	sub	sp, #76	; 0x4c
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	2414      	movs	r4, #20
 8000620:	193b      	adds	r3, r7, r4
 8000622:	0018      	movs	r0, r3
 8000624:	2334      	movs	r3, #52	; 0x34
 8000626:	001a      	movs	r2, r3
 8000628:	2100      	movs	r1, #0
 800062a:	f003 f9d1 	bl	80039d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	0018      	movs	r0, r3
 8000632:	2310      	movs	r3, #16
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f003 f9ca 	bl	80039d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 800063c:	0021      	movs	r1, r4
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2211      	movs	r2, #17
 8000642:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2201      	movs	r2, #1
 8000648:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2201      	movs	r2, #1
 800064e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2210      	movs	r2, #16
 8000654:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	187b      	adds	r3, r7, r1
 800065e:	0018      	movs	r0, r3
 8000660:	f002 f8b0 	bl	80027c4 <HAL_RCC_OscConfig>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000668:	f000 fc0a 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2207      	movs	r2, #7
 8000670:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2201      	movs	r2, #1
 8000676:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2100      	movs	r1, #0
 8000688:	0018      	movs	r0, r3
 800068a:	f002 fc21 	bl	8002ed0 <HAL_RCC_ClockConfig>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000692:	f000 fbf5 	bl	8000e80 <Error_Handler>
  }
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b013      	add	sp, #76	; 0x4c
 800069c:	bd90      	pop	{r4, r7, pc}
	...

080006a0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	0018      	movs	r0, r3
 80006aa:	230c      	movs	r3, #12
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f003 f98e 	bl	80039d0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <MX_ADC_Init+0xb0>)
 80006b6:	4a27      	ldr	r2, [pc, #156]	; (8000754 <MX_ADC_Init+0xb4>)
 80006b8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <MX_ADC_Init+0xb0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <MX_ADC_Init+0xb0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c6:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_ADC_Init+0xb0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80006cc:	4b20      	ldr	r3, [pc, #128]	; (8000750 <MX_ADC_Init+0xb0>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_ADC_Init+0xb0>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_ADC_Init+0xb0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_ADC_Init+0xb0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_ADC_Init+0xb0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_ADC_Init+0xb0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_ADC_Init+0xb0>)
 80006f2:	22c2      	movs	r2, #194	; 0xc2
 80006f4:	32ff      	adds	r2, #255	; 0xff
 80006f6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_ADC_Init+0xb0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_ADC_Init+0xb0>)
 8000700:	2224      	movs	r2, #36	; 0x24
 8000702:	2100      	movs	r1, #0
 8000704:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_ADC_Init+0xb0>)
 8000708:	2201      	movs	r2, #1
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_ADC_Init+0xb0>)
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fdea 	bl	80012e8 <HAL_ADC_Init>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000718:	f000 fbb2 	bl	8000e80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	0152      	lsls	r2, r2, #5
 8000728:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	0552      	lsls	r2, r2, #21
 8000730:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000732:	1d3a      	adds	r2, r7, #4
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_ADC_Init+0xb0>)
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 ff15 	bl	8001568 <HAL_ADC_ConfigChannel>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000742:	f000 fb9d 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b004      	add	sp, #16
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	20000028 	.word	0x20000028
 8000754:	40012400 	.word	0x40012400

08000758 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800075e:	4b2f      	ldr	r3, [pc, #188]	; (800081c <MX_CAN_Init+0xc4>)
 8000760:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <MX_CAN_Init+0xc8>)
 8000762:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000764:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_CAN_Init+0xc4>)
 8000766:	2210      	movs	r2, #16
 8000768:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <MX_CAN_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000770:	4b2a      	ldr	r3, [pc, #168]	; (800081c <MX_CAN_Init+0xc4>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <MX_CAN_Init+0xc4>)
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	0252      	lsls	r2, r2, #9
 800077c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_CAN_Init+0xc4>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_CAN_Init+0xc4>)
 8000786:	2200      	movs	r2, #0
 8000788:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <MX_CAN_Init+0xc4>)
 800078c:	2200      	movs	r2, #0
 800078e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_CAN_Init+0xc4>)
 8000792:	2200      	movs	r2, #0
 8000794:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_CAN_Init+0xc4>)
 8000798:	2200      	movs	r2, #0
 800079a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_CAN_Init+0xc4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_CAN_Init+0xc4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_CAN_Init+0xc4>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 ffea 	bl	8001784 <HAL_CAN_Init>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 fb64 	bl	8000e80 <Error_Handler>

  /* CAN filter */

  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 80007b8:	003b      	movs	r3, r7
 80007ba:	2201      	movs	r2, #1
 80007bc:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 10;
 80007be:	003b      	movs	r3, r7
 80007c0:	220a      	movs	r2, #10
 80007c2:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007c4:	003b      	movs	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x0000;
 80007ca:	003b      	movs	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80007d6:	003b      	movs	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80007dc:	003b      	movs	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2201      	movs	r2, #1
 80007ec:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 0;
 80007ee:	003b      	movs	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80007f4:	003a      	movs	r2, r7
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_CAN_Init+0xc4>)
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 f8c0 	bl	8001980 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_CAN_Init+0xc4>)
 8000802:	0018      	movs	r0, r3
 8000804:	f001 f9ae 	bl	8001b64 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <MX_CAN_Init+0xc4>)
 800080a:	2102      	movs	r1, #2
 800080c:	0018      	movs	r0, r3
 800080e:	f001 fb0b 	bl	8001e28 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b00a      	add	sp, #40	; 0x28
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	20000068 	.word	0x20000068
 8000820:	40006400 	.word	0x40006400

08000824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_SPI1_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <MX_SPI1_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_SPI1_Init+0x74>)
 8000830:	2282      	movs	r2, #130	; 0x82
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_SPI1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_SPI1_Init+0x74>)
 800083e:	22e0      	movs	r2, #224	; 0xe0
 8000840:	00d2      	lsls	r2, r2, #3
 8000842:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_SPI1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_SPI1_Init+0x74>)
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	0092      	lsls	r2, r2, #2
 8000856:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_SPI1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_SPI1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_SPI1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_SPI1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_SPI1_Init+0x74>)
 8000872:	2207      	movs	r2, #7
 8000874:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_SPI1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_SPI1_Init+0x74>)
 800087e:	2208      	movs	r2, #8
 8000880:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <MX_SPI1_Init+0x74>)
 8000884:	0018      	movs	r0, r3
 8000886:	f002 fc7f 	bl	8003188 <HAL_SPI_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 faf7 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000090 	.word	0x20000090
 800089c:	40013000 	.word	0x40013000

080008a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_SPI2_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <MX_SPI2_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_SPI2_Init+0x74>)
 80008ac:	2282      	movs	r2, #130	; 0x82
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_SPI2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_SPI2_Init+0x74>)
 80008ba:	22e0      	movs	r2, #224	; 0xe0
 80008bc:	00d2      	lsls	r2, r2, #3
 80008be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_SPI2_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_SPI2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_SPI2_Init+0x74>)
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	0092      	lsls	r2, r2, #2
 80008d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_SPI2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_SPI2_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_SPI2_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_SPI2_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_SPI2_Init+0x74>)
 80008ee:	2207      	movs	r2, #7
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_SPI2_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_SPI2_Init+0x74>)
 80008fa:	2208      	movs	r2, #8
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <MX_SPI2_Init+0x74>)
 8000900:	0018      	movs	r0, r3
 8000902:	f002 fc41 	bl	8003188 <HAL_SPI_Init>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 fab9 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000f4 	.word	0x200000f4
 8000918:	40003800 	.word	0x40003800

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	240c      	movs	r4, #12
 8000924:	193b      	adds	r3, r7, r4
 8000926:	0018      	movs	r0, r3
 8000928:	2314      	movs	r3, #20
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f003 f84f 	bl	80039d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000932:	4b4d      	ldr	r3, [pc, #308]	; (8000a68 <MX_GPIO_Init+0x14c>)
 8000934:	695a      	ldr	r2, [r3, #20]
 8000936:	4b4c      	ldr	r3, [pc, #304]	; (8000a68 <MX_GPIO_Init+0x14c>)
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	03c9      	lsls	r1, r1, #15
 800093c:	430a      	orrs	r2, r1
 800093e:	615a      	str	r2, [r3, #20]
 8000940:	4b49      	ldr	r3, [pc, #292]	; (8000a68 <MX_GPIO_Init+0x14c>)
 8000942:	695a      	ldr	r2, [r3, #20]
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	03db      	lsls	r3, r3, #15
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b46      	ldr	r3, [pc, #280]	; (8000a68 <MX_GPIO_Init+0x14c>)
 8000950:	695a      	ldr	r2, [r3, #20]
 8000952:	4b45      	ldr	r3, [pc, #276]	; (8000a68 <MX_GPIO_Init+0x14c>)
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	0289      	lsls	r1, r1, #10
 8000958:	430a      	orrs	r2, r1
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	4b42      	ldr	r3, [pc, #264]	; (8000a68 <MX_GPIO_Init+0x14c>)
 800095e:	695a      	ldr	r2, [r3, #20]
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	029b      	lsls	r3, r3, #10
 8000964:	4013      	ands	r3, r2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b3f      	ldr	r3, [pc, #252]	; (8000a68 <MX_GPIO_Init+0x14c>)
 800096c:	695a      	ldr	r2, [r3, #20]
 800096e:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <MX_GPIO_Init+0x14c>)
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	02c9      	lsls	r1, r1, #11
 8000974:	430a      	orrs	r2, r1
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <MX_GPIO_Init+0x14c>)
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	02db      	lsls	r3, r3, #11
 8000980:	4013      	ands	r3, r2
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin, GPIO_PIN_RESET);
 8000986:	238a      	movs	r3, #138	; 0x8a
 8000988:	0059      	lsls	r1, r3, #1
 800098a:	2390      	movs	r3, #144	; 0x90
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	2200      	movs	r2, #0
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fedd 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin, GPIO_PIN_RESET);
 8000996:	4935      	ldr	r1, [pc, #212]	; (8000a6c <MX_GPIO_Init+0x150>)
 8000998:	4b35      	ldr	r3, [pc, #212]	; (8000a70 <MX_GPIO_Init+0x154>)
 800099a:	2200      	movs	r2, #0
 800099c:	0018      	movs	r0, r3
 800099e:	f001 fed7 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_STB_Pin AMS_CS_Pin DRV_ENN_Pin */
  GPIO_InitStruct.Pin = CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	228a      	movs	r2, #138	; 0x8a
 80009a6:	0052      	lsls	r2, r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2201      	movs	r2, #1
 80009ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	193a      	adds	r2, r7, r4
 80009be:	2390      	movs	r3, #144	; 0x90
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	0011      	movs	r1, r2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 fd4b 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_INT_Pin */
  GPIO_InitStruct.Pin = AMS_INT_Pin;
 80009ca:	0021      	movs	r1, r4
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2201      	movs	r2, #1
 80009d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2288      	movs	r2, #136	; 0x88
 80009d6:	0352      	lsls	r2, r2, #13
 80009d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	000c      	movs	r4, r1
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AMS_INT_GPIO_Port, &GPIO_InitStruct);
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <MX_GPIO_Init+0x154>)
 80009e6:	0019      	movs	r1, r3
 80009e8:	0010      	movs	r0, r2
 80009ea:	f001 fd39 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC_CS_Pin EXT_OUT_1_Pin EXT_OUT_2_Pin */
  GPIO_InitStruct.Pin = TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <MX_GPIO_Init+0x150>)
 80009f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2201      	movs	r2, #1
 80009f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <MX_GPIO_Init+0x154>)
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	0010      	movs	r0, r2
 8000a0e:	f001 fd27 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pin : REFL_UC_Pin */
  GPIO_InitStruct.Pin = REFL_UC_Pin;
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	2240      	movs	r2, #64	; 0x40
 8000a16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2201      	movs	r2, #1
 8000a22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REFL_UC_GPIO_Port, &GPIO_InitStruct);
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_GPIO_Init+0x154>)
 8000a28:	0019      	movs	r1, r3
 8000a2a:	0010      	movs	r0, r2
 8000a2c:	f001 fd18 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pin : REFR_UC_Pin */
  GPIO_InitStruct.Pin = REFR_UC_Pin;
 8000a30:	0021      	movs	r1, r4
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REFR_UC_GPIO_Port, &GPIO_InitStruct);
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <MX_GPIO_Init+0x154>)
 8000a48:	0019      	movs	r1, r3
 8000a4a:	0010      	movs	r0, r2
 8000a4c:	f001 fd08 	bl	8002460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2005      	movs	r0, #5
 8000a56:	f001 fcd1 	bl	80023fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a5a:	2005      	movs	r0, #5
 8000a5c:	f001 fce3 	bl	8002426 <HAL_NVIC_EnableIRQ>

}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b009      	add	sp, #36	; 0x24
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	00001030 	.word	0x00001030
 8000a70:	48000400 	.word	0x48000400

08000a74 <TMC5160_SPIWrite>:
	HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin, 1);
}*/


uint32_t TMC5160_SPIWrite(uint8_t Adress, uint32_t Value, int Action)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	240f      	movs	r4, #15
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	1c02      	adds	r2, r0, #0
 8000a84:	701a      	strb	r2, [r3, #0]

	  SPI2Rx = 0;
 8000a86:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <TMC5160_SPIWrite+0xdc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,0); // set TMC CS low
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	015b      	lsls	r3, r3, #5
 8000a90:	4830      	ldr	r0, [pc, #192]	; (8000b54 <TMC5160_SPIWrite+0xe0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	0019      	movs	r1, r3
 8000a96:	f001 fe5b 	bl	8002750 <HAL_GPIO_WritePin>

	  if (Action == 1) //Write
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d106      	bne.n	8000aae <TMC5160_SPIWrite+0x3a>
	  {
		SPI2TxData[0] = Adress + 0x80;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	3b80      	subs	r3, #128	; 0x80
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <TMC5160_SPIWrite+0xe4>)
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	e004      	b.n	8000ab8 <TMC5160_SPIWrite+0x44>
	  }

	  else //Read
	  {
		SPI2TxData[0] = Adress;
 8000aae:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <TMC5160_SPIWrite+0xe4>)
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	18ba      	adds	r2, r7, r2
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	701a      	strb	r2, [r3, #0]
	  }

	  SPI2TxData[1] = Value >> 24;
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	0e1b      	lsrs	r3, r3, #24
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <TMC5160_SPIWrite+0xe4>)
 8000ac0:	705a      	strb	r2, [r3, #1]
	  SPI2TxData[2] = Value >> 16;
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	0c1b      	lsrs	r3, r3, #16
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <TMC5160_SPIWrite+0xe4>)
 8000aca:	709a      	strb	r2, [r3, #2]
	  SPI2TxData[3] = Value >> 8;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	0a1b      	lsrs	r3, r3, #8
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <TMC5160_SPIWrite+0xe4>)
 8000ad4:	70da      	strb	r2, [r3, #3]
	  SPI2TxData[4] = Value;
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <TMC5160_SPIWrite+0xe4>)
 8000adc:	711a      	strb	r2, [r3, #4]

	  HAL_SPI_TransmitReceive(&hspi2, SPI2TxData, SPI2RxData, 0x05, 100);
 8000ade:	4a1f      	ldr	r2, [pc, #124]	; (8000b5c <TMC5160_SPIWrite+0xe8>)
 8000ae0:	491d      	ldr	r1, [pc, #116]	; (8000b58 <TMC5160_SPIWrite+0xe4>)
 8000ae2:	481f      	ldr	r0, [pc, #124]	; (8000b60 <TMC5160_SPIWrite+0xec>)
 8000ae4:	2364      	movs	r3, #100	; 0x64
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	2305      	movs	r3, #5
 8000aea:	f002 fc05 	bl	80032f8 <HAL_SPI_TransmitReceive>


	  SPI2Rx += (SPI2RxData[1] << 24);
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <TMC5160_SPIWrite+0xe8>)
 8000af0:	785b      	ldrb	r3, [r3, #1]
 8000af2:	061b      	lsls	r3, r3, #24
 8000af4:	001a      	movs	r2, r3
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <TMC5160_SPIWrite+0xdc>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	18d2      	adds	r2, r2, r3
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <TMC5160_SPIWrite+0xdc>)
 8000afe:	601a      	str	r2, [r3, #0]
	  SPI2Rx += (SPI2RxData[2] << 16);
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <TMC5160_SPIWrite+0xe8>)
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	041b      	lsls	r3, r3, #16
 8000b06:	001a      	movs	r2, r3
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <TMC5160_SPIWrite+0xdc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	18d2      	adds	r2, r2, r3
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <TMC5160_SPIWrite+0xdc>)
 8000b10:	601a      	str	r2, [r3, #0]
	  SPI2Rx += (SPI2RxData[3] << 8);
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <TMC5160_SPIWrite+0xe8>)
 8000b14:	78db      	ldrb	r3, [r3, #3]
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	001a      	movs	r2, r3
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <TMC5160_SPIWrite+0xdc>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	18d2      	adds	r2, r2, r3
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <TMC5160_SPIWrite+0xdc>)
 8000b22:	601a      	str	r2, [r3, #0]
	  SPI2Rx += (SPI2RxData[4] << 0);
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <TMC5160_SPIWrite+0xe8>)
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	001a      	movs	r2, r3
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <TMC5160_SPIWrite+0xdc>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	18d2      	adds	r2, r2, r3
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <TMC5160_SPIWrite+0xdc>)
 8000b32:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,1); // set TMC CS high
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	015b      	lsls	r3, r3, #5
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <TMC5160_SPIWrite+0xe0>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	f001 fe07 	bl	8002750 <HAL_GPIO_WritePin>

	  return SPI2Rx;
 8000b42:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <TMC5160_SPIWrite+0xdc>)
 8000b44:	681b      	ldr	r3, [r3, #0]
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b005      	add	sp, #20
 8000b4c:	bd90      	pop	{r4, r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20001138 	.word	0x20001138
 8000b54:	48000400 	.word	0x48000400
 8000b58:	20001128 	.word	0x20001128
 8000b5c:	20001130 	.word	0x20001130
 8000b60:	200000f4 	.word	0x200000f4

08000b64 <AMS5055_SPIWriteInt>:


uint16_t AMS5055_SPIWriteInt(uint16_t Adress, int Action)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	1dbb      	adds	r3, r7, #6
 8000b70:	801a      	strh	r2, [r3, #0]

 	DC -> Don't care
 	PAR -> Parity bit
	*/

	  SPI1Rx = 0;
 8000b72:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <AMS5055_SPIWriteInt+0xcc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	801a      	strh	r2, [r3, #0]
	  SPI1Tx = 0;
 8000b78:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <AMS5055_SPIWriteInt+0xd0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	801a      	strh	r2, [r3, #0]
	  SPI1Tx = (Adress << 1);
 8000b7e:	1dbb      	adds	r3, r7, #6
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	18db      	adds	r3, r3, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <AMS5055_SPIWriteInt+0xd0>)
 8000b88:	801a      	strh	r2, [r3, #0]

	  if (Action == 1) //READ
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d106      	bne.n	8000b9e <AMS5055_SPIWriteInt+0x3a>
	  {
		  SPI1Tx = SPI1Tx | 0x8000;
 8000b90:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <AMS5055_SPIWriteInt+0xd0>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <AMS5055_SPIWriteInt+0xd4>)
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <AMS5055_SPIWriteInt+0xd0>)
 8000b9c:	801a      	strh	r2, [r3, #0]
	  }

	  SPI1Tx = SPI1Tx | AMSParity(SPI1Tx);
 8000b9e:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <AMS5055_SPIWriteInt+0xd0>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 f938 	bl	8000e18 <AMSParity>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <AMS5055_SPIWriteInt+0xd0>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <AMS5055_SPIWriteInt+0xd0>)
 8000bb6:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low
 8000bb8:	2390      	movs	r3, #144	; 0x90
 8000bba:	05db      	lsls	r3, r3, #23
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f001 fdc5 	bl	8002750 <HAL_GPIO_WritePin>

	  SPI1TxData[0] = SPI1Tx >> 8;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <AMS5055_SPIWriteInt+0xd0>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <AMS5055_SPIWriteInt+0xd8>)
 8000bd2:	701a      	strb	r2, [r3, #0]
	  SPI1TxData[1] = SPI1Tx;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <AMS5055_SPIWriteInt+0xd0>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <AMS5055_SPIWriteInt+0xd8>)
 8000bdc:	705a      	strb	r2, [r3, #1]

	  HAL_SPI_TransmitReceive(&hspi1, SPI1TxData, SPI1RxData, 0x02, 100);
 8000bde:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <AMS5055_SPIWriteInt+0xdc>)
 8000be0:	4916      	ldr	r1, [pc, #88]	; (8000c3c <AMS5055_SPIWriteInt+0xd8>)
 8000be2:	4818      	ldr	r0, [pc, #96]	; (8000c44 <AMS5055_SPIWriteInt+0xe0>)
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2302      	movs	r3, #2
 8000bea:	f002 fb85 	bl	80032f8 <HAL_SPI_TransmitReceive>

	  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high
 8000bee:	2390      	movs	r3, #144	; 0x90
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2110      	movs	r1, #16
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 fdaa 	bl	8002750 <HAL_GPIO_WritePin>

	  SPI1Rx += (SPI1RxData[0] << 8);
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <AMS5055_SPIWriteInt+0xdc>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <AMS5055_SPIWriteInt+0xcc>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	18d3      	adds	r3, r2, r3
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <AMS5055_SPIWriteInt+0xcc>)
 8000c10:	801a      	strh	r2, [r3, #0]
	  SPI1Rx += (SPI1RxData[1] << 0);
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <AMS5055_SPIWriteInt+0xdc>)
 8000c14:	785b      	ldrb	r3, [r3, #1]
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <AMS5055_SPIWriteInt+0xcc>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <AMS5055_SPIWriteInt+0xcc>)
 8000c22:	801a      	strh	r2, [r3, #0]

	  return SPI1Rx;
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <AMS5055_SPIWriteInt+0xcc>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000182 	.word	0x20000182
 8000c34:	20000184 	.word	0x20000184
 8000c38:	ffff8000 	.word	0xffff8000
 8000c3c:	2000017c 	.word	0x2000017c
 8000c40:	20000180 	.word	0x20000180
 8000c44:	20000090 	.word	0x20000090

08000c48 <AMS5055_Basic_Init>:
	  }
}


void AMS5055_Basic_Init(void)
{
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000c4c:	4b6e      	ldr	r3, [pc, #440]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000c4e:	681c      	ldr	r4, [r3, #0]
 8000c50:	4b6e      	ldr	r3, [pc, #440]	; (8000e0c <AMS5055_Basic_Init+0x1c4>)
 8000c52:	2101      	movs	r1, #1
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff ff85 	bl	8000b64 <AMS5055_SPIWriteInt>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	4b6c      	ldr	r3, [pc, #432]	; (8000e10 <AMS5055_Basic_Init+0x1c8>)
 8000c60:	0062      	lsls	r2, r4, #1
 8000c62:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000c64:	4b68      	ldr	r3, [pc, #416]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	1c5a      	adds	r2, r3, #1
 8000c6a:	4b67      	ldr	r3, [pc, #412]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000c6c:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000c6e:	2064      	movs	r0, #100	; 0x64
 8000c70:	f000 fb16 	bl	80012a0 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(NOP,1); // Random
 8000c74:	4b64      	ldr	r3, [pc, #400]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000c76:	681c      	ldr	r4, [r3, #0]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff ff72 	bl	8000b64 <AMS5055_SPIWriteInt>
 8000c80:	0003      	movs	r3, r0
 8000c82:	0019      	movs	r1, r3
 8000c84:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <AMS5055_Basic_Init+0x1c8>)
 8000c86:	0062      	lsls	r2, r4, #1
 8000c88:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000c8a:	4b5f      	ldr	r3, [pc, #380]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	4b5d      	ldr	r3, [pc, #372]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000c92:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000c94:	2064      	movs	r0, #100	; 0x64
 8000c96:	f000 fb03 	bl	80012a0 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(AGC,1); // Random
 8000c9a:	4b5b      	ldr	r3, [pc, #364]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000c9c:	681c      	ldr	r4, [r3, #0]
 8000c9e:	4b5d      	ldr	r3, [pc, #372]	; (8000e14 <AMS5055_Basic_Init+0x1cc>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f7ff ff5e 	bl	8000b64 <AMS5055_SPIWriteInt>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	0019      	movs	r1, r3
 8000cac:	4b58      	ldr	r3, [pc, #352]	; (8000e10 <AMS5055_Basic_Init+0x1c8>)
 8000cae:	0062      	lsls	r2, r4, #1
 8000cb0:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000cb2:	4b55      	ldr	r3, [pc, #340]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	4b53      	ldr	r3, [pc, #332]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000cba:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000cbc:	2064      	movs	r0, #100	; 0x64
 8000cbe:	f000 faef 	bl	80012a0 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(SOFTWARE_RESET,1); // Random
 8000cc2:	4b51      	ldr	r3, [pc, #324]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000cc4:	681c      	ldr	r4, [r3, #0]
 8000cc6:	23f0      	movs	r3, #240	; 0xf0
 8000cc8:	019b      	lsls	r3, r3, #6
 8000cca:	2101      	movs	r1, #1
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ff49 	bl	8000b64 <AMS5055_SPIWriteInt>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	4b4e      	ldr	r3, [pc, #312]	; (8000e10 <AMS5055_Basic_Init+0x1c8>)
 8000cd8:	0062      	lsls	r2, r4, #1
 8000cda:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000cdc:	4b4a      	ldr	r3, [pc, #296]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	1c5a      	adds	r2, r3, #1
 8000ce2:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000ce4:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000ce6:	2064      	movs	r0, #100	; 0x64
 8000ce8:	f000 fada 	bl	80012a0 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(SOFTWARE_RESET_SPI,0); // Random
 8000cec:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000cee:	681c      	ldr	r4, [r3, #0]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f7ff ff36 	bl	8000b64 <AMS5055_SPIWriteInt>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	0019      	movs	r1, r3
 8000cfc:	4b44      	ldr	r3, [pc, #272]	; (8000e10 <AMS5055_Basic_Init+0x1c8>)
 8000cfe:	0062      	lsls	r2, r4, #1
 8000d00:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000d02:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	4b3f      	ldr	r3, [pc, #252]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000d0a:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000d0c:	2064      	movs	r0, #100	; 0x64
 8000d0e:	f000 fac7 	bl	80012a0 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000d12:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000d14:	681c      	ldr	r4, [r3, #0]
 8000d16:	4b3d      	ldr	r3, [pc, #244]	; (8000e0c <AMS5055_Basic_Init+0x1c4>)
 8000d18:	2101      	movs	r1, #1
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff ff22 	bl	8000b64 <AMS5055_SPIWriteInt>
 8000d20:	0003      	movs	r3, r0
 8000d22:	0019      	movs	r1, r3
 8000d24:	4b3a      	ldr	r3, [pc, #232]	; (8000e10 <AMS5055_Basic_Init+0x1c8>)
 8000d26:	0062      	lsls	r2, r4, #1
 8000d28:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000d2a:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000d32:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000d34:	2064      	movs	r0, #100	; 0x64
 8000d36:	f000 fab3 	bl	80012a0 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(NOP,1); // Random
 8000d3a:	4b33      	ldr	r3, [pc, #204]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000d3c:	681c      	ldr	r4, [r3, #0]
 8000d3e:	2101      	movs	r1, #1
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff ff0f 	bl	8000b64 <AMS5055_SPIWriteInt>
 8000d46:	0003      	movs	r3, r0
 8000d48:	0019      	movs	r1, r3
 8000d4a:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <AMS5055_Basic_Init+0x1c8>)
 8000d4c:	0062      	lsls	r2, r4, #1
 8000d4e:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000d50:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000d58:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000d5a:	2064      	movs	r0, #100	; 0x64
 8000d5c:	f000 faa0 	bl	80012a0 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(AGC,1); // Random
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000d62:	681c      	ldr	r4, [r3, #0]
 8000d64:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <AMS5055_Basic_Init+0x1cc>)
 8000d66:	2101      	movs	r1, #1
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff fefb 	bl	8000b64 <AMS5055_SPIWriteInt>
 8000d6e:	0003      	movs	r3, r0
 8000d70:	0019      	movs	r1, r3
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <AMS5055_Basic_Init+0x1c8>)
 8000d74:	0062      	lsls	r2, r4, #1
 8000d76:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000d80:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000d82:	2064      	movs	r0, #100	; 0x64
 8000d84:	f000 fa8c 	bl	80012a0 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000d8a:	681c      	ldr	r4, [r3, #0]
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <AMS5055_Basic_Init+0x1c4>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	0018      	movs	r0, r3
 8000d92:	f7ff fee7 	bl	8000b64 <AMS5055_SPIWriteInt>
 8000d96:	0003      	movs	r3, r0
 8000d98:	0019      	movs	r1, r3
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <AMS5055_Basic_Init+0x1c8>)
 8000d9c:	0062      	lsls	r2, r4, #1
 8000d9e:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000da8:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000daa:	2064      	movs	r0, #100	; 0x64
 8000dac:	f000 fa78 	bl	80012a0 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000db2:	681c      	ldr	r4, [r3, #0]
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <AMS5055_Basic_Init+0x1c4>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff fed3 	bl	8000b64 <AMS5055_SPIWriteInt>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <AMS5055_Basic_Init+0x1c8>)
 8000dc4:	0062      	lsls	r2, r4, #1
 8000dc6:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000dd0:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000dd2:	2064      	movs	r0, #100	; 0x64
 8000dd4:	f000 fa64 	bl	80012a0 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000dda:	681c      	ldr	r4, [r3, #0]
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <AMS5055_Basic_Init+0x1c4>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff febf 	bl	8000b64 <AMS5055_SPIWriteInt>
 8000de6:	0003      	movs	r3, r0
 8000de8:	0019      	movs	r1, r3
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <AMS5055_Basic_Init+0x1c8>)
 8000dec:	0062      	lsls	r2, r4, #1
 8000dee:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <AMS5055_Basic_Init+0x1c0>)
 8000df8:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	f000 fa50 	bl	80012a0 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(NOP,1); // 0
	Ax++;
	HAL_Delay(100);
	*/
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bdb0      	pop	{r4, r5, r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	20001144 	.word	0x20001144
 8000e0c:	00003fff 	.word	0x00003fff
 8000e10:	20000188 	.word	0x20000188
 8000e14:	00003ff8 	.word	0x00003ff8

08000e18 <AMSParity>:

uint8_t AMSParity(uint16_t value)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	0002      	movs	r2, r0
 8000e20:	1dbb      	adds	r3, r7, #6
 8000e22:	801a      	strh	r2, [r3, #0]
	uint8_t cnt = 0;
 8000e24:	230f      	movs	r3, #15
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8000e2c:	230e      	movs	r3, #14
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	e015      	b.n	8000e62 <AMSParity+0x4a>
	{
		if (value & 0x1)
 8000e36:	1dbb      	adds	r3, r7, #6
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d005      	beq.n	8000e4c <AMSParity+0x34>
		{
			cnt++;
 8000e40:	210f      	movs	r1, #15
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	781a      	ldrb	r2, [r3, #0]
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	3201      	adds	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
		}

		value >>= 1;
 8000e4c:	1dbb      	adds	r3, r7, #6
 8000e4e:	1dba      	adds	r2, r7, #6
 8000e50:	8812      	ldrh	r2, [r2, #0]
 8000e52:	0852      	lsrs	r2, r2, #1
 8000e54:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 16; i++)
 8000e56:	210e      	movs	r1, #14
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	781a      	ldrb	r2, [r3, #0]
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	3201      	adds	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	230e      	movs	r3, #14
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d9e4      	bls.n	8000e36 <AMSParity+0x1e>
	}
	return cnt & 0x1;
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2201      	movs	r2, #1
 8000e74:	4013      	ands	r3, r2
 8000e76:	b2db      	uxtb	r3, r3
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b004      	add	sp, #16
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <Error_Handler+0x8>
	...

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	619a      	str	r2, [r3, #24]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x44>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eac:	69da      	ldr	r2, [r3, #28]
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0549      	lsls	r1, r1, #21
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	61da      	str	r2, [r3, #28]
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eba:	69da      	ldr	r2, [r3, #28]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	055b      	lsls	r3, r3, #21
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b08b      	sub	sp, #44	; 0x2c
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	2414      	movs	r4, #20
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	2314      	movs	r3, #20
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	f002 fd72 	bl	80039d0 <memset>
  if(hadc->Instance==ADC1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_ADC_MspInit+0x84>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12b      	bne.n	8000f4e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_ADC_MspInit+0x88>)
 8000ef8:	699a      	ldr	r2, [r3, #24]
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_ADC_MspInit+0x88>)
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	0089      	lsls	r1, r1, #2
 8000f00:	430a      	orrs	r2, r1
 8000f02:	619a      	str	r2, [r3, #24]
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_ADC_MspInit+0x88>)
 8000f06:	699a      	ldr	r2, [r3, #24]
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_ADC_MspInit+0x88>)
 8000f14:	695a      	ldr	r2, [r3, #20]
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_ADC_MspInit+0x88>)
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	0289      	lsls	r1, r1, #10
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	615a      	str	r2, [r3, #20]
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_ADC_MspInit+0x88>)
 8000f22:	695a      	ldr	r2, [r3, #20]
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	029b      	lsls	r3, r3, #10
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = AIN_MCU_Pin;
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2203      	movs	r2, #3
 8000f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AIN_MCU_GPIO_Port, &GPIO_InitStruct);
 8000f40:	193a      	adds	r2, r7, r4
 8000f42:	2390      	movs	r3, #144	; 0x90
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	0011      	movs	r1, r2
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f001 fa89 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b00b      	add	sp, #44	; 0x2c
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40012400 	.word	0x40012400
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b08b      	sub	sp, #44	; 0x2c
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	2414      	movs	r4, #20
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	2314      	movs	r3, #20
 8000f70:	001a      	movs	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	f002 fd2c 	bl	80039d0 <memset>
  if(hcan->Instance==CAN)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a20      	ldr	r2, [pc, #128]	; (8001000 <HAL_CAN_MspInit+0xa0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d13a      	bne.n	8000ff8 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <HAL_CAN_MspInit+0xa4>)
 8000f84:	69da      	ldr	r2, [r3, #28]
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <HAL_CAN_MspInit+0xa4>)
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	0489      	lsls	r1, r1, #18
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	61da      	str	r2, [r3, #28]
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_CAN_MspInit+0xa4>)
 8000f92:	69da      	ldr	r2, [r3, #28]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	049b      	lsls	r3, r3, #18
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_CAN_MspInit+0xa4>)
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_CAN_MspInit+0xa4>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	02c9      	lsls	r1, r1, #11
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_CAN_MspInit+0xa4>)
 8000fae:	695a      	ldr	r2, [r3, #20]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	02db      	lsls	r3, r3, #11
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fba:	193b      	adds	r3, r7, r4
 8000fbc:	22c0      	movs	r2, #192	; 0xc0
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	0021      	movs	r1, r4
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2204      	movs	r2, #4
 8000fda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_CAN_MspInit+0xa8>)
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	0010      	movs	r0, r2
 8000fe4:	f001 fa3c 	bl	8002460 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	201e      	movs	r0, #30
 8000fee:	f001 fa05 	bl	80023fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000ff2:	201e      	movs	r0, #30
 8000ff4:	f001 fa17 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b00b      	add	sp, #44	; 0x2c
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	40006400 	.word	0x40006400
 8001004:	40021000 	.word	0x40021000
 8001008:	48000400 	.word	0x48000400

0800100c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b08d      	sub	sp, #52	; 0x34
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	241c      	movs	r4, #28
 8001016:	193b      	adds	r3, r7, r4
 8001018:	0018      	movs	r0, r3
 800101a:	2314      	movs	r3, #20
 800101c:	001a      	movs	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f002 fcd6 	bl	80039d0 <memset>
  if(hspi->Instance==SPI1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a39      	ldr	r2, [pc, #228]	; (8001110 <HAL_SPI_MspInit+0x104>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d133      	bne.n	8001096 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800102e:	4b39      	ldr	r3, [pc, #228]	; (8001114 <HAL_SPI_MspInit+0x108>)
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <HAL_SPI_MspInit+0x108>)
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	0149      	lsls	r1, r1, #5
 8001038:	430a      	orrs	r2, r1
 800103a:	619a      	str	r2, [r3, #24]
 800103c:	4b35      	ldr	r3, [pc, #212]	; (8001114 <HAL_SPI_MspInit+0x108>)
 800103e:	699a      	ldr	r2, [r3, #24]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	015b      	lsls	r3, r3, #5
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <HAL_SPI_MspInit+0x108>)
 800104c:	695a      	ldr	r2, [r3, #20]
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <HAL_SPI_MspInit+0x108>)
 8001050:	2180      	movs	r1, #128	; 0x80
 8001052:	0289      	lsls	r1, r1, #10
 8001054:	430a      	orrs	r2, r1
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <HAL_SPI_MspInit+0x108>)
 800105a:	695a      	ldr	r2, [r3, #20]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	029b      	lsls	r3, r3, #10
 8001060:	4013      	ands	r3, r2
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AMS_SCK_Pin|AMS_MISO_Pin|AMS_MOSI_Pin;
 8001066:	0021      	movs	r1, r4
 8001068:	187b      	adds	r3, r7, r1
 800106a:	22e0      	movs	r2, #224	; 0xe0
 800106c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2202      	movs	r2, #2
 8001072:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2203      	movs	r2, #3
 800107e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	187a      	adds	r2, r7, r1
 8001088:	2390      	movs	r3, #144	; 0x90
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	0011      	movs	r1, r2
 800108e:	0018      	movs	r0, r3
 8001090:	f001 f9e6 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001094:	e037      	b.n	8001106 <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_SPI_MspInit+0x10c>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d132      	bne.n	8001106 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_SPI_MspInit+0x108>)
 80010a2:	69da      	ldr	r2, [r3, #28]
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_SPI_MspInit+0x108>)
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	01c9      	lsls	r1, r1, #7
 80010aa:	430a      	orrs	r2, r1
 80010ac:	61da      	str	r2, [r3, #28]
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_SPI_MspInit+0x108>)
 80010b0:	69da      	ldr	r2, [r3, #28]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	01db      	lsls	r3, r3, #7
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_SPI_MspInit+0x108>)
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_SPI_MspInit+0x108>)
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	02c9      	lsls	r1, r1, #11
 80010c6:	430a      	orrs	r2, r1
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_SPI_MspInit+0x108>)
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	02db      	lsls	r3, r3, #11
 80010d2:	4013      	ands	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMC_SCK_Pin|TMC_MISO_Pin|TMC_MOSI_Pin;
 80010d8:	211c      	movs	r1, #28
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	22e0      	movs	r2, #224	; 0xe0
 80010de:	0212      	lsls	r2, r2, #8
 80010e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2202      	movs	r2, #2
 80010e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2203      	movs	r2, #3
 80010f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_SPI_MspInit+0x110>)
 80010fe:	0019      	movs	r1, r3
 8001100:	0010      	movs	r0, r2
 8001102:	f001 f9ad 	bl	8002460 <HAL_GPIO_Init>
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b00d      	add	sp, #52	; 0x34
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	40013000 	.word	0x40013000
 8001114:	40021000 	.word	0x40021000
 8001118:	40003800 	.word	0x40003800
 800111c:	48000400 	.word	0x48000400

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f890 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AMS_INT_Pin);
 8001152:	2001      	movs	r0, #1
 8001154:	f001 fb1a 	bl	800278c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <CEC_CAN_IRQHandler+0x14>)
 8001166:	0018      	movs	r0, r3
 8001168:	f000 fe88 	bl	8001e7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	20000068 	.word	0x20000068

08001178 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001186:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800118a:	490e      	ldr	r1, [pc, #56]	; (80011c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800118c:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <LoopForever+0xe>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a0:	4c0b      	ldr	r4, [pc, #44]	; (80011d0 <LoopForever+0x16>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011ae:	f7ff ffe3 	bl	8001178 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80011b2:	f002 fbe9 	bl	8003988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011b6:	f7ff f9b7 	bl	8000528 <main>

080011ba <LoopForever>:

LoopForever:
    b LoopForever
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
  ldr   r0, =_estack
 80011bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011c8:	08003a30 	.word	0x08003a30
  ldr r2, =_sbss
 80011cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011d0:	2000114c 	.word	0x2000114c

080011d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_COMP_IRQHandler>
	...

080011d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <HAL_Init+0x24>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_Init+0x24>)
 80011e2:	2110      	movs	r1, #16
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f809 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ee:	f7ff fe4d 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	0018      	movs	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	40022000 	.word	0x40022000

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_InitTick+0x5c>)
 800120a:	681c      	ldr	r4, [r3, #0]
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_InitTick+0x60>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	0019      	movs	r1, r3
 8001212:	23fa      	movs	r3, #250	; 0xfa
 8001214:	0098      	lsls	r0, r3, #2
 8001216:	f7fe ff75 	bl	8000104 <__udivsi3>
 800121a:	0003      	movs	r3, r0
 800121c:	0019      	movs	r1, r3
 800121e:	0020      	movs	r0, r4
 8001220:	f7fe ff70 	bl	8000104 <__udivsi3>
 8001224:	0003      	movs	r3, r0
 8001226:	0018      	movs	r0, r3
 8001228:	f001 f90d 	bl	8002446 <HAL_SYSTICK_Config>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d001      	beq.n	8001234 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e00f      	b.n	8001254 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d80b      	bhi.n	8001252 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	2301      	movs	r3, #1
 800123e:	425b      	negs	r3, r3
 8001240:	2200      	movs	r2, #0
 8001242:	0018      	movs	r0, r3
 8001244:	f001 f8da 	bl	80023fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_InitTick+0x64>)
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b003      	add	sp, #12
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	20000008 	.word	0x20000008
 8001264:	20000004 	.word	0x20000004

08001268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x1c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	001a      	movs	r2, r3
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x20>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	18d2      	adds	r2, r2, r3
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_IncTick+0x20>)
 800127a:	601a      	str	r2, [r3, #0]
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	20000008 	.word	0x20000008
 8001288:	20001148 	.word	0x20001148

0800128c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <HAL_GetTick+0x10>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	20001148 	.word	0x20001148

080012a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff fff0 	bl	800128c <HAL_GetTick>
 80012ac:	0003      	movs	r3, r0
 80012ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3301      	adds	r3, #1
 80012b8:	d005      	beq.n	80012c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_Delay+0x44>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	001a      	movs	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	189b      	adds	r3, r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	f7ff ffe0 	bl	800128c <HAL_GetTick>
 80012cc:	0002      	movs	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f7      	bhi.n	80012c8 <HAL_Delay+0x28>
  {
  }
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	b004      	add	sp, #16
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	20000008 	.word	0x20000008

080012e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f0:	230f      	movs	r3, #15
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e125      	b.n	8001552 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10a      	bne.n	8001324 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2234      	movs	r2, #52	; 0x34
 8001318:	2100      	movs	r1, #0
 800131a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	0018      	movs	r0, r3
 8001320:	f7ff fdd8 	bl	8000ed4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001328:	2210      	movs	r2, #16
 800132a:	4013      	ands	r3, r2
 800132c:	d000      	beq.n	8001330 <HAL_ADC_Init+0x48>
 800132e:	e103      	b.n	8001538 <HAL_ADC_Init+0x250>
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d000      	beq.n	800133c <HAL_ADC_Init+0x54>
 800133a:	e0fd      	b.n	8001538 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2204      	movs	r2, #4
 8001344:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001346:	d000      	beq.n	800134a <HAL_ADC_Init+0x62>
 8001348:	e0f6      	b.n	8001538 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134e:	4a83      	ldr	r2, [pc, #524]	; (800155c <HAL_ADC_Init+0x274>)
 8001350:	4013      	ands	r3, r2
 8001352:	2202      	movs	r2, #2
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2203      	movs	r2, #3
 8001362:	4013      	ands	r3, r2
 8001364:	2b01      	cmp	r3, #1
 8001366:	d112      	bne.n	800138e <HAL_ADC_Init+0xa6>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2201      	movs	r2, #1
 8001370:	4013      	ands	r3, r2
 8001372:	2b01      	cmp	r3, #1
 8001374:	d009      	beq.n	800138a <HAL_ADC_Init+0xa2>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	401a      	ands	r2, r3
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	429a      	cmp	r2, r3
 8001388:	d101      	bne.n	800138e <HAL_ADC_Init+0xa6>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_ADC_Init+0xa8>
 800138e:	2300      	movs	r3, #0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d116      	bne.n	80013c2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2218      	movs	r2, #24
 800139c:	4393      	bics	r3, r2
 800139e:	0019      	movs	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	0899      	lsrs	r1, r3, #2
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4964      	ldr	r1, [pc, #400]	; (8001560 <HAL_ADC_Init+0x278>)
 80013ce:	400a      	ands	r2, r1
 80013d0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7e1b      	ldrb	r3, [r3, #24]
 80013d6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7e5b      	ldrb	r3, [r3, #25]
 80013dc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013de:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7e9b      	ldrb	r3, [r3, #26]
 80013e4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d002      	beq.n	80013f6 <HAL_ADC_Init+0x10e>
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	015b      	lsls	r3, r3, #5
 80013f4:	e000      	b.n	80013f8 <HAL_ADC_Init+0x110>
 80013f6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013f8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013fe:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d101      	bne.n	800140c <HAL_ADC_Init+0x124>
 8001408:	2304      	movs	r3, #4
 800140a:	e000      	b.n	800140e <HAL_ADC_Init+0x126>
 800140c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800140e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2124      	movs	r1, #36	; 0x24
 8001414:	5c5b      	ldrb	r3, [r3, r1]
 8001416:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001418:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	4313      	orrs	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7edb      	ldrb	r3, [r3, #27]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d115      	bne.n	8001454 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7e9b      	ldrb	r3, [r3, #26]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d105      	bne.n	800143c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	0252      	lsls	r2, r2, #9
 8001436:	4313      	orrs	r3, r2
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	e00b      	b.n	8001454 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001440:	2220      	movs	r2, #32
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144c:	2201      	movs	r2, #1
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69da      	ldr	r2, [r3, #28]
 8001458:	23c2      	movs	r3, #194	; 0xc2
 800145a:	33ff      	adds	r3, #255	; 0xff
 800145c:	429a      	cmp	r2, r3
 800145e:	d007      	beq.n	8001470 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001468:	4313      	orrs	r3, r2
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4313      	orrs	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68d9      	ldr	r1, [r3, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	430a      	orrs	r2, r1
 800147e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	055b      	lsls	r3, r3, #21
 8001488:	429a      	cmp	r2, r3
 800148a:	d01b      	beq.n	80014c4 <HAL_ADC_Init+0x1dc>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2b01      	cmp	r3, #1
 8001492:	d017      	beq.n	80014c4 <HAL_ADC_Init+0x1dc>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	2b02      	cmp	r3, #2
 800149a:	d013      	beq.n	80014c4 <HAL_ADC_Init+0x1dc>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d00f      	beq.n	80014c4 <HAL_ADC_Init+0x1dc>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d00b      	beq.n	80014c4 <HAL_ADC_Init+0x1dc>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d007      	beq.n	80014c4 <HAL_ADC_Init+0x1dc>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	2b06      	cmp	r3, #6
 80014ba:	d003      	beq.n	80014c4 <HAL_ADC_Init+0x1dc>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	d112      	bne.n	80014ea <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2107      	movs	r1, #7
 80014d0:	438a      	bics	r2, r1
 80014d2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6959      	ldr	r1, [r3, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	2207      	movs	r2, #7
 80014e0:	401a      	ands	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_ADC_Init+0x27c>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d10b      	bne.n	8001512 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001504:	2203      	movs	r2, #3
 8001506:	4393      	bics	r3, r2
 8001508:	2201      	movs	r2, #1
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001510:	e01c      	b.n	800154c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001516:	2212      	movs	r2, #18
 8001518:	4393      	bics	r3, r2
 800151a:	2210      	movs	r2, #16
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001526:	2201      	movs	r2, #1
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800152e:	230f      	movs	r3, #15
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001536:	e009      	b.n	800154c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	2210      	movs	r2, #16
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001544:	230f      	movs	r3, #15
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800154c:	230f      	movs	r3, #15
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	781b      	ldrb	r3, [r3, #0]
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	fffffefd 	.word	0xfffffefd
 8001560:	fffe0219 	.word	0xfffe0219
 8001564:	833fffe7 	.word	0x833fffe7

08001568 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001572:	230f      	movs	r3, #15
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	055b      	lsls	r3, r3, #21
 8001586:	429a      	cmp	r2, r3
 8001588:	d011      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x46>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	2b01      	cmp	r3, #1
 8001590:	d00d      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x46>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	2b02      	cmp	r3, #2
 8001598:	d009      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x46>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d005      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x46>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d001      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x46>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2234      	movs	r2, #52	; 0x34
 80015b2:	5c9b      	ldrb	r3, [r3, r2]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x54>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e0d0      	b.n	800175e <HAL_ADC_ConfigChannel+0x1f6>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2234      	movs	r2, #52	; 0x34
 80015c0:	2101      	movs	r1, #1
 80015c2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2204      	movs	r2, #4
 80015cc:	4013      	ands	r3, r2
 80015ce:	d000      	beq.n	80015d2 <HAL_ADC_ConfigChannel+0x6a>
 80015d0:	e0b4      	b.n	800173c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4a64      	ldr	r2, [pc, #400]	; (8001768 <HAL_ADC_ConfigChannel+0x200>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d100      	bne.n	80015de <HAL_ADC_ConfigChannel+0x76>
 80015dc:	e082      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2201      	movs	r2, #1
 80015ea:	409a      	lsls	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	055b      	lsls	r3, r3, #21
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d037      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x108>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	2b01      	cmp	r3, #1
 8001606:	d033      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x108>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	2b02      	cmp	r3, #2
 800160e:	d02f      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x108>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	2b03      	cmp	r3, #3
 8001616:	d02b      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x108>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	2b04      	cmp	r3, #4
 800161e:	d027      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x108>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	2b05      	cmp	r3, #5
 8001626:	d023      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x108>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	2b06      	cmp	r3, #6
 800162e:	d01f      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x108>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	2b07      	cmp	r3, #7
 8001636:	d01b      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	2107      	movs	r1, #7
 8001644:	400b      	ands	r3, r1
 8001646:	429a      	cmp	r2, r3
 8001648:	d012      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2107      	movs	r1, #7
 8001656:	438a      	bics	r2, r1
 8001658:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6959      	ldr	r1, [r3, #20]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2207      	movs	r2, #7
 8001666:	401a      	ands	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b10      	cmp	r3, #16
 8001676:	d007      	beq.n	8001688 <HAL_ADC_ConfigChannel+0x120>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b11      	cmp	r3, #17
 800167e:	d003      	beq.n	8001688 <HAL_ADC_ConfigChannel+0x120>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b12      	cmp	r3, #18
 8001686:	d163      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <HAL_ADC_ConfigChannel+0x204>)
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b10      	cmp	r3, #16
 8001692:	d009      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x140>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b11      	cmp	r3, #17
 800169a:	d102      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x13a>
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	03db      	lsls	r3, r3, #15
 80016a0:	e004      	b.n	80016ac <HAL_ADC_ConfigChannel+0x144>
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	045b      	lsls	r3, r3, #17
 80016a6:	e001      	b.n	80016ac <HAL_ADC_ConfigChannel+0x144>
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	4a2f      	ldr	r2, [pc, #188]	; (800176c <HAL_ADC_ConfigChannel+0x204>)
 80016ae:	430b      	orrs	r3, r1
 80016b0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d14a      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_ADC_ConfigChannel+0x208>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	492d      	ldr	r1, [pc, #180]	; (8001774 <HAL_ADC_ConfigChannel+0x20c>)
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7fe fd1f 	bl	8000104 <__udivsi3>
 80016c6:	0003      	movs	r3, r0
 80016c8:	001a      	movs	r2, r3
 80016ca:	0013      	movs	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	189b      	adds	r3, r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016d4:	e002      	b.n	80016dc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3b01      	subs	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f9      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x16e>
 80016e2:	e035      	b.n	8001750 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2101      	movs	r1, #1
 80016f0:	4099      	lsls	r1, r3
 80016f2:	000b      	movs	r3, r1
 80016f4:	43d9      	mvns	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	400a      	ands	r2, r1
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b10      	cmp	r3, #16
 8001704:	d007      	beq.n	8001716 <HAL_ADC_ConfigChannel+0x1ae>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b11      	cmp	r3, #17
 800170c:	d003      	beq.n	8001716 <HAL_ADC_ConfigChannel+0x1ae>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b12      	cmp	r3, #18
 8001714:	d11c      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_ADC_ConfigChannel+0x204>)
 8001718:	6819      	ldr	r1, [r3, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b10      	cmp	r3, #16
 8001720:	d007      	beq.n	8001732 <HAL_ADC_ConfigChannel+0x1ca>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b11      	cmp	r3, #17
 8001728:	d101      	bne.n	800172e <HAL_ADC_ConfigChannel+0x1c6>
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_ADC_ConfigChannel+0x210>)
 800172c:	e002      	b.n	8001734 <HAL_ADC_ConfigChannel+0x1cc>
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_ADC_ConfigChannel+0x214>)
 8001730:	e000      	b.n	8001734 <HAL_ADC_ConfigChannel+0x1cc>
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_ADC_ConfigChannel+0x218>)
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <HAL_ADC_ConfigChannel+0x204>)
 8001736:	400b      	ands	r3, r1
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e009      	b.n	8001750 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001740:	2220      	movs	r2, #32
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001748:	230f      	movs	r3, #15
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2234      	movs	r2, #52	; 0x34
 8001754:	2100      	movs	r1, #0
 8001756:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001758:	230f      	movs	r3, #15
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	781b      	ldrb	r3, [r3, #0]
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	00001001 	.word	0x00001001
 800176c:	40012708 	.word	0x40012708
 8001770:	20000000 	.word	0x20000000
 8001774:	000f4240 	.word	0x000f4240
 8001778:	ffbfffff 	.word	0xffbfffff
 800177c:	feffffff 	.word	0xfeffffff
 8001780:	ff7fffff 	.word	0xff7fffff

08001784 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0f0      	b.n	8001978 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	5c9b      	ldrb	r3, [r3, r2]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d103      	bne.n	80017aa <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7ff fbdb 	bl	8000f60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ba:	f7ff fd67 	bl	800128c <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017c2:	e013      	b.n	80017ec <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017c4:	f7ff fd62 	bl	800128c <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b0a      	cmp	r3, #10
 80017d0:	d90c      	bls.n	80017ec <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	0292      	lsls	r2, r2, #10
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2220      	movs	r2, #32
 80017e4:	2105      	movs	r1, #5
 80017e6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0c5      	b.n	8001978 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4013      	ands	r3, r2
 80017f6:	d0e5      	beq.n	80017c4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2102      	movs	r1, #2
 8001804:	438a      	bics	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001808:	f7ff fd40 	bl	800128c <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001810:	e013      	b.n	800183a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001812:	f7ff fd3b 	bl	800128c <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b0a      	cmp	r3, #10
 800181e:	d90c      	bls.n	800183a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	0292      	lsls	r2, r2, #10
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2220      	movs	r2, #32
 8001832:	2105      	movs	r1, #5
 8001834:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e09e      	b.n	8001978 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2202      	movs	r2, #2
 8001842:	4013      	ands	r3, r2
 8001844:	d1e5      	bne.n	8001812 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7e1b      	ldrb	r3, [r3, #24]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d108      	bne.n	8001860 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e007      	b.n	8001870 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	438a      	bics	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7e5b      	ldrb	r3, [r3, #25]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d108      	bne.n	800188a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2140      	movs	r1, #64	; 0x40
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e007      	b.n	800189a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2140      	movs	r1, #64	; 0x40
 8001896:	438a      	bics	r2, r1
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	7e9b      	ldrb	r3, [r3, #26]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d108      	bne.n	80018b4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2120      	movs	r1, #32
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e007      	b.n	80018c4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2120      	movs	r1, #32
 80018c0:	438a      	bics	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7edb      	ldrb	r3, [r3, #27]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d108      	bne.n	80018de <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2110      	movs	r1, #16
 80018d8:	438a      	bics	r2, r1
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	e007      	b.n	80018ee <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2110      	movs	r1, #16
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7f1b      	ldrb	r3, [r3, #28]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d108      	bne.n	8001908 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2108      	movs	r1, #8
 8001902:	430a      	orrs	r2, r1
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	e007      	b.n	8001918 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2108      	movs	r1, #8
 8001914:	438a      	bics	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7f5b      	ldrb	r3, [r3, #29]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d108      	bne.n	8001932 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2104      	movs	r1, #4
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e007      	b.n	8001942 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2104      	movs	r1, #4
 800193e:	438a      	bics	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	431a      	orrs	r2, r3
 8001958:	0011      	movs	r1, r2
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	1e5a      	subs	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2220      	movs	r2, #32
 8001972:	2101      	movs	r1, #1
 8001974:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b004      	add	sp, #16
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001990:	2013      	movs	r0, #19
 8001992:	183b      	adds	r3, r7, r0
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	2120      	movs	r1, #32
 8001998:	5c52      	ldrb	r2, [r2, r1]
 800199a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800199c:	0002      	movs	r2, r0
 800199e:	18bb      	adds	r3, r7, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d004      	beq.n	80019b0 <HAL_CAN_ConfigFilter+0x30>
 80019a6:	18bb      	adds	r3, r7, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d000      	beq.n	80019b0 <HAL_CAN_ConfigFilter+0x30>
 80019ae:	e0cd      	b.n	8001b4c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	58d3      	ldr	r3, [r2, r3]
 80019b8:	2201      	movs	r2, #1
 80019ba:	431a      	orrs	r2, r3
 80019bc:	0011      	movs	r1, r2
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	221f      	movs	r2, #31
 80019cc:	4013      	ands	r3, r2
 80019ce:	2201      	movs	r2, #1
 80019d0:	409a      	lsls	r2, r3
 80019d2:	0013      	movs	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	2387      	movs	r3, #135	; 0x87
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	58d3      	ldr	r3, [r2, r3]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	43d2      	mvns	r2, r2
 80019e2:	401a      	ands	r2, r3
 80019e4:	0011      	movs	r1, r2
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	2387      	movs	r3, #135	; 0x87
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d129      	bne.n	8001a4a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	2383      	movs	r3, #131	; 0x83
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	58d3      	ldr	r3, [r2, r3]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	43d2      	mvns	r2, r2
 8001a02:	401a      	ands	r2, r3
 8001a04:	0011      	movs	r1, r2
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	2383      	movs	r3, #131	; 0x83
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a20:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3248      	adds	r2, #72	; 0x48
 8001a26:	00d2      	lsls	r2, r2, #3
 8001a28:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	041b      	lsls	r3, r3, #16
 8001a36:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a3e:	6979      	ldr	r1, [r7, #20]
 8001a40:	3348      	adds	r3, #72	; 0x48
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	18cb      	adds	r3, r1, r3
 8001a46:	3304      	adds	r3, #4
 8001a48:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d128      	bne.n	8001aa4 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	2383      	movs	r3, #131	; 0x83
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	58d2      	ldr	r2, [r2, r3]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	0011      	movs	r1, r2
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	2383      	movs	r3, #131	; 0x83
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	041b      	lsls	r3, r3, #16
 8001a74:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a7a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3248      	adds	r2, #72	; 0x48
 8001a80:	00d2      	lsls	r2, r2, #3
 8001a82:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	041b      	lsls	r3, r3, #16
 8001a90:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a98:	6979      	ldr	r1, [r7, #20]
 8001a9a:	3348      	adds	r3, #72	; 0x48
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	18cb      	adds	r3, r1, r3
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10c      	bne.n	8001ac6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	2381      	movs	r3, #129	; 0x81
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	58d3      	ldr	r3, [r2, r3]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	43d2      	mvns	r2, r2
 8001ab8:	401a      	ands	r2, r3
 8001aba:	0011      	movs	r1, r2
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	2381      	movs	r3, #129	; 0x81
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	50d1      	str	r1, [r2, r3]
 8001ac4:	e00a      	b.n	8001adc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	2381      	movs	r3, #129	; 0x81
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	58d2      	ldr	r2, [r2, r3]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	0011      	movs	r1, r2
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	2381      	movs	r3, #129	; 0x81
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10c      	bne.n	8001afe <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	2385      	movs	r3, #133	; 0x85
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	58d3      	ldr	r3, [r2, r3]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	43d2      	mvns	r2, r2
 8001af0:	401a      	ands	r2, r3
 8001af2:	0011      	movs	r1, r2
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	2385      	movs	r3, #133	; 0x85
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	50d1      	str	r1, [r2, r3]
 8001afc:	e00a      	b.n	8001b14 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	2385      	movs	r3, #133	; 0x85
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	58d2      	ldr	r2, [r2, r3]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	2385      	movs	r3, #133	; 0x85
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d10a      	bne.n	8001b32 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	2387      	movs	r3, #135	; 0x87
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	58d2      	ldr	r2, [r2, r3]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	0011      	movs	r1, r2
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	2387      	movs	r3, #135	; 0x87
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	58d3      	ldr	r3, [r2, r3]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4393      	bics	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e007      	b.n	8001b5c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	02d2      	lsls	r2, r2, #11
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
  }
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b006      	add	sp, #24
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	5c9b      	ldrb	r3, [r3, r2]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d12f      	bne.n	8001bd8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b90:	f7ff fb7c 	bl	800128c <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b98:	e013      	b.n	8001bc2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b9a:	f7ff fb77 	bl	800128c <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b0a      	cmp	r3, #10
 8001ba6:	d90c      	bls.n	8001bc2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	0292      	lsls	r2, r2, #10
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	2105      	movs	r1, #5
 8001bbc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e012      	b.n	8001be8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d1e5      	bne.n	8001b9a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e007      	b.n	8001be8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	0312      	lsls	r2, r2, #12
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
  }
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bfe:	2017      	movs	r0, #23
 8001c00:	183b      	adds	r3, r7, r0
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	2120      	movs	r1, #32
 8001c06:	5c52      	ldrb	r2, [r2, r1]
 8001c08:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	18bb      	adds	r3, r7, r2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d004      	beq.n	8001c1e <HAL_CAN_GetRxMessage+0x2e>
 8001c14:	18bb      	adds	r3, r7, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d000      	beq.n	8001c1e <HAL_CAN_GetRxMessage+0x2e>
 8001c1c:	e0f8      	b.n	8001e10 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10e      	bne.n	8001c42 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d117      	bne.n	8001c60 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	2280      	movs	r2, #128	; 0x80
 8001c36:	0392      	lsls	r2, r2, #14
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0ee      	b.n	8001e20 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2203      	movs	r2, #3
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d108      	bne.n	8001c60 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	0392      	lsls	r2, r2, #14
 8001c56:	431a      	orrs	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0df      	b.n	8001e20 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	321b      	adds	r2, #27
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	58d3      	ldr	r3, [r2, r3]
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10b      	bne.n	8001c94 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	321b      	adds	r2, #27
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	58d3      	ldr	r3, [r2, r3]
 8001c88:	0d5b      	lsrs	r3, r3, #21
 8001c8a:	055b      	lsls	r3, r3, #21
 8001c8c:	0d5a      	lsrs	r2, r3, #21
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e00a      	b.n	8001caa <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	321b      	adds	r2, #27
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	58d3      	ldr	r3, [r2, r3]
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	321b      	adds	r2, #27
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	58d3      	ldr	r3, [r2, r3]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	401a      	ands	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	331b      	adds	r3, #27
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	18d3      	adds	r3, r2, r3
 8001cca:	3304      	adds	r3, #4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	220f      	movs	r2, #15
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	331b      	adds	r3, #27
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	18d3      	adds	r3, r2, r3
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	22ff      	movs	r2, #255	; 0xff
 8001cea:	401a      	ands	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	331b      	adds	r3, #27
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	18d3      	adds	r3, r2, r3
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	041b      	lsls	r3, r3, #16
 8001d04:	0c1a      	lsrs	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	23dc      	movs	r3, #220	; 0xdc
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	188a      	adds	r2, r1, r2
 8001d18:	18d3      	adds	r3, r2, r3
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6819      	ldr	r1, [r3, #0]
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	23dc      	movs	r3, #220	; 0xdc
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	188a      	adds	r2, r1, r2
 8001d30:	18d3      	adds	r3, r2, r3
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0a1a      	lsrs	r2, r3, #8
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	23dc      	movs	r3, #220	; 0xdc
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	188a      	adds	r2, r1, r2
 8001d4c:	18d3      	adds	r3, r2, r3
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0c1a      	lsrs	r2, r3, #16
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	3302      	adds	r3, #2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	23dc      	movs	r3, #220	; 0xdc
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	188a      	adds	r2, r1, r2
 8001d68:	18d3      	adds	r3, r2, r3
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0e1a      	lsrs	r2, r3, #24
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	3303      	adds	r3, #3
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6819      	ldr	r1, [r3, #0]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	23de      	movs	r3, #222	; 0xde
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	188a      	adds	r2, r1, r2
 8001d84:	18d3      	adds	r3, r2, r3
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6819      	ldr	r1, [r3, #0]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	23de      	movs	r3, #222	; 0xde
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	188a      	adds	r2, r1, r2
 8001d9e:	18d3      	adds	r3, r2, r3
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	0a1a      	lsrs	r2, r3, #8
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	3305      	adds	r3, #5
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6819      	ldr	r1, [r3, #0]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	23de      	movs	r3, #222	; 0xde
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	188a      	adds	r2, r1, r2
 8001dba:	18d3      	adds	r3, r2, r3
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0c1a      	lsrs	r2, r3, #16
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	3306      	adds	r3, #6
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6819      	ldr	r1, [r3, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	23de      	movs	r3, #222	; 0xde
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	188a      	adds	r2, r1, r2
 8001dd6:	18d3      	adds	r3, r2, r3
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	0e1a      	lsrs	r2, r3, #24
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	3307      	adds	r3, #7
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d108      	bne.n	8001dfc <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2120      	movs	r1, #32
 8001df6:	430a      	orrs	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	e007      	b.n	8001e0c <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2120      	movs	r1, #32
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e007      	b.n	8001e20 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	02d2      	lsls	r2, r2, #11
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
  }
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b006      	add	sp, #24
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e32:	200f      	movs	r0, #15
 8001e34:	183b      	adds	r3, r7, r0
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	2120      	movs	r1, #32
 8001e3a:	5c52      	ldrb	r2, [r2, r1]
 8001e3c:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e3e:	0002      	movs	r2, r0
 8001e40:	18bb      	adds	r3, r7, r2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d003      	beq.n	8001e50 <HAL_CAN_ActivateNotification+0x28>
 8001e48:	18bb      	adds	r3, r7, r2
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d109      	bne.n	8001e64 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6959      	ldr	r1, [r3, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e007      	b.n	8001e74 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	2280      	movs	r2, #128	; 0x80
 8001e6a:	02d2      	lsls	r2, r2, #11
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
  }
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b004      	add	sp, #16
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d100      	bne.n	8001ec2 <HAL_CAN_IRQHandler+0x46>
 8001ec0:	e084      	b.n	8001fcc <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d024      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d004      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f000 f981 	bl	80021e4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001ee2:	e017      	b.n	8001f14 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d005      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef6:	e00d      	b.n	8001f14 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2208      	movs	r2, #8
 8001efc:	4013      	ands	r3, r2
 8001efe:	d005      	beq.n	8001f0c <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	0152      	lsls	r2, r2, #5
 8001f06:	4313      	orrs	r3, r2
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0a:	e003      	b.n	8001f14 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 f980 	bl	8002214 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d028      	beq.n	8001f70 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	0052      	lsls	r2, r2, #1
 8001f26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d004      	beq.n	8001f3c <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f000 f95d 	bl	80021f4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f3a:	e019      	b.n	8001f70 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4013      	ands	r3, r2
 8001f44:	d005      	beq.n	8001f52 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	0192      	lsls	r2, r2, #6
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	e00e      	b.n	8001f70 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d005      	beq.n	8001f68 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	01d2      	lsls	r2, r2, #7
 8001f62:	4313      	orrs	r3, r2
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	e003      	b.n	8001f70 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 f95a 	bl	8002224 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	025b      	lsls	r3, r3, #9
 8001f76:	4013      	ands	r3, r2
 8001f78:	d028      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	0252      	lsls	r2, r2, #9
 8001f82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	029b      	lsls	r3, r3, #10
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f000 f937 	bl	8002204 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f96:	e019      	b.n	8001fcc <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	02db      	lsls	r3, r3, #11
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d005      	beq.n	8001fae <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	0212      	lsls	r2, r2, #8
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
 8001fac:	e00e      	b.n	8001fcc <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	031b      	lsls	r3, r3, #12
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d005      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	0252      	lsls	r2, r2, #9
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	e003      	b.n	8001fcc <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f000 f934 	bl	8002234 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	2208      	movs	r2, #8
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d00c      	beq.n	8001fee <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d008      	beq.n	8001fee <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	0092      	lsls	r2, r2, #2
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2210      	movs	r2, #16
 8001fec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d00b      	beq.n	800200e <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d007      	beq.n	800200e <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2208      	movs	r2, #8
 8002004:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	0018      	movs	r0, r3
 800200a:	f000 f91b 	bl	8002244 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	2202      	movs	r2, #2
 8002012:	4013      	ands	r3, r2
 8002014:	d009      	beq.n	800202a <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2203      	movs	r2, #3
 800201e:	4013      	ands	r3, r2
 8002020:	d003      	beq.n	800202a <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	0018      	movs	r0, r3
 8002026:	f7fe fa4b 	bl	80004c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	2240      	movs	r2, #64	; 0x40
 800202e:	4013      	ands	r3, r2
 8002030:	d00c      	beq.n	800204c <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2210      	movs	r2, #16
 8002036:	4013      	ands	r3, r2
 8002038:	d008      	beq.n	800204c <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	2280      	movs	r2, #128	; 0x80
 800203e:	00d2      	lsls	r2, r2, #3
 8002040:	4313      	orrs	r3, r2
 8002042:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2210      	movs	r2, #16
 800204a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	2220      	movs	r2, #32
 8002050:	4013      	ands	r3, r2
 8002052:	d00b      	beq.n	800206c <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2208      	movs	r2, #8
 8002058:	4013      	ands	r3, r2
 800205a:	d007      	beq.n	800206c <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2208      	movs	r2, #8
 8002062:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	0018      	movs	r0, r3
 8002068:	f000 f8fc 	bl	8002264 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	2210      	movs	r2, #16
 8002070:	4013      	ands	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2203      	movs	r2, #3
 800207c:	4013      	ands	r3, r2
 800207e:	d003      	beq.n	8002088 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	0018      	movs	r0, r3
 8002084:	f000 f8e6 	bl	8002254 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002088:	6a3a      	ldr	r2, [r7, #32]
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	029b      	lsls	r3, r3, #10
 800208e:	4013      	ands	r3, r2
 8002090:	d00b      	beq.n	80020aa <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	2210      	movs	r2, #16
 8002096:	4013      	ands	r3, r2
 8002098:	d007      	beq.n	80020aa <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2210      	movs	r2, #16
 80020a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f000 f8e5 	bl	8002274 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020aa:	6a3a      	ldr	r2, [r7, #32]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	025b      	lsls	r3, r3, #9
 80020b0:	4013      	ands	r3, r2
 80020b2:	d00b      	beq.n	80020cc <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2208      	movs	r2, #8
 80020b8:	4013      	ands	r3, r2
 80020ba:	d007      	beq.n	80020cc <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2208      	movs	r2, #8
 80020c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	0018      	movs	r0, r3
 80020c8:	f000 f8dc 	bl	8002284 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020cc:	6a3a      	ldr	r2, [r7, #32]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	4013      	ands	r3, r2
 80020d4:	d100      	bne.n	80020d8 <HAL_CAN_IRQHandler+0x25c>
 80020d6:	e074      	b.n	80021c2 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	2204      	movs	r2, #4
 80020dc:	4013      	ands	r3, r2
 80020de:	d100      	bne.n	80020e2 <HAL_CAN_IRQHandler+0x266>
 80020e0:	e06b      	b.n	80021ba <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020e2:	6a3a      	ldr	r2, [r7, #32]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4013      	ands	r3, r2
 80020ea:	d007      	beq.n	80020fc <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020f2:	d003      	beq.n	80020fc <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	2201      	movs	r2, #1
 80020f8:	4313      	orrs	r3, r2
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020fc:	6a3a      	ldr	r2, [r7, #32]
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4013      	ands	r3, r2
 8002104:	d007      	beq.n	8002116 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2202      	movs	r2, #2
 800210a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800210c:	d003      	beq.n	8002116 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	2202      	movs	r2, #2
 8002112:	4313      	orrs	r3, r2
 8002114:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002116:	6a3a      	ldr	r2, [r7, #32]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4013      	ands	r3, r2
 800211e:	d007      	beq.n	8002130 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2204      	movs	r2, #4
 8002124:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002126:	d003      	beq.n	8002130 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	2204      	movs	r2, #4
 800212c:	4313      	orrs	r3, r2
 800212e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002130:	6a3a      	ldr	r2, [r7, #32]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	4013      	ands	r3, r2
 8002138:	d03f      	beq.n	80021ba <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2270      	movs	r2, #112	; 0x70
 800213e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002140:	d03b      	beq.n	80021ba <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2270      	movs	r2, #112	; 0x70
 8002146:	4013      	ands	r3, r2
 8002148:	2b60      	cmp	r3, #96	; 0x60
 800214a:	d027      	beq.n	800219c <HAL_CAN_IRQHandler+0x320>
 800214c:	d82c      	bhi.n	80021a8 <HAL_CAN_IRQHandler+0x32c>
 800214e:	2b50      	cmp	r3, #80	; 0x50
 8002150:	d01f      	beq.n	8002192 <HAL_CAN_IRQHandler+0x316>
 8002152:	d829      	bhi.n	80021a8 <HAL_CAN_IRQHandler+0x32c>
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d017      	beq.n	8002188 <HAL_CAN_IRQHandler+0x30c>
 8002158:	d826      	bhi.n	80021a8 <HAL_CAN_IRQHandler+0x32c>
 800215a:	2b30      	cmp	r3, #48	; 0x30
 800215c:	d00f      	beq.n	800217e <HAL_CAN_IRQHandler+0x302>
 800215e:	d823      	bhi.n	80021a8 <HAL_CAN_IRQHandler+0x32c>
 8002160:	2b10      	cmp	r3, #16
 8002162:	d002      	beq.n	800216a <HAL_CAN_IRQHandler+0x2ee>
 8002164:	2b20      	cmp	r3, #32
 8002166:	d005      	beq.n	8002174 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002168:	e01e      	b.n	80021a8 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	2208      	movs	r2, #8
 800216e:	4313      	orrs	r3, r2
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002172:	e01a      	b.n	80021aa <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	2210      	movs	r2, #16
 8002178:	4313      	orrs	r3, r2
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800217c:	e015      	b.n	80021aa <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	2220      	movs	r2, #32
 8002182:	4313      	orrs	r3, r2
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002186:	e010      	b.n	80021aa <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	2240      	movs	r2, #64	; 0x40
 800218c:	4313      	orrs	r3, r2
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002190:	e00b      	b.n	80021aa <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	4313      	orrs	r3, r2
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800219a:	e006      	b.n	80021aa <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	2280      	movs	r2, #128	; 0x80
 80021a0:	0052      	lsls	r2, r2, #1
 80021a2:	4313      	orrs	r3, r2
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021a6:	e000      	b.n	80021aa <HAL_CAN_IRQHandler+0x32e>
            break;
 80021a8:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2170      	movs	r1, #112	; 0x70
 80021b6:	438a      	bics	r2, r1
 80021b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2204      	movs	r2, #4
 80021c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d009      	beq.n	80021dc <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0018      	movs	r0, r3
 80021d8:	f000 f85c 	bl	8002294 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b00a      	add	sp, #40	; 0x28
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b002      	add	sp, #8
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	b002      	add	sp, #8
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	b002      	add	sp, #8
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	b002      	add	sp, #8
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b002      	add	sp, #8
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	0002      	movs	r2, r0
 80022ac:	1dfb      	adds	r3, r7, #7
 80022ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	1dfb      	adds	r3, r7, #7
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b7f      	cmp	r3, #127	; 0x7f
 80022b6:	d809      	bhi.n	80022cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b8:	1dfb      	adds	r3, r7, #7
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	001a      	movs	r2, r3
 80022be:	231f      	movs	r3, #31
 80022c0:	401a      	ands	r2, r3
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_EnableIRQ+0x30>)
 80022c4:	2101      	movs	r1, #1
 80022c6:	4091      	lsls	r1, r2
 80022c8:	000a      	movs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
  }
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	0002      	movs	r2, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	1dfb      	adds	r3, r7, #7
 80022e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b7f      	cmp	r3, #127	; 0x7f
 80022ec:	d828      	bhi.n	8002340 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ee:	4a2f      	ldr	r2, [pc, #188]	; (80023ac <__NVIC_SetPriority+0xd4>)
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	33c0      	adds	r3, #192	; 0xc0
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	589b      	ldr	r3, [r3, r2]
 80022fe:	1dfa      	adds	r2, r7, #7
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	0011      	movs	r1, r2
 8002304:	2203      	movs	r2, #3
 8002306:	400a      	ands	r2, r1
 8002308:	00d2      	lsls	r2, r2, #3
 800230a:	21ff      	movs	r1, #255	; 0xff
 800230c:	4091      	lsls	r1, r2
 800230e:	000a      	movs	r2, r1
 8002310:	43d2      	mvns	r2, r2
 8002312:	401a      	ands	r2, r3
 8002314:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	019b      	lsls	r3, r3, #6
 800231a:	22ff      	movs	r2, #255	; 0xff
 800231c:	401a      	ands	r2, r3
 800231e:	1dfb      	adds	r3, r7, #7
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	0018      	movs	r0, r3
 8002324:	2303      	movs	r3, #3
 8002326:	4003      	ands	r3, r0
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800232c:	481f      	ldr	r0, [pc, #124]	; (80023ac <__NVIC_SetPriority+0xd4>)
 800232e:	1dfb      	adds	r3, r7, #7
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b25b      	sxtb	r3, r3
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	430a      	orrs	r2, r1
 8002338:	33c0      	adds	r3, #192	; 0xc0
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800233e:	e031      	b.n	80023a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002340:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <__NVIC_SetPriority+0xd8>)
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	0019      	movs	r1, r3
 8002348:	230f      	movs	r3, #15
 800234a:	400b      	ands	r3, r1
 800234c:	3b08      	subs	r3, #8
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3306      	adds	r3, #6
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	18d3      	adds	r3, r2, r3
 8002356:	3304      	adds	r3, #4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	1dfa      	adds	r2, r7, #7
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	0011      	movs	r1, r2
 8002360:	2203      	movs	r2, #3
 8002362:	400a      	ands	r2, r1
 8002364:	00d2      	lsls	r2, r2, #3
 8002366:	21ff      	movs	r1, #255	; 0xff
 8002368:	4091      	lsls	r1, r2
 800236a:	000a      	movs	r2, r1
 800236c:	43d2      	mvns	r2, r2
 800236e:	401a      	ands	r2, r3
 8002370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	401a      	ands	r2, r3
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	0018      	movs	r0, r3
 8002380:	2303      	movs	r3, #3
 8002382:	4003      	ands	r3, r0
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002388:	4809      	ldr	r0, [pc, #36]	; (80023b0 <__NVIC_SetPriority+0xd8>)
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	001c      	movs	r4, r3
 8002390:	230f      	movs	r3, #15
 8002392:	4023      	ands	r3, r4
 8002394:	3b08      	subs	r3, #8
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	430a      	orrs	r2, r1
 800239a:	3306      	adds	r3, #6
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	18c3      	adds	r3, r0, r3
 80023a0:	3304      	adds	r3, #4
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b003      	add	sp, #12
 80023aa:	bd90      	pop	{r4, r7, pc}
 80023ac:	e000e100 	.word	0xe000e100
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	1e5a      	subs	r2, r3, #1
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	045b      	lsls	r3, r3, #17
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d301      	bcc.n	80023cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c8:	2301      	movs	r3, #1
 80023ca:	e010      	b.n	80023ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <SysTick_Config+0x44>)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	3a01      	subs	r2, #1
 80023d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d4:	2301      	movs	r3, #1
 80023d6:	425b      	negs	r3, r3
 80023d8:	2103      	movs	r1, #3
 80023da:	0018      	movs	r0, r3
 80023dc:	f7ff ff7c 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <SysTick_Config+0x44>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <SysTick_Config+0x44>)
 80023e8:	2207      	movs	r2, #7
 80023ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b002      	add	sp, #8
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	e000e010 	.word	0xe000e010

080023fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	210f      	movs	r1, #15
 8002408:	187b      	adds	r3, r7, r1
 800240a:	1c02      	adds	r2, r0, #0
 800240c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	187b      	adds	r3, r7, r1
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b25b      	sxtb	r3, r3
 8002416:	0011      	movs	r1, r2
 8002418:	0018      	movs	r0, r3
 800241a:	f7ff ff5d 	bl	80022d8 <__NVIC_SetPriority>
}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	b004      	add	sp, #16
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	0002      	movs	r2, r0
 800242e:	1dfb      	adds	r3, r7, #7
 8002430:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b25b      	sxtb	r3, r3
 8002438:	0018      	movs	r0, r3
 800243a:	f7ff ff33 	bl	80022a4 <__NVIC_EnableIRQ>
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b002      	add	sp, #8
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	0018      	movs	r0, r3
 8002452:	f7ff ffaf 	bl	80023b4 <SysTick_Config>
 8002456:	0003      	movs	r3, r0
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246e:	e155      	b.n	800271c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4091      	lsls	r1, r2
 800247a:	000a      	movs	r2, r1
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d100      	bne.n	8002488 <HAL_GPIO_Init+0x28>
 8002486:	e146      	b.n	8002716 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2203      	movs	r2, #3
 800248e:	4013      	ands	r3, r2
 8002490:	2b01      	cmp	r3, #1
 8002492:	d005      	beq.n	80024a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2203      	movs	r2, #3
 800249a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800249c:	2b02      	cmp	r3, #2
 800249e:	d130      	bne.n	8002502 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	409a      	lsls	r2, r3
 80024ae:	0013      	movs	r3, r2
 80024b0:	43da      	mvns	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	409a      	lsls	r2, r3
 80024c2:	0013      	movs	r3, r2
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d6:	2201      	movs	r2, #1
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	43da      	mvns	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	2201      	movs	r2, #1
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
 80024f4:	0013      	movs	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2203      	movs	r2, #3
 8002508:	4013      	ands	r3, r2
 800250a:	2b03      	cmp	r3, #3
 800250c:	d017      	beq.n	800253e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2203      	movs	r2, #3
 800251a:	409a      	lsls	r2, r3
 800251c:	0013      	movs	r3, r2
 800251e:	43da      	mvns	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	409a      	lsls	r2, r3
 8002530:	0013      	movs	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2203      	movs	r2, #3
 8002544:	4013      	ands	r3, r2
 8002546:	2b02      	cmp	r3, #2
 8002548:	d123      	bne.n	8002592 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	58d3      	ldr	r3, [r2, r3]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2207      	movs	r2, #7
 800255c:	4013      	ands	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	220f      	movs	r2, #15
 8002562:	409a      	lsls	r2, r3
 8002564:	0013      	movs	r3, r2
 8002566:	43da      	mvns	r2, r3
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2107      	movs	r1, #7
 8002576:	400b      	ands	r3, r1
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	409a      	lsls	r2, r3
 800257c:	0013      	movs	r3, r2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	08da      	lsrs	r2, r3, #3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3208      	adds	r2, #8
 800258c:	0092      	lsls	r2, r2, #2
 800258e:	6939      	ldr	r1, [r7, #16]
 8002590:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	409a      	lsls	r2, r3
 80025a0:	0013      	movs	r3, r2
 80025a2:	43da      	mvns	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2203      	movs	r2, #3
 80025b0:	401a      	ands	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	409a      	lsls	r2, r3
 80025b8:	0013      	movs	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	23c0      	movs	r3, #192	; 0xc0
 80025cc:	029b      	lsls	r3, r3, #10
 80025ce:	4013      	ands	r3, r2
 80025d0:	d100      	bne.n	80025d4 <HAL_GPIO_Init+0x174>
 80025d2:	e0a0      	b.n	8002716 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d4:	4b57      	ldr	r3, [pc, #348]	; (8002734 <HAL_GPIO_Init+0x2d4>)
 80025d6:	699a      	ldr	r2, [r3, #24]
 80025d8:	4b56      	ldr	r3, [pc, #344]	; (8002734 <HAL_GPIO_Init+0x2d4>)
 80025da:	2101      	movs	r1, #1
 80025dc:	430a      	orrs	r2, r1
 80025de:	619a      	str	r2, [r3, #24]
 80025e0:	4b54      	ldr	r3, [pc, #336]	; (8002734 <HAL_GPIO_Init+0x2d4>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_GPIO_Init+0x2d8>)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	589b      	ldr	r3, [r3, r2]
 80025f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2203      	movs	r2, #3
 80025fe:	4013      	ands	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	409a      	lsls	r2, r3
 8002606:	0013      	movs	r3, r2
 8002608:	43da      	mvns	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	2390      	movs	r3, #144	; 0x90
 8002614:	05db      	lsls	r3, r3, #23
 8002616:	429a      	cmp	r2, r3
 8002618:	d019      	beq.n	800264e <HAL_GPIO_Init+0x1ee>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a47      	ldr	r2, [pc, #284]	; (800273c <HAL_GPIO_Init+0x2dc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0x1ea>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a46      	ldr	r2, [pc, #280]	; (8002740 <HAL_GPIO_Init+0x2e0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00d      	beq.n	8002646 <HAL_GPIO_Init+0x1e6>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a45      	ldr	r2, [pc, #276]	; (8002744 <HAL_GPIO_Init+0x2e4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x1e2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a44      	ldr	r2, [pc, #272]	; (8002748 <HAL_GPIO_Init+0x2e8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_GPIO_Init+0x1de>
 800263a:	2304      	movs	r3, #4
 800263c:	e008      	b.n	8002650 <HAL_GPIO_Init+0x1f0>
 800263e:	2305      	movs	r3, #5
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x1f0>
 8002642:	2303      	movs	r3, #3
 8002644:	e004      	b.n	8002650 <HAL_GPIO_Init+0x1f0>
 8002646:	2302      	movs	r3, #2
 8002648:	e002      	b.n	8002650 <HAL_GPIO_Init+0x1f0>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_GPIO_Init+0x1f0>
 800264e:	2300      	movs	r3, #0
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	2103      	movs	r1, #3
 8002654:	400a      	ands	r2, r1
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	4093      	lsls	r3, r2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002660:	4935      	ldr	r1, [pc, #212]	; (8002738 <HAL_GPIO_Init+0x2d8>)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800266e:	4b37      	ldr	r3, [pc, #220]	; (800274c <HAL_GPIO_Init+0x2ec>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	43da      	mvns	r2, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	025b      	lsls	r3, r3, #9
 8002686:	4013      	ands	r3, r2
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002692:	4b2e      	ldr	r3, [pc, #184]	; (800274c <HAL_GPIO_Init+0x2ec>)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002698:	4b2c      	ldr	r3, [pc, #176]	; (800274c <HAL_GPIO_Init+0x2ec>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43da      	mvns	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	029b      	lsls	r3, r3, #10
 80026b0:	4013      	ands	r3, r2
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_GPIO_Init+0x2ec>)
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c2:	4b22      	ldr	r3, [pc, #136]	; (800274c <HAL_GPIO_Init+0x2ec>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43da      	mvns	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	035b      	lsls	r3, r3, #13
 80026da:	4013      	ands	r3, r2
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_GPIO_Init+0x2ec>)
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <HAL_GPIO_Init+0x2ec>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43da      	mvns	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	039b      	lsls	r3, r3, #14
 8002704:	4013      	ands	r3, r2
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002710:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_GPIO_Init+0x2ec>)
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3301      	adds	r3, #1
 800271a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	40da      	lsrs	r2, r3
 8002724:	1e13      	subs	r3, r2, #0
 8002726:	d000      	beq.n	800272a <HAL_GPIO_Init+0x2ca>
 8002728:	e6a2      	b.n	8002470 <HAL_GPIO_Init+0x10>
  } 
}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b006      	add	sp, #24
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	40010000 	.word	0x40010000
 800273c:	48000400 	.word	0x48000400
 8002740:	48000800 	.word	0x48000800
 8002744:	48000c00 	.word	0x48000c00
 8002748:	48001000 	.word	0x48001000
 800274c:	40010400 	.word	0x40010400

08002750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	0008      	movs	r0, r1
 800275a:	0011      	movs	r1, r2
 800275c:	1cbb      	adds	r3, r7, #2
 800275e:	1c02      	adds	r2, r0, #0
 8002760:	801a      	strh	r2, [r3, #0]
 8002762:	1c7b      	adds	r3, r7, #1
 8002764:	1c0a      	adds	r2, r1, #0
 8002766:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002768:	1c7b      	adds	r3, r7, #1
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002770:	1cbb      	adds	r3, r7, #2
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002778:	e003      	b.n	8002782 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800277a:	1cbb      	adds	r3, r7, #2
 800277c:	881a      	ldrh	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	46bd      	mov	sp, r7
 8002786:	b002      	add	sp, #8
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	0002      	movs	r2, r0
 8002794:	1dbb      	adds	r3, r7, #6
 8002796:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	1dba      	adds	r2, r7, #6
 800279e:	8812      	ldrh	r2, [r2, #0]
 80027a0:	4013      	ands	r3, r2
 80027a2:	d008      	beq.n	80027b6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80027a6:	1dba      	adds	r2, r7, #6
 80027a8:	8812      	ldrh	r2, [r2, #0]
 80027aa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027ac:	1dbb      	adds	r3, r7, #6
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7fd fea1 	bl	80004f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b002      	add	sp, #8
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	40010400 	.word	0x40010400

080027c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f000 fb76 	bl	8002ec4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2201      	movs	r2, #1
 80027de:	4013      	ands	r3, r2
 80027e0:	d100      	bne.n	80027e4 <HAL_RCC_OscConfig+0x20>
 80027e2:	e08e      	b.n	8002902 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027e4:	4bc5      	ldr	r3, [pc, #788]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	220c      	movs	r2, #12
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d00e      	beq.n	800280e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027f0:	4bc2      	ldr	r3, [pc, #776]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	220c      	movs	r2, #12
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d117      	bne.n	800282c <HAL_RCC_OscConfig+0x68>
 80027fc:	4bbf      	ldr	r3, [pc, #764]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	23c0      	movs	r3, #192	; 0xc0
 8002802:	025b      	lsls	r3, r3, #9
 8002804:	401a      	ands	r2, r3
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	025b      	lsls	r3, r3, #9
 800280a:	429a      	cmp	r2, r3
 800280c:	d10e      	bne.n	800282c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280e:	4bbb      	ldr	r3, [pc, #748]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	029b      	lsls	r3, r3, #10
 8002816:	4013      	ands	r3, r2
 8002818:	d100      	bne.n	800281c <HAL_RCC_OscConfig+0x58>
 800281a:	e071      	b.n	8002900 <HAL_RCC_OscConfig+0x13c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d000      	beq.n	8002826 <HAL_RCC_OscConfig+0x62>
 8002824:	e06c      	b.n	8002900 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	f000 fb4c 	bl	8002ec4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d107      	bne.n	8002844 <HAL_RCC_OscConfig+0x80>
 8002834:	4bb1      	ldr	r3, [pc, #708]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4bb0      	ldr	r3, [pc, #704]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 800283a:	2180      	movs	r1, #128	; 0x80
 800283c:	0249      	lsls	r1, r1, #9
 800283e:	430a      	orrs	r2, r1
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e02f      	b.n	80028a4 <HAL_RCC_OscConfig+0xe0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10c      	bne.n	8002866 <HAL_RCC_OscConfig+0xa2>
 800284c:	4bab      	ldr	r3, [pc, #684]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4baa      	ldr	r3, [pc, #680]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002852:	49ab      	ldr	r1, [pc, #684]	; (8002b00 <HAL_RCC_OscConfig+0x33c>)
 8002854:	400a      	ands	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	4ba8      	ldr	r3, [pc, #672]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4ba7      	ldr	r3, [pc, #668]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 800285e:	49a9      	ldr	r1, [pc, #676]	; (8002b04 <HAL_RCC_OscConfig+0x340>)
 8002860:	400a      	ands	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e01e      	b.n	80028a4 <HAL_RCC_OscConfig+0xe0>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b05      	cmp	r3, #5
 800286c:	d10e      	bne.n	800288c <HAL_RCC_OscConfig+0xc8>
 800286e:	4ba3      	ldr	r3, [pc, #652]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4ba2      	ldr	r3, [pc, #648]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	02c9      	lsls	r1, r1, #11
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	4b9f      	ldr	r3, [pc, #636]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b9e      	ldr	r3, [pc, #632]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	0249      	lsls	r1, r1, #9
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xe0>
 800288c:	4b9b      	ldr	r3, [pc, #620]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b9a      	ldr	r3, [pc, #616]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002892:	499b      	ldr	r1, [pc, #620]	; (8002b00 <HAL_RCC_OscConfig+0x33c>)
 8002894:	400a      	ands	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	4b98      	ldr	r3, [pc, #608]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b97      	ldr	r3, [pc, #604]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 800289e:	4999      	ldr	r1, [pc, #612]	; (8002b04 <HAL_RCC_OscConfig+0x340>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d014      	beq.n	80028d6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe fcee 	bl	800128c <HAL_GetTick>
 80028b0:	0003      	movs	r3, r0
 80028b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b6:	f7fe fce9 	bl	800128c <HAL_GetTick>
 80028ba:	0002      	movs	r2, r0
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b64      	cmp	r3, #100	; 0x64
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e2fd      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c8:	4b8c      	ldr	r3, [pc, #560]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	029b      	lsls	r3, r3, #10
 80028d0:	4013      	ands	r3, r2
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0xf2>
 80028d4:	e015      	b.n	8002902 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe fcd9 	bl	800128c <HAL_GetTick>
 80028da:	0003      	movs	r3, r0
 80028dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fe fcd4 	bl	800128c <HAL_GetTick>
 80028e4:	0002      	movs	r2, r0
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e2e8      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	4b82      	ldr	r3, [pc, #520]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	029b      	lsls	r3, r3, #10
 80028fa:	4013      	ands	r3, r2
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x11c>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2202      	movs	r2, #2
 8002908:	4013      	ands	r3, r2
 800290a:	d100      	bne.n	800290e <HAL_RCC_OscConfig+0x14a>
 800290c:	e06c      	b.n	80029e8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800290e:	4b7b      	ldr	r3, [pc, #492]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	220c      	movs	r2, #12
 8002914:	4013      	ands	r3, r2
 8002916:	d00e      	beq.n	8002936 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002918:	4b78      	ldr	r3, [pc, #480]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	220c      	movs	r2, #12
 800291e:	4013      	ands	r3, r2
 8002920:	2b08      	cmp	r3, #8
 8002922:	d11f      	bne.n	8002964 <HAL_RCC_OscConfig+0x1a0>
 8002924:	4b75      	ldr	r3, [pc, #468]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	23c0      	movs	r3, #192	; 0xc0
 800292a:	025b      	lsls	r3, r3, #9
 800292c:	401a      	ands	r2, r3
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	429a      	cmp	r2, r3
 8002934:	d116      	bne.n	8002964 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	4b71      	ldr	r3, [pc, #452]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2202      	movs	r2, #2
 800293c:	4013      	ands	r3, r2
 800293e:	d005      	beq.n	800294c <HAL_RCC_OscConfig+0x188>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d001      	beq.n	800294c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e2bb      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294c:	4b6b      	ldr	r3, [pc, #428]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	22f8      	movs	r2, #248	; 0xf8
 8002952:	4393      	bics	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00da      	lsls	r2, r3, #3
 800295c:	4b67      	ldr	r3, [pc, #412]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 800295e:	430a      	orrs	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	e041      	b.n	80029e8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d024      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800296c:	4b63      	ldr	r3, [pc, #396]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b62      	ldr	r3, [pc, #392]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002972:	2101      	movs	r1, #1
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe fc88 	bl	800128c <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002982:	f7fe fc83 	bl	800128c <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e297      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002994:	4b59      	ldr	r3, [pc, #356]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d0f1      	beq.n	8002982 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b57      	ldr	r3, [pc, #348]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	22f8      	movs	r2, #248	; 0xf8
 80029a4:	4393      	bics	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	00da      	lsls	r2, r3, #3
 80029ae:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e018      	b.n	80029e8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b6:	4b51      	ldr	r3, [pc, #324]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b50      	ldr	r3, [pc, #320]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 80029bc:	2101      	movs	r1, #1
 80029be:	438a      	bics	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7fe fc63 	bl	800128c <HAL_GetTick>
 80029c6:	0003      	movs	r3, r0
 80029c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029cc:	f7fe fc5e 	bl	800128c <HAL_GetTick>
 80029d0:	0002      	movs	r2, r0
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e272      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	4b47      	ldr	r3, [pc, #284]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2202      	movs	r2, #2
 80029e4:	4013      	ands	r3, r2
 80029e6:	d1f1      	bne.n	80029cc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2208      	movs	r2, #8
 80029ee:	4013      	ands	r3, r2
 80029f0:	d036      	beq.n	8002a60 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d019      	beq.n	8002a2e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fa:	4b40      	ldr	r3, [pc, #256]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 80029fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fe:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002a00:	2101      	movs	r1, #1
 8002a02:	430a      	orrs	r2, r1
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7fe fc41 	bl	800128c <HAL_GetTick>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a10:	f7fe fc3c 	bl	800128c <HAL_GetTick>
 8002a14:	0002      	movs	r2, r0
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e250      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a22:	4b36      	ldr	r3, [pc, #216]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	2202      	movs	r2, #2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d0f1      	beq.n	8002a10 <HAL_RCC_OscConfig+0x24c>
 8002a2c:	e018      	b.n	8002a60 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2e:	4b33      	ldr	r3, [pc, #204]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a32:	4b32      	ldr	r3, [pc, #200]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002a34:	2101      	movs	r1, #1
 8002a36:	438a      	bics	r2, r1
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fc27 	bl	800128c <HAL_GetTick>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a44:	f7fe fc22 	bl	800128c <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e236      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d1f1      	bne.n	8002a44 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2204      	movs	r2, #4
 8002a66:	4013      	ands	r3, r2
 8002a68:	d100      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2a8>
 8002a6a:	e0b5      	b.n	8002bd8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6c:	201f      	movs	r0, #31
 8002a6e:	183b      	adds	r3, r7, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a74:	4b21      	ldr	r3, [pc, #132]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002a76:	69da      	ldr	r2, [r3, #28]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	055b      	lsls	r3, r3, #21
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d110      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002a86:	2180      	movs	r1, #128	; 0x80
 8002a88:	0549      	lsls	r1, r1, #21
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	61da      	str	r2, [r3, #28]
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	055b      	lsls	r3, r3, #21
 8002a96:	4013      	ands	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a9c:	183b      	adds	r3, r7, r0
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <HAL_RCC_OscConfig+0x344>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d11a      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <HAL_RCC_OscConfig+0x344>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_RCC_OscConfig+0x344>)
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	0049      	lsls	r1, r1, #1
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abc:	f7fe fbe6 	bl	800128c <HAL_GetTick>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac6:	f7fe fbe1 	bl	800128c <HAL_GetTick>
 8002aca:	0002      	movs	r2, r0
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b64      	cmp	r3, #100	; 0x64
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1f5      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_OscConfig+0x344>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d10f      	bne.n	8002b0c <HAL_RCC_OscConfig+0x348>
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002aee:	6a1a      	ldr	r2, [r3, #32]
 8002af0:	4b02      	ldr	r3, [pc, #8]	; (8002afc <HAL_RCC_OscConfig+0x338>)
 8002af2:	2101      	movs	r1, #1
 8002af4:	430a      	orrs	r2, r1
 8002af6:	621a      	str	r2, [r3, #32]
 8002af8:	e036      	b.n	8002b68 <HAL_RCC_OscConfig+0x3a4>
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	40021000 	.word	0x40021000
 8002b00:	fffeffff 	.word	0xfffeffff
 8002b04:	fffbffff 	.word	0xfffbffff
 8002b08:	40007000 	.word	0x40007000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10c      	bne.n	8002b2e <HAL_RCC_OscConfig+0x36a>
 8002b14:	4bca      	ldr	r3, [pc, #808]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b16:	6a1a      	ldr	r2, [r3, #32]
 8002b18:	4bc9      	ldr	r3, [pc, #804]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	438a      	bics	r2, r1
 8002b1e:	621a      	str	r2, [r3, #32]
 8002b20:	4bc7      	ldr	r3, [pc, #796]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	4bc6      	ldr	r3, [pc, #792]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b26:	2104      	movs	r1, #4
 8002b28:	438a      	bics	r2, r1
 8002b2a:	621a      	str	r2, [r3, #32]
 8002b2c:	e01c      	b.n	8002b68 <HAL_RCC_OscConfig+0x3a4>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x38c>
 8002b36:	4bc2      	ldr	r3, [pc, #776]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b38:	6a1a      	ldr	r2, [r3, #32]
 8002b3a:	4bc1      	ldr	r3, [pc, #772]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b3c:	2104      	movs	r1, #4
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	621a      	str	r2, [r3, #32]
 8002b42:	4bbf      	ldr	r3, [pc, #764]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b44:	6a1a      	ldr	r2, [r3, #32]
 8002b46:	4bbe      	ldr	r3, [pc, #760]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b48:	2101      	movs	r1, #1
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	621a      	str	r2, [r3, #32]
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0x3a4>
 8002b50:	4bbb      	ldr	r3, [pc, #748]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b52:	6a1a      	ldr	r2, [r3, #32]
 8002b54:	4bba      	ldr	r3, [pc, #744]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b56:	2101      	movs	r1, #1
 8002b58:	438a      	bics	r2, r1
 8002b5a:	621a      	str	r2, [r3, #32]
 8002b5c:	4bb8      	ldr	r3, [pc, #736]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b5e:	6a1a      	ldr	r2, [r3, #32]
 8002b60:	4bb7      	ldr	r3, [pc, #732]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b62:	2104      	movs	r1, #4
 8002b64:	438a      	bics	r2, r1
 8002b66:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d014      	beq.n	8002b9a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b70:	f7fe fb8c 	bl	800128c <HAL_GetTick>
 8002b74:	0003      	movs	r3, r0
 8002b76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b78:	e009      	b.n	8002b8e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7fe fb87 	bl	800128c <HAL_GetTick>
 8002b7e:	0002      	movs	r2, r0
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	4aaf      	ldr	r2, [pc, #700]	; (8002e44 <HAL_RCC_OscConfig+0x680>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e19a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	4bac      	ldr	r3, [pc, #688]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	2202      	movs	r2, #2
 8002b94:	4013      	ands	r3, r2
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x3b6>
 8002b98:	e013      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fb77 	bl	800128c <HAL_GetTick>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba2:	e009      	b.n	8002bb8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fb72 	bl	800128c <HAL_GetTick>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	4aa5      	ldr	r2, [pc, #660]	; (8002e44 <HAL_RCC_OscConfig+0x680>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e185      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb8:	4ba1      	ldr	r3, [pc, #644]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bc2:	231f      	movs	r3, #31
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d105      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bcc:	4b9c      	ldr	r3, [pc, #624]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	4b9b      	ldr	r3, [pc, #620]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002bd2:	499d      	ldr	r1, [pc, #628]	; (8002e48 <HAL_RCC_OscConfig+0x684>)
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	4013      	ands	r3, r2
 8002be0:	d063      	beq.n	8002caa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d12a      	bne.n	8002c40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bea:	4b95      	ldr	r3, [pc, #596]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bee:	4b94      	ldr	r3, [pc, #592]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002bf6:	4b92      	ldr	r3, [pc, #584]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfa:	4b91      	ldr	r3, [pc, #580]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c02:	f7fe fb43 	bl	800128c <HAL_GetTick>
 8002c06:	0003      	movs	r3, r0
 8002c08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c0c:	f7fe fb3e 	bl	800128c <HAL_GetTick>
 8002c10:	0002      	movs	r2, r0
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e152      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c1e:	4b88      	ldr	r3, [pc, #544]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c22:	2202      	movs	r2, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	d0f1      	beq.n	8002c0c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c28:	4b85      	ldr	r3, [pc, #532]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	22f8      	movs	r2, #248	; 0xf8
 8002c2e:	4393      	bics	r3, r2
 8002c30:	0019      	movs	r1, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	00da      	lsls	r2, r3, #3
 8002c38:	4b81      	ldr	r3, [pc, #516]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c3e:	e034      	b.n	8002caa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	3305      	adds	r3, #5
 8002c46:	d111      	bne.n	8002c6c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c48:	4b7d      	ldr	r3, [pc, #500]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4c:	4b7c      	ldr	r3, [pc, #496]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002c4e:	2104      	movs	r1, #4
 8002c50:	438a      	bics	r2, r1
 8002c52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c54:	4b7a      	ldr	r3, [pc, #488]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	22f8      	movs	r2, #248	; 0xf8
 8002c5a:	4393      	bics	r3, r2
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	00da      	lsls	r2, r3, #3
 8002c64:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002c66:	430a      	orrs	r2, r1
 8002c68:	635a      	str	r2, [r3, #52]	; 0x34
 8002c6a:	e01e      	b.n	8002caa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c6c:	4b74      	ldr	r3, [pc, #464]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c70:	4b73      	ldr	r3, [pc, #460]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002c72:	2104      	movs	r1, #4
 8002c74:	430a      	orrs	r2, r1
 8002c76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c78:	4b71      	ldr	r3, [pc, #452]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7c:	4b70      	ldr	r3, [pc, #448]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002c7e:	2101      	movs	r1, #1
 8002c80:	438a      	bics	r2, r1
 8002c82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c84:	f7fe fb02 	bl	800128c <HAL_GetTick>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c8e:	f7fe fafd 	bl	800128c <HAL_GetTick>
 8002c92:	0002      	movs	r2, r0
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e111      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ca0:	4b67      	ldr	r3, [pc, #412]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d1f1      	bne.n	8002c8e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d05c      	beq.n	8002d6e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002cb4:	4b62      	ldr	r3, [pc, #392]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	220c      	movs	r2, #12
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d00e      	beq.n	8002cde <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002cc0:	4b5f      	ldr	r3, [pc, #380]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	220c      	movs	r2, #12
 8002cc6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d114      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002ccc:	4b5c      	ldr	r3, [pc, #368]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	23c0      	movs	r3, #192	; 0xc0
 8002cd2:	025b      	lsls	r3, r3, #9
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	23c0      	movs	r3, #192	; 0xc0
 8002cd8:	025b      	lsls	r3, r3, #9
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d10b      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002cde:	4b58      	ldr	r3, [pc, #352]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	025b      	lsls	r3, r3, #9
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d040      	beq.n	8002d6c <HAL_RCC_OscConfig+0x5a8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d03c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0e6      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01b      	beq.n	8002d36 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002cfe:	4b50      	ldr	r3, [pc, #320]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d02:	4b4f      	ldr	r3, [pc, #316]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	0249      	lsls	r1, r1, #9
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fabe 	bl	800128c <HAL_GetTick>
 8002d10:	0003      	movs	r3, r0
 8002d12:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d16:	f7fe fab9 	bl	800128c <HAL_GetTick>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0cd      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d28:	4b45      	ldr	r3, [pc, #276]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	025b      	lsls	r3, r3, #9
 8002d30:	4013      	ands	r3, r2
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x552>
 8002d34:	e01b      	b.n	8002d6e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d36:	4b42      	ldr	r3, [pc, #264]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3a:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002d3c:	4943      	ldr	r1, [pc, #268]	; (8002e4c <HAL_RCC_OscConfig+0x688>)
 8002d3e:	400a      	ands	r2, r1
 8002d40:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe faa3 	bl	800128c <HAL_GetTick>
 8002d46:	0003      	movs	r3, r0
 8002d48:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d4c:	f7fe fa9e 	bl	800128c <HAL_GetTick>
 8002d50:	0002      	movs	r2, r0
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e0b2      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d5e:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	025b      	lsls	r3, r3, #9
 8002d66:	4013      	ands	r3, r2
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x588>
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d6c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d100      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5b4>
 8002d76:	e0a4      	b.n	8002ec2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d78:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	220c      	movs	r2, #12
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d100      	bne.n	8002d86 <HAL_RCC_OscConfig+0x5c2>
 8002d84:	e078      	b.n	8002e78 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d14c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002d94:	492e      	ldr	r1, [pc, #184]	; (8002e50 <HAL_RCC_OscConfig+0x68c>)
 8002d96:	400a      	ands	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fa77 	bl	800128c <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fe fa72 	bl	800128c <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e086      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db6:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	049b      	lsls	r3, r3, #18
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	4393      	bics	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <HAL_RCC_OscConfig+0x690>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	0019      	movs	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	431a      	orrs	r2, r3
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002df6:	2180      	movs	r1, #128	; 0x80
 8002df8:	0449      	lsls	r1, r1, #17
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fa45 	bl	800128c <HAL_GetTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe fa40 	bl	800128c <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e054      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	049b      	lsls	r3, r3, #18
 8002e22:	4013      	ands	r3, r2
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x644>
 8002e26:	e04c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <HAL_RCC_OscConfig+0x67c>)
 8002e2e:	4908      	ldr	r1, [pc, #32]	; (8002e50 <HAL_RCC_OscConfig+0x68c>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fe fa2a 	bl	800128c <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x6a6>
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	40021000 	.word	0x40021000
 8002e44:	00001388 	.word	0x00001388
 8002e48:	efffffff 	.word	0xefffffff
 8002e4c:	fffeffff 	.word	0xfffeffff
 8002e50:	feffffff 	.word	0xfeffffff
 8002e54:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe fa18 	bl	800128c <HAL_GetTick>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e02c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_RCC_OscConfig+0x708>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	049b      	lsls	r3, r3, #18
 8002e72:	4013      	ands	r3, r2
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x694>
 8002e76:	e024      	b.n	8002ec2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e01f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_RCC_OscConfig+0x708>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_RCC_OscConfig+0x708>)
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	23c0      	movs	r3, #192	; 0xc0
 8002e94:	025b      	lsls	r3, r3, #9
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d10e      	bne.n	8002ebe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	23f0      	movs	r3, #240	; 0xf0
 8002eb2:	039b      	lsls	r3, r3, #14
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b008      	add	sp, #32
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0bf      	b.n	8003064 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b61      	ldr	r3, [pc, #388]	; (800306c <HAL_RCC_ClockConfig+0x19c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	4013      	ands	r3, r2
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d911      	bls.n	8002f16 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b5e      	ldr	r3, [pc, #376]	; (800306c <HAL_RCC_ClockConfig+0x19c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4393      	bics	r3, r2
 8002efa:	0019      	movs	r1, r3
 8002efc:	4b5b      	ldr	r3, [pc, #364]	; (800306c <HAL_RCC_ClockConfig+0x19c>)
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f04:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_RCC_ClockConfig+0x19c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0a6      	b.n	8003064 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d015      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2204      	movs	r2, #4
 8002f26:	4013      	ands	r3, r2
 8002f28:	d006      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f2a:	4b51      	ldr	r3, [pc, #324]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 8002f30:	21e0      	movs	r1, #224	; 0xe0
 8002f32:	00c9      	lsls	r1, r1, #3
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f38:	4b4d      	ldr	r3, [pc, #308]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	22f0      	movs	r2, #240	; 0xf0
 8002f3e:	4393      	bics	r3, r2
 8002f40:	0019      	movs	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	4b4a      	ldr	r3, [pc, #296]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	d04c      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b44      	ldr	r3, [pc, #272]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	029b      	lsls	r3, r3, #10
 8002f66:	4013      	ands	r3, r2
 8002f68:	d120      	bne.n	8002fac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e07a      	b.n	8003064 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f76:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	049b      	lsls	r3, r3, #18
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d114      	bne.n	8002fac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e06e      	b.n	8003064 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f8e:	4b38      	ldr	r3, [pc, #224]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 8002f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	025b      	lsls	r3, r3, #9
 8002f96:	4013      	ands	r3, r2
 8002f98:	d108      	bne.n	8002fac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e062      	b.n	8003064 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	4b34      	ldr	r3, [pc, #208]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e05b      	b.n	8003064 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fac:	4b30      	ldr	r3, [pc, #192]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	4393      	bics	r3, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe f964 	bl	800128c <HAL_GetTick>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc8:	e009      	b.n	8002fde <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fca:	f7fe f95f 	bl	800128c <HAL_GetTick>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	4a27      	ldr	r2, [pc, #156]	; (8003074 <HAL_RCC_ClockConfig+0x1a4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e042      	b.n	8003064 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	4b24      	ldr	r3, [pc, #144]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	220c      	movs	r2, #12
 8002fe4:	401a      	ands	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1ec      	bne.n	8002fca <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	; (800306c <HAL_RCC_ClockConfig+0x19c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d211      	bcs.n	8003022 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_RCC_ClockConfig+0x19c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2201      	movs	r2, #1
 8003004:	4393      	bics	r3, r2
 8003006:	0019      	movs	r1, r3
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <HAL_RCC_ClockConfig+0x19c>)
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_RCC_ClockConfig+0x19c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2201      	movs	r2, #1
 8003016:	4013      	ands	r3, r2
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d001      	beq.n	8003022 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e020      	b.n	8003064 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2204      	movs	r2, #4
 8003028:	4013      	ands	r3, r2
 800302a:	d009      	beq.n	8003040 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a11      	ldr	r2, [pc, #68]	; (8003078 <HAL_RCC_ClockConfig+0x1a8>)
 8003032:	4013      	ands	r3, r2
 8003034:	0019      	movs	r1, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003040:	f000 f820 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003044:	0001      	movs	r1, r0
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <HAL_RCC_ClockConfig+0x1a0>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	220f      	movs	r2, #15
 800304e:	4013      	ands	r3, r2
 8003050:	4a0a      	ldr	r2, [pc, #40]	; (800307c <HAL_RCC_ClockConfig+0x1ac>)
 8003052:	5cd3      	ldrb	r3, [r2, r3]
 8003054:	000a      	movs	r2, r1
 8003056:	40da      	lsrs	r2, r3
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_ClockConfig+0x1b0>)
 800305a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800305c:	2003      	movs	r0, #3
 800305e:	f7fe f8cf 	bl	8001200 <HAL_InitTick>
  
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b004      	add	sp, #16
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40022000 	.word	0x40022000
 8003070:	40021000 	.word	0x40021000
 8003074:	00001388 	.word	0x00001388
 8003078:	fffff8ff 	.word	0xfffff8ff
 800307c:	08003a18 	.word	0x08003a18
 8003080:	20000000 	.word	0x20000000

08003084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b08f      	sub	sp, #60	; 0x3c
 8003088:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800308a:	2314      	movs	r3, #20
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	4a38      	ldr	r2, [pc, #224]	; (8003170 <HAL_RCC_GetSysClockFreq+0xec>)
 8003090:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003092:	c313      	stmia	r3!, {r0, r1, r4}
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003098:	1d3b      	adds	r3, r7, #4
 800309a:	4a36      	ldr	r2, [pc, #216]	; (8003174 <HAL_RCC_GetSysClockFreq+0xf0>)
 800309c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800309e:	c313      	stmia	r3!, {r0, r1, r4}
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a8:	2300      	movs	r3, #0
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ac:	2300      	movs	r3, #0
 80030ae:	637b      	str	r3, [r7, #52]	; 0x34
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80030b8:	4b2f      	ldr	r3, [pc, #188]	; (8003178 <HAL_RCC_GetSysClockFreq+0xf4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	220c      	movs	r2, #12
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b0c      	cmp	r3, #12
 80030c6:	d047      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0xd4>
 80030c8:	d849      	bhi.n	800315e <HAL_RCC_GetSysClockFreq+0xda>
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d002      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0x50>
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d003      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0x56>
 80030d2:	e044      	b.n	800315e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030d4:	4b29      	ldr	r3, [pc, #164]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030d8:	e044      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	0c9b      	lsrs	r3, r3, #18
 80030de:	220f      	movs	r2, #15
 80030e0:	4013      	ands	r3, r2
 80030e2:	2214      	movs	r2, #20
 80030e4:	18ba      	adds	r2, r7, r2
 80030e6:	5cd3      	ldrb	r3, [r2, r3]
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030ea:	4b23      	ldr	r3, [pc, #140]	; (8003178 <HAL_RCC_GetSysClockFreq+0xf4>)
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	220f      	movs	r2, #15
 80030f0:	4013      	ands	r3, r2
 80030f2:	1d3a      	adds	r2, r7, #4
 80030f4:	5cd3      	ldrb	r3, [r2, r3]
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030fa:	23c0      	movs	r3, #192	; 0xc0
 80030fc:	025b      	lsls	r3, r3, #9
 80030fe:	401a      	ands	r2, r3
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	025b      	lsls	r3, r3, #9
 8003104:	429a      	cmp	r2, r3
 8003106:	d109      	bne.n	800311c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800310a:	481c      	ldr	r0, [pc, #112]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 800310c:	f7fc fffa 	bl	8000104 <__udivsi3>
 8003110:	0003      	movs	r3, r0
 8003112:	001a      	movs	r2, r3
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	4353      	muls	r3, r2
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
 800311a:	e01a      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800311c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800311e:	23c0      	movs	r3, #192	; 0xc0
 8003120:	025b      	lsls	r3, r3, #9
 8003122:	401a      	ands	r2, r3
 8003124:	23c0      	movs	r3, #192	; 0xc0
 8003126:	025b      	lsls	r3, r3, #9
 8003128:	429a      	cmp	r2, r3
 800312a:	d109      	bne.n	8003140 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800312c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800312e:	4814      	ldr	r0, [pc, #80]	; (8003180 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003130:	f7fc ffe8 	bl	8000104 <__udivsi3>
 8003134:	0003      	movs	r3, r0
 8003136:	001a      	movs	r2, r3
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	4353      	muls	r3, r2
 800313c:	637b      	str	r3, [r7, #52]	; 0x34
 800313e:	e008      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003142:	4810      	ldr	r0, [pc, #64]	; (8003184 <HAL_RCC_GetSysClockFreq+0x100>)
 8003144:	f7fc ffde 	bl	8000104 <__udivsi3>
 8003148:	0003      	movs	r3, r0
 800314a:	001a      	movs	r2, r3
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	4353      	muls	r3, r2
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003156:	e005      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003158:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_GetSysClockFreq+0xfc>)
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800315c:	e002      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_GetSysClockFreq+0x100>)
 8003160:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003162:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b00f      	add	sp, #60	; 0x3c
 800316c:	bd90      	pop	{r4, r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	080039f8 	.word	0x080039f8
 8003174:	08003a08 	.word	0x08003a08
 8003178:	40021000 	.word	0x40021000
 800317c:	00b71b00 	.word	0x00b71b00
 8003180:	02dc6c00 	.word	0x02dc6c00
 8003184:	007a1200 	.word	0x007a1200

08003188 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0a8      	b.n	80032ec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	2382      	movs	r3, #130	; 0x82
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d009      	beq.n	80031c2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	61da      	str	r2, [r3, #28]
 80031b4:	e005      	b.n	80031c2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	225d      	movs	r2, #93	; 0x5d
 80031cc:	5c9b      	ldrb	r3, [r3, r2]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d107      	bne.n	80031e4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	225c      	movs	r2, #92	; 0x5c
 80031d8:	2100      	movs	r1, #0
 80031da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	0018      	movs	r0, r3
 80031e0:	f7fd ff14 	bl	800100c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	225d      	movs	r2, #93	; 0x5d
 80031e8:	2102      	movs	r1, #2
 80031ea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2140      	movs	r1, #64	; 0x40
 80031f8:	438a      	bics	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	23e0      	movs	r3, #224	; 0xe0
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	429a      	cmp	r2, r3
 8003206:	d902      	bls.n	800320e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	e002      	b.n	8003214 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	015b      	lsls	r3, r3, #5
 8003212:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	23f0      	movs	r3, #240	; 0xf0
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	429a      	cmp	r2, r3
 800321e:	d008      	beq.n	8003232 <HAL_SPI_Init+0xaa>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	23e0      	movs	r3, #224	; 0xe0
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	429a      	cmp	r2, r3
 800322a:	d002      	beq.n	8003232 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	2382      	movs	r3, #130	; 0x82
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	401a      	ands	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6899      	ldr	r1, [r3, #8]
 8003240:	2384      	movs	r3, #132	; 0x84
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	400b      	ands	r3, r1
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	2102      	movs	r1, #2
 800324e:	400b      	ands	r3, r1
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2101      	movs	r1, #1
 8003258:	400b      	ands	r3, r1
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6999      	ldr	r1, [r3, #24]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	400b      	ands	r3, r1
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	2138      	movs	r1, #56	; 0x38
 800326e:	400b      	ands	r3, r1
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	400b      	ands	r3, r1
 800327a:	431a      	orrs	r2, r3
 800327c:	0011      	movs	r1, r2
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	019b      	lsls	r3, r3, #6
 8003286:	401a      	ands	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	2204      	movs	r2, #4
 8003298:	401a      	ands	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2110      	movs	r1, #16
 80032a0:	400b      	ands	r3, r1
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a8:	2108      	movs	r1, #8
 80032aa:	400b      	ands	r3, r1
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68d9      	ldr	r1, [r3, #12]
 80032b2:	23f0      	movs	r3, #240	; 0xf0
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	400b      	ands	r3, r1
 80032b8:	431a      	orrs	r2, r3
 80032ba:	0011      	movs	r1, r2
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	015b      	lsls	r3, r3, #5
 80032c2:	401a      	ands	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4907      	ldr	r1, [pc, #28]	; (80032f4 <HAL_SPI_Init+0x16c>)
 80032d8:	400a      	ands	r2, r1
 80032da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	225d      	movs	r2, #93	; 0x5d
 80032e6:	2101      	movs	r1, #1
 80032e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b004      	add	sp, #16
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	fffff7ff 	.word	0xfffff7ff

080032f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	001a      	movs	r2, r3
 8003306:	1cbb      	adds	r3, r7, #2
 8003308:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800330a:	2301      	movs	r3, #1
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800330e:	2323      	movs	r3, #35	; 0x23
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	225c      	movs	r2, #92	; 0x5c
 800331a:	5c9b      	ldrb	r3, [r3, r2]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_SPI_TransmitReceive+0x2c>
 8003320:	2302      	movs	r3, #2
 8003322:	e1b5      	b.n	8003690 <HAL_SPI_TransmitReceive+0x398>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	225c      	movs	r2, #92	; 0x5c
 8003328:	2101      	movs	r1, #1
 800332a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800332c:	f7fd ffae 	bl	800128c <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003334:	201b      	movs	r0, #27
 8003336:	183b      	adds	r3, r7, r0
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	215d      	movs	r1, #93	; 0x5d
 800333c:	5c52      	ldrb	r2, [r2, r1]
 800333e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003346:	2312      	movs	r3, #18
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	1cba      	adds	r2, r7, #2
 800334c:	8812      	ldrh	r2, [r2, #0]
 800334e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003350:	183b      	adds	r3, r7, r0
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d011      	beq.n	800337c <HAL_SPI_TransmitReceive+0x84>
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	2382      	movs	r3, #130	; 0x82
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	429a      	cmp	r2, r3
 8003360:	d107      	bne.n	8003372 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d103      	bne.n	8003372 <HAL_SPI_TransmitReceive+0x7a>
 800336a:	183b      	adds	r3, r7, r0
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b04      	cmp	r3, #4
 8003370:	d004      	beq.n	800337c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003372:	2323      	movs	r3, #35	; 0x23
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	2202      	movs	r2, #2
 8003378:	701a      	strb	r2, [r3, #0]
    goto error;
 800337a:	e17e      	b.n	800367a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d006      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x98>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x98>
 8003388:	1cbb      	adds	r3, r7, #2
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d104      	bne.n	800339a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003390:	2323      	movs	r3, #35	; 0x23
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
    goto error;
 8003398:	e16f      	b.n	800367a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	225d      	movs	r2, #93	; 0x5d
 800339e:	5c9b      	ldrb	r3, [r3, r2]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d003      	beq.n	80033ae <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	225d      	movs	r2, #93	; 0x5d
 80033aa:	2105      	movs	r1, #5
 80033ac:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1cba      	adds	r2, r7, #2
 80033be:	2146      	movs	r1, #70	; 0x46
 80033c0:	8812      	ldrh	r2, [r2, #0]
 80033c2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1cba      	adds	r2, r7, #2
 80033c8:	2144      	movs	r1, #68	; 0x44
 80033ca:	8812      	ldrh	r2, [r2, #0]
 80033cc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1cba      	adds	r2, r7, #2
 80033d8:	8812      	ldrh	r2, [r2, #0]
 80033da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1cba      	adds	r2, r7, #2
 80033e0:	8812      	ldrh	r2, [r2, #0]
 80033e2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	23e0      	movs	r3, #224	; 0xe0
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d908      	bls.n	800340e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	49a4      	ldr	r1, [pc, #656]	; (8003698 <HAL_SPI_TransmitReceive+0x3a0>)
 8003408:	400a      	ands	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	e008      	b.n	8003420 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	0149      	lsls	r1, r1, #5
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2240      	movs	r2, #64	; 0x40
 8003428:	4013      	ands	r3, r2
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d007      	beq.n	800343e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	430a      	orrs	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	23e0      	movs	r3, #224	; 0xe0
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	429a      	cmp	r2, r3
 8003448:	d800      	bhi.n	800344c <HAL_SPI_TransmitReceive+0x154>
 800344a:	e07f      	b.n	800354c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x168>
 8003454:	2312      	movs	r3, #18
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d000      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x168>
 800345e:	e069      	b.n	8003534 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	1c9a      	adds	r2, r3, #2
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003484:	e056      	b.n	8003534 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2202      	movs	r2, #2
 800348e:	4013      	ands	r3, r2
 8003490:	2b02      	cmp	r3, #2
 8003492:	d11b      	bne.n	80034cc <HAL_SPI_TransmitReceive+0x1d4>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <HAL_SPI_TransmitReceive+0x1d4>
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d113      	bne.n	80034cc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	881a      	ldrh	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	1c9a      	adds	r2, r3, #2
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2201      	movs	r2, #1
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d11c      	bne.n	8003514 <HAL_SPI_TransmitReceive+0x21c>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2246      	movs	r2, #70	; 0x46
 80034de:	5a9b      	ldrh	r3, [r3, r2]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d016      	beq.n	8003514 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	b292      	uxth	r2, r2
 80034f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	1c9a      	adds	r2, r3, #2
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2246      	movs	r2, #70	; 0x46
 8003502:	5a9b      	ldrh	r3, [r3, r2]
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b299      	uxth	r1, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2246      	movs	r2, #70	; 0x46
 800350e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003510:	2301      	movs	r3, #1
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003514:	f7fd feba 	bl	800128c <HAL_GetTick>
 8003518:	0002      	movs	r2, r0
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003520:	429a      	cmp	r2, r3
 8003522:	d807      	bhi.n	8003534 <HAL_SPI_TransmitReceive+0x23c>
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	3301      	adds	r3, #1
 8003528:	d004      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800352a:	2323      	movs	r3, #35	; 0x23
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	2203      	movs	r2, #3
 8003530:	701a      	strb	r2, [r3, #0]
        goto error;
 8003532:	e0a2      	b.n	800367a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1a3      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x18e>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2246      	movs	r2, #70	; 0x46
 8003542:	5a9b      	ldrh	r3, [r3, r2]
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d19d      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x18e>
 800354a:	e085      	b.n	8003658 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_SPI_TransmitReceive+0x268>
 8003554:	2312      	movs	r3, #18
 8003556:	18fb      	adds	r3, r7, r3
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d000      	beq.n	8003560 <HAL_SPI_TransmitReceive+0x268>
 800355e:	e070      	b.n	8003642 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	330c      	adds	r3, #12
 800356a:	7812      	ldrb	r2, [r2, #0]
 800356c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003586:	e05c      	b.n	8003642 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2202      	movs	r2, #2
 8003590:	4013      	ands	r3, r2
 8003592:	2b02      	cmp	r3, #2
 8003594:	d11c      	bne.n	80035d0 <HAL_SPI_TransmitReceive+0x2d8>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d017      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x2d8>
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d114      	bne.n	80035d0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	330c      	adds	r3, #12
 80035b0:	7812      	ldrb	r2, [r2, #0]
 80035b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2201      	movs	r2, #1
 80035d8:	4013      	ands	r3, r2
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d11e      	bne.n	800361c <HAL_SPI_TransmitReceive+0x324>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2246      	movs	r2, #70	; 0x46
 80035e2:	5a9b      	ldrh	r3, [r3, r2]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d018      	beq.n	800361c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	330c      	adds	r3, #12
 80035f0:	001a      	movs	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	7812      	ldrb	r2, [r2, #0]
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2246      	movs	r2, #70	; 0x46
 800360a:	5a9b      	ldrh	r3, [r3, r2]
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b299      	uxth	r1, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2246      	movs	r2, #70	; 0x46
 8003616:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003618:	2301      	movs	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800361c:	f7fd fe36 	bl	800128c <HAL_GetTick>
 8003620:	0002      	movs	r2, r0
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003628:	429a      	cmp	r2, r3
 800362a:	d802      	bhi.n	8003632 <HAL_SPI_TransmitReceive+0x33a>
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	3301      	adds	r3, #1
 8003630:	d102      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x340>
 8003632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003638:	2323      	movs	r3, #35	; 0x23
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2203      	movs	r2, #3
 800363e:	701a      	strb	r2, [r3, #0]
        goto error;
 8003640:	e01b      	b.n	800367a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d19d      	bne.n	8003588 <HAL_SPI_TransmitReceive+0x290>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2246      	movs	r2, #70	; 0x46
 8003650:	5a9b      	ldrh	r3, [r3, r2]
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d197      	bne.n	8003588 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	0018      	movs	r0, r3
 8003660:	f000 f94c 	bl	80038fc <SPI_EndRxTxTransaction>
 8003664:	1e03      	subs	r3, r0, #0
 8003666:	d007      	beq.n	8003678 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003668:	2323      	movs	r3, #35	; 0x23
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	661a      	str	r2, [r3, #96]	; 0x60
 8003676:	e000      	b.n	800367a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003678:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	225d      	movs	r2, #93	; 0x5d
 800367e:	2101      	movs	r1, #1
 8003680:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	225c      	movs	r2, #92	; 0x5c
 8003686:	2100      	movs	r1, #0
 8003688:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800368a:	2323      	movs	r3, #35	; 0x23
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	781b      	ldrb	r3, [r3, #0]
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	b00a      	add	sp, #40	; 0x28
 8003696:	bd80      	pop	{r7, pc}
 8003698:	ffffefff 	.word	0xffffefff

0800369c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036ac:	f7fd fdee 	bl	800128c <HAL_GetTick>
 80036b0:	0002      	movs	r2, r0
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	18d3      	adds	r3, r2, r3
 80036ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036bc:	f7fd fde6 	bl	800128c <HAL_GetTick>
 80036c0:	0003      	movs	r3, r0
 80036c2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036c4:	4b3a      	ldr	r3, [pc, #232]	; (80037b0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	015b      	lsls	r3, r3, #5
 80036ca:	0d1b      	lsrs	r3, r3, #20
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	4353      	muls	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036d2:	e058      	b.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	d055      	beq.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036da:	f7fd fdd7 	bl	800128c <HAL_GetTick>
 80036de:	0002      	movs	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d902      	bls.n	80036f0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d142      	bne.n	8003776 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	21e0      	movs	r1, #224	; 0xe0
 80036fc:	438a      	bics	r2, r1
 80036fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	2382      	movs	r3, #130	; 0x82
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	429a      	cmp	r2, r3
 800370a:	d113      	bne.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x98>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	429a      	cmp	r2, r3
 8003716:	d005      	beq.n	8003724 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	429a      	cmp	r2, r3
 8003722:	d107      	bne.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2140      	movs	r1, #64	; 0x40
 8003730:	438a      	bics	r2, r1
 8003732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	019b      	lsls	r3, r3, #6
 800373c:	429a      	cmp	r2, r3
 800373e:	d110      	bne.n	8003762 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	491a      	ldr	r1, [pc, #104]	; (80037b4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800374c:	400a      	ands	r2, r1
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2180      	movs	r1, #128	; 0x80
 800375c:	0189      	lsls	r1, r1, #6
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	225d      	movs	r2, #93	; 0x5d
 8003766:	2101      	movs	r1, #1
 8003768:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	225c      	movs	r2, #92	; 0x5c
 800376e:	2100      	movs	r1, #0
 8003770:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e017      	b.n	80037a6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3b01      	subs	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	425a      	negs	r2, r3
 8003796:	4153      	adcs	r3, r2
 8003798:	b2db      	uxtb	r3, r3
 800379a:	001a      	movs	r2, r3
 800379c:	1dfb      	adds	r3, r7, #7
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d197      	bne.n	80036d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b008      	add	sp, #32
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	20000000 	.word	0x20000000
 80037b4:	ffffdfff 	.word	0xffffdfff

080037b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037c6:	2317      	movs	r3, #23
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037ce:	f7fd fd5d 	bl	800128c <HAL_GetTick>
 80037d2:	0002      	movs	r2, r0
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	18d3      	adds	r3, r2, r3
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80037de:	f7fd fd55 	bl	800128c <HAL_GetTick>
 80037e2:	0003      	movs	r3, r0
 80037e4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037ee:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	0013      	movs	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	189b      	adds	r3, r3, r2
 80037f8:	00da      	lsls	r2, r3, #3
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	0d1b      	lsrs	r3, r3, #20
 80037fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003800:	4353      	muls	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003804:	e068      	b.n	80038d8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	23c0      	movs	r3, #192	; 0xc0
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	429a      	cmp	r2, r3
 800380e:	d10a      	bne.n	8003826 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d107      	bne.n	8003826 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	2117      	movs	r1, #23
 800381e:	187b      	adds	r3, r7, r1
 8003820:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003822:	187b      	adds	r3, r7, r1
 8003824:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	d055      	beq.n	80038d8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800382c:	f7fd fd2e 	bl	800128c <HAL_GetTick>
 8003830:	0002      	movs	r2, r0
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003838:	429a      	cmp	r2, r3
 800383a:	d902      	bls.n	8003842 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	2b00      	cmp	r3, #0
 8003840:	d142      	bne.n	80038c8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	21e0      	movs	r1, #224	; 0xe0
 800384e:	438a      	bics	r2, r1
 8003850:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	2382      	movs	r3, #130	; 0x82
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	429a      	cmp	r2, r3
 800385c:	d113      	bne.n	8003886 <SPI_WaitFifoStateUntilTimeout+0xce>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	429a      	cmp	r2, r3
 8003868:	d005      	beq.n	8003876 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	429a      	cmp	r2, r3
 8003874:	d107      	bne.n	8003886 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	438a      	bics	r2, r1
 8003884:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	019b      	lsls	r3, r3, #6
 800388e:	429a      	cmp	r2, r3
 8003890:	d110      	bne.n	80038b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4916      	ldr	r1, [pc, #88]	; (80038f8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800389e:	400a      	ands	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2180      	movs	r1, #128	; 0x80
 80038ae:	0189      	lsls	r1, r1, #6
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	225d      	movs	r2, #93	; 0x5d
 80038b8:	2101      	movs	r1, #1
 80038ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	225c      	movs	r2, #92	; 0x5c
 80038c0:	2100      	movs	r1, #0
 80038c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e010      	b.n	80038ea <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d18e      	bne.n	8003806 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	0018      	movs	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b00a      	add	sp, #40	; 0x28
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	20000000 	.word	0x20000000
 80038f8:	ffffdfff 	.word	0xffffdfff

080038fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	23c0      	movs	r3, #192	; 0xc0
 800390c:	0159      	lsls	r1, r3, #5
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	0013      	movs	r3, r2
 8003916:	2200      	movs	r2, #0
 8003918:	f7ff ff4e 	bl	80037b8 <SPI_WaitFifoStateUntilTimeout>
 800391c:	1e03      	subs	r3, r0, #0
 800391e:	d007      	beq.n	8003930 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003924:	2220      	movs	r2, #32
 8003926:	431a      	orrs	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e027      	b.n	8003980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	0013      	movs	r3, r2
 800393a:	2200      	movs	r2, #0
 800393c:	2180      	movs	r1, #128	; 0x80
 800393e:	f7ff fead 	bl	800369c <SPI_WaitFlagStateUntilTimeout>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d007      	beq.n	8003956 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394a:	2220      	movs	r2, #32
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e014      	b.n	8003980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	23c0      	movs	r3, #192	; 0xc0
 800395a:	00d9      	lsls	r1, r3, #3
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	0013      	movs	r3, r2
 8003964:	2200      	movs	r2, #0
 8003966:	f7ff ff27 	bl	80037b8 <SPI_WaitFifoStateUntilTimeout>
 800396a:	1e03      	subs	r3, r0, #0
 800396c:	d007      	beq.n	800397e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003972:	2220      	movs	r2, #32
 8003974:	431a      	orrs	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e000      	b.n	8003980 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	0018      	movs	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	b004      	add	sp, #16
 8003986:	bd80      	pop	{r7, pc}

08003988 <__libc_init_array>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	2600      	movs	r6, #0
 800398c:	4d0c      	ldr	r5, [pc, #48]	; (80039c0 <__libc_init_array+0x38>)
 800398e:	4c0d      	ldr	r4, [pc, #52]	; (80039c4 <__libc_init_array+0x3c>)
 8003990:	1b64      	subs	r4, r4, r5
 8003992:	10a4      	asrs	r4, r4, #2
 8003994:	42a6      	cmp	r6, r4
 8003996:	d109      	bne.n	80039ac <__libc_init_array+0x24>
 8003998:	2600      	movs	r6, #0
 800399a:	f000 f821 	bl	80039e0 <_init>
 800399e:	4d0a      	ldr	r5, [pc, #40]	; (80039c8 <__libc_init_array+0x40>)
 80039a0:	4c0a      	ldr	r4, [pc, #40]	; (80039cc <__libc_init_array+0x44>)
 80039a2:	1b64      	subs	r4, r4, r5
 80039a4:	10a4      	asrs	r4, r4, #2
 80039a6:	42a6      	cmp	r6, r4
 80039a8:	d105      	bne.n	80039b6 <__libc_init_array+0x2e>
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	00b3      	lsls	r3, r6, #2
 80039ae:	58eb      	ldr	r3, [r5, r3]
 80039b0:	4798      	blx	r3
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7ee      	b.n	8003994 <__libc_init_array+0xc>
 80039b6:	00b3      	lsls	r3, r6, #2
 80039b8:	58eb      	ldr	r3, [r5, r3]
 80039ba:	4798      	blx	r3
 80039bc:	3601      	adds	r6, #1
 80039be:	e7f2      	b.n	80039a6 <__libc_init_array+0x1e>
 80039c0:	08003a28 	.word	0x08003a28
 80039c4:	08003a28 	.word	0x08003a28
 80039c8:	08003a28 	.word	0x08003a28
 80039cc:	08003a2c 	.word	0x08003a2c

080039d0 <memset>:
 80039d0:	0003      	movs	r3, r0
 80039d2:	1882      	adds	r2, r0, r2
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d100      	bne.n	80039da <memset+0xa>
 80039d8:	4770      	bx	lr
 80039da:	7019      	strb	r1, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	e7f9      	b.n	80039d4 <memset+0x4>

080039e0 <_init>:
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e6:	bc08      	pop	{r3}
 80039e8:	469e      	mov	lr, r3
 80039ea:	4770      	bx	lr

080039ec <_fini>:
 80039ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f2:	bc08      	pop	{r3}
 80039f4:	469e      	mov	lr, r3
 80039f6:	4770      	bx	lr
