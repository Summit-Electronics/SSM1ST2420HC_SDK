
1_AXIS_F091_AMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a8c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b78  08004b78  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004b78  08004b78  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b78  08004b78  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021b8  20000010  08004b90  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021c8  08004b90  000221c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008bc2  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ac2  00000000  00000000  00028c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000663  00000000  00000000  0002af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a53a  00000000  00000000  0002b5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a18f  00000000  00000000  00045b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f6dd  00000000  00000000  0004fc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ecc  00000000  00000000  000ef37c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f1248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004b30 	.word	0x08004b30

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004b30 	.word	0x08004b30

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f000 feeb 	bl	8001000 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f000 fe55 	bl	8000ee0 <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 facc 	bl	80007dc <__aeabi_dsub>
 8000244:	f000 fe4c 	bl	8000ee0 <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_dmul>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4645      	mov	r5, r8
 800025c:	46de      	mov	lr, fp
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	001f      	movs	r7, r3
 8000266:	030b      	lsls	r3, r1, #12
 8000268:	0b1b      	lsrs	r3, r3, #12
 800026a:	469b      	mov	fp, r3
 800026c:	004d      	lsls	r5, r1, #1
 800026e:	0fcb      	lsrs	r3, r1, #31
 8000270:	0004      	movs	r4, r0
 8000272:	4691      	mov	r9, r2
 8000274:	4698      	mov	r8, r3
 8000276:	b087      	sub	sp, #28
 8000278:	0d6d      	lsrs	r5, r5, #21
 800027a:	d100      	bne.n	800027e <__aeabi_dmul+0x26>
 800027c:	e1cd      	b.n	800061a <__aeabi_dmul+0x3c2>
 800027e:	4bce      	ldr	r3, [pc, #824]	; (80005b8 <__aeabi_dmul+0x360>)
 8000280:	429d      	cmp	r5, r3
 8000282:	d100      	bne.n	8000286 <__aeabi_dmul+0x2e>
 8000284:	e1e9      	b.n	800065a <__aeabi_dmul+0x402>
 8000286:	465a      	mov	r2, fp
 8000288:	0f43      	lsrs	r3, r0, #29
 800028a:	00d2      	lsls	r2, r2, #3
 800028c:	4313      	orrs	r3, r2
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0412      	lsls	r2, r2, #16
 8000292:	431a      	orrs	r2, r3
 8000294:	00c3      	lsls	r3, r0, #3
 8000296:	469a      	mov	sl, r3
 8000298:	4bc8      	ldr	r3, [pc, #800]	; (80005bc <__aeabi_dmul+0x364>)
 800029a:	4693      	mov	fp, r2
 800029c:	469c      	mov	ip, r3
 800029e:	2300      	movs	r3, #0
 80002a0:	2600      	movs	r6, #0
 80002a2:	4465      	add	r5, ip
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	033c      	lsls	r4, r7, #12
 80002a8:	007b      	lsls	r3, r7, #1
 80002aa:	4648      	mov	r0, r9
 80002ac:	0b24      	lsrs	r4, r4, #12
 80002ae:	0d5b      	lsrs	r3, r3, #21
 80002b0:	0fff      	lsrs	r7, r7, #31
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_dmul+0x60>
 80002b6:	e189      	b.n	80005cc <__aeabi_dmul+0x374>
 80002b8:	4abf      	ldr	r2, [pc, #764]	; (80005b8 <__aeabi_dmul+0x360>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d019      	beq.n	80002f2 <__aeabi_dmul+0x9a>
 80002be:	0f42      	lsrs	r2, r0, #29
 80002c0:	00e4      	lsls	r4, r4, #3
 80002c2:	4322      	orrs	r2, r4
 80002c4:	2480      	movs	r4, #128	; 0x80
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	4314      	orrs	r4, r2
 80002ca:	4abc      	ldr	r2, [pc, #752]	; (80005bc <__aeabi_dmul+0x364>)
 80002cc:	2100      	movs	r1, #0
 80002ce:	4694      	mov	ip, r2
 80002d0:	4642      	mov	r2, r8
 80002d2:	4463      	add	r3, ip
 80002d4:	195b      	adds	r3, r3, r5
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	9b01      	ldr	r3, [sp, #4]
 80002da:	407a      	eors	r2, r7
 80002dc:	3301      	adds	r3, #1
 80002de:	00c0      	lsls	r0, r0, #3
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	2e0a      	cmp	r6, #10
 80002e6:	dd1c      	ble.n	8000322 <__aeabi_dmul+0xca>
 80002e8:	003a      	movs	r2, r7
 80002ea:	2e0b      	cmp	r6, #11
 80002ec:	d05e      	beq.n	80003ac <__aeabi_dmul+0x154>
 80002ee:	4647      	mov	r7, r8
 80002f0:	e056      	b.n	80003a0 <__aeabi_dmul+0x148>
 80002f2:	4649      	mov	r1, r9
 80002f4:	4bb0      	ldr	r3, [pc, #704]	; (80005b8 <__aeabi_dmul+0x360>)
 80002f6:	4321      	orrs	r1, r4
 80002f8:	18eb      	adds	r3, r5, r3
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	2900      	cmp	r1, #0
 80002fe:	d12a      	bne.n	8000356 <__aeabi_dmul+0xfe>
 8000300:	2080      	movs	r0, #128	; 0x80
 8000302:	2202      	movs	r2, #2
 8000304:	0100      	lsls	r0, r0, #4
 8000306:	002b      	movs	r3, r5
 8000308:	4684      	mov	ip, r0
 800030a:	4316      	orrs	r6, r2
 800030c:	4642      	mov	r2, r8
 800030e:	4463      	add	r3, ip
 8000310:	407a      	eors	r2, r7
 8000312:	b2d2      	uxtb	r2, r2
 8000314:	9302      	str	r3, [sp, #8]
 8000316:	2e0a      	cmp	r6, #10
 8000318:	dd00      	ble.n	800031c <__aeabi_dmul+0xc4>
 800031a:	e231      	b.n	8000780 <__aeabi_dmul+0x528>
 800031c:	2000      	movs	r0, #0
 800031e:	2400      	movs	r4, #0
 8000320:	2102      	movs	r1, #2
 8000322:	2e02      	cmp	r6, #2
 8000324:	dc26      	bgt.n	8000374 <__aeabi_dmul+0x11c>
 8000326:	3e01      	subs	r6, #1
 8000328:	2e01      	cmp	r6, #1
 800032a:	d852      	bhi.n	80003d2 <__aeabi_dmul+0x17a>
 800032c:	2902      	cmp	r1, #2
 800032e:	d04c      	beq.n	80003ca <__aeabi_dmul+0x172>
 8000330:	2901      	cmp	r1, #1
 8000332:	d000      	beq.n	8000336 <__aeabi_dmul+0xde>
 8000334:	e118      	b.n	8000568 <__aeabi_dmul+0x310>
 8000336:	2300      	movs	r3, #0
 8000338:	2400      	movs	r4, #0
 800033a:	2500      	movs	r5, #0
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	4323      	orrs	r3, r4
 8000340:	07d2      	lsls	r2, r2, #31
 8000342:	4313      	orrs	r3, r2
 8000344:	0028      	movs	r0, r5
 8000346:	0019      	movs	r1, r3
 8000348:	b007      	add	sp, #28
 800034a:	bcf0      	pop	{r4, r5, r6, r7}
 800034c:	46bb      	mov	fp, r7
 800034e:	46b2      	mov	sl, r6
 8000350:	46a9      	mov	r9, r5
 8000352:	46a0      	mov	r8, r4
 8000354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000356:	2180      	movs	r1, #128	; 0x80
 8000358:	2203      	movs	r2, #3
 800035a:	0109      	lsls	r1, r1, #4
 800035c:	002b      	movs	r3, r5
 800035e:	468c      	mov	ip, r1
 8000360:	4316      	orrs	r6, r2
 8000362:	4642      	mov	r2, r8
 8000364:	4463      	add	r3, ip
 8000366:	407a      	eors	r2, r7
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	9302      	str	r3, [sp, #8]
 800036c:	2e0a      	cmp	r6, #10
 800036e:	dd00      	ble.n	8000372 <__aeabi_dmul+0x11a>
 8000370:	e228      	b.n	80007c4 <__aeabi_dmul+0x56c>
 8000372:	2103      	movs	r1, #3
 8000374:	2501      	movs	r5, #1
 8000376:	40b5      	lsls	r5, r6
 8000378:	46ac      	mov	ip, r5
 800037a:	26a6      	movs	r6, #166	; 0xa6
 800037c:	4663      	mov	r3, ip
 800037e:	00f6      	lsls	r6, r6, #3
 8000380:	4035      	ands	r5, r6
 8000382:	4233      	tst	r3, r6
 8000384:	d10b      	bne.n	800039e <__aeabi_dmul+0x146>
 8000386:	2690      	movs	r6, #144	; 0x90
 8000388:	00b6      	lsls	r6, r6, #2
 800038a:	4233      	tst	r3, r6
 800038c:	d118      	bne.n	80003c0 <__aeabi_dmul+0x168>
 800038e:	3eb9      	subs	r6, #185	; 0xb9
 8000390:	3eff      	subs	r6, #255	; 0xff
 8000392:	421e      	tst	r6, r3
 8000394:	d01d      	beq.n	80003d2 <__aeabi_dmul+0x17a>
 8000396:	46a3      	mov	fp, r4
 8000398:	4682      	mov	sl, r0
 800039a:	9100      	str	r1, [sp, #0]
 800039c:	e000      	b.n	80003a0 <__aeabi_dmul+0x148>
 800039e:	0017      	movs	r7, r2
 80003a0:	9900      	ldr	r1, [sp, #0]
 80003a2:	003a      	movs	r2, r7
 80003a4:	2902      	cmp	r1, #2
 80003a6:	d010      	beq.n	80003ca <__aeabi_dmul+0x172>
 80003a8:	465c      	mov	r4, fp
 80003aa:	4650      	mov	r0, sl
 80003ac:	2903      	cmp	r1, #3
 80003ae:	d1bf      	bne.n	8000330 <__aeabi_dmul+0xd8>
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	031b      	lsls	r3, r3, #12
 80003b4:	431c      	orrs	r4, r3
 80003b6:	0324      	lsls	r4, r4, #12
 80003b8:	0005      	movs	r5, r0
 80003ba:	4b7f      	ldr	r3, [pc, #508]	; (80005b8 <__aeabi_dmul+0x360>)
 80003bc:	0b24      	lsrs	r4, r4, #12
 80003be:	e7bd      	b.n	800033c <__aeabi_dmul+0xe4>
 80003c0:	2480      	movs	r4, #128	; 0x80
 80003c2:	2200      	movs	r2, #0
 80003c4:	4b7c      	ldr	r3, [pc, #496]	; (80005b8 <__aeabi_dmul+0x360>)
 80003c6:	0324      	lsls	r4, r4, #12
 80003c8:	e7b8      	b.n	800033c <__aeabi_dmul+0xe4>
 80003ca:	2400      	movs	r4, #0
 80003cc:	2500      	movs	r5, #0
 80003ce:	4b7a      	ldr	r3, [pc, #488]	; (80005b8 <__aeabi_dmul+0x360>)
 80003d0:	e7b4      	b.n	800033c <__aeabi_dmul+0xe4>
 80003d2:	4653      	mov	r3, sl
 80003d4:	041e      	lsls	r6, r3, #16
 80003d6:	0c36      	lsrs	r6, r6, #16
 80003d8:	0c1f      	lsrs	r7, r3, #16
 80003da:	0033      	movs	r3, r6
 80003dc:	0c01      	lsrs	r1, r0, #16
 80003de:	0400      	lsls	r0, r0, #16
 80003e0:	0c00      	lsrs	r0, r0, #16
 80003e2:	4343      	muls	r3, r0
 80003e4:	4698      	mov	r8, r3
 80003e6:	0003      	movs	r3, r0
 80003e8:	437b      	muls	r3, r7
 80003ea:	4699      	mov	r9, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	434b      	muls	r3, r1
 80003f0:	469c      	mov	ip, r3
 80003f2:	4643      	mov	r3, r8
 80003f4:	000d      	movs	r5, r1
 80003f6:	0c1b      	lsrs	r3, r3, #16
 80003f8:	469a      	mov	sl, r3
 80003fa:	437d      	muls	r5, r7
 80003fc:	44cc      	add	ip, r9
 80003fe:	44d4      	add	ip, sl
 8000400:	9500      	str	r5, [sp, #0]
 8000402:	45e1      	cmp	r9, ip
 8000404:	d904      	bls.n	8000410 <__aeabi_dmul+0x1b8>
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	025b      	lsls	r3, r3, #9
 800040a:	4699      	mov	r9, r3
 800040c:	444d      	add	r5, r9
 800040e:	9500      	str	r5, [sp, #0]
 8000410:	4663      	mov	r3, ip
 8000412:	0c1b      	lsrs	r3, r3, #16
 8000414:	001d      	movs	r5, r3
 8000416:	4663      	mov	r3, ip
 8000418:	041b      	lsls	r3, r3, #16
 800041a:	469c      	mov	ip, r3
 800041c:	4643      	mov	r3, r8
 800041e:	041b      	lsls	r3, r3, #16
 8000420:	0c1b      	lsrs	r3, r3, #16
 8000422:	4698      	mov	r8, r3
 8000424:	4663      	mov	r3, ip
 8000426:	4443      	add	r3, r8
 8000428:	9303      	str	r3, [sp, #12]
 800042a:	0c23      	lsrs	r3, r4, #16
 800042c:	4698      	mov	r8, r3
 800042e:	0033      	movs	r3, r6
 8000430:	0424      	lsls	r4, r4, #16
 8000432:	0c24      	lsrs	r4, r4, #16
 8000434:	4363      	muls	r3, r4
 8000436:	469c      	mov	ip, r3
 8000438:	0023      	movs	r3, r4
 800043a:	437b      	muls	r3, r7
 800043c:	4699      	mov	r9, r3
 800043e:	4643      	mov	r3, r8
 8000440:	435e      	muls	r6, r3
 8000442:	435f      	muls	r7, r3
 8000444:	444e      	add	r6, r9
 8000446:	4663      	mov	r3, ip
 8000448:	46b2      	mov	sl, r6
 800044a:	0c1e      	lsrs	r6, r3, #16
 800044c:	4456      	add	r6, sl
 800044e:	45b1      	cmp	r9, r6
 8000450:	d903      	bls.n	800045a <__aeabi_dmul+0x202>
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	025b      	lsls	r3, r3, #9
 8000456:	4699      	mov	r9, r3
 8000458:	444f      	add	r7, r9
 800045a:	0c33      	lsrs	r3, r6, #16
 800045c:	4699      	mov	r9, r3
 800045e:	003b      	movs	r3, r7
 8000460:	444b      	add	r3, r9
 8000462:	9305      	str	r3, [sp, #20]
 8000464:	4663      	mov	r3, ip
 8000466:	46ac      	mov	ip, r5
 8000468:	041f      	lsls	r7, r3, #16
 800046a:	0c3f      	lsrs	r7, r7, #16
 800046c:	0436      	lsls	r6, r6, #16
 800046e:	19f6      	adds	r6, r6, r7
 8000470:	44b4      	add	ip, r6
 8000472:	4663      	mov	r3, ip
 8000474:	9304      	str	r3, [sp, #16]
 8000476:	465b      	mov	r3, fp
 8000478:	0c1b      	lsrs	r3, r3, #16
 800047a:	469c      	mov	ip, r3
 800047c:	465b      	mov	r3, fp
 800047e:	041f      	lsls	r7, r3, #16
 8000480:	0c3f      	lsrs	r7, r7, #16
 8000482:	003b      	movs	r3, r7
 8000484:	4343      	muls	r3, r0
 8000486:	4699      	mov	r9, r3
 8000488:	4663      	mov	r3, ip
 800048a:	4343      	muls	r3, r0
 800048c:	469a      	mov	sl, r3
 800048e:	464b      	mov	r3, r9
 8000490:	4660      	mov	r0, ip
 8000492:	0c1b      	lsrs	r3, r3, #16
 8000494:	469b      	mov	fp, r3
 8000496:	4348      	muls	r0, r1
 8000498:	4379      	muls	r1, r7
 800049a:	4451      	add	r1, sl
 800049c:	4459      	add	r1, fp
 800049e:	458a      	cmp	sl, r1
 80004a0:	d903      	bls.n	80004aa <__aeabi_dmul+0x252>
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	025b      	lsls	r3, r3, #9
 80004a6:	469a      	mov	sl, r3
 80004a8:	4450      	add	r0, sl
 80004aa:	0c0b      	lsrs	r3, r1, #16
 80004ac:	469a      	mov	sl, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	041b      	lsls	r3, r3, #16
 80004b2:	0c1b      	lsrs	r3, r3, #16
 80004b4:	4699      	mov	r9, r3
 80004b6:	003b      	movs	r3, r7
 80004b8:	4363      	muls	r3, r4
 80004ba:	0409      	lsls	r1, r1, #16
 80004bc:	4645      	mov	r5, r8
 80004be:	4449      	add	r1, r9
 80004c0:	4699      	mov	r9, r3
 80004c2:	4663      	mov	r3, ip
 80004c4:	435c      	muls	r4, r3
 80004c6:	436b      	muls	r3, r5
 80004c8:	469c      	mov	ip, r3
 80004ca:	464b      	mov	r3, r9
 80004cc:	0c1b      	lsrs	r3, r3, #16
 80004ce:	4698      	mov	r8, r3
 80004d0:	436f      	muls	r7, r5
 80004d2:	193f      	adds	r7, r7, r4
 80004d4:	4447      	add	r7, r8
 80004d6:	4450      	add	r0, sl
 80004d8:	42bc      	cmp	r4, r7
 80004da:	d903      	bls.n	80004e4 <__aeabi_dmul+0x28c>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	025b      	lsls	r3, r3, #9
 80004e0:	4698      	mov	r8, r3
 80004e2:	44c4      	add	ip, r8
 80004e4:	9b04      	ldr	r3, [sp, #16]
 80004e6:	9d00      	ldr	r5, [sp, #0]
 80004e8:	4698      	mov	r8, r3
 80004ea:	4445      	add	r5, r8
 80004ec:	42b5      	cmp	r5, r6
 80004ee:	41b6      	sbcs	r6, r6
 80004f0:	4273      	negs	r3, r6
 80004f2:	4698      	mov	r8, r3
 80004f4:	464b      	mov	r3, r9
 80004f6:	041e      	lsls	r6, r3, #16
 80004f8:	9b05      	ldr	r3, [sp, #20]
 80004fa:	043c      	lsls	r4, r7, #16
 80004fc:	4699      	mov	r9, r3
 80004fe:	0c36      	lsrs	r6, r6, #16
 8000500:	19a4      	adds	r4, r4, r6
 8000502:	444c      	add	r4, r9
 8000504:	46a1      	mov	r9, r4
 8000506:	4683      	mov	fp, r0
 8000508:	186e      	adds	r6, r5, r1
 800050a:	44c1      	add	r9, r8
 800050c:	428e      	cmp	r6, r1
 800050e:	4189      	sbcs	r1, r1
 8000510:	44cb      	add	fp, r9
 8000512:	465d      	mov	r5, fp
 8000514:	4249      	negs	r1, r1
 8000516:	186d      	adds	r5, r5, r1
 8000518:	429c      	cmp	r4, r3
 800051a:	41a4      	sbcs	r4, r4
 800051c:	45c1      	cmp	r9, r8
 800051e:	419b      	sbcs	r3, r3
 8000520:	4583      	cmp	fp, r0
 8000522:	4180      	sbcs	r0, r0
 8000524:	428d      	cmp	r5, r1
 8000526:	4189      	sbcs	r1, r1
 8000528:	425b      	negs	r3, r3
 800052a:	4264      	negs	r4, r4
 800052c:	431c      	orrs	r4, r3
 800052e:	4240      	negs	r0, r0
 8000530:	9b03      	ldr	r3, [sp, #12]
 8000532:	4249      	negs	r1, r1
 8000534:	4301      	orrs	r1, r0
 8000536:	0270      	lsls	r0, r6, #9
 8000538:	0c3f      	lsrs	r7, r7, #16
 800053a:	4318      	orrs	r0, r3
 800053c:	19e4      	adds	r4, r4, r7
 800053e:	1e47      	subs	r7, r0, #1
 8000540:	41b8      	sbcs	r0, r7
 8000542:	1864      	adds	r4, r4, r1
 8000544:	4464      	add	r4, ip
 8000546:	0df6      	lsrs	r6, r6, #23
 8000548:	0261      	lsls	r1, r4, #9
 800054a:	4330      	orrs	r0, r6
 800054c:	0dec      	lsrs	r4, r5, #23
 800054e:	026e      	lsls	r6, r5, #9
 8000550:	430c      	orrs	r4, r1
 8000552:	4330      	orrs	r0, r6
 8000554:	01c9      	lsls	r1, r1, #7
 8000556:	d400      	bmi.n	800055a <__aeabi_dmul+0x302>
 8000558:	e0f1      	b.n	800073e <__aeabi_dmul+0x4e6>
 800055a:	2101      	movs	r1, #1
 800055c:	0843      	lsrs	r3, r0, #1
 800055e:	4001      	ands	r1, r0
 8000560:	430b      	orrs	r3, r1
 8000562:	07e0      	lsls	r0, r4, #31
 8000564:	4318      	orrs	r0, r3
 8000566:	0864      	lsrs	r4, r4, #1
 8000568:	4915      	ldr	r1, [pc, #84]	; (80005c0 <__aeabi_dmul+0x368>)
 800056a:	9b02      	ldr	r3, [sp, #8]
 800056c:	468c      	mov	ip, r1
 800056e:	4463      	add	r3, ip
 8000570:	2b00      	cmp	r3, #0
 8000572:	dc00      	bgt.n	8000576 <__aeabi_dmul+0x31e>
 8000574:	e097      	b.n	80006a6 <__aeabi_dmul+0x44e>
 8000576:	0741      	lsls	r1, r0, #29
 8000578:	d009      	beq.n	800058e <__aeabi_dmul+0x336>
 800057a:	210f      	movs	r1, #15
 800057c:	4001      	ands	r1, r0
 800057e:	2904      	cmp	r1, #4
 8000580:	d005      	beq.n	800058e <__aeabi_dmul+0x336>
 8000582:	1d01      	adds	r1, r0, #4
 8000584:	4281      	cmp	r1, r0
 8000586:	4180      	sbcs	r0, r0
 8000588:	4240      	negs	r0, r0
 800058a:	1824      	adds	r4, r4, r0
 800058c:	0008      	movs	r0, r1
 800058e:	01e1      	lsls	r1, r4, #7
 8000590:	d506      	bpl.n	80005a0 <__aeabi_dmul+0x348>
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	00c9      	lsls	r1, r1, #3
 8000596:	468c      	mov	ip, r1
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <__aeabi_dmul+0x36c>)
 800059a:	401c      	ands	r4, r3
 800059c:	9b02      	ldr	r3, [sp, #8]
 800059e:	4463      	add	r3, ip
 80005a0:	4909      	ldr	r1, [pc, #36]	; (80005c8 <__aeabi_dmul+0x370>)
 80005a2:	428b      	cmp	r3, r1
 80005a4:	dd00      	ble.n	80005a8 <__aeabi_dmul+0x350>
 80005a6:	e710      	b.n	80003ca <__aeabi_dmul+0x172>
 80005a8:	0761      	lsls	r1, r4, #29
 80005aa:	08c5      	lsrs	r5, r0, #3
 80005ac:	0264      	lsls	r4, r4, #9
 80005ae:	055b      	lsls	r3, r3, #21
 80005b0:	430d      	orrs	r5, r1
 80005b2:	0b24      	lsrs	r4, r4, #12
 80005b4:	0d5b      	lsrs	r3, r3, #21
 80005b6:	e6c1      	b.n	800033c <__aeabi_dmul+0xe4>
 80005b8:	000007ff 	.word	0x000007ff
 80005bc:	fffffc01 	.word	0xfffffc01
 80005c0:	000003ff 	.word	0x000003ff
 80005c4:	feffffff 	.word	0xfeffffff
 80005c8:	000007fe 	.word	0x000007fe
 80005cc:	464b      	mov	r3, r9
 80005ce:	4323      	orrs	r3, r4
 80005d0:	d059      	beq.n	8000686 <__aeabi_dmul+0x42e>
 80005d2:	2c00      	cmp	r4, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_dmul+0x380>
 80005d6:	e0a3      	b.n	8000720 <__aeabi_dmul+0x4c8>
 80005d8:	0020      	movs	r0, r4
 80005da:	f000 fd1b 	bl	8001014 <__clzsi2>
 80005de:	0001      	movs	r1, r0
 80005e0:	0003      	movs	r3, r0
 80005e2:	390b      	subs	r1, #11
 80005e4:	221d      	movs	r2, #29
 80005e6:	1a52      	subs	r2, r2, r1
 80005e8:	4649      	mov	r1, r9
 80005ea:	0018      	movs	r0, r3
 80005ec:	40d1      	lsrs	r1, r2
 80005ee:	464a      	mov	r2, r9
 80005f0:	3808      	subs	r0, #8
 80005f2:	4082      	lsls	r2, r0
 80005f4:	4084      	lsls	r4, r0
 80005f6:	0010      	movs	r0, r2
 80005f8:	430c      	orrs	r4, r1
 80005fa:	4a74      	ldr	r2, [pc, #464]	; (80007cc <__aeabi_dmul+0x574>)
 80005fc:	1aeb      	subs	r3, r5, r3
 80005fe:	4694      	mov	ip, r2
 8000600:	4642      	mov	r2, r8
 8000602:	4463      	add	r3, ip
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	9b01      	ldr	r3, [sp, #4]
 8000608:	407a      	eors	r2, r7
 800060a:	3301      	adds	r3, #1
 800060c:	2100      	movs	r1, #0
 800060e:	b2d2      	uxtb	r2, r2
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	2e0a      	cmp	r6, #10
 8000614:	dd00      	ble.n	8000618 <__aeabi_dmul+0x3c0>
 8000616:	e667      	b.n	80002e8 <__aeabi_dmul+0x90>
 8000618:	e683      	b.n	8000322 <__aeabi_dmul+0xca>
 800061a:	465b      	mov	r3, fp
 800061c:	4303      	orrs	r3, r0
 800061e:	469a      	mov	sl, r3
 8000620:	d02a      	beq.n	8000678 <__aeabi_dmul+0x420>
 8000622:	465b      	mov	r3, fp
 8000624:	2b00      	cmp	r3, #0
 8000626:	d06d      	beq.n	8000704 <__aeabi_dmul+0x4ac>
 8000628:	4658      	mov	r0, fp
 800062a:	f000 fcf3 	bl	8001014 <__clzsi2>
 800062e:	0001      	movs	r1, r0
 8000630:	0003      	movs	r3, r0
 8000632:	390b      	subs	r1, #11
 8000634:	221d      	movs	r2, #29
 8000636:	1a52      	subs	r2, r2, r1
 8000638:	0021      	movs	r1, r4
 800063a:	0018      	movs	r0, r3
 800063c:	465d      	mov	r5, fp
 800063e:	40d1      	lsrs	r1, r2
 8000640:	3808      	subs	r0, #8
 8000642:	4085      	lsls	r5, r0
 8000644:	000a      	movs	r2, r1
 8000646:	4084      	lsls	r4, r0
 8000648:	432a      	orrs	r2, r5
 800064a:	4693      	mov	fp, r2
 800064c:	46a2      	mov	sl, r4
 800064e:	4d5f      	ldr	r5, [pc, #380]	; (80007cc <__aeabi_dmul+0x574>)
 8000650:	2600      	movs	r6, #0
 8000652:	1aed      	subs	r5, r5, r3
 8000654:	2300      	movs	r3, #0
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	e625      	b.n	80002a6 <__aeabi_dmul+0x4e>
 800065a:	465b      	mov	r3, fp
 800065c:	4303      	orrs	r3, r0
 800065e:	469a      	mov	sl, r3
 8000660:	d105      	bne.n	800066e <__aeabi_dmul+0x416>
 8000662:	2300      	movs	r3, #0
 8000664:	469b      	mov	fp, r3
 8000666:	3302      	adds	r3, #2
 8000668:	2608      	movs	r6, #8
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	e61b      	b.n	80002a6 <__aeabi_dmul+0x4e>
 800066e:	2303      	movs	r3, #3
 8000670:	4682      	mov	sl, r0
 8000672:	260c      	movs	r6, #12
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	e616      	b.n	80002a6 <__aeabi_dmul+0x4e>
 8000678:	2300      	movs	r3, #0
 800067a:	469b      	mov	fp, r3
 800067c:	3301      	adds	r3, #1
 800067e:	2604      	movs	r6, #4
 8000680:	2500      	movs	r5, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	e60f      	b.n	80002a6 <__aeabi_dmul+0x4e>
 8000686:	4642      	mov	r2, r8
 8000688:	3301      	adds	r3, #1
 800068a:	9501      	str	r5, [sp, #4]
 800068c:	431e      	orrs	r6, r3
 800068e:	9b01      	ldr	r3, [sp, #4]
 8000690:	407a      	eors	r2, r7
 8000692:	3301      	adds	r3, #1
 8000694:	2400      	movs	r4, #0
 8000696:	2000      	movs	r0, #0
 8000698:	2101      	movs	r1, #1
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2e0a      	cmp	r6, #10
 80006a0:	dd00      	ble.n	80006a4 <__aeabi_dmul+0x44c>
 80006a2:	e621      	b.n	80002e8 <__aeabi_dmul+0x90>
 80006a4:	e63d      	b.n	8000322 <__aeabi_dmul+0xca>
 80006a6:	2101      	movs	r1, #1
 80006a8:	1ac9      	subs	r1, r1, r3
 80006aa:	2938      	cmp	r1, #56	; 0x38
 80006ac:	dd00      	ble.n	80006b0 <__aeabi_dmul+0x458>
 80006ae:	e642      	b.n	8000336 <__aeabi_dmul+0xde>
 80006b0:	291f      	cmp	r1, #31
 80006b2:	dd47      	ble.n	8000744 <__aeabi_dmul+0x4ec>
 80006b4:	261f      	movs	r6, #31
 80006b6:	0025      	movs	r5, r4
 80006b8:	4276      	negs	r6, r6
 80006ba:	1af3      	subs	r3, r6, r3
 80006bc:	40dd      	lsrs	r5, r3
 80006be:	002b      	movs	r3, r5
 80006c0:	2920      	cmp	r1, #32
 80006c2:	d005      	beq.n	80006d0 <__aeabi_dmul+0x478>
 80006c4:	4942      	ldr	r1, [pc, #264]	; (80007d0 <__aeabi_dmul+0x578>)
 80006c6:	9d02      	ldr	r5, [sp, #8]
 80006c8:	468c      	mov	ip, r1
 80006ca:	4465      	add	r5, ip
 80006cc:	40ac      	lsls	r4, r5
 80006ce:	4320      	orrs	r0, r4
 80006d0:	1e41      	subs	r1, r0, #1
 80006d2:	4188      	sbcs	r0, r1
 80006d4:	4318      	orrs	r0, r3
 80006d6:	2307      	movs	r3, #7
 80006d8:	001d      	movs	r5, r3
 80006da:	2400      	movs	r4, #0
 80006dc:	4005      	ands	r5, r0
 80006de:	4203      	tst	r3, r0
 80006e0:	d04a      	beq.n	8000778 <__aeabi_dmul+0x520>
 80006e2:	230f      	movs	r3, #15
 80006e4:	2400      	movs	r4, #0
 80006e6:	4003      	ands	r3, r0
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d042      	beq.n	8000772 <__aeabi_dmul+0x51a>
 80006ec:	1d03      	adds	r3, r0, #4
 80006ee:	4283      	cmp	r3, r0
 80006f0:	4180      	sbcs	r0, r0
 80006f2:	4240      	negs	r0, r0
 80006f4:	1824      	adds	r4, r4, r0
 80006f6:	0018      	movs	r0, r3
 80006f8:	0223      	lsls	r3, r4, #8
 80006fa:	d53a      	bpl.n	8000772 <__aeabi_dmul+0x51a>
 80006fc:	2301      	movs	r3, #1
 80006fe:	2400      	movs	r4, #0
 8000700:	2500      	movs	r5, #0
 8000702:	e61b      	b.n	800033c <__aeabi_dmul+0xe4>
 8000704:	f000 fc86 	bl	8001014 <__clzsi2>
 8000708:	0001      	movs	r1, r0
 800070a:	0003      	movs	r3, r0
 800070c:	3115      	adds	r1, #21
 800070e:	3320      	adds	r3, #32
 8000710:	291c      	cmp	r1, #28
 8000712:	dd8f      	ble.n	8000634 <__aeabi_dmul+0x3dc>
 8000714:	3808      	subs	r0, #8
 8000716:	2200      	movs	r2, #0
 8000718:	4084      	lsls	r4, r0
 800071a:	4692      	mov	sl, r2
 800071c:	46a3      	mov	fp, r4
 800071e:	e796      	b.n	800064e <__aeabi_dmul+0x3f6>
 8000720:	f000 fc78 	bl	8001014 <__clzsi2>
 8000724:	0001      	movs	r1, r0
 8000726:	0003      	movs	r3, r0
 8000728:	3115      	adds	r1, #21
 800072a:	3320      	adds	r3, #32
 800072c:	291c      	cmp	r1, #28
 800072e:	dc00      	bgt.n	8000732 <__aeabi_dmul+0x4da>
 8000730:	e758      	b.n	80005e4 <__aeabi_dmul+0x38c>
 8000732:	0002      	movs	r2, r0
 8000734:	464c      	mov	r4, r9
 8000736:	3a08      	subs	r2, #8
 8000738:	2000      	movs	r0, #0
 800073a:	4094      	lsls	r4, r2
 800073c:	e75d      	b.n	80005fa <__aeabi_dmul+0x3a2>
 800073e:	9b01      	ldr	r3, [sp, #4]
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	e711      	b.n	8000568 <__aeabi_dmul+0x310>
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <__aeabi_dmul+0x57c>)
 8000746:	0026      	movs	r6, r4
 8000748:	469c      	mov	ip, r3
 800074a:	0003      	movs	r3, r0
 800074c:	9d02      	ldr	r5, [sp, #8]
 800074e:	40cb      	lsrs	r3, r1
 8000750:	4465      	add	r5, ip
 8000752:	40ae      	lsls	r6, r5
 8000754:	431e      	orrs	r6, r3
 8000756:	0003      	movs	r3, r0
 8000758:	40ab      	lsls	r3, r5
 800075a:	1e58      	subs	r0, r3, #1
 800075c:	4183      	sbcs	r3, r0
 800075e:	0030      	movs	r0, r6
 8000760:	4318      	orrs	r0, r3
 8000762:	40cc      	lsrs	r4, r1
 8000764:	0743      	lsls	r3, r0, #29
 8000766:	d0c7      	beq.n	80006f8 <__aeabi_dmul+0x4a0>
 8000768:	230f      	movs	r3, #15
 800076a:	4003      	ands	r3, r0
 800076c:	2b04      	cmp	r3, #4
 800076e:	d1bd      	bne.n	80006ec <__aeabi_dmul+0x494>
 8000770:	e7c2      	b.n	80006f8 <__aeabi_dmul+0x4a0>
 8000772:	0765      	lsls	r5, r4, #29
 8000774:	0264      	lsls	r4, r4, #9
 8000776:	0b24      	lsrs	r4, r4, #12
 8000778:	08c0      	lsrs	r0, r0, #3
 800077a:	2300      	movs	r3, #0
 800077c:	4305      	orrs	r5, r0
 800077e:	e5dd      	b.n	800033c <__aeabi_dmul+0xe4>
 8000780:	2500      	movs	r5, #0
 8000782:	2302      	movs	r3, #2
 8000784:	2e0f      	cmp	r6, #15
 8000786:	d10c      	bne.n	80007a2 <__aeabi_dmul+0x54a>
 8000788:	2480      	movs	r4, #128	; 0x80
 800078a:	465b      	mov	r3, fp
 800078c:	0324      	lsls	r4, r4, #12
 800078e:	4223      	tst	r3, r4
 8000790:	d00e      	beq.n	80007b0 <__aeabi_dmul+0x558>
 8000792:	4221      	tst	r1, r4
 8000794:	d10c      	bne.n	80007b0 <__aeabi_dmul+0x558>
 8000796:	430c      	orrs	r4, r1
 8000798:	0324      	lsls	r4, r4, #12
 800079a:	003a      	movs	r2, r7
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <__aeabi_dmul+0x580>)
 800079e:	0b24      	lsrs	r4, r4, #12
 80007a0:	e5cc      	b.n	800033c <__aeabi_dmul+0xe4>
 80007a2:	2e0b      	cmp	r6, #11
 80007a4:	d000      	beq.n	80007a8 <__aeabi_dmul+0x550>
 80007a6:	e5a2      	b.n	80002ee <__aeabi_dmul+0x96>
 80007a8:	468b      	mov	fp, r1
 80007aa:	46aa      	mov	sl, r5
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	e5f7      	b.n	80003a0 <__aeabi_dmul+0x148>
 80007b0:	2480      	movs	r4, #128	; 0x80
 80007b2:	465b      	mov	r3, fp
 80007b4:	0324      	lsls	r4, r4, #12
 80007b6:	431c      	orrs	r4, r3
 80007b8:	0324      	lsls	r4, r4, #12
 80007ba:	4642      	mov	r2, r8
 80007bc:	4655      	mov	r5, sl
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <__aeabi_dmul+0x580>)
 80007c0:	0b24      	lsrs	r4, r4, #12
 80007c2:	e5bb      	b.n	800033c <__aeabi_dmul+0xe4>
 80007c4:	464d      	mov	r5, r9
 80007c6:	0021      	movs	r1, r4
 80007c8:	2303      	movs	r3, #3
 80007ca:	e7db      	b.n	8000784 <__aeabi_dmul+0x52c>
 80007cc:	fffffc0d 	.word	0xfffffc0d
 80007d0:	0000043e 	.word	0x0000043e
 80007d4:	0000041e 	.word	0x0000041e
 80007d8:	000007ff 	.word	0x000007ff

080007dc <__aeabi_dsub>:
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	4657      	mov	r7, sl
 80007e0:	464e      	mov	r6, r9
 80007e2:	4645      	mov	r5, r8
 80007e4:	46de      	mov	lr, fp
 80007e6:	b5e0      	push	{r5, r6, r7, lr}
 80007e8:	000d      	movs	r5, r1
 80007ea:	0004      	movs	r4, r0
 80007ec:	0019      	movs	r1, r3
 80007ee:	0010      	movs	r0, r2
 80007f0:	032b      	lsls	r3, r5, #12
 80007f2:	0a5b      	lsrs	r3, r3, #9
 80007f4:	0f62      	lsrs	r2, r4, #29
 80007f6:	431a      	orrs	r2, r3
 80007f8:	00e3      	lsls	r3, r4, #3
 80007fa:	030c      	lsls	r4, r1, #12
 80007fc:	0a64      	lsrs	r4, r4, #9
 80007fe:	0f47      	lsrs	r7, r0, #29
 8000800:	4327      	orrs	r7, r4
 8000802:	4cd0      	ldr	r4, [pc, #832]	; (8000b44 <__aeabi_dsub+0x368>)
 8000804:	006e      	lsls	r6, r5, #1
 8000806:	4691      	mov	r9, r2
 8000808:	b083      	sub	sp, #12
 800080a:	004a      	lsls	r2, r1, #1
 800080c:	00c0      	lsls	r0, r0, #3
 800080e:	4698      	mov	r8, r3
 8000810:	46a2      	mov	sl, r4
 8000812:	0d76      	lsrs	r6, r6, #21
 8000814:	0fed      	lsrs	r5, r5, #31
 8000816:	0d52      	lsrs	r2, r2, #21
 8000818:	0fc9      	lsrs	r1, r1, #31
 800081a:	9001      	str	r0, [sp, #4]
 800081c:	42a2      	cmp	r2, r4
 800081e:	d100      	bne.n	8000822 <__aeabi_dsub+0x46>
 8000820:	e0b9      	b.n	8000996 <__aeabi_dsub+0x1ba>
 8000822:	2401      	movs	r4, #1
 8000824:	4061      	eors	r1, r4
 8000826:	468b      	mov	fp, r1
 8000828:	428d      	cmp	r5, r1
 800082a:	d100      	bne.n	800082e <__aeabi_dsub+0x52>
 800082c:	e08d      	b.n	800094a <__aeabi_dsub+0x16e>
 800082e:	1ab4      	subs	r4, r6, r2
 8000830:	46a4      	mov	ip, r4
 8000832:	2c00      	cmp	r4, #0
 8000834:	dc00      	bgt.n	8000838 <__aeabi_dsub+0x5c>
 8000836:	e0b7      	b.n	80009a8 <__aeabi_dsub+0x1cc>
 8000838:	2a00      	cmp	r2, #0
 800083a:	d100      	bne.n	800083e <__aeabi_dsub+0x62>
 800083c:	e0cb      	b.n	80009d6 <__aeabi_dsub+0x1fa>
 800083e:	4ac1      	ldr	r2, [pc, #772]	; (8000b44 <__aeabi_dsub+0x368>)
 8000840:	4296      	cmp	r6, r2
 8000842:	d100      	bne.n	8000846 <__aeabi_dsub+0x6a>
 8000844:	e186      	b.n	8000b54 <__aeabi_dsub+0x378>
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	0412      	lsls	r2, r2, #16
 800084a:	4317      	orrs	r7, r2
 800084c:	4662      	mov	r2, ip
 800084e:	2a38      	cmp	r2, #56	; 0x38
 8000850:	dd00      	ble.n	8000854 <__aeabi_dsub+0x78>
 8000852:	e1a4      	b.n	8000b9e <__aeabi_dsub+0x3c2>
 8000854:	2a1f      	cmp	r2, #31
 8000856:	dd00      	ble.n	800085a <__aeabi_dsub+0x7e>
 8000858:	e21d      	b.n	8000c96 <__aeabi_dsub+0x4ba>
 800085a:	4661      	mov	r1, ip
 800085c:	2220      	movs	r2, #32
 800085e:	003c      	movs	r4, r7
 8000860:	1a52      	subs	r2, r2, r1
 8000862:	0001      	movs	r1, r0
 8000864:	4090      	lsls	r0, r2
 8000866:	4094      	lsls	r4, r2
 8000868:	1e42      	subs	r2, r0, #1
 800086a:	4190      	sbcs	r0, r2
 800086c:	4662      	mov	r2, ip
 800086e:	46a0      	mov	r8, r4
 8000870:	4664      	mov	r4, ip
 8000872:	40d7      	lsrs	r7, r2
 8000874:	464a      	mov	r2, r9
 8000876:	40e1      	lsrs	r1, r4
 8000878:	4644      	mov	r4, r8
 800087a:	1bd2      	subs	r2, r2, r7
 800087c:	4691      	mov	r9, r2
 800087e:	430c      	orrs	r4, r1
 8000880:	4304      	orrs	r4, r0
 8000882:	1b1c      	subs	r4, r3, r4
 8000884:	42a3      	cmp	r3, r4
 8000886:	4192      	sbcs	r2, r2
 8000888:	464b      	mov	r3, r9
 800088a:	4252      	negs	r2, r2
 800088c:	1a9b      	subs	r3, r3, r2
 800088e:	469a      	mov	sl, r3
 8000890:	4653      	mov	r3, sl
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	d400      	bmi.n	8000898 <__aeabi_dsub+0xbc>
 8000896:	e12b      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000898:	4653      	mov	r3, sl
 800089a:	025a      	lsls	r2, r3, #9
 800089c:	0a53      	lsrs	r3, r2, #9
 800089e:	469a      	mov	sl, r3
 80008a0:	4653      	mov	r3, sl
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dsub+0xcc>
 80008a6:	e166      	b.n	8000b76 <__aeabi_dsub+0x39a>
 80008a8:	4650      	mov	r0, sl
 80008aa:	f000 fbb3 	bl	8001014 <__clzsi2>
 80008ae:	0003      	movs	r3, r0
 80008b0:	3b08      	subs	r3, #8
 80008b2:	2220      	movs	r2, #32
 80008b4:	0020      	movs	r0, r4
 80008b6:	1ad2      	subs	r2, r2, r3
 80008b8:	4651      	mov	r1, sl
 80008ba:	40d0      	lsrs	r0, r2
 80008bc:	4099      	lsls	r1, r3
 80008be:	0002      	movs	r2, r0
 80008c0:	409c      	lsls	r4, r3
 80008c2:	430a      	orrs	r2, r1
 80008c4:	429e      	cmp	r6, r3
 80008c6:	dd00      	ble.n	80008ca <__aeabi_dsub+0xee>
 80008c8:	e164      	b.n	8000b94 <__aeabi_dsub+0x3b8>
 80008ca:	1b9b      	subs	r3, r3, r6
 80008cc:	1c59      	adds	r1, r3, #1
 80008ce:	291f      	cmp	r1, #31
 80008d0:	dd00      	ble.n	80008d4 <__aeabi_dsub+0xf8>
 80008d2:	e0fe      	b.n	8000ad2 <__aeabi_dsub+0x2f6>
 80008d4:	2320      	movs	r3, #32
 80008d6:	0010      	movs	r0, r2
 80008d8:	0026      	movs	r6, r4
 80008da:	1a5b      	subs	r3, r3, r1
 80008dc:	409c      	lsls	r4, r3
 80008de:	4098      	lsls	r0, r3
 80008e0:	40ce      	lsrs	r6, r1
 80008e2:	40ca      	lsrs	r2, r1
 80008e4:	1e63      	subs	r3, r4, #1
 80008e6:	419c      	sbcs	r4, r3
 80008e8:	4330      	orrs	r0, r6
 80008ea:	4692      	mov	sl, r2
 80008ec:	2600      	movs	r6, #0
 80008ee:	4304      	orrs	r4, r0
 80008f0:	0763      	lsls	r3, r4, #29
 80008f2:	d009      	beq.n	8000908 <__aeabi_dsub+0x12c>
 80008f4:	230f      	movs	r3, #15
 80008f6:	4023      	ands	r3, r4
 80008f8:	2b04      	cmp	r3, #4
 80008fa:	d005      	beq.n	8000908 <__aeabi_dsub+0x12c>
 80008fc:	1d23      	adds	r3, r4, #4
 80008fe:	42a3      	cmp	r3, r4
 8000900:	41a4      	sbcs	r4, r4
 8000902:	4264      	negs	r4, r4
 8000904:	44a2      	add	sl, r4
 8000906:	001c      	movs	r4, r3
 8000908:	4653      	mov	r3, sl
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	d400      	bmi.n	8000910 <__aeabi_dsub+0x134>
 800090e:	e0f2      	b.n	8000af6 <__aeabi_dsub+0x31a>
 8000910:	4b8c      	ldr	r3, [pc, #560]	; (8000b44 <__aeabi_dsub+0x368>)
 8000912:	3601      	adds	r6, #1
 8000914:	429e      	cmp	r6, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dsub+0x13e>
 8000918:	e10f      	b.n	8000b3a <__aeabi_dsub+0x35e>
 800091a:	4653      	mov	r3, sl
 800091c:	498a      	ldr	r1, [pc, #552]	; (8000b48 <__aeabi_dsub+0x36c>)
 800091e:	08e4      	lsrs	r4, r4, #3
 8000920:	400b      	ands	r3, r1
 8000922:	0019      	movs	r1, r3
 8000924:	075b      	lsls	r3, r3, #29
 8000926:	4323      	orrs	r3, r4
 8000928:	0572      	lsls	r2, r6, #21
 800092a:	024c      	lsls	r4, r1, #9
 800092c:	0b24      	lsrs	r4, r4, #12
 800092e:	0d52      	lsrs	r2, r2, #21
 8000930:	0512      	lsls	r2, r2, #20
 8000932:	4322      	orrs	r2, r4
 8000934:	07ed      	lsls	r5, r5, #31
 8000936:	432a      	orrs	r2, r5
 8000938:	0018      	movs	r0, r3
 800093a:	0011      	movs	r1, r2
 800093c:	b003      	add	sp, #12
 800093e:	bcf0      	pop	{r4, r5, r6, r7}
 8000940:	46bb      	mov	fp, r7
 8000942:	46b2      	mov	sl, r6
 8000944:	46a9      	mov	r9, r5
 8000946:	46a0      	mov	r8, r4
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094a:	1ab4      	subs	r4, r6, r2
 800094c:	46a4      	mov	ip, r4
 800094e:	2c00      	cmp	r4, #0
 8000950:	dd59      	ble.n	8000a06 <__aeabi_dsub+0x22a>
 8000952:	2a00      	cmp	r2, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_dsub+0x17c>
 8000956:	e0b0      	b.n	8000aba <__aeabi_dsub+0x2de>
 8000958:	4556      	cmp	r6, sl
 800095a:	d100      	bne.n	800095e <__aeabi_dsub+0x182>
 800095c:	e0fa      	b.n	8000b54 <__aeabi_dsub+0x378>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	0412      	lsls	r2, r2, #16
 8000962:	4317      	orrs	r7, r2
 8000964:	4662      	mov	r2, ip
 8000966:	2a38      	cmp	r2, #56	; 0x38
 8000968:	dd00      	ble.n	800096c <__aeabi_dsub+0x190>
 800096a:	e0d4      	b.n	8000b16 <__aeabi_dsub+0x33a>
 800096c:	2a1f      	cmp	r2, #31
 800096e:	dc00      	bgt.n	8000972 <__aeabi_dsub+0x196>
 8000970:	e1c0      	b.n	8000cf4 <__aeabi_dsub+0x518>
 8000972:	0039      	movs	r1, r7
 8000974:	3a20      	subs	r2, #32
 8000976:	40d1      	lsrs	r1, r2
 8000978:	4662      	mov	r2, ip
 800097a:	2a20      	cmp	r2, #32
 800097c:	d006      	beq.n	800098c <__aeabi_dsub+0x1b0>
 800097e:	4664      	mov	r4, ip
 8000980:	2240      	movs	r2, #64	; 0x40
 8000982:	1b12      	subs	r2, r2, r4
 8000984:	003c      	movs	r4, r7
 8000986:	4094      	lsls	r4, r2
 8000988:	4304      	orrs	r4, r0
 800098a:	9401      	str	r4, [sp, #4]
 800098c:	9c01      	ldr	r4, [sp, #4]
 800098e:	1e62      	subs	r2, r4, #1
 8000990:	4194      	sbcs	r4, r2
 8000992:	430c      	orrs	r4, r1
 8000994:	e0c3      	b.n	8000b1e <__aeabi_dsub+0x342>
 8000996:	003c      	movs	r4, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	d02b      	beq.n	80009f4 <__aeabi_dsub+0x218>
 800099c:	468b      	mov	fp, r1
 800099e:	428d      	cmp	r5, r1
 80009a0:	d02e      	beq.n	8000a00 <__aeabi_dsub+0x224>
 80009a2:	4c6a      	ldr	r4, [pc, #424]	; (8000b4c <__aeabi_dsub+0x370>)
 80009a4:	46a4      	mov	ip, r4
 80009a6:	44b4      	add	ip, r6
 80009a8:	4664      	mov	r4, ip
 80009aa:	2c00      	cmp	r4, #0
 80009ac:	d05f      	beq.n	8000a6e <__aeabi_dsub+0x292>
 80009ae:	1b94      	subs	r4, r2, r6
 80009b0:	46a4      	mov	ip, r4
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	d000      	beq.n	80009b8 <__aeabi_dsub+0x1dc>
 80009b6:	e120      	b.n	8000bfa <__aeabi_dsub+0x41e>
 80009b8:	464c      	mov	r4, r9
 80009ba:	431c      	orrs	r4, r3
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dsub+0x1e4>
 80009be:	e1c7      	b.n	8000d50 <__aeabi_dsub+0x574>
 80009c0:	4661      	mov	r1, ip
 80009c2:	1e4c      	subs	r4, r1, #1
 80009c4:	2901      	cmp	r1, #1
 80009c6:	d100      	bne.n	80009ca <__aeabi_dsub+0x1ee>
 80009c8:	e223      	b.n	8000e12 <__aeabi_dsub+0x636>
 80009ca:	4d5e      	ldr	r5, [pc, #376]	; (8000b44 <__aeabi_dsub+0x368>)
 80009cc:	45ac      	cmp	ip, r5
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dsub+0x1f6>
 80009d0:	e1d8      	b.n	8000d84 <__aeabi_dsub+0x5a8>
 80009d2:	46a4      	mov	ip, r4
 80009d4:	e11a      	b.n	8000c0c <__aeabi_dsub+0x430>
 80009d6:	003a      	movs	r2, r7
 80009d8:	4302      	orrs	r2, r0
 80009da:	d100      	bne.n	80009de <__aeabi_dsub+0x202>
 80009dc:	e0e4      	b.n	8000ba8 <__aeabi_dsub+0x3cc>
 80009de:	0022      	movs	r2, r4
 80009e0:	3a01      	subs	r2, #1
 80009e2:	2c01      	cmp	r4, #1
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dsub+0x20c>
 80009e6:	e1c3      	b.n	8000d70 <__aeabi_dsub+0x594>
 80009e8:	4956      	ldr	r1, [pc, #344]	; (8000b44 <__aeabi_dsub+0x368>)
 80009ea:	428c      	cmp	r4, r1
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dsub+0x214>
 80009ee:	e0b1      	b.n	8000b54 <__aeabi_dsub+0x378>
 80009f0:	4694      	mov	ip, r2
 80009f2:	e72b      	b.n	800084c <__aeabi_dsub+0x70>
 80009f4:	2401      	movs	r4, #1
 80009f6:	4061      	eors	r1, r4
 80009f8:	468b      	mov	fp, r1
 80009fa:	428d      	cmp	r5, r1
 80009fc:	d000      	beq.n	8000a00 <__aeabi_dsub+0x224>
 80009fe:	e716      	b.n	800082e <__aeabi_dsub+0x52>
 8000a00:	4952      	ldr	r1, [pc, #328]	; (8000b4c <__aeabi_dsub+0x370>)
 8000a02:	468c      	mov	ip, r1
 8000a04:	44b4      	add	ip, r6
 8000a06:	4664      	mov	r4, ip
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_dsub+0x232>
 8000a0c:	e0d3      	b.n	8000bb6 <__aeabi_dsub+0x3da>
 8000a0e:	1b91      	subs	r1, r2, r6
 8000a10:	468c      	mov	ip, r1
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d100      	bne.n	8000a18 <__aeabi_dsub+0x23c>
 8000a16:	e15e      	b.n	8000cd6 <__aeabi_dsub+0x4fa>
 8000a18:	494a      	ldr	r1, [pc, #296]	; (8000b44 <__aeabi_dsub+0x368>)
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dsub+0x244>
 8000a1e:	e1be      	b.n	8000d9e <__aeabi_dsub+0x5c2>
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	464c      	mov	r4, r9
 8000a24:	0409      	lsls	r1, r1, #16
 8000a26:	430c      	orrs	r4, r1
 8000a28:	46a1      	mov	r9, r4
 8000a2a:	4661      	mov	r1, ip
 8000a2c:	2938      	cmp	r1, #56	; 0x38
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_dsub+0x256>
 8000a30:	e1ba      	b.n	8000da8 <__aeabi_dsub+0x5cc>
 8000a32:	291f      	cmp	r1, #31
 8000a34:	dd00      	ble.n	8000a38 <__aeabi_dsub+0x25c>
 8000a36:	e227      	b.n	8000e88 <__aeabi_dsub+0x6ac>
 8000a38:	2420      	movs	r4, #32
 8000a3a:	1a64      	subs	r4, r4, r1
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	40a1      	lsls	r1, r4
 8000a40:	001e      	movs	r6, r3
 8000a42:	4688      	mov	r8, r1
 8000a44:	4661      	mov	r1, ip
 8000a46:	40a3      	lsls	r3, r4
 8000a48:	40ce      	lsrs	r6, r1
 8000a4a:	4641      	mov	r1, r8
 8000a4c:	1e5c      	subs	r4, r3, #1
 8000a4e:	41a3      	sbcs	r3, r4
 8000a50:	4331      	orrs	r1, r6
 8000a52:	4319      	orrs	r1, r3
 8000a54:	000c      	movs	r4, r1
 8000a56:	4663      	mov	r3, ip
 8000a58:	4649      	mov	r1, r9
 8000a5a:	40d9      	lsrs	r1, r3
 8000a5c:	187f      	adds	r7, r7, r1
 8000a5e:	1824      	adds	r4, r4, r0
 8000a60:	4284      	cmp	r4, r0
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	425b      	negs	r3, r3
 8000a66:	469a      	mov	sl, r3
 8000a68:	0016      	movs	r6, r2
 8000a6a:	44ba      	add	sl, r7
 8000a6c:	e05d      	b.n	8000b2a <__aeabi_dsub+0x34e>
 8000a6e:	4c38      	ldr	r4, [pc, #224]	; (8000b50 <__aeabi_dsub+0x374>)
 8000a70:	1c72      	adds	r2, r6, #1
 8000a72:	4222      	tst	r2, r4
 8000a74:	d000      	beq.n	8000a78 <__aeabi_dsub+0x29c>
 8000a76:	e0df      	b.n	8000c38 <__aeabi_dsub+0x45c>
 8000a78:	464a      	mov	r2, r9
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_dsub+0x2a6>
 8000a80:	e15c      	b.n	8000d3c <__aeabi_dsub+0x560>
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dsub+0x2ac>
 8000a86:	e1cf      	b.n	8000e28 <__aeabi_dsub+0x64c>
 8000a88:	003a      	movs	r2, r7
 8000a8a:	4302      	orrs	r2, r0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dsub+0x2b4>
 8000a8e:	e17f      	b.n	8000d90 <__aeabi_dsub+0x5b4>
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	464a      	mov	r2, r9
 8000a94:	42a3      	cmp	r3, r4
 8000a96:	4189      	sbcs	r1, r1
 8000a98:	1bd2      	subs	r2, r2, r7
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	1a52      	subs	r2, r2, r1
 8000a9e:	4692      	mov	sl, r2
 8000aa0:	0212      	lsls	r2, r2, #8
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dsub+0x2ca>
 8000aa4:	e20a      	b.n	8000ebc <__aeabi_dsub+0x6e0>
 8000aa6:	1ac4      	subs	r4, r0, r3
 8000aa8:	42a0      	cmp	r0, r4
 8000aaa:	4180      	sbcs	r0, r0
 8000aac:	464b      	mov	r3, r9
 8000aae:	4240      	negs	r0, r0
 8000ab0:	1aff      	subs	r7, r7, r3
 8000ab2:	1a3b      	subs	r3, r7, r0
 8000ab4:	469a      	mov	sl, r3
 8000ab6:	465d      	mov	r5, fp
 8000ab8:	e71a      	b.n	80008f0 <__aeabi_dsub+0x114>
 8000aba:	003a      	movs	r2, r7
 8000abc:	4302      	orrs	r2, r0
 8000abe:	d073      	beq.n	8000ba8 <__aeabi_dsub+0x3cc>
 8000ac0:	0022      	movs	r2, r4
 8000ac2:	3a01      	subs	r2, #1
 8000ac4:	2c01      	cmp	r4, #1
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dsub+0x2ee>
 8000ac8:	e0cb      	b.n	8000c62 <__aeabi_dsub+0x486>
 8000aca:	4554      	cmp	r4, sl
 8000acc:	d042      	beq.n	8000b54 <__aeabi_dsub+0x378>
 8000ace:	4694      	mov	ip, r2
 8000ad0:	e748      	b.n	8000964 <__aeabi_dsub+0x188>
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	3b1f      	subs	r3, #31
 8000ad6:	40d8      	lsrs	r0, r3
 8000ad8:	2920      	cmp	r1, #32
 8000ada:	d003      	beq.n	8000ae4 <__aeabi_dsub+0x308>
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	1a5b      	subs	r3, r3, r1
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	4314      	orrs	r4, r2
 8000ae4:	1e63      	subs	r3, r4, #1
 8000ae6:	419c      	sbcs	r4, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2600      	movs	r6, #0
 8000aec:	469a      	mov	sl, r3
 8000aee:	4304      	orrs	r4, r0
 8000af0:	0763      	lsls	r3, r4, #29
 8000af2:	d000      	beq.n	8000af6 <__aeabi_dsub+0x31a>
 8000af4:	e6fe      	b.n	80008f4 <__aeabi_dsub+0x118>
 8000af6:	4652      	mov	r2, sl
 8000af8:	08e3      	lsrs	r3, r4, #3
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	4313      	orrs	r3, r2
 8000afe:	4652      	mov	r2, sl
 8000b00:	46b4      	mov	ip, r6
 8000b02:	08d2      	lsrs	r2, r2, #3
 8000b04:	490f      	ldr	r1, [pc, #60]	; (8000b44 <__aeabi_dsub+0x368>)
 8000b06:	458c      	cmp	ip, r1
 8000b08:	d02a      	beq.n	8000b60 <__aeabi_dsub+0x384>
 8000b0a:	0312      	lsls	r2, r2, #12
 8000b0c:	0b14      	lsrs	r4, r2, #12
 8000b0e:	4662      	mov	r2, ip
 8000b10:	0552      	lsls	r2, r2, #21
 8000b12:	0d52      	lsrs	r2, r2, #21
 8000b14:	e70c      	b.n	8000930 <__aeabi_dsub+0x154>
 8000b16:	003c      	movs	r4, r7
 8000b18:	4304      	orrs	r4, r0
 8000b1a:	1e62      	subs	r2, r4, #1
 8000b1c:	4194      	sbcs	r4, r2
 8000b1e:	18e4      	adds	r4, r4, r3
 8000b20:	429c      	cmp	r4, r3
 8000b22:	4192      	sbcs	r2, r2
 8000b24:	4252      	negs	r2, r2
 8000b26:	444a      	add	r2, r9
 8000b28:	4692      	mov	sl, r2
 8000b2a:	4653      	mov	r3, sl
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	d5df      	bpl.n	8000af0 <__aeabi_dsub+0x314>
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__aeabi_dsub+0x368>)
 8000b32:	3601      	adds	r6, #1
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d000      	beq.n	8000b3a <__aeabi_dsub+0x35e>
 8000b38:	e0a0      	b.n	8000c7c <__aeabi_dsub+0x4a0>
 8000b3a:	0032      	movs	r2, r6
 8000b3c:	2400      	movs	r4, #0
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e6f6      	b.n	8000930 <__aeabi_dsub+0x154>
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	000007ff 	.word	0x000007ff
 8000b48:	ff7fffff 	.word	0xff7fffff
 8000b4c:	fffff801 	.word	0xfffff801
 8000b50:	000007fe 	.word	0x000007fe
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	464a      	mov	r2, r9
 8000b58:	0752      	lsls	r2, r2, #29
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	08d2      	lsrs	r2, r2, #3
 8000b60:	0019      	movs	r1, r3
 8000b62:	4311      	orrs	r1, r2
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dsub+0x38c>
 8000b66:	e1b5      	b.n	8000ed4 <__aeabi_dsub+0x6f8>
 8000b68:	2480      	movs	r4, #128	; 0x80
 8000b6a:	0324      	lsls	r4, r4, #12
 8000b6c:	4314      	orrs	r4, r2
 8000b6e:	0324      	lsls	r4, r4, #12
 8000b70:	4ad5      	ldr	r2, [pc, #852]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000b72:	0b24      	lsrs	r4, r4, #12
 8000b74:	e6dc      	b.n	8000930 <__aeabi_dsub+0x154>
 8000b76:	0020      	movs	r0, r4
 8000b78:	f000 fa4c 	bl	8001014 <__clzsi2>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	3318      	adds	r3, #24
 8000b80:	2b1f      	cmp	r3, #31
 8000b82:	dc00      	bgt.n	8000b86 <__aeabi_dsub+0x3aa>
 8000b84:	e695      	b.n	80008b2 <__aeabi_dsub+0xd6>
 8000b86:	0022      	movs	r2, r4
 8000b88:	3808      	subs	r0, #8
 8000b8a:	4082      	lsls	r2, r0
 8000b8c:	2400      	movs	r4, #0
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	dc00      	bgt.n	8000b94 <__aeabi_dsub+0x3b8>
 8000b92:	e69a      	b.n	80008ca <__aeabi_dsub+0xee>
 8000b94:	1af6      	subs	r6, r6, r3
 8000b96:	4bcd      	ldr	r3, [pc, #820]	; (8000ecc <__aeabi_dsub+0x6f0>)
 8000b98:	401a      	ands	r2, r3
 8000b9a:	4692      	mov	sl, r2
 8000b9c:	e6a8      	b.n	80008f0 <__aeabi_dsub+0x114>
 8000b9e:	003c      	movs	r4, r7
 8000ba0:	4304      	orrs	r4, r0
 8000ba2:	1e62      	subs	r2, r4, #1
 8000ba4:	4194      	sbcs	r4, r2
 8000ba6:	e66c      	b.n	8000882 <__aeabi_dsub+0xa6>
 8000ba8:	464a      	mov	r2, r9
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	0752      	lsls	r2, r2, #29
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	464a      	mov	r2, r9
 8000bb2:	08d2      	lsrs	r2, r2, #3
 8000bb4:	e7a6      	b.n	8000b04 <__aeabi_dsub+0x328>
 8000bb6:	4cc6      	ldr	r4, [pc, #792]	; (8000ed0 <__aeabi_dsub+0x6f4>)
 8000bb8:	1c72      	adds	r2, r6, #1
 8000bba:	4222      	tst	r2, r4
 8000bbc:	d000      	beq.n	8000bc0 <__aeabi_dsub+0x3e4>
 8000bbe:	e0ac      	b.n	8000d1a <__aeabi_dsub+0x53e>
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d000      	beq.n	8000bca <__aeabi_dsub+0x3ee>
 8000bc8:	e105      	b.n	8000dd6 <__aeabi_dsub+0x5fa>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dsub+0x3f4>
 8000bce:	e156      	b.n	8000e7e <__aeabi_dsub+0x6a2>
 8000bd0:	003a      	movs	r2, r7
 8000bd2:	4302      	orrs	r2, r0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dsub+0x3fc>
 8000bd6:	e0db      	b.n	8000d90 <__aeabi_dsub+0x5b4>
 8000bd8:	181c      	adds	r4, r3, r0
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	419b      	sbcs	r3, r3
 8000bde:	444f      	add	r7, r9
 8000be0:	46ba      	mov	sl, r7
 8000be2:	425b      	negs	r3, r3
 8000be4:	449a      	add	sl, r3
 8000be6:	4653      	mov	r3, sl
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	d400      	bmi.n	8000bee <__aeabi_dsub+0x412>
 8000bec:	e780      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000bee:	4652      	mov	r2, sl
 8000bf0:	4bb6      	ldr	r3, [pc, #728]	; (8000ecc <__aeabi_dsub+0x6f0>)
 8000bf2:	2601      	movs	r6, #1
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	4692      	mov	sl, r2
 8000bf8:	e77a      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000bfa:	4cb3      	ldr	r4, [pc, #716]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000bfc:	42a2      	cmp	r2, r4
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dsub+0x426>
 8000c00:	e0c0      	b.n	8000d84 <__aeabi_dsub+0x5a8>
 8000c02:	2480      	movs	r4, #128	; 0x80
 8000c04:	464d      	mov	r5, r9
 8000c06:	0424      	lsls	r4, r4, #16
 8000c08:	4325      	orrs	r5, r4
 8000c0a:	46a9      	mov	r9, r5
 8000c0c:	4664      	mov	r4, ip
 8000c0e:	2c38      	cmp	r4, #56	; 0x38
 8000c10:	dc53      	bgt.n	8000cba <__aeabi_dsub+0x4de>
 8000c12:	4661      	mov	r1, ip
 8000c14:	2c1f      	cmp	r4, #31
 8000c16:	dd00      	ble.n	8000c1a <__aeabi_dsub+0x43e>
 8000c18:	e0cd      	b.n	8000db6 <__aeabi_dsub+0x5da>
 8000c1a:	2520      	movs	r5, #32
 8000c1c:	001e      	movs	r6, r3
 8000c1e:	1b2d      	subs	r5, r5, r4
 8000c20:	464c      	mov	r4, r9
 8000c22:	40ab      	lsls	r3, r5
 8000c24:	40ac      	lsls	r4, r5
 8000c26:	40ce      	lsrs	r6, r1
 8000c28:	1e5d      	subs	r5, r3, #1
 8000c2a:	41ab      	sbcs	r3, r5
 8000c2c:	4334      	orrs	r4, r6
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	464c      	mov	r4, r9
 8000c32:	40cc      	lsrs	r4, r1
 8000c34:	1b3f      	subs	r7, r7, r4
 8000c36:	e045      	b.n	8000cc4 <__aeabi_dsub+0x4e8>
 8000c38:	464a      	mov	r2, r9
 8000c3a:	1a1c      	subs	r4, r3, r0
 8000c3c:	1bd1      	subs	r1, r2, r7
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	4192      	sbcs	r2, r2
 8000c42:	4252      	negs	r2, r2
 8000c44:	4692      	mov	sl, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	4651      	mov	r1, sl
 8000c4a:	1a52      	subs	r2, r2, r1
 8000c4c:	4692      	mov	sl, r2
 8000c4e:	0212      	lsls	r2, r2, #8
 8000c50:	d500      	bpl.n	8000c54 <__aeabi_dsub+0x478>
 8000c52:	e083      	b.n	8000d5c <__aeabi_dsub+0x580>
 8000c54:	4653      	mov	r3, sl
 8000c56:	4323      	orrs	r3, r4
 8000c58:	d000      	beq.n	8000c5c <__aeabi_dsub+0x480>
 8000c5a:	e621      	b.n	80008a0 <__aeabi_dsub+0xc4>
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2500      	movs	r5, #0
 8000c60:	e753      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000c62:	181c      	adds	r4, r3, r0
 8000c64:	429c      	cmp	r4, r3
 8000c66:	419b      	sbcs	r3, r3
 8000c68:	444f      	add	r7, r9
 8000c6a:	46ba      	mov	sl, r7
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	449a      	add	sl, r3
 8000c70:	4653      	mov	r3, sl
 8000c72:	2601      	movs	r6, #1
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_dsub+0x49e>
 8000c78:	e73a      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000c7a:	2602      	movs	r6, #2
 8000c7c:	4652      	mov	r2, sl
 8000c7e:	4b93      	ldr	r3, [pc, #588]	; (8000ecc <__aeabi_dsub+0x6f0>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	401a      	ands	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	4021      	ands	r1, r4
 8000c88:	0862      	lsrs	r2, r4, #1
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	07dc      	lsls	r4, r3, #31
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	469a      	mov	sl, r3
 8000c92:	4314      	orrs	r4, r2
 8000c94:	e62c      	b.n	80008f0 <__aeabi_dsub+0x114>
 8000c96:	0039      	movs	r1, r7
 8000c98:	3a20      	subs	r2, #32
 8000c9a:	40d1      	lsrs	r1, r2
 8000c9c:	4662      	mov	r2, ip
 8000c9e:	2a20      	cmp	r2, #32
 8000ca0:	d006      	beq.n	8000cb0 <__aeabi_dsub+0x4d4>
 8000ca2:	4664      	mov	r4, ip
 8000ca4:	2240      	movs	r2, #64	; 0x40
 8000ca6:	1b12      	subs	r2, r2, r4
 8000ca8:	003c      	movs	r4, r7
 8000caa:	4094      	lsls	r4, r2
 8000cac:	4304      	orrs	r4, r0
 8000cae:	9401      	str	r4, [sp, #4]
 8000cb0:	9c01      	ldr	r4, [sp, #4]
 8000cb2:	1e62      	subs	r2, r4, #1
 8000cb4:	4194      	sbcs	r4, r2
 8000cb6:	430c      	orrs	r4, r1
 8000cb8:	e5e3      	b.n	8000882 <__aeabi_dsub+0xa6>
 8000cba:	4649      	mov	r1, r9
 8000cbc:	4319      	orrs	r1, r3
 8000cbe:	000b      	movs	r3, r1
 8000cc0:	1e5c      	subs	r4, r3, #1
 8000cc2:	41a3      	sbcs	r3, r4
 8000cc4:	1ac4      	subs	r4, r0, r3
 8000cc6:	42a0      	cmp	r0, r4
 8000cc8:	419b      	sbcs	r3, r3
 8000cca:	425b      	negs	r3, r3
 8000ccc:	1afb      	subs	r3, r7, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	465d      	mov	r5, fp
 8000cd2:	0016      	movs	r6, r2
 8000cd4:	e5dc      	b.n	8000890 <__aeabi_dsub+0xb4>
 8000cd6:	4649      	mov	r1, r9
 8000cd8:	4319      	orrs	r1, r3
 8000cda:	d100      	bne.n	8000cde <__aeabi_dsub+0x502>
 8000cdc:	e0ae      	b.n	8000e3c <__aeabi_dsub+0x660>
 8000cde:	4661      	mov	r1, ip
 8000ce0:	4664      	mov	r4, ip
 8000ce2:	3901      	subs	r1, #1
 8000ce4:	2c01      	cmp	r4, #1
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dsub+0x50e>
 8000ce8:	e0e0      	b.n	8000eac <__aeabi_dsub+0x6d0>
 8000cea:	4c77      	ldr	r4, [pc, #476]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d056      	beq.n	8000d9e <__aeabi_dsub+0x5c2>
 8000cf0:	468c      	mov	ip, r1
 8000cf2:	e69a      	b.n	8000a2a <__aeabi_dsub+0x24e>
 8000cf4:	4661      	mov	r1, ip
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	003c      	movs	r4, r7
 8000cfa:	1a52      	subs	r2, r2, r1
 8000cfc:	4094      	lsls	r4, r2
 8000cfe:	0001      	movs	r1, r0
 8000d00:	4090      	lsls	r0, r2
 8000d02:	46a0      	mov	r8, r4
 8000d04:	4664      	mov	r4, ip
 8000d06:	1e42      	subs	r2, r0, #1
 8000d08:	4190      	sbcs	r0, r2
 8000d0a:	4662      	mov	r2, ip
 8000d0c:	40e1      	lsrs	r1, r4
 8000d0e:	4644      	mov	r4, r8
 8000d10:	40d7      	lsrs	r7, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	4304      	orrs	r4, r0
 8000d16:	44b9      	add	r9, r7
 8000d18:	e701      	b.n	8000b1e <__aeabi_dsub+0x342>
 8000d1a:	496b      	ldr	r1, [pc, #428]	; (8000ec8 <__aeabi_dsub+0x6ec>)
 8000d1c:	428a      	cmp	r2, r1
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_dsub+0x546>
 8000d20:	e70c      	b.n	8000b3c <__aeabi_dsub+0x360>
 8000d22:	1818      	adds	r0, r3, r0
 8000d24:	4298      	cmp	r0, r3
 8000d26:	419b      	sbcs	r3, r3
 8000d28:	444f      	add	r7, r9
 8000d2a:	425b      	negs	r3, r3
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	07dc      	lsls	r4, r3, #31
 8000d30:	0840      	lsrs	r0, r0, #1
 8000d32:	085b      	lsrs	r3, r3, #1
 8000d34:	469a      	mov	sl, r3
 8000d36:	0016      	movs	r6, r2
 8000d38:	4304      	orrs	r4, r0
 8000d3a:	e6d9      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_dsub+0x566>
 8000d40:	e081      	b.n	8000e46 <__aeabi_dsub+0x66a>
 8000d42:	003b      	movs	r3, r7
 8000d44:	4303      	orrs	r3, r0
 8000d46:	d11d      	bne.n	8000d84 <__aeabi_dsub+0x5a8>
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	2500      	movs	r5, #0
 8000d4c:	0312      	lsls	r2, r2, #12
 8000d4e:	e70b      	b.n	8000b68 <__aeabi_dsub+0x38c>
 8000d50:	08c0      	lsrs	r0, r0, #3
 8000d52:	077b      	lsls	r3, r7, #29
 8000d54:	465d      	mov	r5, fp
 8000d56:	4303      	orrs	r3, r0
 8000d58:	08fa      	lsrs	r2, r7, #3
 8000d5a:	e6d3      	b.n	8000b04 <__aeabi_dsub+0x328>
 8000d5c:	1ac4      	subs	r4, r0, r3
 8000d5e:	42a0      	cmp	r0, r4
 8000d60:	4180      	sbcs	r0, r0
 8000d62:	464b      	mov	r3, r9
 8000d64:	4240      	negs	r0, r0
 8000d66:	1aff      	subs	r7, r7, r3
 8000d68:	1a3b      	subs	r3, r7, r0
 8000d6a:	469a      	mov	sl, r3
 8000d6c:	465d      	mov	r5, fp
 8000d6e:	e597      	b.n	80008a0 <__aeabi_dsub+0xc4>
 8000d70:	1a1c      	subs	r4, r3, r0
 8000d72:	464a      	mov	r2, r9
 8000d74:	42a3      	cmp	r3, r4
 8000d76:	419b      	sbcs	r3, r3
 8000d78:	1bd7      	subs	r7, r2, r7
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	1afb      	subs	r3, r7, r3
 8000d7e:	469a      	mov	sl, r3
 8000d80:	2601      	movs	r6, #1
 8000d82:	e585      	b.n	8000890 <__aeabi_dsub+0xb4>
 8000d84:	08c0      	lsrs	r0, r0, #3
 8000d86:	077b      	lsls	r3, r7, #29
 8000d88:	465d      	mov	r5, fp
 8000d8a:	4303      	orrs	r3, r0
 8000d8c:	08fa      	lsrs	r2, r7, #3
 8000d8e:	e6e7      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000d90:	464a      	mov	r2, r9
 8000d92:	08db      	lsrs	r3, r3, #3
 8000d94:	0752      	lsls	r2, r2, #29
 8000d96:	4313      	orrs	r3, r2
 8000d98:	464a      	mov	r2, r9
 8000d9a:	08d2      	lsrs	r2, r2, #3
 8000d9c:	e6b5      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000d9e:	08c0      	lsrs	r0, r0, #3
 8000da0:	077b      	lsls	r3, r7, #29
 8000da2:	4303      	orrs	r3, r0
 8000da4:	08fa      	lsrs	r2, r7, #3
 8000da6:	e6db      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000da8:	4649      	mov	r1, r9
 8000daa:	4319      	orrs	r1, r3
 8000dac:	000b      	movs	r3, r1
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	418b      	sbcs	r3, r1
 8000db2:	001c      	movs	r4, r3
 8000db4:	e653      	b.n	8000a5e <__aeabi_dsub+0x282>
 8000db6:	464d      	mov	r5, r9
 8000db8:	3c20      	subs	r4, #32
 8000dba:	40e5      	lsrs	r5, r4
 8000dbc:	2920      	cmp	r1, #32
 8000dbe:	d005      	beq.n	8000dcc <__aeabi_dsub+0x5f0>
 8000dc0:	2440      	movs	r4, #64	; 0x40
 8000dc2:	1a64      	subs	r4, r4, r1
 8000dc4:	4649      	mov	r1, r9
 8000dc6:	40a1      	lsls	r1, r4
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	4698      	mov	r8, r3
 8000dcc:	4643      	mov	r3, r8
 8000dce:	1e5c      	subs	r4, r3, #1
 8000dd0:	41a3      	sbcs	r3, r4
 8000dd2:	432b      	orrs	r3, r5
 8000dd4:	e776      	b.n	8000cc4 <__aeabi_dsub+0x4e8>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d0e1      	beq.n	8000d9e <__aeabi_dsub+0x5c2>
 8000dda:	003a      	movs	r2, r7
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	4302      	orrs	r2, r0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dsub+0x608>
 8000de2:	e6b8      	b.n	8000b56 <__aeabi_dsub+0x37a>
 8000de4:	464a      	mov	r2, r9
 8000de6:	0752      	lsls	r2, r2, #29
 8000de8:	2480      	movs	r4, #128	; 0x80
 8000dea:	4313      	orrs	r3, r2
 8000dec:	464a      	mov	r2, r9
 8000dee:	0324      	lsls	r4, r4, #12
 8000df0:	08d2      	lsrs	r2, r2, #3
 8000df2:	4222      	tst	r2, r4
 8000df4:	d007      	beq.n	8000e06 <__aeabi_dsub+0x62a>
 8000df6:	08fe      	lsrs	r6, r7, #3
 8000df8:	4226      	tst	r6, r4
 8000dfa:	d104      	bne.n	8000e06 <__aeabi_dsub+0x62a>
 8000dfc:	465d      	mov	r5, fp
 8000dfe:	0032      	movs	r2, r6
 8000e00:	08c3      	lsrs	r3, r0, #3
 8000e02:	077f      	lsls	r7, r7, #29
 8000e04:	433b      	orrs	r3, r7
 8000e06:	0f59      	lsrs	r1, r3, #29
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	0749      	lsls	r1, r1, #29
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	e6a6      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000e12:	1ac4      	subs	r4, r0, r3
 8000e14:	42a0      	cmp	r0, r4
 8000e16:	4180      	sbcs	r0, r0
 8000e18:	464b      	mov	r3, r9
 8000e1a:	4240      	negs	r0, r0
 8000e1c:	1aff      	subs	r7, r7, r3
 8000e1e:	1a3b      	subs	r3, r7, r0
 8000e20:	469a      	mov	sl, r3
 8000e22:	465d      	mov	r5, fp
 8000e24:	2601      	movs	r6, #1
 8000e26:	e533      	b.n	8000890 <__aeabi_dsub+0xb4>
 8000e28:	003b      	movs	r3, r7
 8000e2a:	4303      	orrs	r3, r0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_dsub+0x654>
 8000e2e:	e715      	b.n	8000c5c <__aeabi_dsub+0x480>
 8000e30:	08c0      	lsrs	r0, r0, #3
 8000e32:	077b      	lsls	r3, r7, #29
 8000e34:	465d      	mov	r5, fp
 8000e36:	4303      	orrs	r3, r0
 8000e38:	08fa      	lsrs	r2, r7, #3
 8000e3a:	e666      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000e3c:	08c0      	lsrs	r0, r0, #3
 8000e3e:	077b      	lsls	r3, r7, #29
 8000e40:	4303      	orrs	r3, r0
 8000e42:	08fa      	lsrs	r2, r7, #3
 8000e44:	e65e      	b.n	8000b04 <__aeabi_dsub+0x328>
 8000e46:	003a      	movs	r2, r7
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	4302      	orrs	r2, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dsub+0x674>
 8000e4e:	e682      	b.n	8000b56 <__aeabi_dsub+0x37a>
 8000e50:	464a      	mov	r2, r9
 8000e52:	0752      	lsls	r2, r2, #29
 8000e54:	2480      	movs	r4, #128	; 0x80
 8000e56:	4313      	orrs	r3, r2
 8000e58:	464a      	mov	r2, r9
 8000e5a:	0324      	lsls	r4, r4, #12
 8000e5c:	08d2      	lsrs	r2, r2, #3
 8000e5e:	4222      	tst	r2, r4
 8000e60:	d007      	beq.n	8000e72 <__aeabi_dsub+0x696>
 8000e62:	08fe      	lsrs	r6, r7, #3
 8000e64:	4226      	tst	r6, r4
 8000e66:	d104      	bne.n	8000e72 <__aeabi_dsub+0x696>
 8000e68:	465d      	mov	r5, fp
 8000e6a:	0032      	movs	r2, r6
 8000e6c:	08c3      	lsrs	r3, r0, #3
 8000e6e:	077f      	lsls	r7, r7, #29
 8000e70:	433b      	orrs	r3, r7
 8000e72:	0f59      	lsrs	r1, r3, #29
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	0749      	lsls	r1, r1, #29
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	e670      	b.n	8000b60 <__aeabi_dsub+0x384>
 8000e7e:	08c0      	lsrs	r0, r0, #3
 8000e80:	077b      	lsls	r3, r7, #29
 8000e82:	4303      	orrs	r3, r0
 8000e84:	08fa      	lsrs	r2, r7, #3
 8000e86:	e640      	b.n	8000b0a <__aeabi_dsub+0x32e>
 8000e88:	464c      	mov	r4, r9
 8000e8a:	3920      	subs	r1, #32
 8000e8c:	40cc      	lsrs	r4, r1
 8000e8e:	4661      	mov	r1, ip
 8000e90:	2920      	cmp	r1, #32
 8000e92:	d006      	beq.n	8000ea2 <__aeabi_dsub+0x6c6>
 8000e94:	4666      	mov	r6, ip
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	1b89      	subs	r1, r1, r6
 8000e9a:	464e      	mov	r6, r9
 8000e9c:	408e      	lsls	r6, r1
 8000e9e:	4333      	orrs	r3, r6
 8000ea0:	4698      	mov	r8, r3
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	1e59      	subs	r1, r3, #1
 8000ea6:	418b      	sbcs	r3, r1
 8000ea8:	431c      	orrs	r4, r3
 8000eaa:	e5d8      	b.n	8000a5e <__aeabi_dsub+0x282>
 8000eac:	181c      	adds	r4, r3, r0
 8000eae:	4284      	cmp	r4, r0
 8000eb0:	4180      	sbcs	r0, r0
 8000eb2:	444f      	add	r7, r9
 8000eb4:	46ba      	mov	sl, r7
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	4482      	add	sl, r0
 8000eba:	e6d9      	b.n	8000c70 <__aeabi_dsub+0x494>
 8000ebc:	4653      	mov	r3, sl
 8000ebe:	4323      	orrs	r3, r4
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dsub+0x6e8>
 8000ec2:	e6cb      	b.n	8000c5c <__aeabi_dsub+0x480>
 8000ec4:	e614      	b.n	8000af0 <__aeabi_dsub+0x314>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	000007ff 	.word	0x000007ff
 8000ecc:	ff7fffff 	.word	0xff7fffff
 8000ed0:	000007fe 	.word	0x000007fe
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4a01      	ldr	r2, [pc, #4]	; (8000edc <__aeabi_dsub+0x700>)
 8000ed8:	001c      	movs	r4, r3
 8000eda:	e529      	b.n	8000930 <__aeabi_dsub+0x154>
 8000edc:	000007ff 	.word	0x000007ff

08000ee0 <__aeabi_d2iz>:
 8000ee0:	000a      	movs	r2, r1
 8000ee2:	b530      	push	{r4, r5, lr}
 8000ee4:	4c13      	ldr	r4, [pc, #76]	; (8000f34 <__aeabi_d2iz+0x54>)
 8000ee6:	0053      	lsls	r3, r2, #1
 8000ee8:	0309      	lsls	r1, r1, #12
 8000eea:	0005      	movs	r5, r0
 8000eec:	0b09      	lsrs	r1, r1, #12
 8000eee:	2000      	movs	r0, #0
 8000ef0:	0d5b      	lsrs	r3, r3, #21
 8000ef2:	0fd2      	lsrs	r2, r2, #31
 8000ef4:	42a3      	cmp	r3, r4
 8000ef6:	dd04      	ble.n	8000f02 <__aeabi_d2iz+0x22>
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <__aeabi_d2iz+0x58>)
 8000efa:	4283      	cmp	r3, r0
 8000efc:	dd02      	ble.n	8000f04 <__aeabi_d2iz+0x24>
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <__aeabi_d2iz+0x5c>)
 8000f00:	18d0      	adds	r0, r2, r3
 8000f02:	bd30      	pop	{r4, r5, pc}
 8000f04:	2080      	movs	r0, #128	; 0x80
 8000f06:	0340      	lsls	r0, r0, #13
 8000f08:	4301      	orrs	r1, r0
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <__aeabi_d2iz+0x60>)
 8000f0c:	1ac0      	subs	r0, r0, r3
 8000f0e:	281f      	cmp	r0, #31
 8000f10:	dd08      	ble.n	8000f24 <__aeabi_d2iz+0x44>
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <__aeabi_d2iz+0x64>)
 8000f14:	1ac3      	subs	r3, r0, r3
 8000f16:	40d9      	lsrs	r1, r3
 8000f18:	000b      	movs	r3, r1
 8000f1a:	4258      	negs	r0, r3
 8000f1c:	2a00      	cmp	r2, #0
 8000f1e:	d1f0      	bne.n	8000f02 <__aeabi_d2iz+0x22>
 8000f20:	0018      	movs	r0, r3
 8000f22:	e7ee      	b.n	8000f02 <__aeabi_d2iz+0x22>
 8000f24:	4c08      	ldr	r4, [pc, #32]	; (8000f48 <__aeabi_d2iz+0x68>)
 8000f26:	40c5      	lsrs	r5, r0
 8000f28:	46a4      	mov	ip, r4
 8000f2a:	4463      	add	r3, ip
 8000f2c:	4099      	lsls	r1, r3
 8000f2e:	000b      	movs	r3, r1
 8000f30:	432b      	orrs	r3, r5
 8000f32:	e7f2      	b.n	8000f1a <__aeabi_d2iz+0x3a>
 8000f34:	000003fe 	.word	0x000003fe
 8000f38:	0000041d 	.word	0x0000041d
 8000f3c:	7fffffff 	.word	0x7fffffff
 8000f40:	00000433 	.word	0x00000433
 8000f44:	00000413 	.word	0x00000413
 8000f48:	fffffbed 	.word	0xfffffbed

08000f4c <__aeabi_ui2d>:
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	1e04      	subs	r4, r0, #0
 8000f50:	d010      	beq.n	8000f74 <__aeabi_ui2d+0x28>
 8000f52:	f000 f85f 	bl	8001014 <__clzsi2>
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <__aeabi_ui2d+0x48>)
 8000f58:	1a1b      	subs	r3, r3, r0
 8000f5a:	280a      	cmp	r0, #10
 8000f5c:	dc11      	bgt.n	8000f82 <__aeabi_ui2d+0x36>
 8000f5e:	220b      	movs	r2, #11
 8000f60:	0021      	movs	r1, r4
 8000f62:	1a12      	subs	r2, r2, r0
 8000f64:	40d1      	lsrs	r1, r2
 8000f66:	3015      	adds	r0, #21
 8000f68:	030a      	lsls	r2, r1, #12
 8000f6a:	055b      	lsls	r3, r3, #21
 8000f6c:	4084      	lsls	r4, r0
 8000f6e:	0b12      	lsrs	r2, r2, #12
 8000f70:	0d5b      	lsrs	r3, r3, #21
 8000f72:	e001      	b.n	8000f78 <__aeabi_ui2d+0x2c>
 8000f74:	2300      	movs	r3, #0
 8000f76:	2200      	movs	r2, #0
 8000f78:	051b      	lsls	r3, r3, #20
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	0020      	movs	r0, r4
 8000f7e:	0019      	movs	r1, r3
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	0022      	movs	r2, r4
 8000f84:	380b      	subs	r0, #11
 8000f86:	4082      	lsls	r2, r0
 8000f88:	055b      	lsls	r3, r3, #21
 8000f8a:	0312      	lsls	r2, r2, #12
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	0b12      	lsrs	r2, r2, #12
 8000f90:	0d5b      	lsrs	r3, r3, #21
 8000f92:	e7f1      	b.n	8000f78 <__aeabi_ui2d+0x2c>
 8000f94:	0000041e 	.word	0x0000041e

08000f98 <__aeabi_cdrcmple>:
 8000f98:	4684      	mov	ip, r0
 8000f9a:	0010      	movs	r0, r2
 8000f9c:	4662      	mov	r2, ip
 8000f9e:	468c      	mov	ip, r1
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	4663      	mov	r3, ip
 8000fa4:	e000      	b.n	8000fa8 <__aeabi_cdcmpeq>
 8000fa6:	46c0      	nop			; (mov r8, r8)

08000fa8 <__aeabi_cdcmpeq>:
 8000fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000faa:	f000 f8f9 	bl	80011a0 <__ledf2>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	d401      	bmi.n	8000fb6 <__aeabi_cdcmpeq+0xe>
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	42c8      	cmn	r0, r1
 8000fb6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000fb8 <__aeabi_dcmpeq>:
 8000fb8:	b510      	push	{r4, lr}
 8000fba:	f000 f849 	bl	8001050 <__eqdf2>
 8000fbe:	4240      	negs	r0, r0
 8000fc0:	3001      	adds	r0, #1
 8000fc2:	bd10      	pop	{r4, pc}

08000fc4 <__aeabi_dcmplt>:
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	f000 f8eb 	bl	80011a0 <__ledf2>
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	db01      	blt.n	8000fd2 <__aeabi_dcmplt+0xe>
 8000fce:	2000      	movs	r0, #0
 8000fd0:	bd10      	pop	{r4, pc}
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	bd10      	pop	{r4, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)

08000fd8 <__aeabi_dcmple>:
 8000fd8:	b510      	push	{r4, lr}
 8000fda:	f000 f8e1 	bl	80011a0 <__ledf2>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	dd01      	ble.n	8000fe6 <__aeabi_dcmple+0xe>
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	bd10      	pop	{r4, pc}
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	bd10      	pop	{r4, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)

08000fec <__aeabi_dcmpgt>:
 8000fec:	b510      	push	{r4, lr}
 8000fee:	f000 f871 	bl	80010d4 <__gedf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	dc01      	bgt.n	8000ffa <__aeabi_dcmpgt+0xe>
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	bd10      	pop	{r4, pc}
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)

08001000 <__aeabi_dcmpge>:
 8001000:	b510      	push	{r4, lr}
 8001002:	f000 f867 	bl	80010d4 <__gedf2>
 8001006:	2800      	cmp	r0, #0
 8001008:	da01      	bge.n	800100e <__aeabi_dcmpge+0xe>
 800100a:	2000      	movs	r0, #0
 800100c:	bd10      	pop	{r4, pc}
 800100e:	2001      	movs	r0, #1
 8001010:	bd10      	pop	{r4, pc}
 8001012:	46c0      	nop			; (mov r8, r8)

08001014 <__clzsi2>:
 8001014:	211c      	movs	r1, #28
 8001016:	2301      	movs	r3, #1
 8001018:	041b      	lsls	r3, r3, #16
 800101a:	4298      	cmp	r0, r3
 800101c:	d301      	bcc.n	8001022 <__clzsi2+0xe>
 800101e:	0c00      	lsrs	r0, r0, #16
 8001020:	3910      	subs	r1, #16
 8001022:	0a1b      	lsrs	r3, r3, #8
 8001024:	4298      	cmp	r0, r3
 8001026:	d301      	bcc.n	800102c <__clzsi2+0x18>
 8001028:	0a00      	lsrs	r0, r0, #8
 800102a:	3908      	subs	r1, #8
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	4298      	cmp	r0, r3
 8001030:	d301      	bcc.n	8001036 <__clzsi2+0x22>
 8001032:	0900      	lsrs	r0, r0, #4
 8001034:	3904      	subs	r1, #4
 8001036:	a202      	add	r2, pc, #8	; (adr r2, 8001040 <__clzsi2+0x2c>)
 8001038:	5c10      	ldrb	r0, [r2, r0]
 800103a:	1840      	adds	r0, r0, r1
 800103c:	4770      	bx	lr
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	02020304 	.word	0x02020304
 8001044:	01010101 	.word	0x01010101
	...

08001050 <__eqdf2>:
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001052:	464e      	mov	r6, r9
 8001054:	4645      	mov	r5, r8
 8001056:	46de      	mov	lr, fp
 8001058:	4657      	mov	r7, sl
 800105a:	4690      	mov	r8, r2
 800105c:	b5e0      	push	{r5, r6, r7, lr}
 800105e:	0017      	movs	r7, r2
 8001060:	031a      	lsls	r2, r3, #12
 8001062:	0b12      	lsrs	r2, r2, #12
 8001064:	0005      	movs	r5, r0
 8001066:	4684      	mov	ip, r0
 8001068:	4819      	ldr	r0, [pc, #100]	; (80010d0 <__eqdf2+0x80>)
 800106a:	030e      	lsls	r6, r1, #12
 800106c:	004c      	lsls	r4, r1, #1
 800106e:	4691      	mov	r9, r2
 8001070:	005a      	lsls	r2, r3, #1
 8001072:	0fdb      	lsrs	r3, r3, #31
 8001074:	469b      	mov	fp, r3
 8001076:	0b36      	lsrs	r6, r6, #12
 8001078:	0d64      	lsrs	r4, r4, #21
 800107a:	0fc9      	lsrs	r1, r1, #31
 800107c:	0d52      	lsrs	r2, r2, #21
 800107e:	4284      	cmp	r4, r0
 8001080:	d019      	beq.n	80010b6 <__eqdf2+0x66>
 8001082:	4282      	cmp	r2, r0
 8001084:	d010      	beq.n	80010a8 <__eqdf2+0x58>
 8001086:	2001      	movs	r0, #1
 8001088:	4294      	cmp	r4, r2
 800108a:	d10e      	bne.n	80010aa <__eqdf2+0x5a>
 800108c:	454e      	cmp	r6, r9
 800108e:	d10c      	bne.n	80010aa <__eqdf2+0x5a>
 8001090:	2001      	movs	r0, #1
 8001092:	45c4      	cmp	ip, r8
 8001094:	d109      	bne.n	80010aa <__eqdf2+0x5a>
 8001096:	4559      	cmp	r1, fp
 8001098:	d017      	beq.n	80010ca <__eqdf2+0x7a>
 800109a:	2c00      	cmp	r4, #0
 800109c:	d105      	bne.n	80010aa <__eqdf2+0x5a>
 800109e:	0030      	movs	r0, r6
 80010a0:	4328      	orrs	r0, r5
 80010a2:	1e43      	subs	r3, r0, #1
 80010a4:	4198      	sbcs	r0, r3
 80010a6:	e000      	b.n	80010aa <__eqdf2+0x5a>
 80010a8:	2001      	movs	r0, #1
 80010aa:	bcf0      	pop	{r4, r5, r6, r7}
 80010ac:	46bb      	mov	fp, r7
 80010ae:	46b2      	mov	sl, r6
 80010b0:	46a9      	mov	r9, r5
 80010b2:	46a0      	mov	r8, r4
 80010b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b6:	0033      	movs	r3, r6
 80010b8:	2001      	movs	r0, #1
 80010ba:	432b      	orrs	r3, r5
 80010bc:	d1f5      	bne.n	80010aa <__eqdf2+0x5a>
 80010be:	42a2      	cmp	r2, r4
 80010c0:	d1f3      	bne.n	80010aa <__eqdf2+0x5a>
 80010c2:	464b      	mov	r3, r9
 80010c4:	433b      	orrs	r3, r7
 80010c6:	d1f0      	bne.n	80010aa <__eqdf2+0x5a>
 80010c8:	e7e2      	b.n	8001090 <__eqdf2+0x40>
 80010ca:	2000      	movs	r0, #0
 80010cc:	e7ed      	b.n	80010aa <__eqdf2+0x5a>
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	000007ff 	.word	0x000007ff

080010d4 <__gedf2>:
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	4647      	mov	r7, r8
 80010d8:	46ce      	mov	lr, r9
 80010da:	0004      	movs	r4, r0
 80010dc:	0018      	movs	r0, r3
 80010de:	0016      	movs	r6, r2
 80010e0:	031b      	lsls	r3, r3, #12
 80010e2:	0b1b      	lsrs	r3, r3, #12
 80010e4:	4d2d      	ldr	r5, [pc, #180]	; (800119c <__gedf2+0xc8>)
 80010e6:	004a      	lsls	r2, r1, #1
 80010e8:	4699      	mov	r9, r3
 80010ea:	b580      	push	{r7, lr}
 80010ec:	0043      	lsls	r3, r0, #1
 80010ee:	030f      	lsls	r7, r1, #12
 80010f0:	46a4      	mov	ip, r4
 80010f2:	46b0      	mov	r8, r6
 80010f4:	0b3f      	lsrs	r7, r7, #12
 80010f6:	0d52      	lsrs	r2, r2, #21
 80010f8:	0fc9      	lsrs	r1, r1, #31
 80010fa:	0d5b      	lsrs	r3, r3, #21
 80010fc:	0fc0      	lsrs	r0, r0, #31
 80010fe:	42aa      	cmp	r2, r5
 8001100:	d021      	beq.n	8001146 <__gedf2+0x72>
 8001102:	42ab      	cmp	r3, r5
 8001104:	d013      	beq.n	800112e <__gedf2+0x5a>
 8001106:	2a00      	cmp	r2, #0
 8001108:	d122      	bne.n	8001150 <__gedf2+0x7c>
 800110a:	433c      	orrs	r4, r7
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <__gedf2+0x42>
 8001110:	464d      	mov	r5, r9
 8001112:	432e      	orrs	r6, r5
 8001114:	d022      	beq.n	800115c <__gedf2+0x88>
 8001116:	2c00      	cmp	r4, #0
 8001118:	d010      	beq.n	800113c <__gedf2+0x68>
 800111a:	4281      	cmp	r1, r0
 800111c:	d022      	beq.n	8001164 <__gedf2+0x90>
 800111e:	2002      	movs	r0, #2
 8001120:	3901      	subs	r1, #1
 8001122:	4008      	ands	r0, r1
 8001124:	3801      	subs	r0, #1
 8001126:	bcc0      	pop	{r6, r7}
 8001128:	46b9      	mov	r9, r7
 800112a:	46b0      	mov	r8, r6
 800112c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800112e:	464d      	mov	r5, r9
 8001130:	432e      	orrs	r6, r5
 8001132:	d129      	bne.n	8001188 <__gedf2+0xb4>
 8001134:	2a00      	cmp	r2, #0
 8001136:	d1f0      	bne.n	800111a <__gedf2+0x46>
 8001138:	433c      	orrs	r4, r7
 800113a:	d1ee      	bne.n	800111a <__gedf2+0x46>
 800113c:	2800      	cmp	r0, #0
 800113e:	d1f2      	bne.n	8001126 <__gedf2+0x52>
 8001140:	2001      	movs	r0, #1
 8001142:	4240      	negs	r0, r0
 8001144:	e7ef      	b.n	8001126 <__gedf2+0x52>
 8001146:	003d      	movs	r5, r7
 8001148:	4325      	orrs	r5, r4
 800114a:	d11d      	bne.n	8001188 <__gedf2+0xb4>
 800114c:	4293      	cmp	r3, r2
 800114e:	d0ee      	beq.n	800112e <__gedf2+0x5a>
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1e2      	bne.n	800111a <__gedf2+0x46>
 8001154:	464c      	mov	r4, r9
 8001156:	4326      	orrs	r6, r4
 8001158:	d1df      	bne.n	800111a <__gedf2+0x46>
 800115a:	e7e0      	b.n	800111e <__gedf2+0x4a>
 800115c:	2000      	movs	r0, #0
 800115e:	2c00      	cmp	r4, #0
 8001160:	d0e1      	beq.n	8001126 <__gedf2+0x52>
 8001162:	e7dc      	b.n	800111e <__gedf2+0x4a>
 8001164:	429a      	cmp	r2, r3
 8001166:	dc0a      	bgt.n	800117e <__gedf2+0xaa>
 8001168:	dbe8      	blt.n	800113c <__gedf2+0x68>
 800116a:	454f      	cmp	r7, r9
 800116c:	d8d7      	bhi.n	800111e <__gedf2+0x4a>
 800116e:	d00e      	beq.n	800118e <__gedf2+0xba>
 8001170:	2000      	movs	r0, #0
 8001172:	454f      	cmp	r7, r9
 8001174:	d2d7      	bcs.n	8001126 <__gedf2+0x52>
 8001176:	2900      	cmp	r1, #0
 8001178:	d0e2      	beq.n	8001140 <__gedf2+0x6c>
 800117a:	0008      	movs	r0, r1
 800117c:	e7d3      	b.n	8001126 <__gedf2+0x52>
 800117e:	4243      	negs	r3, r0
 8001180:	4158      	adcs	r0, r3
 8001182:	0040      	lsls	r0, r0, #1
 8001184:	3801      	subs	r0, #1
 8001186:	e7ce      	b.n	8001126 <__gedf2+0x52>
 8001188:	2002      	movs	r0, #2
 800118a:	4240      	negs	r0, r0
 800118c:	e7cb      	b.n	8001126 <__gedf2+0x52>
 800118e:	45c4      	cmp	ip, r8
 8001190:	d8c5      	bhi.n	800111e <__gedf2+0x4a>
 8001192:	2000      	movs	r0, #0
 8001194:	45c4      	cmp	ip, r8
 8001196:	d2c6      	bcs.n	8001126 <__gedf2+0x52>
 8001198:	e7ed      	b.n	8001176 <__gedf2+0xa2>
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	000007ff 	.word	0x000007ff

080011a0 <__ledf2>:
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	4647      	mov	r7, r8
 80011a4:	46ce      	mov	lr, r9
 80011a6:	0004      	movs	r4, r0
 80011a8:	0018      	movs	r0, r3
 80011aa:	0016      	movs	r6, r2
 80011ac:	031b      	lsls	r3, r3, #12
 80011ae:	0b1b      	lsrs	r3, r3, #12
 80011b0:	4d2c      	ldr	r5, [pc, #176]	; (8001264 <__ledf2+0xc4>)
 80011b2:	004a      	lsls	r2, r1, #1
 80011b4:	4699      	mov	r9, r3
 80011b6:	b580      	push	{r7, lr}
 80011b8:	0043      	lsls	r3, r0, #1
 80011ba:	030f      	lsls	r7, r1, #12
 80011bc:	46a4      	mov	ip, r4
 80011be:	46b0      	mov	r8, r6
 80011c0:	0b3f      	lsrs	r7, r7, #12
 80011c2:	0d52      	lsrs	r2, r2, #21
 80011c4:	0fc9      	lsrs	r1, r1, #31
 80011c6:	0d5b      	lsrs	r3, r3, #21
 80011c8:	0fc0      	lsrs	r0, r0, #31
 80011ca:	42aa      	cmp	r2, r5
 80011cc:	d00d      	beq.n	80011ea <__ledf2+0x4a>
 80011ce:	42ab      	cmp	r3, r5
 80011d0:	d010      	beq.n	80011f4 <__ledf2+0x54>
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	d127      	bne.n	8001226 <__ledf2+0x86>
 80011d6:	433c      	orrs	r4, r7
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d111      	bne.n	8001200 <__ledf2+0x60>
 80011dc:	464d      	mov	r5, r9
 80011de:	432e      	orrs	r6, r5
 80011e0:	d10e      	bne.n	8001200 <__ledf2+0x60>
 80011e2:	2000      	movs	r0, #0
 80011e4:	2c00      	cmp	r4, #0
 80011e6:	d015      	beq.n	8001214 <__ledf2+0x74>
 80011e8:	e00e      	b.n	8001208 <__ledf2+0x68>
 80011ea:	003d      	movs	r5, r7
 80011ec:	4325      	orrs	r5, r4
 80011ee:	d110      	bne.n	8001212 <__ledf2+0x72>
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d118      	bne.n	8001226 <__ledf2+0x86>
 80011f4:	464d      	mov	r5, r9
 80011f6:	432e      	orrs	r6, r5
 80011f8:	d10b      	bne.n	8001212 <__ledf2+0x72>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d102      	bne.n	8001204 <__ledf2+0x64>
 80011fe:	433c      	orrs	r4, r7
 8001200:	2c00      	cmp	r4, #0
 8001202:	d00b      	beq.n	800121c <__ledf2+0x7c>
 8001204:	4281      	cmp	r1, r0
 8001206:	d014      	beq.n	8001232 <__ledf2+0x92>
 8001208:	2002      	movs	r0, #2
 800120a:	3901      	subs	r1, #1
 800120c:	4008      	ands	r0, r1
 800120e:	3801      	subs	r0, #1
 8001210:	e000      	b.n	8001214 <__ledf2+0x74>
 8001212:	2002      	movs	r0, #2
 8001214:	bcc0      	pop	{r6, r7}
 8001216:	46b9      	mov	r9, r7
 8001218:	46b0      	mov	r8, r6
 800121a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121c:	2800      	cmp	r0, #0
 800121e:	d1f9      	bne.n	8001214 <__ledf2+0x74>
 8001220:	2001      	movs	r0, #1
 8001222:	4240      	negs	r0, r0
 8001224:	e7f6      	b.n	8001214 <__ledf2+0x74>
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1ec      	bne.n	8001204 <__ledf2+0x64>
 800122a:	464c      	mov	r4, r9
 800122c:	4326      	orrs	r6, r4
 800122e:	d1e9      	bne.n	8001204 <__ledf2+0x64>
 8001230:	e7ea      	b.n	8001208 <__ledf2+0x68>
 8001232:	429a      	cmp	r2, r3
 8001234:	dd04      	ble.n	8001240 <__ledf2+0xa0>
 8001236:	4243      	negs	r3, r0
 8001238:	4158      	adcs	r0, r3
 800123a:	0040      	lsls	r0, r0, #1
 800123c:	3801      	subs	r0, #1
 800123e:	e7e9      	b.n	8001214 <__ledf2+0x74>
 8001240:	429a      	cmp	r2, r3
 8001242:	dbeb      	blt.n	800121c <__ledf2+0x7c>
 8001244:	454f      	cmp	r7, r9
 8001246:	d8df      	bhi.n	8001208 <__ledf2+0x68>
 8001248:	d006      	beq.n	8001258 <__ledf2+0xb8>
 800124a:	2000      	movs	r0, #0
 800124c:	454f      	cmp	r7, r9
 800124e:	d2e1      	bcs.n	8001214 <__ledf2+0x74>
 8001250:	2900      	cmp	r1, #0
 8001252:	d0e5      	beq.n	8001220 <__ledf2+0x80>
 8001254:	0008      	movs	r0, r1
 8001256:	e7dd      	b.n	8001214 <__ledf2+0x74>
 8001258:	45c4      	cmp	ip, r8
 800125a:	d8d5      	bhi.n	8001208 <__ledf2+0x68>
 800125c:	2000      	movs	r0, #0
 800125e:	45c4      	cmp	ip, r8
 8001260:	d2d8      	bcs.n	8001214 <__ledf2+0x74>
 8001262:	e7f5      	b.n	8001250 <__ledf2+0xb0>
 8001264:	000007ff 	.word	0x000007ff

08001268 <TMC5160_Basic_Init>:
int Ax = 0;				// counter for buffer
uint8_t AMS_Ready;		//check for interrupt
uint16_t pAngle[100];

void TMC5160_Basic_Init(CurrentConfig *Current)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	/* CURRENT SETTINGS
	 I_RUN, Max run current = 20 = ~2.0A
	 I_HOLD, Max Hold current = 20 = ~2.0A
	*/

	uint32_t IHOLD_IRUN = 0x00070000; // standard IHOLD DELAY value
 8001270:	23e0      	movs	r3, #224	; 0xe0
 8001272:	02db      	lsls	r3, r3, #11
 8001274:	60fb      	str	r3, [r7, #12]
	//uint32_t GSTAT_VALUE = 0x00000000; //default value for GSTAT

	if(Current->IHOLD > 20) // set upper current limit ~2.0A
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b14      	cmp	r3, #20
 800127c:	d902      	bls.n	8001284 <TMC5160_Basic_Init+0x1c>
	{
		Current->IHOLD = 20;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2214      	movs	r2, #20
 8001282:	605a      	str	r2, [r3, #4]
	}

	if(Current->IRUN > 20) // set upper current limit ~2.0A
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b14      	cmp	r3, #20
 800128a:	d902      	bls.n	8001292 <TMC5160_Basic_Init+0x2a>
	{
		Current->IRUN = 20;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2214      	movs	r2, #20
 8001290:	601a      	str	r2, [r3, #0]
	}

	IHOLD_IRUN += Current->IHOLD + (Current->IRUN <<8);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	18d3      	adds	r3, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	18d3      	adds	r3, r2, r3
 80012a2:	60fb      	str	r3, [r7, #12]

	TMC5160_SPIWrite(0x00, 0x00000008, 1); // writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 80012a4:	2201      	movs	r2, #1
 80012a6:	2108      	movs	r1, #8
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 f9df 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x00, 0x00000008, 0); // writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 80012ae:	2200      	movs	r2, #0
 80012b0:	2108      	movs	r1, #8
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f9da 	bl	800166c <TMC5160_SPIWrite>
	{
		TMC5160_SPIWrite(0x01, 0x00000001, 1); // write 1 bit to GSTAT to clear all error flags
		// TODO: is clearing the flags enough? or poweqr cycle needed?
	}*/

	TMC5160_SPIWrite(0x03, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 1 = 0x03(SLAVECONF)
 80012b8:	2201      	movs	r2, #1
 80012ba:	2100      	movs	r1, #0
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f9d5 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x05, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 2 = 0x05(X_COMPARE)
 80012c2:	2201      	movs	r2, #1
 80012c4:	2100      	movs	r1, #0
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 f9d0 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x06, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 3 = 0x06(OTP_PROG)
 80012cc:	2201      	movs	r2, #1
 80012ce:	2100      	movs	r1, #0
 80012d0:	2006      	movs	r0, #6
 80012d2:	f000 f9cb 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x08, 0x0000000F, 1); // writing value 0x0000000F = 15 = 0.0 to address 4 = 0x08(FACTORY_CONF)
 80012d6:	2201      	movs	r2, #1
 80012d8:	210f      	movs	r1, #15
 80012da:	2008      	movs	r0, #8
 80012dc:	f000 f9c6 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x09, 0x00010606, 1); // writing value 0x00010606 = 67078 = 0.0 to address 5 = 0x09(SHORT_CONF)
 80012e0:	4b53      	ldr	r3, [pc, #332]	; (8001430 <TMC5160_Basic_Init+0x1c8>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	0019      	movs	r1, r3
 80012e6:	2009      	movs	r0, #9
 80012e8:	f000 f9c0 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x0A, 0x00080400, 1); // writing value 0x00080400 = 525312 = 0.0 to address 6 = 0x0A(DRV_CONF)
 80012ec:	4b51      	ldr	r3, [pc, #324]	; (8001434 <TMC5160_Basic_Init+0x1cc>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	0019      	movs	r1, r3
 80012f2:	200a      	movs	r0, #10
 80012f4:	f000 f9ba 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x0B, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 7 = 0x0B(GLOBAL_SCALER)
 80012f8:	2201      	movs	r2, #1
 80012fa:	2100      	movs	r1, #0
 80012fc:	200b      	movs	r0, #11
 80012fe:	f000 f9b5 	bl	800166c <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x10, IHOLD_IRUN, 1); // writing value 0x00070A03 = 461315 = 0.0 to address 8 = 0x10(IHOLD_IRUN)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2201      	movs	r2, #1
 8001306:	0019      	movs	r1, r3
 8001308:	2010      	movs	r0, #16
 800130a:	f000 f9af 	bl	800166c <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x11, 0x0000000A, 1); // writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 800130e:	2201      	movs	r2, #1
 8001310:	210a      	movs	r1, #10
 8001312:	2011      	movs	r0, #17
 8001314:	f000 f9aa 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x13, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 8001318:	2201      	movs	r2, #1
 800131a:	2100      	movs	r1, #0
 800131c:	2013      	movs	r0, #19
 800131e:	f000 f9a5 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x14, 0x00000000, 1); // writing value 0x00000010 = 16 = 0.0 to address 11 = 0x14(TCOOLTHRS)
 8001322:	2201      	movs	r2, #1
 8001324:	2100      	movs	r1, #0
 8001326:	2014      	movs	r0, #20
 8001328:	f000 f9a0 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x15, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 12 = 0x15(THIGH)
 800132c:	2201      	movs	r2, #1
 800132e:	2100      	movs	r1, #0
 8001330:	2015      	movs	r0, #21
 8001332:	f000 f99b 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2C, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 23 = 0x2C(TZEROWAIT)
 8001336:	2201      	movs	r2, #1
 8001338:	2100      	movs	r1, #0
 800133a:	202c      	movs	r0, #44	; 0x2c
 800133c:	f000 f996 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x33, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 25 = 0x33(VDCMIN)
 8001340:	2201      	movs	r2, #1
 8001342:	2100      	movs	r1, #0
 8001344:	2033      	movs	r0, #51	; 0x33
 8001346:	f000 f991 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x34, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 26 = 0x34(SW_MODE)
 800134a:	2201      	movs	r2, #1
 800134c:	2100      	movs	r1, #0
 800134e:	2034      	movs	r0, #52	; 0x34
 8001350:	f000 f98c 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x38, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 27 = 0x38(ENCMODE)
 8001354:	2201      	movs	r2, #1
 8001356:	2100      	movs	r1, #0
 8001358:	2038      	movs	r0, #56	; 0x38
 800135a:	f000 f987 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x39, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 28 = 0x39(X_ENC)
 800135e:	2201      	movs	r2, #1
 8001360:	2100      	movs	r1, #0
 8001362:	2039      	movs	r0, #57	; 0x39
 8001364:	f000 f982 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x3A, 0x00010000, 1); // writing value 0x00010000 = 65536 = 0.0 to address 29 = 0x3A(ENC_CONST)
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	025b      	lsls	r3, r3, #9
 800136c:	2201      	movs	r2, #1
 800136e:	0019      	movs	r1, r3
 8001370:	203a      	movs	r0, #58	; 0x3a
 8001372:	f000 f97b 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x3D, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 30 = 0x3D(ENC_DEVIATION)
 8001376:	2201      	movs	r2, #1
 8001378:	2100      	movs	r1, #0
 800137a:	203d      	movs	r0, #61	; 0x3d
 800137c:	f000 f976 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x60, 0xAAAAB554, 1); // writing value 0xAAAAB554 = 0 = 0.0 to address 31 = 0x60(MSLUT[0])
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <TMC5160_Basic_Init+0x1d0>)
 8001382:	2201      	movs	r2, #1
 8001384:	0019      	movs	r1, r3
 8001386:	2060      	movs	r0, #96	; 0x60
 8001388:	f000 f970 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x61, 0x4A9554AA, 1); // writing value 0x4A9554AA = 1251300522 = 0.0 to address 32 = 0x61(MSLUT[1])
 800138c:	4b2b      	ldr	r3, [pc, #172]	; (800143c <TMC5160_Basic_Init+0x1d4>)
 800138e:	2201      	movs	r2, #1
 8001390:	0019      	movs	r1, r3
 8001392:	2061      	movs	r0, #97	; 0x61
 8001394:	f000 f96a 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x62, 0x24492929, 1); // writing value 0x24492929 = 608774441 = 0.0 to address 33 = 0x62(MSLUT[2])
 8001398:	4b29      	ldr	r3, [pc, #164]	; (8001440 <TMC5160_Basic_Init+0x1d8>)
 800139a:	2201      	movs	r2, #1
 800139c:	0019      	movs	r1, r3
 800139e:	2062      	movs	r0, #98	; 0x62
 80013a0:	f000 f964 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x63, 0x10104222, 1); // writing value 0x10104222 = 269500962 = 0.0 to address 34 = 0x63(MSLUT[3])
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <TMC5160_Basic_Init+0x1dc>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	0019      	movs	r1, r3
 80013aa:	2063      	movs	r0, #99	; 0x63
 80013ac:	f000 f95e 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x64, 0xFBFFFFFF, 1); // writing value 0xFBFFFFFF = 0 = 0.0 to address 35 = 0x64(MSLUT[4])
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <TMC5160_Basic_Init+0x1e0>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	0019      	movs	r1, r3
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f000 f958 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x65, 0xB5BB777D, 1); // writing value 0xB5BB777D = 0 = 0.0 to address 36 = 0x65(MSLUT[5])
 80013bc:	4b23      	ldr	r3, [pc, #140]	; (800144c <TMC5160_Basic_Init+0x1e4>)
 80013be:	2201      	movs	r2, #1
 80013c0:	0019      	movs	r1, r3
 80013c2:	2065      	movs	r0, #101	; 0x65
 80013c4:	f000 f952 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x66, 0x49295556, 1); // writing value 0x49295556 = 1227445590 = 0.0 to address 37 = 0x66(MSLUT[6])
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <TMC5160_Basic_Init+0x1e8>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	0019      	movs	r1, r3
 80013ce:	2066      	movs	r0, #102	; 0x66
 80013d0:	f000 f94c 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x67, 0x00404222, 1); // writing value 0x00404222 = 4211234 = 0.0 to address 38 = 0x67(MSLUT[7])
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <TMC5160_Basic_Init+0x1ec>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	0019      	movs	r1, r3
 80013da:	2067      	movs	r0, #103	; 0x67
 80013dc:	f000 f946 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x68, 0xFFFF8056, 1); // writing value 0xFFFF8056 = 0 = 0.0 to address 39 = 0x68(MSLUTSEL)
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <TMC5160_Basic_Init+0x1f0>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	0019      	movs	r1, r3
 80013e6:	2068      	movs	r0, #104	; 0x68
 80013e8:	f000 f940 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x69, 0x00F70000, 1); // writing value 0x00F70000 = 16187392 = 0.0 to address 40 = 0x69(MSLUTSTART)
 80013ec:	23f7      	movs	r3, #247	; 0xf7
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	2201      	movs	r2, #1
 80013f2:	0019      	movs	r1, r3
 80013f4:	2069      	movs	r0, #105	; 0x69
 80013f6:	f000 f939 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6C, 0x00410153, 1); // writing value 0x00410153 = 4260099 = 0.0 to address 41 = 0x6C(CHOPCONF)
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <TMC5160_Basic_Init+0x1f4>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	0019      	movs	r1, r3
 8001400:	206c      	movs	r0, #108	; 0x6c
 8001402:	f000 f933 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6D, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 42 = 0x6D(COOLCONF)
 8001406:	2201      	movs	r2, #1
 8001408:	2100      	movs	r1, #0
 800140a:	206d      	movs	r0, #109	; 0x6d
 800140c:	f000 f92e 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6E, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 43 = 0x6E(DCCTRL)
 8001410:	2201      	movs	r2, #1
 8001412:	2100      	movs	r1, #0
 8001414:	206e      	movs	r0, #110	; 0x6e
 8001416:	f000 f929 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x70, 0xC40C001E, 1); // writing value 0xC40C001E = 0 = 0.0 to address 44 = 0x70(PWMCONF)
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <TMC5160_Basic_Init+0x1f8>)
 800141c:	2201      	movs	r2, #1
 800141e:	0019      	movs	r1, r3
 8001420:	2070      	movs	r0, #112	; 0x70
 8001422:	f000 f923 	bl	800166c <TMC5160_SPIWrite>

}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	b004      	add	sp, #16
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	00010606 	.word	0x00010606
 8001434:	00080400 	.word	0x00080400
 8001438:	aaaab554 	.word	0xaaaab554
 800143c:	4a9554aa 	.word	0x4a9554aa
 8001440:	24492929 	.word	0x24492929
 8001444:	10104222 	.word	0x10104222
 8001448:	fbffffff 	.word	0xfbffffff
 800144c:	b5bb777d 	.word	0xb5bb777d
 8001450:	49295556 	.word	0x49295556
 8001454:	00404222 	.word	0x00404222
 8001458:	ffff8056 	.word	0xffff8056
 800145c:	00410153 	.word	0x00410153
 8001460:	c40c001e 	.word	0xc40c001e

08001464 <TMC5160_Rotate_To>:
	}
}


void TMC5160_Rotate_To(uint32_t Position, RampConfig *Ramp)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	uint32_t Target_Angle = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
	uint32_t AMS_Angle = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
	uint32_t ENC_Angle = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
	uint32_t TMC_Angle = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]

	TMC5160_SPIWrite(0x11, 	0x0000000A, 1); 	// writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 800147e:	2201      	movs	r2, #1
 8001480:	210a      	movs	r1, #10
 8001482:	2011      	movs	r0, #17
 8001484:	f000 f8f2 	bl	800166c <TMC5160_SPIWrite>
	//TMC5160_SPIWrite(0x00, 	0x00000008, 1); 	// writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
	TMC5160_SPIWrite(0x13, 	0x000001F4, 1); 	// writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 8001488:	23fa      	movs	r3, #250	; 0xfa
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2201      	movs	r2, #1
 800148e:	0019      	movs	r1, r3
 8001490:	2013      	movs	r0, #19
 8001492:	f000 f8eb 	bl	800166c <TMC5160_SPIWrite>

	// setup for profile
	TMC5160_SPIWrite(0x23, Ramp->VSTART, 1); 	// = 1000 = 0.0 to address 15 = 0x23(VSTART)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2201      	movs	r2, #1
 800149c:	0019      	movs	r1, r3
 800149e:	2023      	movs	r0, #35	; 0x23
 80014a0:	f000 f8e4 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x24, Ramp->A1, 1); 		// = 5600 = 0.0 to address 16 = 0x24(A1)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	0019      	movs	r1, r3
 80014ac:	2024      	movs	r0, #36	; 0x24
 80014ae:	f000 f8dd 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x25, Ramp->V1, 1); 		// = 12800 = 0.0 to address 17 = 0x25(V1)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2201      	movs	r2, #1
 80014b8:	0019      	movs	r1, r3
 80014ba:	2025      	movs	r0, #37	; 0x25
 80014bc:	f000 f8d6 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x26, Ramp->AMAX, 1); 		// = 12800 = 0.0 to address 18 = 0x26(AMAX)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2201      	movs	r2, #1
 80014c6:	0019      	movs	r1, r3
 80014c8:	2026      	movs	r0, #38	; 0x26
 80014ca:	f000 f8cf 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x27, Ramp->VMAX, 1); 		// = 51200 = 0.0 to address 19 = 0x27(VMAX)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	2201      	movs	r2, #1
 80014d4:	0019      	movs	r1, r3
 80014d6:	2027      	movs	r0, #39	; 0x27
 80014d8:	f000 f8c8 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x28, Ramp->DMAX, 1); 		// = 700 = 0.0 to address 20 = 0x28(DMAX)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	2201      	movs	r2, #1
 80014e2:	0019      	movs	r1, r3
 80014e4:	2028      	movs	r0, #40	; 0x28
 80014e6:	f000 f8c1 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2A, Ramp->D1, 1); 		// = 1400 = 0.0 to address 21 = 0x2A(D1)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2201      	movs	r2, #1
 80014f0:	0019      	movs	r1, r3
 80014f2:	202a      	movs	r0, #42	; 0x2a
 80014f4:	f000 f8ba 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2B, Ramp->VSTOP, 1); 	// = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	2201      	movs	r2, #1
 80014fe:	0019      	movs	r1, r3
 8001500:	202b      	movs	r0, #43	; 0x2b
 8001502:	f000 f8b3 	bl	800166c <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x20, 	0x00000000, 1); 	// writing value 0x00000000 = 0 = 0.0 to address 13 = 0x20(RAMPMODE) MTP
 8001506:	2201      	movs	r2, #1
 8001508:	2100      	movs	r1, #0
 800150a:	2020      	movs	r0, #32
 800150c:	f000 f8ae 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2D, Position, 1); 		// writing value to address 24 = 0x2D(XTARGET)  1 lap
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	0019      	movs	r1, r3
 8001516:	202d      	movs	r0, #45	; 0x2d
 8001518:	f000 f8a8 	bl	800166c <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x21,	0x00000000, 0);		// READ position register
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2021      	movs	r0, #33	; 0x21
 8001522:	f000 f8a3 	bl	800166c <TMC5160_SPIWrite>

	/*Convert to Angle so we can compare to Hall Sensor*/

	if((int)Position < 0)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da02      	bge.n	8001532 <TMC5160_Rotate_To+0xce>
	{
		Position = Position * (-1); 			// make positive for easier math
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	425b      	negs	r3, r3
 8001530:	607b      	str	r3, [r7, #4]
	}

	if(Position == 0) 							// to fix the first reading when target position = 0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <TMC5160_Rotate_To+0xe0>
	{
		AMS_Angle = 1;
 8001538:	2301      	movs	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
		ENC_Angle = 1;
 800153c:	2301      	movs	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
		TMC_Angle = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
	}

    Target_Angle = ((Position / 256) * 1.8);	//convert target position to angle
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff fcff 	bl	8000f4c <__aeabi_ui2d>
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <TMC5160_Rotate_To+0x140>)
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <TMC5160_Rotate_To+0x144>)
 8001552:	f7fe fe81 	bl	8000258 <__aeabi_dmul>
 8001556:	0002      	movs	r2, r0
 8001558:	000b      	movs	r3, r1
 800155a:	0010      	movs	r0, r2
 800155c:	0019      	movs	r1, r3
 800155e:	f7fe fe5d 	bl	800021c <__aeabi_d2uiz>
 8001562:	0003      	movs	r3, r0
 8001564:	613b      	str	r3, [r7, #16]

	// enter loop to check if position is reached
	while(TMC_Angle != Target_Angle) //&& AMS_Angle != Target_Angle && ENC_Angle != Target_Angle
 8001566:	e013      	b.n	8001590 <TMC5160_Rotate_To+0x12c>
	{
		TMC_Angle = TMC_Get_Position();
 8001568:	f000 f824 	bl	80015b4 <TMC_Get_Position>
 800156c:	0003      	movs	r3, r0
 800156e:	617b      	str	r3, [r7, #20]

		if(AMS_ENB == 1)// Hall sensor is enabled
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <TMC5160_Rotate_To+0x148>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d103      	bne.n	8001580 <TMC5160_Rotate_To+0x11c>
		{
			AMS_Angle = AMS5055_Get_Position();
 8001578:	f000 f8f2 	bl	8001760 <AMS5055_Get_Position>
 800157c:	0003      	movs	r3, r0
 800157e:	60fb      	str	r3, [r7, #12]
		}

		if(ENC_ENB == 1)// Encoder is enabled
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <TMC5160_Rotate_To+0x14c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d103      	bne.n	8001590 <TMC5160_Rotate_To+0x12c>
		{
			ENC_Angle = ENC_Get_Position();
 8001588:	f000 f9ea 	bl	8001960 <ENC_Get_Position>
 800158c:	0003      	movs	r3, r0
 800158e:	60bb      	str	r3, [r7, #8]
	while(TMC_Angle != Target_Angle) //&& AMS_Angle != Target_Angle && ENC_Angle != Target_Angle
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d1e7      	bne.n	8001568 <TMC5160_Rotate_To+0x104>
		}
	}
 }
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b006      	add	sp, #24
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	cccccccd 	.word	0xcccccccd
 80015a8:	3ffccccc 	.word	0x3ffccccc
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20002198 	.word	0x20002198

080015b4 <TMC_Get_Position>:

uint16_t TMC_Get_Position()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	uint32_t AngleT = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]

	AngleT = TMC5160_SPIWrite(0x21, 0x00000000, 0); //read step counter from TMC5160
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2021      	movs	r0, #33	; 0x21
 80015c4:	f000 f852 	bl	800166c <TMC5160_SPIWrite>
 80015c8:	0003      	movs	r3, r0
 80015ca:	607b      	str	r3, [r7, #4]


	if((int)AngleT < 0)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da02      	bge.n	80015d8 <TMC_Get_Position+0x24>
	{
		AngleT = AngleT * (-1); // make positive for easier math
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	425b      	negs	r3, r3
 80015d6:	607b      	str	r3, [r7, #4]
	}

	AngleT = ((AngleT / 256)* 1.8);//convert target position to angle
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff fcb5 	bl	8000f4c <__aeabi_ui2d>
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <TMC_Get_Position+0x54>)
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <TMC_Get_Position+0x58>)
 80015e6:	f7fe fe37 	bl	8000258 <__aeabi_dmul>
 80015ea:	0002      	movs	r2, r0
 80015ec:	000b      	movs	r3, r1
 80015ee:	0010      	movs	r0, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	f7fe fe13 	bl	800021c <__aeabi_d2uiz>
 80015f6:	0003      	movs	r3, r0
 80015f8:	607b      	str	r3, [r7, #4]

	return AngleT;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	b29b      	uxth	r3, r3
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	cccccccd 	.word	0xcccccccd
 800160c:	3ffccccc 	.word	0x3ffccccc

08001610 <TMC5160_Stop>:

void TMC5160_Stop(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	TMC5160_SPIWrite(0x27,0x00000000, 1); //set VMAX to 0
 8001614:	2201      	movs	r2, #1
 8001616:	2100      	movs	r1, #0
 8001618:	2027      	movs	r0, #39	; 0x27
 800161a:	f000 f827 	bl	800166c <TMC5160_SPIWrite>
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <Drive_Enable>:

void Drive_Enable(int state)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	if(state == 1) // Enable driver
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d10a      	bne.n	8001648 <Drive_Enable+0x24>
	{
		HAL_GPIO_WritePin(GPIOA, DRV_ENN_Pin, 0); // LOW = ON
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	0059      	lsls	r1, r3, #1
 8001636:	2390      	movs	r3, #144	; 0x90
 8001638:	05db      	lsls	r3, r3, #23
 800163a:	2200      	movs	r2, #0
 800163c:	0018      	movs	r0, r3
 800163e:	f002 f92f 	bl	80038a0 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001642:	200a      	movs	r0, #10
 8001644:	f000 fed4 	bl	80023f0 <HAL_Delay>
	}

	if(state == 0) // disable drive
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10a      	bne.n	8001664 <Drive_Enable+0x40>
	{
		HAL_GPIO_WritePin(GPIOA, DRV_ENN_Pin, 1); // HIGH = OFF
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	0059      	lsls	r1, r3, #1
 8001652:	2390      	movs	r3, #144	; 0x90
 8001654:	05db      	lsls	r3, r3, #23
 8001656:	2201      	movs	r2, #1
 8001658:	0018      	movs	r0, r3
 800165a:	f002 f921 	bl	80038a0 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800165e:	200a      	movs	r0, #10
 8001660:	f000 fec6 	bl	80023f0 <HAL_Delay>
	}
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}

0800166c <TMC5160_SPIWrite>:


uint32_t TMC5160_SPIWrite(uint8_t Address, uint32_t Value, int Action)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b08d      	sub	sp, #52	; 0x34
 8001670:	af02      	add	r7, sp, #8
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	240f      	movs	r4, #15
 8001678:	193b      	adds	r3, r7, r4
 800167a:	1c02      	adds	r2, r0, #0
 800167c:	701a      	strb	r2, [r3, #0]

	uint8_t SPI2TxData[5];  //TX data array SPI2
	uint8_t SPI2RxData[5];  //RX data array SPI2
	uint32_t SPI2Rx = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,0); // set TMC CS low
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	015b      	lsls	r3, r3, #5
 8001686:	482d      	ldr	r0, [pc, #180]	; (800173c <TMC5160_SPIWrite+0xd0>)
 8001688:	2200      	movs	r2, #0
 800168a:	0019      	movs	r1, r3
 800168c:	f002 f908 	bl	80038a0 <HAL_GPIO_WritePin>

	  if (Action == 1) //Write
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d107      	bne.n	80016a6 <TMC5160_SPIWrite+0x3a>
	  {
		SPI2TxData[0] = Address + 0x80;
 8001696:	193b      	adds	r3, r7, r4
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	3b80      	subs	r3, #128	; 0x80
 800169c:	b2da      	uxtb	r2, r3
 800169e:	231c      	movs	r3, #28
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e005      	b.n	80016b2 <TMC5160_SPIWrite+0x46>
	  }

	  else //Read
	  {
		SPI2TxData[0] = Address;
 80016a6:	231c      	movs	r3, #28
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	220f      	movs	r2, #15
 80016ac:	18ba      	adds	r2, r7, r2
 80016ae:	7812      	ldrb	r2, [r2, #0]
 80016b0:	701a      	strb	r2, [r3, #0]
	  }

	  SPI2TxData[1] = Value >> 24;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	0e1b      	lsrs	r3, r3, #24
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	211c      	movs	r1, #28
 80016ba:	187b      	adds	r3, r7, r1
 80016bc:	705a      	strb	r2, [r3, #1]
	  SPI2TxData[2] = Value >> 16;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	709a      	strb	r2, [r3, #2]
	  SPI2TxData[3] = Value >> 8;
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	70da      	strb	r2, [r3, #3]
	  SPI2TxData[4] = Value;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	711a      	strb	r2, [r3, #4]

	  HAL_SPI_TransmitReceive(&hspi2, SPI2TxData, SPI2RxData, 0x05, 100);
 80016da:	2414      	movs	r4, #20
 80016dc:	193a      	adds	r2, r7, r4
 80016de:	1879      	adds	r1, r7, r1
 80016e0:	4817      	ldr	r0, [pc, #92]	; (8001740 <TMC5160_SPIWrite+0xd4>)
 80016e2:	2364      	movs	r3, #100	; 0x64
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2305      	movs	r3, #5
 80016e8:	f002 feae 	bl	8004448 <HAL_SPI_TransmitReceive>


	  SPI2Rx += (SPI2RxData[1] << 24);
 80016ec:	0021      	movs	r1, r4
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	785b      	ldrb	r3, [r3, #1]
 80016f2:	061b      	lsls	r3, r3, #24
 80016f4:	001a      	movs	r2, r3
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	189b      	adds	r3, r3, r2
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[2] << 16);
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	789b      	ldrb	r3, [r3, #2]
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	001a      	movs	r2, r3
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	189b      	adds	r3, r3, r2
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[3] << 8);
 800170a:	187b      	adds	r3, r7, r1
 800170c:	78db      	ldrb	r3, [r3, #3]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	001a      	movs	r2, r3
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	189b      	adds	r3, r3, r2
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[4] << 0);
 8001718:	187b      	adds	r3, r7, r1
 800171a:	791b      	ldrb	r3, [r3, #4]
 800171c:	001a      	movs	r2, r3
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	189b      	adds	r3, r3, r2
 8001722:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,1); // set TMC CS high
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	015b      	lsls	r3, r3, #5
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <TMC5160_SPIWrite+0xd0>)
 800172a:	2201      	movs	r2, #1
 800172c:	0019      	movs	r1, r3
 800172e:	f002 f8b7 	bl	80038a0 <HAL_GPIO_WritePin>

	  return SPI2Rx;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001734:	0018      	movs	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	b00b      	add	sp, #44	; 0x2c
 800173a:	bd90      	pop	{r4, r7, pc}
 800173c:	48000400 	.word	0x48000400
 8001740:	2000210c 	.word	0x2000210c

08001744 <AMS5055_Basic_Init>:

void AMS5055_Basic_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	//start new angle measuremnt
	AMSoffset = AMS5055_Get_Position();  // Angle read when standstill is offset
 8001748:	f000 f80a 	bl	8001760 <AMS5055_Get_Position>
 800174c:	0003      	movs	r3, r0
 800174e:	001a      	movs	r2, r3
 8001750:	4b02      	ldr	r3, [pc, #8]	; (800175c <AMS5055_Basic_Init+0x18>)
 8001752:	801a      	strh	r2, [r3, #0]

}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	2000002c 	.word	0x2000002c

08001760 <AMS5055_Get_Position>:

uint16_t AMS5055_Get_Position(void)
{
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
	uint16_t Angle = 0;
 8001766:	230e      	movs	r3, #14
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	2200      	movs	r2, #0
 800176c:	801a      	strh	r2, [r3, #0]
	int AlarmLo = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
	int AlarmHi = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]

	AMS5055_SPIWriteInt(ANGULAR_DATA,1);
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <AMS5055_Get_Position+0xa8>)
 8001778:	2101      	movs	r1, #1
 800177a:	0018      	movs	r0, r3
 800177c:	f000 f882 	bl	8001884 <AMS5055_SPIWriteInt>

	while(AMS_Ready != 1) //wacht op INT
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <AMS5055_Get_Position+0xac>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d1fb      	bne.n	8001782 <AMS5055_Get_Position+0x22>
	{
	}

	Angle = AMS5055_SPIWriteInt(NOP,1);
 800178a:	250e      	movs	r5, #14
 800178c:	197c      	adds	r4, r7, r5
 800178e:	2101      	movs	r1, #1
 8001790:	2000      	movs	r0, #0
 8001792:	f000 f877 	bl	8001884 <AMS5055_SPIWriteInt>
 8001796:	0003      	movs	r3, r0
 8001798:	8023      	strh	r3, [r4, #0]

	AlarmHi = (Angle >> 12) & 0x01; // AlamHi = b14
 800179a:	0029      	movs	r1, r5
 800179c:	187b      	adds	r3, r7, r1
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	0b1b      	lsrs	r3, r3, #12
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	001a      	movs	r2, r3
 80017a6:	2301      	movs	r3, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	607b      	str	r3, [r7, #4]
	AlarmLo = (Angle >> 13) & 0x01; // AlarmLo = b15
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	0b5b      	lsrs	r3, r3, #13
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	001a      	movs	r2, r3
 80017b6:	2301      	movs	r3, #1
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
	if(Angle > 4096)
	{
		Angle = Angle - 4096;
	}*/

	Angle &= 0x0FFF;
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	187a      	adds	r2, r7, r1
 80017c0:	8812      	ldrh	r2, [r2, #0]
 80017c2:	0512      	lsls	r2, r2, #20
 80017c4:	0d12      	lsrs	r2, r2, #20
 80017c6:	801a      	strh	r2, [r3, #0]
	{
		Angle = Angle + 360;
	}*/


	Angles[Ax] = Angle;  //uncomment to enable logging of Angle position
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <AMS5055_Get_Position+0xb0>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <AMS5055_Get_Position+0xb4>)
 80017ce:	0052      	lsls	r2, r2, #1
 80017d0:	1879      	adds	r1, r7, r1
 80017d2:	8809      	ldrh	r1, [r1, #0]
 80017d4:	52d1      	strh	r1, [r2, r3]

	if (Ax >= 4100) // to prevent overflow
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <AMS5055_Get_Position+0xb0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <AMS5055_Get_Position+0xb8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	dd03      	ble.n	80017e8 <AMS5055_Get_Position+0x88>
	{
		Ax = 0;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <AMS5055_Get_Position+0xb0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	e007      	b.n	80017f8 <AMS5055_Get_Position+0x98>
	}

	else
	{
		Ax++;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <AMS5055_Get_Position+0xb0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <AMS5055_Get_Position+0xb0>)
 80017f0:	601a      	str	r2, [r3, #0]
		AMS_Ready = 0;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <AMS5055_Get_Position+0xac>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
	}

	return Angle;
 80017f8:	230e      	movs	r3, #14
 80017fa:	18fb      	adds	r3, r7, r3
 80017fc:	881b      	ldrh	r3, [r3, #0]
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b004      	add	sp, #16
 8001804:	bdb0      	pop	{r4, r5, r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	00003fff 	.word	0x00003fff
 800180c:	2000203c 	.word	0x2000203c
 8001810:	20002038 	.word	0x20002038
 8001814:	20000030 	.word	0x20000030
 8001818:	00001003 	.word	0x00001003

0800181c <AMSParity>:

uint8_t AMSParity(uint16_t value)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	0002      	movs	r2, r0
 8001824:	1dbb      	adds	r3, r7, #6
 8001826:	801a      	strh	r2, [r3, #0]
	uint8_t cnt = 0;
 8001828:	230f      	movs	r3, #15
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8001830:	230e      	movs	r3, #14
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
 8001838:	e015      	b.n	8001866 <AMSParity+0x4a>
	{
		if (value & 0x1)
 800183a:	1dbb      	adds	r3, r7, #6
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	2201      	movs	r2, #1
 8001840:	4013      	ands	r3, r2
 8001842:	d005      	beq.n	8001850 <AMSParity+0x34>
		{
			cnt++;
 8001844:	210f      	movs	r1, #15
 8001846:	187b      	adds	r3, r7, r1
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	187b      	adds	r3, r7, r1
 800184c:	3201      	adds	r2, #1
 800184e:	701a      	strb	r2, [r3, #0]
		}

		value >>= 1;
 8001850:	1dbb      	adds	r3, r7, #6
 8001852:	1dba      	adds	r2, r7, #6
 8001854:	8812      	ldrh	r2, [r2, #0]
 8001856:	0852      	lsrs	r2, r2, #1
 8001858:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 16; i++)
 800185a:	210e      	movs	r1, #14
 800185c:	187b      	adds	r3, r7, r1
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	187b      	adds	r3, r7, r1
 8001862:	3201      	adds	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	230e      	movs	r3, #14
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d9e4      	bls.n	800183a <AMSParity+0x1e>
	}
	return cnt & 0x1;
 8001870:	230f      	movs	r3, #15
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2201      	movs	r2, #1
 8001878:	4013      	ands	r3, r2
 800187a:	b2db      	uxtb	r3, r3
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b004      	add	sp, #16
 8001882:	bd80      	pop	{r7, pc}

08001884 <AMS5055_SPIWriteInt>:

uint16_t AMS5055_SPIWriteInt(uint16_t Address, int Action)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af02      	add	r7, sp, #8
 800188a:	0002      	movs	r2, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	1dbb      	adds	r3, r7, #6
 8001890:	801a      	strh	r2, [r3, #0]
	*/

	uint8_t SPI1TxData[2];	//TX data array SPI1
	uint8_t SPI1RxData[2];	//RX data array SPI1

	uint16_t SPI1Rx = 0;
 8001892:	2314      	movs	r3, #20
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	2200      	movs	r2, #0
 8001898:	801a      	strh	r2, [r3, #0]
	uint16_t SPI1Tx = 0;
 800189a:	2416      	movs	r4, #22
 800189c:	193b      	adds	r3, r7, r4
 800189e:	2200      	movs	r2, #0
 80018a0:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low
 80018a2:	2390      	movs	r3, #144	; 0x90
 80018a4:	05db      	lsls	r3, r3, #23
 80018a6:	2200      	movs	r2, #0
 80018a8:	2110      	movs	r1, #16
 80018aa:	0018      	movs	r0, r3
 80018ac:	f001 fff8 	bl	80038a0 <HAL_GPIO_WritePin>


	  SPI1Tx = (Address << 1);
 80018b0:	0021      	movs	r1, r4
 80018b2:	187a      	adds	r2, r7, r1
 80018b4:	1dbb      	adds	r3, r7, #6
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	18db      	adds	r3, r3, r3
 80018ba:	8013      	strh	r3, [r2, #0]

	  if (Action == 1) //READ
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <AMS5055_SPIWriteInt+0x4a>
	  {
		  SPI1Tx = SPI1Tx | 0x8000;
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	187a      	adds	r2, r7, r1
 80018c6:	8812      	ldrh	r2, [r2, #0]
 80018c8:	4923      	ldr	r1, [pc, #140]	; (8001958 <AMS5055_SPIWriteInt+0xd4>)
 80018ca:	430a      	orrs	r2, r1
 80018cc:	801a      	strh	r2, [r3, #0]
	  }

	  SPI1Tx = SPI1Tx | AMSParity(SPI1Tx);
 80018ce:	2416      	movs	r4, #22
 80018d0:	193b      	adds	r3, r7, r4
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff ffa1 	bl	800181c <AMSParity>
 80018da:	0003      	movs	r3, r0
 80018dc:	b299      	uxth	r1, r3
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	193a      	adds	r2, r7, r4
 80018e2:	8812      	ldrh	r2, [r2, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	801a      	strh	r2, [r3, #0]

	 // HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low

	  SPI1TxData[0] = SPI1Tx >> 8;
 80018e8:	0021      	movs	r1, r4
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	0a1b      	lsrs	r3, r3, #8
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	2010      	movs	r0, #16
 80018f6:	183b      	adds	r3, r7, r0
 80018f8:	701a      	strb	r2, [r3, #0]
	  SPI1TxData[1] = SPI1Tx;
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	183b      	adds	r3, r7, r0
 8001902:	705a      	strb	r2, [r3, #1]

	  HAL_SPI_TransmitReceive(&hspi1, SPI1TxData, SPI1RxData, 0x02, 100);
 8001904:	240c      	movs	r4, #12
 8001906:	193a      	adds	r2, r7, r4
 8001908:	1839      	adds	r1, r7, r0
 800190a:	4814      	ldr	r0, [pc, #80]	; (800195c <AMS5055_SPIWriteInt+0xd8>)
 800190c:	2364      	movs	r3, #100	; 0x64
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2302      	movs	r3, #2
 8001912:	f002 fd99 	bl	8004448 <HAL_SPI_TransmitReceive>
	//HAL_SPI_TransmitReceive(&hspi1, SPI1Tx, SPI1Rx, 0x02, 100);

	  //HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high

	  SPI1Rx += (SPI1RxData[0] << 8);	//<< 8
 8001916:	193b      	adds	r3, r7, r4
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b299      	uxth	r1, r3
 8001920:	2014      	movs	r0, #20
 8001922:	183b      	adds	r3, r7, r0
 8001924:	183a      	adds	r2, r7, r0
 8001926:	8812      	ldrh	r2, [r2, #0]
 8001928:	188a      	adds	r2, r1, r2
 800192a:	801a      	strh	r2, [r3, #0]
	  SPI1Rx += (SPI1RxData[1] << 0);	//<< 0
 800192c:	193b      	adds	r3, r7, r4
 800192e:	785b      	ldrb	r3, [r3, #1]
 8001930:	b299      	uxth	r1, r3
 8001932:	183b      	adds	r3, r7, r0
 8001934:	0004      	movs	r4, r0
 8001936:	183a      	adds	r2, r7, r0
 8001938:	8812      	ldrh	r2, [r2, #0]
 800193a:	188a      	adds	r2, r1, r2
 800193c:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high
 800193e:	2390      	movs	r3, #144	; 0x90
 8001940:	05db      	lsls	r3, r3, #23
 8001942:	2201      	movs	r2, #1
 8001944:	2110      	movs	r1, #16
 8001946:	0018      	movs	r0, r3
 8001948:	f001 ffaa 	bl	80038a0 <HAL_GPIO_WritePin>

	  return SPI1Rx;
 800194c:	193b      	adds	r3, r7, r4
 800194e:	881b      	ldrh	r3, [r3, #0]
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b007      	add	sp, #28
 8001956:	bd90      	pop	{r4, r7, pc}
 8001958:	ffff8000 	.word	0xffff8000
 800195c:	200020a8 	.word	0x200020a8

08001960 <ENC_Get_Position>:

uint16_t ENC_Get_Position(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
	uint32_t Enc_Position = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2039      	movs	r0, #57	; 0x39
 800196c:	f7ff fe7e 	bl	800166c <TMC5160_SPIWrite>
 8001970:	0003      	movs	r3, r0
 8001972:	607b      	str	r3, [r7, #4]

	if((int)Enc_Position <= 0)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	dc02      	bgt.n	8001980 <ENC_Get_Position+0x20>
	{
		Enc_Position = Enc_Position * (-1);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	425b      	negs	r3, r3
 800197e:	607b      	str	r3, [r7, #4]
	}

	Enc_Position = ((Enc_Position / 256)* 1.8);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	0018      	movs	r0, r3
 8001986:	f7ff fae1 	bl	8000f4c <__aeabi_ui2d>
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <ENC_Get_Position+0x50>)
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <ENC_Get_Position+0x54>)
 800198e:	f7fe fc63 	bl	8000258 <__aeabi_dmul>
 8001992:	0002      	movs	r2, r0
 8001994:	000b      	movs	r3, r1
 8001996:	0010      	movs	r0, r2
 8001998:	0019      	movs	r1, r3
 800199a:	f7fe fc3f 	bl	800021c <__aeabi_d2uiz>
 800199e:	0003      	movs	r3, r0
 80019a0:	607b      	str	r3, [r7, #4]

	return Enc_Position;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	b29b      	uxth	r3, r3
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	cccccccd 	.word	0xcccccccd
 80019b4:	3ffccccc 	.word	0x3ffccccc

080019b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
int Datacheck;			//temp value for checking incomming CAN Data


/*  CAN RECEIVE INTERRUPT */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CANRxHeader, CANRxData);
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	2100      	movs	r1, #0
 80019c8:	f001 f9ba 	bl	8002d40 <HAL_CAN_GetRxMessage>

	if (CANRxData[0] == 0x01)
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d102      	bne.n	80019da <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Datacheck = 1;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
	}
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b002      	add	sp, #8
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	200021b8 	.word	0x200021b8
 80019e8:	2000219c 	.word	0x2000219c
 80019ec:	200021c0 	.word	0x200021c0

080019f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	0002      	movs	r2, r0
 80019f8:	1dbb      	adds	r3, r7, #6
 80019fa:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == AMS_INT_Pin && AMS_Ready == 0)
 80019fc:	1dbb      	adds	r3, r7, #6
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <HAL_GPIO_EXTI_Callback+0x22>
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <HAL_GPIO_EXTI_Callback+0x22>
	{
		AMS_Ready = 1;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
	}
}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	2000203c 	.word	0x2000203c

08001a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	4c4c      	ldr	r4, [pc, #304]	; (8001b54 <main+0x134>)
 8001a24:	44a5      	add	sp, r4
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a28:	f000 fc7e 	bl	8002328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2c:	f000 f8a2 	bl	8001b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a30:	f000 fa22 	bl	8001e78 <MX_GPIO_Init>
  MX_ADC_Init();
 8001a34:	f000 f8e2 	bl	8001bfc <MX_ADC_Init>
  MX_CAN_Init();
 8001a38:	f000 f93c 	bl	8001cb4 <MX_CAN_Init>
  MX_SPI1_Init();
 8001a3c:	f000 f9a0 	bl	8001d80 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001a40:	f000 f9dc 	bl	8001dfc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  TMC5160_Stop();
 8001a44:	f7ff fde4 	bl	8001610 <TMC5160_Stop>
  HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,1); // LOW = ON
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	0059      	lsls	r1, r3, #1
 8001a4c:	2390      	movs	r3, #144	; 0x90
 8001a4e:	05db      	lsls	r3, r3, #23
 8001a50:	2201      	movs	r2, #1
 8001a52:	0018      	movs	r0, r3
 8001a54:	f001 ff24 	bl	80038a0 <HAL_GPIO_WritePin>
  HAL_Delay(2500);	//startup delay, so motor does not spin on debug
 8001a58:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <main+0x138>)
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 fcc8 	bl	80023f0 <HAL_Delay>

  Ramp1.VSTART 	= 10;
 8001a60:	4b3e      	ldr	r3, [pc, #248]	; (8001b5c <main+0x13c>)
 8001a62:	220a      	movs	r2, #10
 8001a64:	601a      	str	r2, [r3, #0]
  Ramp1.A1 		= 1000;
 8001a66:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <main+0x13c>)
 8001a68:	22fa      	movs	r2, #250	; 0xfa
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	605a      	str	r2, [r3, #4]
  Ramp1.V1 		= 10000;
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <main+0x13c>)
 8001a70:	4a3b      	ldr	r2, [pc, #236]	; (8001b60 <main+0x140>)
 8001a72:	609a      	str	r2, [r3, #8]
  Ramp1.AMAX 	= 12800;
 8001a74:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <main+0x13c>)
 8001a76:	22c8      	movs	r2, #200	; 0xc8
 8001a78:	0192      	lsls	r2, r2, #6
 8001a7a:	60da      	str	r2, [r3, #12]
  Ramp1.VMAX 	= 51200;
 8001a7c:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <main+0x13c>)
 8001a7e:	22c8      	movs	r2, #200	; 0xc8
 8001a80:	0212      	lsls	r2, r2, #8
 8001a82:	611a      	str	r2, [r3, #16]
  Ramp1.DMAX 	= 700;
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <main+0x13c>)
 8001a86:	22af      	movs	r2, #175	; 0xaf
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	615a      	str	r2, [r3, #20]
  Ramp1.D1 		= 1400;
 8001a8c:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <main+0x13c>)
 8001a8e:	22af      	movs	r2, #175	; 0xaf
 8001a90:	00d2      	lsls	r2, r2, #3
 8001a92:	619a      	str	r2, [r3, #24]
  Ramp1.VSTOP 	= 10;
 8001a94:	4b31      	ldr	r3, [pc, #196]	; (8001b5c <main+0x13c>)
 8001a96:	220a      	movs	r2, #10
 8001a98:	61da      	str	r2, [r3, #28]

  CurrentSetting1.IHOLD = 3;
 8001a9a:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <main+0x144>)
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	605a      	str	r2, [r3, #4]
  CurrentSetting1.IRUN 	= 1;
 8001aa0:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <main+0x144>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

  int h = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	4a2f      	ldr	r2, [pc, #188]	; (8001b68 <main+0x148>)
 8001aaa:	18ba      	adds	r2, r7, r2
 8001aac:	6013      	str	r3, [r2, #0]
  uint32_t Enc_Position[500];
  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set AM CS low
 8001aae:	2390      	movs	r3, #144	; 0x90
 8001ab0:	05db      	lsls	r3, r3, #23
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2110      	movs	r1, #16
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f001 fef2 	bl	80038a0 <HAL_GPIO_WritePin>

  Drive_Enable(0); // enable driver
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff fdb1 	bl	8001624 <Drive_Enable>
  TMC5160_Stop();
 8001ac2:	f7ff fda5 	bl	8001610 <TMC5160_Stop>

  TMC5160_SPIWrite(0x21, 0x00000000, 1);// writing value to address 24 = 0x2D(XTARGET)  1 lap
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2021      	movs	r0, #33	; 0x21
 8001acc:	f7ff fdce 	bl	800166c <TMC5160_SPIWrite>
  TMC5160_Rotate_To(0, &Ramp1);
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <main+0x13c>)
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff fcc5 	bl	8001464 <TMC5160_Rotate_To>
  HAL_Delay(1500);
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <main+0x14c>)
 8001adc:	0018      	movs	r0, r3
 8001ade:	f000 fc87 	bl	80023f0 <HAL_Delay>


  /* Perform Basic Init of TMC5160 and AMS5055 */
  TMC5160_Basic_Init(&CurrentSetting1);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <main+0x144>)
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff fbbf 	bl	8001268 <TMC5160_Basic_Init>
  AMS5055_Basic_Init();
 8001aea:	f7ff fe2b 	bl	8001744 <AMS5055_Basic_Init>

  Drive_Enable(1); // enable driver
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fd98 	bl	8001624 <Drive_Enable>

  TMC5160_Rotate_To(51200, &Ramp1); // move to Position X
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <main+0x13c>)
 8001af6:	23c8      	movs	r3, #200	; 0xc8
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	0011      	movs	r1, r2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff fcb1 	bl	8001464 <TMC5160_Rotate_To>
  //TMC5160_Rotate_To(0, &Ramp1); // move to Position X

  TMC5160_Stop();
 8001b02:	f7ff fd85 	bl	8001610 <TMC5160_Stop>
  Drive_Enable(0);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff fd8c 	bl	8001624 <Drive_Enable>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  Enc_Position[h] = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2039      	movs	r0, #57	; 0x39
 8001b12:	f7ff fdab 	bl	800166c <TMC5160_SPIWrite>
 8001b16:	0001      	movs	r1, r0
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <main+0x150>)
 8001b1a:	22fb      	movs	r2, #251	; 0xfb
 8001b1c:	00d2      	lsls	r2, r2, #3
 8001b1e:	189b      	adds	r3, r3, r2
 8001b20:	19db      	adds	r3, r3, r7
 8001b22:	4c11      	ldr	r4, [pc, #68]	; (8001b68 <main+0x148>)
 8001b24:	193a      	adds	r2, r7, r4
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	50d1      	str	r1, [r2, r3]
	  HAL_Delay(5);
 8001b2c:	2005      	movs	r0, #5
 8001b2e:	f000 fc5f 	bl	80023f0 <HAL_Delay>
	  h++;
 8001b32:	0021      	movs	r1, r4
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	187a      	adds	r2, r7, r1
 8001b3c:	6013      	str	r3, [r2, #0]

	  if(h == 500)
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	23fa      	movs	r3, #250	; 0xfa
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d1e0      	bne.n	8001b0c <main+0xec>
	  {
			h = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	187a      	adds	r2, r7, r1
 8001b4e:	6013      	str	r3, [r2, #0]
	  Enc_Position[h] = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 8001b50:	e7dc      	b.n	8001b0c <main+0xec>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	fffff824 	.word	0xfffff824
 8001b58:	000009c4 	.word	0x000009c4
 8001b5c:	20002170 	.word	0x20002170
 8001b60:	00002710 	.word	0x00002710
 8001b64:	20002190 	.word	0x20002190
 8001b68:	000007d4 	.word	0x000007d4
 8001b6c:	000005dc 	.word	0x000005dc
 8001b70:	fffff82c 	.word	0xfffff82c

08001b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b093      	sub	sp, #76	; 0x4c
 8001b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7a:	2414      	movs	r4, #20
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	0018      	movs	r0, r3
 8001b80:	2334      	movs	r3, #52	; 0x34
 8001b82:	001a      	movs	r2, r3
 8001b84:	2100      	movs	r1, #0
 8001b86:	f002 ffa7 	bl	8004ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	2310      	movs	r3, #16
 8001b90:	001a      	movs	r2, r3
 8001b92:	2100      	movs	r1, #0
 8001b94:	f002 ffa0 	bl	8004ad8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8001b98:	0021      	movs	r1, r4
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	2211      	movs	r2, #17
 8001b9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ba0:	187b      	adds	r3, r7, r1
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	2201      	movs	r2, #1
 8001baa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	2210      	movs	r2, #16
 8001bb0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f001 feaa 	bl	8003914 <HAL_RCC_OscConfig>
 8001bc0:	1e03      	subs	r3, r0, #0
 8001bc2:	d001      	beq.n	8001bc8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001bc4:	f000 fa04 	bl	8001fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2207      	movs	r2, #7
 8001bcc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2100      	movs	r1, #0
 8001be4:	0018      	movs	r0, r3
 8001be6:	f002 fa1b 	bl	8004020 <HAL_RCC_ClockConfig>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001bee:	f000 f9ef 	bl	8001fd0 <Error_Handler>
  }
}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b013      	add	sp, #76	; 0x4c
 8001bf8:	bd90      	pop	{r4, r7, pc}
	...

08001bfc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	0018      	movs	r0, r3
 8001c06:	230c      	movs	r3, #12
 8001c08:	001a      	movs	r2, r3
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	f002 ff64 	bl	8004ad8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001c10:	4b26      	ldr	r3, [pc, #152]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c12:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <MX_ADC_Init+0xb4>)
 8001c14:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c16:	4b25      	ldr	r3, [pc, #148]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001c28:	4b20      	ldr	r3, [pc, #128]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c30:	2204      	movs	r2, #4
 8001c32:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c4e:	22c2      	movs	r2, #194	; 0xc2
 8001c50:	32ff      	adds	r2, #255	; 0xff
 8001c52:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c5c:	2224      	movs	r2, #36	; 0x24
 8001c5e:	2100      	movs	r1, #0
 8001c60:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f000 fbe4 	bl	8002438 <HAL_ADC_Init>
 8001c70:	1e03      	subs	r3, r0, #0
 8001c72:	d001      	beq.n	8001c78 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001c74:	f000 f9ac 	bl	8001fd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	0152      	lsls	r2, r2, #5
 8001c84:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	0552      	lsls	r2, r2, #21
 8001c8c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c8e:	1d3a      	adds	r2, r7, #4
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_ADC_Init+0xb0>)
 8001c92:	0011      	movs	r1, r2
 8001c94:	0018      	movs	r0, r3
 8001c96:	f000 fd0f 	bl	80026b8 <HAL_ADC_ConfigChannel>
 8001c9a:	1e03      	subs	r3, r0, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001c9e:	f000 f997 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b004      	add	sp, #16
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	20002040 	.word	0x20002040
 8001cb0:	40012400 	.word	0x40012400

08001cb4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001cba:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001cbc:	4a2f      	ldr	r2, [pc, #188]	; (8001d7c <MX_CAN_Init+0xc8>)
 8001cbe:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001cd2:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	0252      	lsls	r2, r2, #9
 8001cd8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001cf2:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001d06:	0018      	movs	r0, r3
 8001d08:	f000 fde4 	bl	80028d4 <HAL_CAN_Init>
 8001d0c:	1e03      	subs	r3, r0, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001d10:	f000 f95e 	bl	8001fd0 <Error_Handler>

  /* CAN filter */

  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 8001d14:	003b      	movs	r3, r7
 8001d16:	2201      	movs	r2, #1
 8001d18:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 10;
 8001d1a:	003b      	movs	r3, r7
 8001d1c:	220a      	movs	r2, #10
 8001d1e:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d20:	003b      	movs	r3, r7
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001d26:	003b      	movs	r3, r7
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001d2c:	003b      	movs	r3, r7
 8001d2e:	2200      	movs	r2, #0
 8001d30:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001d32:	003b      	movs	r3, r7
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001d38:	003b      	movs	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d3e:	003b      	movs	r3, r7
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d44:	003b      	movs	r3, r7
 8001d46:	2201      	movs	r2, #1
 8001d48:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 0;
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8001d50:	003a      	movs	r2, r7
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001d54:	0011      	movs	r1, r2
 8001d56:	0018      	movs	r0, r3
 8001d58:	f000 feba 	bl	8002ad0 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f000 ffa8 	bl	8002cb4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <MX_CAN_Init+0xc4>)
 8001d66:	2102      	movs	r1, #2
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f001 f905 	bl	8002f78 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b00a      	add	sp, #40	; 0x28
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	20002080 	.word	0x20002080
 8001d7c:	40006400 	.word	0x40006400

08001d80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001d86:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <MX_SPI1_Init+0x78>)
 8001d88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001d8c:	2282      	movs	r2, #130	; 0x82
 8001d8e:	0052      	lsls	r2, r2, #1
 8001d90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d92:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001d9a:	22e0      	movs	r2, #224	; 0xe0
 8001d9c:	00d2      	lsls	r2, r2, #3
 8001d9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	0092      	lsls	r2, r2, #2
 8001db2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001dce:	2207      	movs	r2, #7
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001dda:	2208      	movs	r2, #8
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <MX_SPI1_Init+0x74>)
 8001de0:	0018      	movs	r0, r3
 8001de2:	f002 fa79 	bl	80042d8 <HAL_SPI_Init>
 8001de6:	1e03      	subs	r3, r0, #0
 8001de8:	d001      	beq.n	8001dee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001dea:	f000 f8f1 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	200020a8 	.word	0x200020a8
 8001df8:	40013000 	.word	0x40013000

08001dfc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e02:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <MX_SPI2_Init+0x78>)
 8001e04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e08:	2282      	movs	r2, #130	; 0x82
 8001e0a:	0052      	lsls	r2, r2, #1
 8001e0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e16:	22e0      	movs	r2, #224	; 0xe0
 8001e18:	00d2      	lsls	r2, r2, #3
 8001e1a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	0092      	lsls	r2, r2, #2
 8001e2e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e56:	2208      	movs	r2, #8
 8001e58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f002 fa3b 	bl	80042d8 <HAL_SPI_Init>
 8001e62:	1e03      	subs	r3, r0, #0
 8001e64:	d001      	beq.n	8001e6a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e66:	f000 f8b3 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000210c 	.word	0x2000210c
 8001e74:	40003800 	.word	0x40003800

08001e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7e:	240c      	movs	r4, #12
 8001e80:	193b      	adds	r3, r7, r4
 8001e82:	0018      	movs	r0, r3
 8001e84:	2314      	movs	r3, #20
 8001e86:	001a      	movs	r2, r3
 8001e88:	2100      	movs	r1, #0
 8001e8a:	f002 fe25 	bl	8004ad8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e8e:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <MX_GPIO_Init+0x14c>)
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <MX_GPIO_Init+0x14c>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	03c9      	lsls	r1, r1, #15
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	615a      	str	r2, [r3, #20]
 8001e9c:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <MX_GPIO_Init+0x14c>)
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	03db      	lsls	r3, r3, #15
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <MX_GPIO_Init+0x14c>)
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	4b45      	ldr	r3, [pc, #276]	; (8001fc4 <MX_GPIO_Init+0x14c>)
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	0289      	lsls	r1, r1, #10
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	615a      	str	r2, [r3, #20]
 8001eb8:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <MX_GPIO_Init+0x14c>)
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	029b      	lsls	r3, r3, #10
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <MX_GPIO_Init+0x14c>)
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <MX_GPIO_Init+0x14c>)
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	02c9      	lsls	r1, r1, #11
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	615a      	str	r2, [r3, #20]
 8001ed4:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <MX_GPIO_Init+0x14c>)
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	02db      	lsls	r3, r3, #11
 8001edc:	4013      	ands	r3, r2
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin, GPIO_PIN_RESET);
 8001ee2:	238a      	movs	r3, #138	; 0x8a
 8001ee4:	0059      	lsls	r1, r3, #1
 8001ee6:	2390      	movs	r3, #144	; 0x90
 8001ee8:	05db      	lsls	r3, r3, #23
 8001eea:	2200      	movs	r2, #0
 8001eec:	0018      	movs	r0, r3
 8001eee:	f001 fcd7 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin, GPIO_PIN_RESET);
 8001ef2:	4935      	ldr	r1, [pc, #212]	; (8001fc8 <MX_GPIO_Init+0x150>)
 8001ef4:	4b35      	ldr	r3, [pc, #212]	; (8001fcc <MX_GPIO_Init+0x154>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f001 fcd1 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_STB_Pin AMS_CS_Pin DRV_ENN_Pin */
  GPIO_InitStruct.Pin = CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin;
 8001efe:	193b      	adds	r3, r7, r4
 8001f00:	228a      	movs	r2, #138	; 0x8a
 8001f02:	0052      	lsls	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	2201      	movs	r2, #1
 8001f0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	193b      	adds	r3, r7, r4
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	193b      	adds	r3, r7, r4
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	193a      	adds	r2, r7, r4
 8001f1a:	2390      	movs	r3, #144	; 0x90
 8001f1c:	05db      	lsls	r3, r3, #23
 8001f1e:	0011      	movs	r1, r2
 8001f20:	0018      	movs	r0, r3
 8001f22:	f001 fb45 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_INT_Pin */
  GPIO_InitStruct.Pin = AMS_INT_Pin;
 8001f26:	0021      	movs	r1, r4
 8001f28:	187b      	adds	r3, r7, r1
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f2e:	187b      	adds	r3, r7, r1
 8001f30:	2288      	movs	r2, #136	; 0x88
 8001f32:	0352      	lsls	r2, r2, #13
 8001f34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	000c      	movs	r4, r1
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AMS_INT_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	193b      	adds	r3, r7, r4
 8001f40:	4a22      	ldr	r2, [pc, #136]	; (8001fcc <MX_GPIO_Init+0x154>)
 8001f42:	0019      	movs	r1, r3
 8001f44:	0010      	movs	r0, r2
 8001f46:	f001 fb33 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC_CS_Pin EXT_OUT_1_Pin EXT_OUT_2_Pin */
  GPIO_InitStruct.Pin = TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin;
 8001f4a:	193b      	adds	r3, r7, r4
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <MX_GPIO_Init+0x150>)
 8001f4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f50:	193b      	adds	r3, r7, r4
 8001f52:	2201      	movs	r2, #1
 8001f54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	193b      	adds	r3, r7, r4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	193b      	adds	r3, r7, r4
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f62:	193b      	adds	r3, r7, r4
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <MX_GPIO_Init+0x154>)
 8001f66:	0019      	movs	r1, r3
 8001f68:	0010      	movs	r0, r2
 8001f6a:	f001 fb21 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : REFL_UC_Pin */
  GPIO_InitStruct.Pin = REFL_UC_Pin;
 8001f6e:	193b      	adds	r3, r7, r4
 8001f70:	2240      	movs	r2, #64	; 0x40
 8001f72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f74:	193b      	adds	r3, r7, r4
 8001f76:	2200      	movs	r2, #0
 8001f78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f7a:	193b      	adds	r3, r7, r4
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REFL_UC_GPIO_Port, &GPIO_InitStruct);
 8001f80:	193b      	adds	r3, r7, r4
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <MX_GPIO_Init+0x154>)
 8001f84:	0019      	movs	r1, r3
 8001f86:	0010      	movs	r0, r2
 8001f88:	f001 fb12 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : REFR_UC_Pin */
  GPIO_InitStruct.Pin = REFR_UC_Pin;
 8001f8c:	0021      	movs	r1, r4
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	2200      	movs	r2, #0
 8001f98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REFR_UC_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <MX_GPIO_Init+0x154>)
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	0010      	movs	r0, r2
 8001fa8:	f001 fb02 	bl	80035b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2005      	movs	r0, #5
 8001fb2:	f001 facb 	bl	800354c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001fb6:	2005      	movs	r0, #5
 8001fb8:	f001 fadd 	bl	8003576 <HAL_NVIC_EnableIRQ>

}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b009      	add	sp, #36	; 0x24
 8001fc2:	bd90      	pop	{r4, r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	00001030 	.word	0x00001030
 8001fcc:	48000400 	.word	0x48000400

08001fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd4:	b672      	cpsid	i
}
 8001fd6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <Error_Handler+0x8>
	...

08001fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_MspInit+0x44>)
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <HAL_MspInit+0x44>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	430a      	orrs	r2, r1
 8001fec:	619a      	str	r2, [r3, #24]
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <HAL_MspInit+0x44>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_MspInit+0x44>)
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_MspInit+0x44>)
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	0549      	lsls	r1, r1, #21
 8002004:	430a      	orrs	r2, r1
 8002006:	61da      	str	r2, [r3, #28]
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_MspInit+0x44>)
 800200a:	69da      	ldr	r2, [r3, #28]
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	055b      	lsls	r3, r3, #21
 8002010:	4013      	ands	r3, r2
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b002      	add	sp, #8
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	40021000 	.word	0x40021000

08002024 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b08b      	sub	sp, #44	; 0x2c
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	2414      	movs	r4, #20
 800202e:	193b      	adds	r3, r7, r4
 8002030:	0018      	movs	r0, r3
 8002032:	2314      	movs	r3, #20
 8002034:	001a      	movs	r2, r3
 8002036:	2100      	movs	r1, #0
 8002038:	f002 fd4e 	bl	8004ad8 <memset>
  if(hadc->Instance==ADC1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <HAL_ADC_MspInit+0x84>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d12b      	bne.n	800209e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_ADC_MspInit+0x88>)
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <HAL_ADC_MspInit+0x88>)
 800204c:	2180      	movs	r1, #128	; 0x80
 800204e:	0089      	lsls	r1, r1, #2
 8002050:	430a      	orrs	r2, r1
 8002052:	619a      	str	r2, [r3, #24]
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_ADC_MspInit+0x88>)
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_ADC_MspInit+0x88>)
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_ADC_MspInit+0x88>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0289      	lsls	r1, r1, #10
 800206c:	430a      	orrs	r2, r1
 800206e:	615a      	str	r2, [r3, #20]
 8002070:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_ADC_MspInit+0x88>)
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	029b      	lsls	r3, r3, #10
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = AIN_MCU_Pin;
 800207e:	193b      	adds	r3, r7, r4
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002084:	193b      	adds	r3, r7, r4
 8002086:	2203      	movs	r2, #3
 8002088:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	193b      	adds	r3, r7, r4
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AIN_MCU_GPIO_Port, &GPIO_InitStruct);
 8002090:	193a      	adds	r2, r7, r4
 8002092:	2390      	movs	r3, #144	; 0x90
 8002094:	05db      	lsls	r3, r3, #23
 8002096:	0011      	movs	r1, r2
 8002098:	0018      	movs	r0, r3
 800209a:	f001 fa89 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b00b      	add	sp, #44	; 0x2c
 80020a4:	bd90      	pop	{r4, r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	40012400 	.word	0x40012400
 80020ac:	40021000 	.word	0x40021000

080020b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b08b      	sub	sp, #44	; 0x2c
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	2414      	movs	r4, #20
 80020ba:	193b      	adds	r3, r7, r4
 80020bc:	0018      	movs	r0, r3
 80020be:	2314      	movs	r3, #20
 80020c0:	001a      	movs	r2, r3
 80020c2:	2100      	movs	r1, #0
 80020c4:	f002 fd08 	bl	8004ad8 <memset>
  if(hcan->Instance==CAN)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a20      	ldr	r2, [pc, #128]	; (8002150 <HAL_CAN_MspInit+0xa0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d13a      	bne.n	8002148 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_CAN_MspInit+0xa4>)
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_CAN_MspInit+0xa4>)
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0489      	lsls	r1, r1, #18
 80020dc:	430a      	orrs	r2, r1
 80020de:	61da      	str	r2, [r3, #28]
 80020e0:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_CAN_MspInit+0xa4>)
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	049b      	lsls	r3, r3, #18
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_CAN_MspInit+0xa4>)
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_CAN_MspInit+0xa4>)
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	02c9      	lsls	r1, r1, #11
 80020f8:	430a      	orrs	r2, r1
 80020fa:	615a      	str	r2, [r3, #20]
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_CAN_MspInit+0xa4>)
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	02db      	lsls	r3, r3, #11
 8002104:	4013      	ands	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800210a:	193b      	adds	r3, r7, r4
 800210c:	22c0      	movs	r2, #192	; 0xc0
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	0021      	movs	r1, r4
 8002114:	187b      	adds	r3, r7, r1
 8002116:	2202      	movs	r2, #2
 8002118:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	187b      	adds	r3, r7, r1
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002120:	187b      	adds	r3, r7, r1
 8002122:	2203      	movs	r2, #3
 8002124:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002126:	187b      	adds	r3, r7, r1
 8002128:	2204      	movs	r2, #4
 800212a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212c:	187b      	adds	r3, r7, r1
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_CAN_MspInit+0xa8>)
 8002130:	0019      	movs	r1, r3
 8002132:	0010      	movs	r0, r2
 8002134:	f001 fa3c 	bl	80035b0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8002138:	2200      	movs	r2, #0
 800213a:	2100      	movs	r1, #0
 800213c:	201e      	movs	r0, #30
 800213e:	f001 fa05 	bl	800354c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8002142:	201e      	movs	r0, #30
 8002144:	f001 fa17 	bl	8003576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b00b      	add	sp, #44	; 0x2c
 800214e:	bd90      	pop	{r4, r7, pc}
 8002150:	40006400 	.word	0x40006400
 8002154:	40021000 	.word	0x40021000
 8002158:	48000400 	.word	0x48000400

0800215c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b08d      	sub	sp, #52	; 0x34
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	241c      	movs	r4, #28
 8002166:	193b      	adds	r3, r7, r4
 8002168:	0018      	movs	r0, r3
 800216a:	2314      	movs	r3, #20
 800216c:	001a      	movs	r2, r3
 800216e:	2100      	movs	r1, #0
 8002170:	f002 fcb2 	bl	8004ad8 <memset>
  if(hspi->Instance==SPI1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a39      	ldr	r2, [pc, #228]	; (8002260 <HAL_SPI_MspInit+0x104>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d133      	bne.n	80021e6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <HAL_SPI_MspInit+0x108>)
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	4b38      	ldr	r3, [pc, #224]	; (8002264 <HAL_SPI_MspInit+0x108>)
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	0149      	lsls	r1, r1, #5
 8002188:	430a      	orrs	r2, r1
 800218a:	619a      	str	r2, [r3, #24]
 800218c:	4b35      	ldr	r3, [pc, #212]	; (8002264 <HAL_SPI_MspInit+0x108>)
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	015b      	lsls	r3, r3, #5
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b32      	ldr	r3, [pc, #200]	; (8002264 <HAL_SPI_MspInit+0x108>)
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <HAL_SPI_MspInit+0x108>)
 80021a0:	2180      	movs	r1, #128	; 0x80
 80021a2:	0289      	lsls	r1, r1, #10
 80021a4:	430a      	orrs	r2, r1
 80021a6:	615a      	str	r2, [r3, #20]
 80021a8:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_SPI_MspInit+0x108>)
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	029b      	lsls	r3, r3, #10
 80021b0:	4013      	ands	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AMS_SCK_Pin|AMS_MISO_Pin|AMS_MOSI_Pin;
 80021b6:	0021      	movs	r1, r4
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	22e0      	movs	r2, #224	; 0xe0
 80021bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	2202      	movs	r2, #2
 80021c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	2203      	movs	r2, #3
 80021ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80021d0:	187b      	adds	r3, r7, r1
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	187a      	adds	r2, r7, r1
 80021d8:	2390      	movs	r3, #144	; 0x90
 80021da:	05db      	lsls	r3, r3, #23
 80021dc:	0011      	movs	r1, r2
 80021de:	0018      	movs	r0, r3
 80021e0:	f001 f9e6 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021e4:	e037      	b.n	8002256 <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1f      	ldr	r2, [pc, #124]	; (8002268 <HAL_SPI_MspInit+0x10c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d132      	bne.n	8002256 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021f0:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <HAL_SPI_MspInit+0x108>)
 80021f2:	69da      	ldr	r2, [r3, #28]
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <HAL_SPI_MspInit+0x108>)
 80021f6:	2180      	movs	r1, #128	; 0x80
 80021f8:	01c9      	lsls	r1, r1, #7
 80021fa:	430a      	orrs	r2, r1
 80021fc:	61da      	str	r2, [r3, #28]
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_SPI_MspInit+0x108>)
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	01db      	lsls	r3, r3, #7
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_SPI_MspInit+0x108>)
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_SPI_MspInit+0x108>)
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	02c9      	lsls	r1, r1, #11
 8002216:	430a      	orrs	r2, r1
 8002218:	615a      	str	r2, [r3, #20]
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_SPI_MspInit+0x108>)
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	02db      	lsls	r3, r3, #11
 8002222:	4013      	ands	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMC_SCK_Pin|TMC_MISO_Pin|TMC_MOSI_Pin;
 8002228:	211c      	movs	r1, #28
 800222a:	187b      	adds	r3, r7, r1
 800222c:	22e0      	movs	r2, #224	; 0xe0
 800222e:	0212      	lsls	r2, r2, #8
 8002230:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	187b      	adds	r3, r7, r1
 8002234:	2202      	movs	r2, #2
 8002236:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	187b      	adds	r3, r7, r1
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223e:	187b      	adds	r3, r7, r1
 8002240:	2203      	movs	r2, #3
 8002242:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002244:	187b      	adds	r3, r7, r1
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224a:	187b      	adds	r3, r7, r1
 800224c:	4a07      	ldr	r2, [pc, #28]	; (800226c <HAL_SPI_MspInit+0x110>)
 800224e:	0019      	movs	r1, r3
 8002250:	0010      	movs	r0, r2
 8002252:	f001 f9ad 	bl	80035b0 <HAL_GPIO_Init>
}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	46bd      	mov	sp, r7
 800225a:	b00d      	add	sp, #52	; 0x34
 800225c:	bd90      	pop	{r4, r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	40013000 	.word	0x40013000
 8002264:	40021000 	.word	0x40021000
 8002268:	40003800 	.word	0x40003800
 800226c:	48000400 	.word	0x48000400

08002270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <NMI_Handler+0x4>

08002276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <HardFault_Handler+0x4>

0800227c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002294:	f000 f890 	bl	80023b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AMS_INT_Pin);
 80022a2:	2001      	movs	r0, #1
 80022a4:	f001 fb1a 	bl	80038dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <CEC_CAN_IRQHandler+0x14>)
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 fe88 	bl	8002fcc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	20002080 	.word	0x20002080

080022c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022d4:	480d      	ldr	r0, [pc, #52]	; (800230c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d8:	480d      	ldr	r0, [pc, #52]	; (8002310 <LoopForever+0x6>)
  ldr r1, =_edata
 80022da:	490e      	ldr	r1, [pc, #56]	; (8002314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022dc:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <LoopForever+0xe>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a0b      	ldr	r2, [pc, #44]	; (800231c <LoopForever+0x12>)
  ldr r4, =_ebss
 80022f0:	4c0b      	ldr	r4, [pc, #44]	; (8002320 <LoopForever+0x16>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80022fe:	f7ff ffe3 	bl	80022c8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002302:	f002 fbf1 	bl	8004ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002306:	f7ff fb8b 	bl	8001a20 <main>

0800230a <LoopForever>:

LoopForever:
    b LoopForever
 800230a:	e7fe      	b.n	800230a <LoopForever>
  ldr   r0, =_estack
 800230c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002314:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002318:	08004b80 	.word	0x08004b80
  ldr r2, =_sbss
 800231c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002320:	200021c8 	.word	0x200021c8

08002324 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002324:	e7fe      	b.n	8002324 <ADC1_COMP_IRQHandler>
	...

08002328 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_Init+0x24>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_Init+0x24>)
 8002332:	2110      	movs	r1, #16
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002338:	2003      	movs	r0, #3
 800233a:	f000 f809 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800233e:	f7ff fe4d 	bl	8001fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	40022000 	.word	0x40022000

08002350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_InitTick+0x5c>)
 800235a:	681c      	ldr	r4, [r3, #0]
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_InitTick+0x60>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	0019      	movs	r1, r3
 8002362:	23fa      	movs	r3, #250	; 0xfa
 8002364:	0098      	lsls	r0, r3, #2
 8002366:	f7fd fecd 	bl	8000104 <__udivsi3>
 800236a:	0003      	movs	r3, r0
 800236c:	0019      	movs	r1, r3
 800236e:	0020      	movs	r0, r4
 8002370:	f7fd fec8 	bl	8000104 <__udivsi3>
 8002374:	0003      	movs	r3, r0
 8002376:	0018      	movs	r0, r3
 8002378:	f001 f90d 	bl	8003596 <HAL_SYSTICK_Config>
 800237c:	1e03      	subs	r3, r0, #0
 800237e:	d001      	beq.n	8002384 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e00f      	b.n	80023a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d80b      	bhi.n	80023a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	2301      	movs	r3, #1
 800238e:	425b      	negs	r3, r3
 8002390:	2200      	movs	r2, #0
 8002392:	0018      	movs	r0, r3
 8002394:	f001 f8da 	bl	800354c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_InitTick+0x64>)
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e000      	b.n	80023a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b003      	add	sp, #12
 80023aa:	bd90      	pop	{r4, r7, pc}
 80023ac:	20000004 	.word	0x20000004
 80023b0:	2000000c 	.word	0x2000000c
 80023b4:	20000008 	.word	0x20000008

080023b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_IncTick+0x1c>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	001a      	movs	r2, r3
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_IncTick+0x20>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	18d2      	adds	r2, r2, r3
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_IncTick+0x20>)
 80023ca:	601a      	str	r2, [r3, #0]
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	2000000c 	.word	0x2000000c
 80023d8:	200021c4 	.word	0x200021c4

080023dc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  return uwTick;
 80023e0:	4b02      	ldr	r3, [pc, #8]	; (80023ec <HAL_GetTick+0x10>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	200021c4 	.word	0x200021c4

080023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff fff0 	bl	80023dc <HAL_GetTick>
 80023fc:	0003      	movs	r3, r0
 80023fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3301      	adds	r3, #1
 8002408:	d005      	beq.n	8002416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_Delay+0x44>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	001a      	movs	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	189b      	adds	r3, r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	f7ff ffe0 	bl	80023dc <HAL_GetTick>
 800241c:	0002      	movs	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d8f7      	bhi.n	8002418 <HAL_Delay+0x28>
  {
  }
}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b004      	add	sp, #16
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	2000000c 	.word	0x2000000c

08002438 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002440:	230f      	movs	r3, #15
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e125      	b.n	80026a2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2234      	movs	r2, #52	; 0x34
 8002468:	2100      	movs	r1, #0
 800246a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f7ff fdd8 	bl	8002024 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	2210      	movs	r2, #16
 800247a:	4013      	ands	r3, r2
 800247c:	d000      	beq.n	8002480 <HAL_ADC_Init+0x48>
 800247e:	e103      	b.n	8002688 <HAL_ADC_Init+0x250>
 8002480:	230f      	movs	r3, #15
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d000      	beq.n	800248c <HAL_ADC_Init+0x54>
 800248a:	e0fd      	b.n	8002688 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2204      	movs	r2, #4
 8002494:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002496:	d000      	beq.n	800249a <HAL_ADC_Init+0x62>
 8002498:	e0f6      	b.n	8002688 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	4a83      	ldr	r2, [pc, #524]	; (80026ac <HAL_ADC_Init+0x274>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	2202      	movs	r2, #2
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2203      	movs	r2, #3
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d112      	bne.n	80024de <HAL_ADC_Init+0xa6>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2201      	movs	r2, #1
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d009      	beq.n	80024da <HAL_ADC_Init+0xa2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	401a      	ands	r2, r3
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d101      	bne.n	80024de <HAL_ADC_Init+0xa6>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_ADC_Init+0xa8>
 80024de:	2300      	movs	r3, #0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d116      	bne.n	8002512 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2218      	movs	r2, #24
 80024ec:	4393      	bics	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	0899      	lsrs	r1, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4964      	ldr	r1, [pc, #400]	; (80026b0 <HAL_ADC_Init+0x278>)
 800251e:	400a      	ands	r2, r1
 8002520:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7e1b      	ldrb	r3, [r3, #24]
 8002526:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7e5b      	ldrb	r3, [r3, #25]
 800252c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800252e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7e9b      	ldrb	r3, [r3, #26]
 8002534:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002536:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	2b01      	cmp	r3, #1
 800253e:	d002      	beq.n	8002546 <HAL_ADC_Init+0x10e>
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	015b      	lsls	r3, r3, #5
 8002544:	e000      	b.n	8002548 <HAL_ADC_Init+0x110>
 8002546:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002548:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800254e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d101      	bne.n	800255c <HAL_ADC_Init+0x124>
 8002558:	2304      	movs	r3, #4
 800255a:	e000      	b.n	800255e <HAL_ADC_Init+0x126>
 800255c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800255e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2124      	movs	r1, #36	; 0x24
 8002564:	5c5b      	ldrb	r3, [r3, r1]
 8002566:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002568:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	4313      	orrs	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7edb      	ldrb	r3, [r3, #27]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d115      	bne.n	80025a4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7e9b      	ldrb	r3, [r3, #26]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2280      	movs	r2, #128	; 0x80
 8002584:	0252      	lsls	r2, r2, #9
 8002586:	4313      	orrs	r3, r2
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	e00b      	b.n	80025a4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	2220      	movs	r2, #32
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259c:	2201      	movs	r2, #1
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	23c2      	movs	r3, #194	; 0xc2
 80025aa:	33ff      	adds	r3, #255	; 0xff
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d007      	beq.n	80025c0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80025b8:	4313      	orrs	r3, r2
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	055b      	lsls	r3, r3, #21
 80025d8:	429a      	cmp	r2, r3
 80025da:	d01b      	beq.n	8002614 <HAL_ADC_Init+0x1dc>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d017      	beq.n	8002614 <HAL_ADC_Init+0x1dc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d013      	beq.n	8002614 <HAL_ADC_Init+0x1dc>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d00f      	beq.n	8002614 <HAL_ADC_Init+0x1dc>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d00b      	beq.n	8002614 <HAL_ADC_Init+0x1dc>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	2b05      	cmp	r3, #5
 8002602:	d007      	beq.n	8002614 <HAL_ADC_Init+0x1dc>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	2b06      	cmp	r3, #6
 800260a:	d003      	beq.n	8002614 <HAL_ADC_Init+0x1dc>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	2b07      	cmp	r3, #7
 8002612:	d112      	bne.n	800263a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2107      	movs	r1, #7
 8002620:	438a      	bics	r2, r1
 8002622:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6959      	ldr	r1, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	2207      	movs	r2, #7
 8002630:	401a      	ands	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <HAL_ADC_Init+0x27c>)
 8002642:	4013      	ands	r3, r2
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	429a      	cmp	r2, r3
 8002648:	d10b      	bne.n	8002662 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	2203      	movs	r2, #3
 8002656:	4393      	bics	r3, r2
 8002658:	2201      	movs	r2, #1
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002660:	e01c      	b.n	800269c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	2212      	movs	r2, #18
 8002668:	4393      	bics	r3, r2
 800266a:	2210      	movs	r2, #16
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	2201      	movs	r2, #1
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800267e:	230f      	movs	r3, #15
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002686:	e009      	b.n	800269c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	2210      	movs	r2, #16
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002694:	230f      	movs	r3, #15
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800269c:	230f      	movs	r3, #15
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	781b      	ldrb	r3, [r3, #0]
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b004      	add	sp, #16
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	fffffefd 	.word	0xfffffefd
 80026b0:	fffe0219 	.word	0xfffe0219
 80026b4:	833fffe7 	.word	0x833fffe7

080026b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c2:	230f      	movs	r3, #15
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	055b      	lsls	r3, r3, #21
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d011      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x46>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d00d      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x46>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d009      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x46>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d005      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x46>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d001      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x46>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2234      	movs	r2, #52	; 0x34
 8002702:	5c9b      	ldrb	r3, [r3, r2]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x54>
 8002708:	2302      	movs	r3, #2
 800270a:	e0d0      	b.n	80028ae <HAL_ADC_ConfigChannel+0x1f6>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2234      	movs	r2, #52	; 0x34
 8002710:	2101      	movs	r1, #1
 8002712:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2204      	movs	r2, #4
 800271c:	4013      	ands	r3, r2
 800271e:	d000      	beq.n	8002722 <HAL_ADC_ConfigChannel+0x6a>
 8002720:	e0b4      	b.n	800288c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a64      	ldr	r2, [pc, #400]	; (80028b8 <HAL_ADC_ConfigChannel+0x200>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d100      	bne.n	800272e <HAL_ADC_ConfigChannel+0x76>
 800272c:	e082      	b.n	8002834 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	409a      	lsls	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	055b      	lsls	r3, r3, #21
 800274c:	429a      	cmp	r2, r3
 800274e:	d037      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x108>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d033      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x108>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	2b02      	cmp	r3, #2
 800275e:	d02f      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x108>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	2b03      	cmp	r3, #3
 8002766:	d02b      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x108>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	2b04      	cmp	r3, #4
 800276e:	d027      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x108>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	2b05      	cmp	r3, #5
 8002776:	d023      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x108>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2b06      	cmp	r3, #6
 800277e:	d01f      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x108>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	2b07      	cmp	r3, #7
 8002786:	d01b      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2107      	movs	r1, #7
 8002794:	400b      	ands	r3, r1
 8002796:	429a      	cmp	r2, r3
 8002798:	d012      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2107      	movs	r1, #7
 80027a6:	438a      	bics	r2, r1
 80027a8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6959      	ldr	r1, [r3, #20]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2207      	movs	r2, #7
 80027b6:	401a      	ands	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d007      	beq.n	80027d8 <HAL_ADC_ConfigChannel+0x120>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b11      	cmp	r3, #17
 80027ce:	d003      	beq.n	80027d8 <HAL_ADC_ConfigChannel+0x120>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b12      	cmp	r3, #18
 80027d6:	d163      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80027d8:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_ADC_ConfigChannel+0x204>)
 80027da:	6819      	ldr	r1, [r3, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d009      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0x140>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b11      	cmp	r3, #17
 80027ea:	d102      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x13a>
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	03db      	lsls	r3, r3, #15
 80027f0:	e004      	b.n	80027fc <HAL_ADC_ConfigChannel+0x144>
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	045b      	lsls	r3, r3, #17
 80027f6:	e001      	b.n	80027fc <HAL_ADC_ConfigChannel+0x144>
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	4a2f      	ldr	r2, [pc, #188]	; (80028bc <HAL_ADC_ConfigChannel+0x204>)
 80027fe:	430b      	orrs	r3, r1
 8002800:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b10      	cmp	r3, #16
 8002808:	d14a      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_ADC_ConfigChannel+0x208>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	492d      	ldr	r1, [pc, #180]	; (80028c4 <HAL_ADC_ConfigChannel+0x20c>)
 8002810:	0018      	movs	r0, r3
 8002812:	f7fd fc77 	bl	8000104 <__udivsi3>
 8002816:	0003      	movs	r3, r0
 8002818:	001a      	movs	r2, r3
 800281a:	0013      	movs	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	189b      	adds	r3, r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002824:	e002      	b.n	800282c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3b01      	subs	r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f9      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x16e>
 8002832:	e035      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2101      	movs	r1, #1
 8002840:	4099      	lsls	r1, r3
 8002842:	000b      	movs	r3, r1
 8002844:	43d9      	mvns	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	400a      	ands	r2, r1
 800284c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b10      	cmp	r3, #16
 8002854:	d007      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x1ae>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b11      	cmp	r3, #17
 800285c:	d003      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x1ae>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b12      	cmp	r3, #18
 8002864:	d11c      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_ADC_ConfigChannel+0x204>)
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b10      	cmp	r3, #16
 8002870:	d007      	beq.n	8002882 <HAL_ADC_ConfigChannel+0x1ca>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b11      	cmp	r3, #17
 8002878:	d101      	bne.n	800287e <HAL_ADC_ConfigChannel+0x1c6>
 800287a:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_ADC_ConfigChannel+0x210>)
 800287c:	e002      	b.n	8002884 <HAL_ADC_ConfigChannel+0x1cc>
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_ADC_ConfigChannel+0x214>)
 8002880:	e000      	b.n	8002884 <HAL_ADC_ConfigChannel+0x1cc>
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <HAL_ADC_ConfigChannel+0x218>)
 8002884:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <HAL_ADC_ConfigChannel+0x204>)
 8002886:	400b      	ands	r3, r1
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e009      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	2220      	movs	r2, #32
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002898:	230f      	movs	r3, #15
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2234      	movs	r2, #52	; 0x34
 80028a4:	2100      	movs	r1, #0
 80028a6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80028a8:	230f      	movs	r3, #15
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	781b      	ldrb	r3, [r3, #0]
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b004      	add	sp, #16
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	00001001 	.word	0x00001001
 80028bc:	40012708 	.word	0x40012708
 80028c0:	20000004 	.word	0x20000004
 80028c4:	000f4240 	.word	0x000f4240
 80028c8:	ffbfffff 	.word	0xffbfffff
 80028cc:	feffffff 	.word	0xfeffffff
 80028d0:	ff7fffff 	.word	0xff7fffff

080028d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0f0      	b.n	8002ac8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	5c9b      	ldrb	r3, [r3, r2]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d103      	bne.n	80028fa <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7ff fbdb 	bl	80020b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	430a      	orrs	r2, r1
 8002908:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800290a:	f7ff fd67 	bl	80023dc <HAL_GetTick>
 800290e:	0003      	movs	r3, r0
 8002910:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002912:	e013      	b.n	800293c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002914:	f7ff fd62 	bl	80023dc <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b0a      	cmp	r3, #10
 8002920:	d90c      	bls.n	800293c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	2280      	movs	r2, #128	; 0x80
 8002928:	0292      	lsls	r2, r2, #10
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	2105      	movs	r1, #5
 8002936:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0c5      	b.n	8002ac8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	4013      	ands	r3, r2
 8002946:	d0e5      	beq.n	8002914 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2102      	movs	r1, #2
 8002954:	438a      	bics	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002958:	f7ff fd40 	bl	80023dc <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002960:	e013      	b.n	800298a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002962:	f7ff fd3b 	bl	80023dc <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b0a      	cmp	r3, #10
 800296e:	d90c      	bls.n	800298a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2280      	movs	r2, #128	; 0x80
 8002976:	0292      	lsls	r2, r2, #10
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	2105      	movs	r1, #5
 8002984:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e09e      	b.n	8002ac8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2202      	movs	r2, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d1e5      	bne.n	8002962 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7e1b      	ldrb	r3, [r3, #24]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d108      	bne.n	80029b0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2180      	movs	r1, #128	; 0x80
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e007      	b.n	80029c0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	438a      	bics	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7e5b      	ldrb	r3, [r3, #25]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d108      	bne.n	80029da <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2140      	movs	r1, #64	; 0x40
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	e007      	b.n	80029ea <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2140      	movs	r1, #64	; 0x40
 80029e6:	438a      	bics	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7e9b      	ldrb	r3, [r3, #26]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d108      	bne.n	8002a04 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2120      	movs	r1, #32
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e007      	b.n	8002a14 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2120      	movs	r1, #32
 8002a10:	438a      	bics	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7edb      	ldrb	r3, [r3, #27]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d108      	bne.n	8002a2e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2110      	movs	r1, #16
 8002a28:	438a      	bics	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e007      	b.n	8002a3e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2110      	movs	r1, #16
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7f1b      	ldrb	r3, [r3, #28]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d108      	bne.n	8002a58 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2108      	movs	r1, #8
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e007      	b.n	8002a68 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2108      	movs	r1, #8
 8002a64:	438a      	bics	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7f5b      	ldrb	r3, [r3, #29]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d108      	bne.n	8002a82 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e007      	b.n	8002a92 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2104      	movs	r1, #4
 8002a8e:	438a      	bics	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	0011      	movs	r1, r2
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	1e5a      	subs	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b004      	add	sp, #16
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ae0:	2013      	movs	r0, #19
 8002ae2:	183b      	adds	r3, r7, r0
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	2120      	movs	r1, #32
 8002ae8:	5c52      	ldrb	r2, [r2, r1]
 8002aea:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002aec:	0002      	movs	r2, r0
 8002aee:	18bb      	adds	r3, r7, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d004      	beq.n	8002b00 <HAL_CAN_ConfigFilter+0x30>
 8002af6:	18bb      	adds	r3, r7, r2
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d000      	beq.n	8002b00 <HAL_CAN_ConfigFilter+0x30>
 8002afe:	e0cd      	b.n	8002c9c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	58d3      	ldr	r3, [r2, r3]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	0011      	movs	r1, r2
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	221f      	movs	r2, #31
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2201      	movs	r2, #1
 8002b20:	409a      	lsls	r2, r3
 8002b22:	0013      	movs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	2387      	movs	r3, #135	; 0x87
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	58d3      	ldr	r3, [r2, r3]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	43d2      	mvns	r2, r2
 8002b32:	401a      	ands	r2, r3
 8002b34:	0011      	movs	r1, r2
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	2387      	movs	r3, #135	; 0x87
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d129      	bne.n	8002b9a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	2383      	movs	r3, #131	; 0x83
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	58d3      	ldr	r3, [r2, r3]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	43d2      	mvns	r2, r2
 8002b52:	401a      	ands	r2, r3
 8002b54:	0011      	movs	r1, r2
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	2383      	movs	r3, #131	; 0x83
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	041b      	lsls	r3, r3, #16
 8002b6a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b70:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3248      	adds	r2, #72	; 0x48
 8002b76:	00d2      	lsls	r2, r2, #3
 8002b78:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b8c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b8e:	6979      	ldr	r1, [r7, #20]
 8002b90:	3348      	adds	r3, #72	; 0x48
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	18cb      	adds	r3, r1, r3
 8002b96:	3304      	adds	r3, #4
 8002b98:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d128      	bne.n	8002bf4 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	2383      	movs	r3, #131	; 0x83
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	58d2      	ldr	r2, [r2, r3]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	0011      	movs	r1, r2
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	2383      	movs	r3, #131	; 0x83
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bca:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	3248      	adds	r2, #72	; 0x48
 8002bd0:	00d2      	lsls	r2, r2, #3
 8002bd2:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002be6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002be8:	6979      	ldr	r1, [r7, #20]
 8002bea:	3348      	adds	r3, #72	; 0x48
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	18cb      	adds	r3, r1, r3
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10c      	bne.n	8002c16 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	2381      	movs	r3, #129	; 0x81
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	58d3      	ldr	r3, [r2, r3]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	43d2      	mvns	r2, r2
 8002c08:	401a      	ands	r2, r3
 8002c0a:	0011      	movs	r1, r2
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	2381      	movs	r3, #129	; 0x81
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	50d1      	str	r1, [r2, r3]
 8002c14:	e00a      	b.n	8002c2c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	2381      	movs	r3, #129	; 0x81
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	58d2      	ldr	r2, [r2, r3]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	0011      	movs	r1, r2
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	2381      	movs	r3, #129	; 0x81
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10c      	bne.n	8002c4e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	2385      	movs	r3, #133	; 0x85
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	58d3      	ldr	r3, [r2, r3]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	43d2      	mvns	r2, r2
 8002c40:	401a      	ands	r2, r3
 8002c42:	0011      	movs	r1, r2
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	2385      	movs	r3, #133	; 0x85
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	50d1      	str	r1, [r2, r3]
 8002c4c:	e00a      	b.n	8002c64 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	2385      	movs	r3, #133	; 0x85
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	58d2      	ldr	r2, [r2, r3]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	2385      	movs	r3, #133	; 0x85
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d10a      	bne.n	8002c82 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	2387      	movs	r3, #135	; 0x87
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	58d2      	ldr	r2, [r2, r3]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	0011      	movs	r1, r2
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	2387      	movs	r3, #135	; 0x87
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	58d3      	ldr	r3, [r2, r3]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	0019      	movs	r1, r3
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e007      	b.n	8002cac <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	02d2      	lsls	r2, r2, #11
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
  }
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b006      	add	sp, #24
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	5c9b      	ldrb	r3, [r3, r2]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d12f      	bne.n	8002d28 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	2102      	movs	r1, #2
 8002cce:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2101      	movs	r1, #1
 8002cdc:	438a      	bics	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce0:	f7ff fb7c 	bl	80023dc <HAL_GetTick>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ce8:	e013      	b.n	8002d12 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cea:	f7ff fb77 	bl	80023dc <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b0a      	cmp	r3, #10
 8002cf6:	d90c      	bls.n	8002d12 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	2280      	movs	r2, #128	; 0x80
 8002cfe:	0292      	lsls	r2, r2, #10
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	2105      	movs	r1, #5
 8002d0c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e012      	b.n	8002d38 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d1e5      	bne.n	8002cea <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e007      	b.n	8002d38 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2280      	movs	r2, #128	; 0x80
 8002d2e:	0312      	lsls	r2, r2, #12
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
  }
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b004      	add	sp, #16
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d4e:	2017      	movs	r0, #23
 8002d50:	183b      	adds	r3, r7, r0
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	2120      	movs	r1, #32
 8002d56:	5c52      	ldrb	r2, [r2, r1]
 8002d58:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	18bb      	adds	r3, r7, r2
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d004      	beq.n	8002d6e <HAL_CAN_GetRxMessage+0x2e>
 8002d64:	18bb      	adds	r3, r7, r2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d000      	beq.n	8002d6e <HAL_CAN_GetRxMessage+0x2e>
 8002d6c:	e0f8      	b.n	8002f60 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10e      	bne.n	8002d92 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d117      	bne.n	8002db0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	2280      	movs	r2, #128	; 0x80
 8002d86:	0392      	lsls	r2, r2, #14
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0ee      	b.n	8002f70 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2203      	movs	r2, #3
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d108      	bne.n	8002db0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	0392      	lsls	r2, r2, #14
 8002da6:	431a      	orrs	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0df      	b.n	8002f70 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	321b      	adds	r2, #27
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	58d3      	ldr	r3, [r2, r3]
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	321b      	adds	r2, #27
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	58d3      	ldr	r3, [r2, r3]
 8002dd8:	0d5b      	lsrs	r3, r3, #21
 8002dda:	055b      	lsls	r3, r3, #21
 8002ddc:	0d5a      	lsrs	r2, r3, #21
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e00a      	b.n	8002dfa <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	321b      	adds	r2, #27
 8002dec:	0112      	lsls	r2, r2, #4
 8002dee:	58d3      	ldr	r3, [r2, r3]
 8002df0:	08db      	lsrs	r3, r3, #3
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	08da      	lsrs	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	321b      	adds	r2, #27
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	58d3      	ldr	r3, [r2, r3]
 8002e06:	2202      	movs	r2, #2
 8002e08:	401a      	ands	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	331b      	adds	r3, #27
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	18d3      	adds	r3, r2, r3
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	220f      	movs	r2, #15
 8002e20:	401a      	ands	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	331b      	adds	r3, #27
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	18d3      	adds	r3, r2, r3
 8002e32:	3304      	adds	r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	22ff      	movs	r2, #255	; 0xff
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	331b      	adds	r3, #27
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	18d3      	adds	r3, r2, r3
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	0c1a      	lsrs	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	23dc      	movs	r3, #220	; 0xdc
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	188a      	adds	r2, r1, r2
 8002e68:	18d3      	adds	r3, r2, r3
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	23dc      	movs	r3, #220	; 0xdc
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	188a      	adds	r2, r1, r2
 8002e80:	18d3      	adds	r3, r2, r3
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	0a1a      	lsrs	r2, r3, #8
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	23dc      	movs	r3, #220	; 0xdc
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	188a      	adds	r2, r1, r2
 8002e9c:	18d3      	adds	r3, r2, r3
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0c1a      	lsrs	r2, r3, #16
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6819      	ldr	r1, [r3, #0]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	23dc      	movs	r3, #220	; 0xdc
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	188a      	adds	r2, r1, r2
 8002eb8:	18d3      	adds	r3, r2, r3
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0e1a      	lsrs	r2, r3, #24
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	3303      	adds	r3, #3
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6819      	ldr	r1, [r3, #0]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	23de      	movs	r3, #222	; 0xde
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	0112      	lsls	r2, r2, #4
 8002ed2:	188a      	adds	r2, r1, r2
 8002ed4:	18d3      	adds	r3, r2, r3
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	3304      	adds	r3, #4
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6819      	ldr	r1, [r3, #0]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	23de      	movs	r3, #222	; 0xde
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	0112      	lsls	r2, r2, #4
 8002eec:	188a      	adds	r2, r1, r2
 8002eee:	18d3      	adds	r3, r2, r3
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0a1a      	lsrs	r2, r3, #8
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	3305      	adds	r3, #5
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6819      	ldr	r1, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	23de      	movs	r3, #222	; 0xde
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	0112      	lsls	r2, r2, #4
 8002f08:	188a      	adds	r2, r1, r2
 8002f0a:	18d3      	adds	r3, r2, r3
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	0c1a      	lsrs	r2, r3, #16
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	3306      	adds	r3, #6
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6819      	ldr	r1, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	23de      	movs	r3, #222	; 0xde
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	188a      	adds	r2, r1, r2
 8002f26:	18d3      	adds	r3, r2, r3
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0e1a      	lsrs	r2, r3, #24
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	3307      	adds	r3, #7
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d108      	bne.n	8002f4c <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2120      	movs	r1, #32
 8002f46:	430a      	orrs	r2, r1
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	e007      	b.n	8002f5c <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2120      	movs	r1, #32
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e007      	b.n	8002f70 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	2280      	movs	r2, #128	; 0x80
 8002f66:	02d2      	lsls	r2, r2, #11
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
  }
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b006      	add	sp, #24
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f82:	200f      	movs	r0, #15
 8002f84:	183b      	adds	r3, r7, r0
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	2120      	movs	r1, #32
 8002f8a:	5c52      	ldrb	r2, [r2, r1]
 8002f8c:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f8e:	0002      	movs	r2, r0
 8002f90:	18bb      	adds	r3, r7, r2
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d003      	beq.n	8002fa0 <HAL_CAN_ActivateNotification+0x28>
 8002f98:	18bb      	adds	r3, r7, r2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d109      	bne.n	8002fb4 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6959      	ldr	r1, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e007      	b.n	8002fc4 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	02d2      	lsls	r2, r2, #11
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
  }
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b004      	add	sp, #16
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	2201      	movs	r2, #1
 800300c:	4013      	ands	r3, r2
 800300e:	d100      	bne.n	8003012 <HAL_CAN_IRQHandler+0x46>
 8003010:	e084      	b.n	800311c <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2201      	movs	r2, #1
 8003016:	4013      	ands	r3, r2
 8003018:	d024      	beq.n	8003064 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2201      	movs	r2, #1
 8003020:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2202      	movs	r2, #2
 8003026:	4013      	ands	r3, r2
 8003028:	d004      	beq.n	8003034 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f000 f981 	bl	8003334 <HAL_CAN_TxMailbox0CompleteCallback>
 8003032:	e017      	b.n	8003064 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2204      	movs	r2, #4
 8003038:	4013      	ands	r3, r2
 800303a:	d005      	beq.n	8003048 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	0112      	lsls	r2, r2, #4
 8003042:	4313      	orrs	r3, r2
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
 8003046:	e00d      	b.n	8003064 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2208      	movs	r2, #8
 800304c:	4013      	ands	r3, r2
 800304e:	d005      	beq.n	800305c <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	2280      	movs	r2, #128	; 0x80
 8003054:	0152      	lsls	r2, r2, #5
 8003056:	4313      	orrs	r3, r2
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	e003      	b.n	8003064 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0018      	movs	r0, r3
 8003060:	f000 f980 	bl	8003364 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4013      	ands	r3, r2
 800306c:	d028      	beq.n	80030c0 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2280      	movs	r2, #128	; 0x80
 8003074:	0052      	lsls	r2, r2, #1
 8003076:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4013      	ands	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 f95d 	bl	8003344 <HAL_CAN_TxMailbox1CompleteCallback>
 800308a:	e019      	b.n	80030c0 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4013      	ands	r3, r2
 8003094:	d005      	beq.n	80030a2 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	2280      	movs	r2, #128	; 0x80
 800309a:	0192      	lsls	r2, r2, #6
 800309c:	4313      	orrs	r3, r2
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
 80030a0:	e00e      	b.n	80030c0 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	4013      	ands	r3, r2
 80030aa:	d005      	beq.n	80030b8 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	01d2      	lsls	r2, r2, #7
 80030b2:	4313      	orrs	r3, r2
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
 80030b6:	e003      	b.n	80030c0 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 f95a 	bl	8003374 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	025b      	lsls	r3, r3, #9
 80030c6:	4013      	ands	r3, r2
 80030c8:	d028      	beq.n	800311c <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	0252      	lsls	r2, r2, #9
 80030d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	029b      	lsls	r3, r3, #10
 80030da:	4013      	ands	r3, r2
 80030dc:	d004      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	0018      	movs	r0, r3
 80030e2:	f000 f937 	bl	8003354 <HAL_CAN_TxMailbox2CompleteCallback>
 80030e6:	e019      	b.n	800311c <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	02db      	lsls	r3, r3, #11
 80030ee:	4013      	ands	r3, r2
 80030f0:	d005      	beq.n	80030fe <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	0212      	lsls	r2, r2, #8
 80030f8:	4313      	orrs	r3, r2
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
 80030fc:	e00e      	b.n	800311c <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	031b      	lsls	r3, r3, #12
 8003104:	4013      	ands	r3, r2
 8003106:	d005      	beq.n	8003114 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	2280      	movs	r2, #128	; 0x80
 800310c:	0252      	lsls	r2, r2, #9
 800310e:	4313      	orrs	r3, r2
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
 8003112:	e003      	b.n	800311c <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	0018      	movs	r0, r3
 8003118:	f000 f934 	bl	8003384 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	2208      	movs	r2, #8
 8003120:	4013      	ands	r3, r2
 8003122:	d00c      	beq.n	800313e <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2210      	movs	r2, #16
 8003128:	4013      	ands	r3, r2
 800312a:	d008      	beq.n	800313e <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	0092      	lsls	r2, r2, #2
 8003132:	4313      	orrs	r3, r2
 8003134:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2210      	movs	r2, #16
 800313c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	2204      	movs	r2, #4
 8003142:	4013      	ands	r3, r2
 8003144:	d00b      	beq.n	800315e <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2208      	movs	r2, #8
 800314a:	4013      	ands	r3, r2
 800314c:	d007      	beq.n	800315e <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2208      	movs	r2, #8
 8003154:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	0018      	movs	r0, r3
 800315a:	f000 f91b 	bl	8003394 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	2202      	movs	r2, #2
 8003162:	4013      	ands	r3, r2
 8003164:	d009      	beq.n	800317a <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2203      	movs	r2, #3
 800316e:	4013      	ands	r3, r2
 8003170:	d003      	beq.n	800317a <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	0018      	movs	r0, r3
 8003176:	f7fe fc1f 	bl	80019b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	2240      	movs	r2, #64	; 0x40
 800317e:	4013      	ands	r3, r2
 8003180:	d00c      	beq.n	800319c <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2210      	movs	r2, #16
 8003186:	4013      	ands	r3, r2
 8003188:	d008      	beq.n	800319c <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	2280      	movs	r2, #128	; 0x80
 800318e:	00d2      	lsls	r2, r2, #3
 8003190:	4313      	orrs	r3, r2
 8003192:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2210      	movs	r2, #16
 800319a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	2220      	movs	r2, #32
 80031a0:	4013      	ands	r3, r2
 80031a2:	d00b      	beq.n	80031bc <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2208      	movs	r2, #8
 80031a8:	4013      	ands	r3, r2
 80031aa:	d007      	beq.n	80031bc <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2208      	movs	r2, #8
 80031b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	0018      	movs	r0, r3
 80031b8:	f000 f8fc 	bl	80033b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2210      	movs	r2, #16
 80031c0:	4013      	ands	r3, r2
 80031c2:	d009      	beq.n	80031d8 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2203      	movs	r2, #3
 80031cc:	4013      	ands	r3, r2
 80031ce:	d003      	beq.n	80031d8 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	0018      	movs	r0, r3
 80031d4:	f000 f8e6 	bl	80033a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031d8:	6a3a      	ldr	r2, [r7, #32]
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	029b      	lsls	r3, r3, #10
 80031de:	4013      	ands	r3, r2
 80031e0:	d00b      	beq.n	80031fa <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2210      	movs	r2, #16
 80031e6:	4013      	ands	r3, r2
 80031e8:	d007      	beq.n	80031fa <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2210      	movs	r2, #16
 80031f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f000 f8e5 	bl	80033c4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80031fa:	6a3a      	ldr	r2, [r7, #32]
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	025b      	lsls	r3, r3, #9
 8003200:	4013      	ands	r3, r2
 8003202:	d00b      	beq.n	800321c <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2208      	movs	r2, #8
 8003208:	4013      	ands	r3, r2
 800320a:	d007      	beq.n	800321c <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2208      	movs	r2, #8
 8003212:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	0018      	movs	r0, r3
 8003218:	f000 f8dc 	bl	80033d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800321c:	6a3a      	ldr	r2, [r7, #32]
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	4013      	ands	r3, r2
 8003224:	d100      	bne.n	8003228 <HAL_CAN_IRQHandler+0x25c>
 8003226:	e074      	b.n	8003312 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2204      	movs	r2, #4
 800322c:	4013      	ands	r3, r2
 800322e:	d100      	bne.n	8003232 <HAL_CAN_IRQHandler+0x266>
 8003230:	e06b      	b.n	800330a <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003232:	6a3a      	ldr	r2, [r7, #32]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4013      	ands	r3, r2
 800323a:	d007      	beq.n	800324c <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003242:	d003      	beq.n	800324c <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	2201      	movs	r2, #1
 8003248:	4313      	orrs	r3, r2
 800324a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4013      	ands	r3, r2
 8003254:	d007      	beq.n	8003266 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2202      	movs	r2, #2
 800325a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800325c:	d003      	beq.n	8003266 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	2202      	movs	r2, #2
 8003262:	4313      	orrs	r3, r2
 8003264:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003266:	6a3a      	ldr	r2, [r7, #32]
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4013      	ands	r3, r2
 800326e:	d007      	beq.n	8003280 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2204      	movs	r2, #4
 8003274:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003276:	d003      	beq.n	8003280 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	2204      	movs	r2, #4
 800327c:	4313      	orrs	r3, r2
 800327e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003280:	6a3a      	ldr	r2, [r7, #32]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	4013      	ands	r3, r2
 8003288:	d03f      	beq.n	800330a <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2270      	movs	r2, #112	; 0x70
 800328e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003290:	d03b      	beq.n	800330a <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2270      	movs	r2, #112	; 0x70
 8003296:	4013      	ands	r3, r2
 8003298:	2b60      	cmp	r3, #96	; 0x60
 800329a:	d027      	beq.n	80032ec <HAL_CAN_IRQHandler+0x320>
 800329c:	d82c      	bhi.n	80032f8 <HAL_CAN_IRQHandler+0x32c>
 800329e:	2b50      	cmp	r3, #80	; 0x50
 80032a0:	d01f      	beq.n	80032e2 <HAL_CAN_IRQHandler+0x316>
 80032a2:	d829      	bhi.n	80032f8 <HAL_CAN_IRQHandler+0x32c>
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d017      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x30c>
 80032a8:	d826      	bhi.n	80032f8 <HAL_CAN_IRQHandler+0x32c>
 80032aa:	2b30      	cmp	r3, #48	; 0x30
 80032ac:	d00f      	beq.n	80032ce <HAL_CAN_IRQHandler+0x302>
 80032ae:	d823      	bhi.n	80032f8 <HAL_CAN_IRQHandler+0x32c>
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d002      	beq.n	80032ba <HAL_CAN_IRQHandler+0x2ee>
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d005      	beq.n	80032c4 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80032b8:	e01e      	b.n	80032f8 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	2208      	movs	r2, #8
 80032be:	4313      	orrs	r3, r2
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032c2:	e01a      	b.n	80032fa <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	2210      	movs	r2, #16
 80032c8:	4313      	orrs	r3, r2
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032cc:	e015      	b.n	80032fa <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	2220      	movs	r2, #32
 80032d2:	4313      	orrs	r3, r2
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032d6:	e010      	b.n	80032fa <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	2240      	movs	r2, #64	; 0x40
 80032dc:	4313      	orrs	r3, r2
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032e0:	e00b      	b.n	80032fa <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	2280      	movs	r2, #128	; 0x80
 80032e6:	4313      	orrs	r3, r2
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032ea:	e006      	b.n	80032fa <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	2280      	movs	r2, #128	; 0x80
 80032f0:	0052      	lsls	r2, r2, #1
 80032f2:	4313      	orrs	r3, r2
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032f6:	e000      	b.n	80032fa <HAL_CAN_IRQHandler+0x32e>
            break;
 80032f8:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2170      	movs	r1, #112	; 0x70
 8003306:	438a      	bics	r2, r1
 8003308:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2204      	movs	r2, #4
 8003310:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	0018      	movs	r0, r3
 8003328:	f000 f85c 	bl	80033e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b00a      	add	sp, #40	; 0x28
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b002      	add	sp, #8
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b002      	add	sp, #8
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b002      	add	sp, #8
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	0002      	movs	r2, r0
 80033fc:	1dfb      	adds	r3, r7, #7
 80033fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003400:	1dfb      	adds	r3, r7, #7
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b7f      	cmp	r3, #127	; 0x7f
 8003406:	d809      	bhi.n	800341c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003408:	1dfb      	adds	r3, r7, #7
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	001a      	movs	r2, r3
 800340e:	231f      	movs	r3, #31
 8003410:	401a      	ands	r2, r3
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <__NVIC_EnableIRQ+0x30>)
 8003414:	2101      	movs	r1, #1
 8003416:	4091      	lsls	r1, r2
 8003418:	000a      	movs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]
  }
}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	b002      	add	sp, #8
 8003422:	bd80      	pop	{r7, pc}
 8003424:	e000e100 	.word	0xe000e100

08003428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	0002      	movs	r2, r0
 8003430:	6039      	str	r1, [r7, #0]
 8003432:	1dfb      	adds	r3, r7, #7
 8003434:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003436:	1dfb      	adds	r3, r7, #7
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b7f      	cmp	r3, #127	; 0x7f
 800343c:	d828      	bhi.n	8003490 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800343e:	4a2f      	ldr	r2, [pc, #188]	; (80034fc <__NVIC_SetPriority+0xd4>)
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	b25b      	sxtb	r3, r3
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	33c0      	adds	r3, #192	; 0xc0
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	589b      	ldr	r3, [r3, r2]
 800344e:	1dfa      	adds	r2, r7, #7
 8003450:	7812      	ldrb	r2, [r2, #0]
 8003452:	0011      	movs	r1, r2
 8003454:	2203      	movs	r2, #3
 8003456:	400a      	ands	r2, r1
 8003458:	00d2      	lsls	r2, r2, #3
 800345a:	21ff      	movs	r1, #255	; 0xff
 800345c:	4091      	lsls	r1, r2
 800345e:	000a      	movs	r2, r1
 8003460:	43d2      	mvns	r2, r2
 8003462:	401a      	ands	r2, r3
 8003464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	019b      	lsls	r3, r3, #6
 800346a:	22ff      	movs	r2, #255	; 0xff
 800346c:	401a      	ands	r2, r3
 800346e:	1dfb      	adds	r3, r7, #7
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	0018      	movs	r0, r3
 8003474:	2303      	movs	r3, #3
 8003476:	4003      	ands	r3, r0
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800347c:	481f      	ldr	r0, [pc, #124]	; (80034fc <__NVIC_SetPriority+0xd4>)
 800347e:	1dfb      	adds	r3, r7, #7
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b25b      	sxtb	r3, r3
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	430a      	orrs	r2, r1
 8003488:	33c0      	adds	r3, #192	; 0xc0
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800348e:	e031      	b.n	80034f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003490:	4a1b      	ldr	r2, [pc, #108]	; (8003500 <__NVIC_SetPriority+0xd8>)
 8003492:	1dfb      	adds	r3, r7, #7
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	0019      	movs	r1, r3
 8003498:	230f      	movs	r3, #15
 800349a:	400b      	ands	r3, r1
 800349c:	3b08      	subs	r3, #8
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	3306      	adds	r3, #6
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	18d3      	adds	r3, r2, r3
 80034a6:	3304      	adds	r3, #4
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	1dfa      	adds	r2, r7, #7
 80034ac:	7812      	ldrb	r2, [r2, #0]
 80034ae:	0011      	movs	r1, r2
 80034b0:	2203      	movs	r2, #3
 80034b2:	400a      	ands	r2, r1
 80034b4:	00d2      	lsls	r2, r2, #3
 80034b6:	21ff      	movs	r1, #255	; 0xff
 80034b8:	4091      	lsls	r1, r2
 80034ba:	000a      	movs	r2, r1
 80034bc:	43d2      	mvns	r2, r2
 80034be:	401a      	ands	r2, r3
 80034c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	019b      	lsls	r3, r3, #6
 80034c6:	22ff      	movs	r2, #255	; 0xff
 80034c8:	401a      	ands	r2, r3
 80034ca:	1dfb      	adds	r3, r7, #7
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	0018      	movs	r0, r3
 80034d0:	2303      	movs	r3, #3
 80034d2:	4003      	ands	r3, r0
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034d8:	4809      	ldr	r0, [pc, #36]	; (8003500 <__NVIC_SetPriority+0xd8>)
 80034da:	1dfb      	adds	r3, r7, #7
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	001c      	movs	r4, r3
 80034e0:	230f      	movs	r3, #15
 80034e2:	4023      	ands	r3, r4
 80034e4:	3b08      	subs	r3, #8
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	430a      	orrs	r2, r1
 80034ea:	3306      	adds	r3, #6
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	18c3      	adds	r3, r0, r3
 80034f0:	3304      	adds	r3, #4
 80034f2:	601a      	str	r2, [r3, #0]
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b003      	add	sp, #12
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	e000e100 	.word	0xe000e100
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	1e5a      	subs	r2, r3, #1
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	045b      	lsls	r3, r3, #17
 8003514:	429a      	cmp	r2, r3
 8003516:	d301      	bcc.n	800351c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003518:	2301      	movs	r3, #1
 800351a:	e010      	b.n	800353e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <SysTick_Config+0x44>)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	3a01      	subs	r2, #1
 8003522:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003524:	2301      	movs	r3, #1
 8003526:	425b      	negs	r3, r3
 8003528:	2103      	movs	r1, #3
 800352a:	0018      	movs	r0, r3
 800352c:	f7ff ff7c 	bl	8003428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <SysTick_Config+0x44>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <SysTick_Config+0x44>)
 8003538:	2207      	movs	r2, #7
 800353a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800353c:	2300      	movs	r3, #0
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b002      	add	sp, #8
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	e000e010 	.word	0xe000e010

0800354c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	210f      	movs	r1, #15
 8003558:	187b      	adds	r3, r7, r1
 800355a:	1c02      	adds	r2, r0, #0
 800355c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	187b      	adds	r3, r7, r1
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	b25b      	sxtb	r3, r3
 8003566:	0011      	movs	r1, r2
 8003568:	0018      	movs	r0, r3
 800356a:	f7ff ff5d 	bl	8003428 <__NVIC_SetPriority>
}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b004      	add	sp, #16
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	0002      	movs	r2, r0
 800357e:	1dfb      	adds	r3, r7, #7
 8003580:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003582:	1dfb      	adds	r3, r7, #7
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b25b      	sxtb	r3, r3
 8003588:	0018      	movs	r0, r3
 800358a:	f7ff ff33 	bl	80033f4 <__NVIC_EnableIRQ>
}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b002      	add	sp, #8
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7ff ffaf 	bl	8003504 <SysTick_Config>
 80035a6:	0003      	movs	r3, r0
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b002      	add	sp, #8
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035be:	e155      	b.n	800386c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4091      	lsls	r1, r2
 80035ca:	000a      	movs	r2, r1
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d100      	bne.n	80035d8 <HAL_GPIO_Init+0x28>
 80035d6:	e146      	b.n	8003866 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2203      	movs	r2, #3
 80035de:	4013      	ands	r3, r2
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d005      	beq.n	80035f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2203      	movs	r2, #3
 80035ea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d130      	bne.n	8003652 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	2203      	movs	r2, #3
 80035fc:	409a      	lsls	r2, r3
 80035fe:	0013      	movs	r3, r2
 8003600:	43da      	mvns	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	409a      	lsls	r2, r3
 8003612:	0013      	movs	r3, r2
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003626:	2201      	movs	r2, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	409a      	lsls	r2, r3
 800362c:	0013      	movs	r3, r2
 800362e:	43da      	mvns	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	2201      	movs	r2, #1
 800363e:	401a      	ands	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	409a      	lsls	r2, r3
 8003644:	0013      	movs	r3, r2
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2203      	movs	r2, #3
 8003658:	4013      	ands	r3, r2
 800365a:	2b03      	cmp	r3, #3
 800365c:	d017      	beq.n	800368e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	2203      	movs	r2, #3
 800366a:	409a      	lsls	r2, r3
 800366c:	0013      	movs	r3, r2
 800366e:	43da      	mvns	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	409a      	lsls	r2, r3
 8003680:	0013      	movs	r3, r2
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2203      	movs	r2, #3
 8003694:	4013      	ands	r3, r2
 8003696:	2b02      	cmp	r3, #2
 8003698:	d123      	bne.n	80036e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	08da      	lsrs	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3208      	adds	r2, #8
 80036a2:	0092      	lsls	r2, r2, #2
 80036a4:	58d3      	ldr	r3, [r2, r3]
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2207      	movs	r2, #7
 80036ac:	4013      	ands	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	409a      	lsls	r2, r3
 80036b4:	0013      	movs	r3, r2
 80036b6:	43da      	mvns	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2107      	movs	r1, #7
 80036c6:	400b      	ands	r3, r1
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	409a      	lsls	r2, r3
 80036cc:	0013      	movs	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	08da      	lsrs	r2, r3, #3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3208      	adds	r2, #8
 80036dc:	0092      	lsls	r2, r2, #2
 80036de:	6939      	ldr	r1, [r7, #16]
 80036e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	409a      	lsls	r2, r3
 80036f0:	0013      	movs	r3, r2
 80036f2:	43da      	mvns	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2203      	movs	r2, #3
 8003700:	401a      	ands	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	0013      	movs	r3, r2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	23c0      	movs	r3, #192	; 0xc0
 800371c:	029b      	lsls	r3, r3, #10
 800371e:	4013      	ands	r3, r2
 8003720:	d100      	bne.n	8003724 <HAL_GPIO_Init+0x174>
 8003722:	e0a0      	b.n	8003866 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003724:	4b57      	ldr	r3, [pc, #348]	; (8003884 <HAL_GPIO_Init+0x2d4>)
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	4b56      	ldr	r3, [pc, #344]	; (8003884 <HAL_GPIO_Init+0x2d4>)
 800372a:	2101      	movs	r1, #1
 800372c:	430a      	orrs	r2, r1
 800372e:	619a      	str	r2, [r3, #24]
 8003730:	4b54      	ldr	r3, [pc, #336]	; (8003884 <HAL_GPIO_Init+0x2d4>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2201      	movs	r2, #1
 8003736:	4013      	ands	r3, r2
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800373c:	4a52      	ldr	r2, [pc, #328]	; (8003888 <HAL_GPIO_Init+0x2d8>)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	3302      	adds	r3, #2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	589b      	ldr	r3, [r3, r2]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2203      	movs	r2, #3
 800374e:	4013      	ands	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	220f      	movs	r2, #15
 8003754:	409a      	lsls	r2, r3
 8003756:	0013      	movs	r3, r2
 8003758:	43da      	mvns	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	2390      	movs	r3, #144	; 0x90
 8003764:	05db      	lsls	r3, r3, #23
 8003766:	429a      	cmp	r2, r3
 8003768:	d019      	beq.n	800379e <HAL_GPIO_Init+0x1ee>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a47      	ldr	r2, [pc, #284]	; (800388c <HAL_GPIO_Init+0x2dc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_GPIO_Init+0x1ea>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a46      	ldr	r2, [pc, #280]	; (8003890 <HAL_GPIO_Init+0x2e0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00d      	beq.n	8003796 <HAL_GPIO_Init+0x1e6>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a45      	ldr	r2, [pc, #276]	; (8003894 <HAL_GPIO_Init+0x2e4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <HAL_GPIO_Init+0x1e2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a44      	ldr	r2, [pc, #272]	; (8003898 <HAL_GPIO_Init+0x2e8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_GPIO_Init+0x1de>
 800378a:	2304      	movs	r3, #4
 800378c:	e008      	b.n	80037a0 <HAL_GPIO_Init+0x1f0>
 800378e:	2305      	movs	r3, #5
 8003790:	e006      	b.n	80037a0 <HAL_GPIO_Init+0x1f0>
 8003792:	2303      	movs	r3, #3
 8003794:	e004      	b.n	80037a0 <HAL_GPIO_Init+0x1f0>
 8003796:	2302      	movs	r3, #2
 8003798:	e002      	b.n	80037a0 <HAL_GPIO_Init+0x1f0>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <HAL_GPIO_Init+0x1f0>
 800379e:	2300      	movs	r3, #0
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	2103      	movs	r1, #3
 80037a4:	400a      	ands	r2, r1
 80037a6:	0092      	lsls	r2, r2, #2
 80037a8:	4093      	lsls	r3, r2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037b0:	4935      	ldr	r1, [pc, #212]	; (8003888 <HAL_GPIO_Init+0x2d8>)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	089b      	lsrs	r3, r3, #2
 80037b6:	3302      	adds	r3, #2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037be:	4b37      	ldr	r3, [pc, #220]	; (800389c <HAL_GPIO_Init+0x2ec>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	43da      	mvns	r2, r3
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	025b      	lsls	r3, r3, #9
 80037d6:	4013      	ands	r3, r2
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037e2:	4b2e      	ldr	r3, [pc, #184]	; (800389c <HAL_GPIO_Init+0x2ec>)
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80037e8:	4b2c      	ldr	r3, [pc, #176]	; (800389c <HAL_GPIO_Init+0x2ec>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	43da      	mvns	r2, r3
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4013      	ands	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	029b      	lsls	r3, r3, #10
 8003800:	4013      	ands	r3, r2
 8003802:	d003      	beq.n	800380c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800380c:	4b23      	ldr	r3, [pc, #140]	; (800389c <HAL_GPIO_Init+0x2ec>)
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003812:	4b22      	ldr	r3, [pc, #136]	; (800389c <HAL_GPIO_Init+0x2ec>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	43da      	mvns	r2, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	035b      	lsls	r3, r3, #13
 800382a:	4013      	ands	r3, r2
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003836:	4b19      	ldr	r3, [pc, #100]	; (800389c <HAL_GPIO_Init+0x2ec>)
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <HAL_GPIO_Init+0x2ec>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	43da      	mvns	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	039b      	lsls	r3, r3, #14
 8003854:	4013      	ands	r3, r2
 8003856:	d003      	beq.n	8003860 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003860:	4b0e      	ldr	r3, [pc, #56]	; (800389c <HAL_GPIO_Init+0x2ec>)
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	3301      	adds	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	40da      	lsrs	r2, r3
 8003874:	1e13      	subs	r3, r2, #0
 8003876:	d000      	beq.n	800387a <HAL_GPIO_Init+0x2ca>
 8003878:	e6a2      	b.n	80035c0 <HAL_GPIO_Init+0x10>
  } 
}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b006      	add	sp, #24
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000
 8003888:	40010000 	.word	0x40010000
 800388c:	48000400 	.word	0x48000400
 8003890:	48000800 	.word	0x48000800
 8003894:	48000c00 	.word	0x48000c00
 8003898:	48001000 	.word	0x48001000
 800389c:	40010400 	.word	0x40010400

080038a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	0008      	movs	r0, r1
 80038aa:	0011      	movs	r1, r2
 80038ac:	1cbb      	adds	r3, r7, #2
 80038ae:	1c02      	adds	r2, r0, #0
 80038b0:	801a      	strh	r2, [r3, #0]
 80038b2:	1c7b      	adds	r3, r7, #1
 80038b4:	1c0a      	adds	r2, r1, #0
 80038b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038b8:	1c7b      	adds	r3, r7, #1
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038c0:	1cbb      	adds	r3, r7, #2
 80038c2:	881a      	ldrh	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038c8:	e003      	b.n	80038d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038ca:	1cbb      	adds	r3, r7, #2
 80038cc:	881a      	ldrh	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b002      	add	sp, #8
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	0002      	movs	r2, r0
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	1dba      	adds	r2, r7, #6
 80038ee:	8812      	ldrh	r2, [r2, #0]
 80038f0:	4013      	ands	r3, r2
 80038f2:	d008      	beq.n	8003906 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80038f6:	1dba      	adds	r2, r7, #6
 80038f8:	8812      	ldrh	r2, [r2, #0]
 80038fa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038fc:	1dbb      	adds	r3, r7, #6
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	0018      	movs	r0, r3
 8003902:	f7fe f875 	bl	80019f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b002      	add	sp, #8
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	40010400 	.word	0x40010400

08003914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f000 fb76 	bl	8004014 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2201      	movs	r2, #1
 800392e:	4013      	ands	r3, r2
 8003930:	d100      	bne.n	8003934 <HAL_RCC_OscConfig+0x20>
 8003932:	e08e      	b.n	8003a52 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003934:	4bc5      	ldr	r3, [pc, #788]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	220c      	movs	r2, #12
 800393a:	4013      	ands	r3, r2
 800393c:	2b04      	cmp	r3, #4
 800393e:	d00e      	beq.n	800395e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003940:	4bc2      	ldr	r3, [pc, #776]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	220c      	movs	r2, #12
 8003946:	4013      	ands	r3, r2
 8003948:	2b08      	cmp	r3, #8
 800394a:	d117      	bne.n	800397c <HAL_RCC_OscConfig+0x68>
 800394c:	4bbf      	ldr	r3, [pc, #764]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	23c0      	movs	r3, #192	; 0xc0
 8003952:	025b      	lsls	r3, r3, #9
 8003954:	401a      	ands	r2, r3
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	025b      	lsls	r3, r3, #9
 800395a:	429a      	cmp	r2, r3
 800395c:	d10e      	bne.n	800397c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395e:	4bbb      	ldr	r3, [pc, #748]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	029b      	lsls	r3, r3, #10
 8003966:	4013      	ands	r3, r2
 8003968:	d100      	bne.n	800396c <HAL_RCC_OscConfig+0x58>
 800396a:	e071      	b.n	8003a50 <HAL_RCC_OscConfig+0x13c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d000      	beq.n	8003976 <HAL_RCC_OscConfig+0x62>
 8003974:	e06c      	b.n	8003a50 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f000 fb4c 	bl	8004014 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x80>
 8003984:	4bb1      	ldr	r3, [pc, #708]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4bb0      	ldr	r3, [pc, #704]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 800398a:	2180      	movs	r1, #128	; 0x80
 800398c:	0249      	lsls	r1, r1, #9
 800398e:	430a      	orrs	r2, r1
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	e02f      	b.n	80039f4 <HAL_RCC_OscConfig+0xe0>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10c      	bne.n	80039b6 <HAL_RCC_OscConfig+0xa2>
 800399c:	4bab      	ldr	r3, [pc, #684]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4baa      	ldr	r3, [pc, #680]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 80039a2:	49ab      	ldr	r1, [pc, #684]	; (8003c50 <HAL_RCC_OscConfig+0x33c>)
 80039a4:	400a      	ands	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	4ba8      	ldr	r3, [pc, #672]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4ba7      	ldr	r3, [pc, #668]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 80039ae:	49a9      	ldr	r1, [pc, #676]	; (8003c54 <HAL_RCC_OscConfig+0x340>)
 80039b0:	400a      	ands	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e01e      	b.n	80039f4 <HAL_RCC_OscConfig+0xe0>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d10e      	bne.n	80039dc <HAL_RCC_OscConfig+0xc8>
 80039be:	4ba3      	ldr	r3, [pc, #652]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4ba2      	ldr	r3, [pc, #648]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 80039c4:	2180      	movs	r1, #128	; 0x80
 80039c6:	02c9      	lsls	r1, r1, #11
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	4b9f      	ldr	r3, [pc, #636]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b9e      	ldr	r3, [pc, #632]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0249      	lsls	r1, r1, #9
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0xe0>
 80039dc:	4b9b      	ldr	r3, [pc, #620]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b9a      	ldr	r3, [pc, #616]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 80039e2:	499b      	ldr	r1, [pc, #620]	; (8003c50 <HAL_RCC_OscConfig+0x33c>)
 80039e4:	400a      	ands	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	4b98      	ldr	r3, [pc, #608]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b97      	ldr	r3, [pc, #604]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 80039ee:	4999      	ldr	r1, [pc, #612]	; (8003c54 <HAL_RCC_OscConfig+0x340>)
 80039f0:	400a      	ands	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d014      	beq.n	8003a26 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fe fcee 	bl	80023dc <HAL_GetTick>
 8003a00:	0003      	movs	r3, r0
 8003a02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a06:	f7fe fce9 	bl	80023dc <HAL_GetTick>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b64      	cmp	r3, #100	; 0x64
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e2fd      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a18:	4b8c      	ldr	r3, [pc, #560]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	029b      	lsls	r3, r3, #10
 8003a20:	4013      	ands	r3, r2
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0xf2>
 8003a24:	e015      	b.n	8003a52 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fe fcd9 	bl	80023dc <HAL_GetTick>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fe fcd4 	bl	80023dc <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e2e8      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	4b82      	ldr	r3, [pc, #520]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	029b      	lsls	r3, r3, #10
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x11c>
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2202      	movs	r2, #2
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d100      	bne.n	8003a5e <HAL_RCC_OscConfig+0x14a>
 8003a5c:	e06c      	b.n	8003b38 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a5e:	4b7b      	ldr	r3, [pc, #492]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	220c      	movs	r2, #12
 8003a64:	4013      	ands	r3, r2
 8003a66:	d00e      	beq.n	8003a86 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a68:	4b78      	ldr	r3, [pc, #480]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	220c      	movs	r2, #12
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d11f      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1a0>
 8003a74:	4b75      	ldr	r3, [pc, #468]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	23c0      	movs	r3, #192	; 0xc0
 8003a7a:	025b      	lsls	r3, r3, #9
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d116      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a86:	4b71      	ldr	r3, [pc, #452]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_OscConfig+0x188>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e2bb      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9c:	4b6b      	ldr	r3, [pc, #428]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	22f8      	movs	r2, #248	; 0xf8
 8003aa2:	4393      	bics	r3, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00da      	lsls	r2, r3, #3
 8003aac:	4b67      	ldr	r3, [pc, #412]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab2:	e041      	b.n	8003b38 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d024      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003abc:	4b63      	ldr	r3, [pc, #396]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4b62      	ldr	r3, [pc, #392]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fe fc88 	bl	80023dc <HAL_GetTick>
 8003acc:	0003      	movs	r3, r0
 8003ace:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fc83 	bl	80023dc <HAL_GetTick>
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e297      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b59      	ldr	r3, [pc, #356]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	4013      	ands	r3, r2
 8003aec:	d0f1      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aee:	4b57      	ldr	r3, [pc, #348]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	22f8      	movs	r2, #248	; 0xf8
 8003af4:	4393      	bics	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00da      	lsls	r2, r3, #3
 8003afe:	4b53      	ldr	r3, [pc, #332]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	e018      	b.n	8003b38 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b51      	ldr	r3, [pc, #324]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b50      	ldr	r3, [pc, #320]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	438a      	bics	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fe fc63 	bl	80023dc <HAL_GetTick>
 8003b16:	0003      	movs	r3, r0
 8003b18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1c:	f7fe fc5e 	bl	80023dc <HAL_GetTick>
 8003b20:	0002      	movs	r2, r0
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e272      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	4b47      	ldr	r3, [pc, #284]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2202      	movs	r2, #2
 8003b34:	4013      	ands	r3, r2
 8003b36:	d1f1      	bne.n	8003b1c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d036      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d019      	beq.n	8003b7e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4a:	4b40      	ldr	r3, [pc, #256]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4e:	4b3f      	ldr	r3, [pc, #252]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003b50:	2101      	movs	r1, #1
 8003b52:	430a      	orrs	r2, r1
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b56:	f7fe fc41 	bl	80023dc <HAL_GetTick>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fe fc3c 	bl	80023dc <HAL_GetTick>
 8003b64:	0002      	movs	r2, r0
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e250      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	2202      	movs	r2, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d0f1      	beq.n	8003b60 <HAL_RCC_OscConfig+0x24c>
 8003b7c:	e018      	b.n	8003bb0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b7e:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b82:	4b32      	ldr	r3, [pc, #200]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003b84:	2101      	movs	r1, #1
 8003b86:	438a      	bics	r2, r1
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8a:	f7fe fc27 	bl	80023dc <HAL_GetTick>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fe fc22 	bl	80023dc <HAL_GetTick>
 8003b98:	0002      	movs	r2, r0
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e236      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba6:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	2202      	movs	r2, #2
 8003bac:	4013      	ands	r3, r2
 8003bae:	d1f1      	bne.n	8003b94 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d100      	bne.n	8003bbc <HAL_RCC_OscConfig+0x2a8>
 8003bba:	e0b5      	b.n	8003d28 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bbc:	201f      	movs	r0, #31
 8003bbe:	183b      	adds	r3, r7, r0
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc4:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	055b      	lsls	r3, r3, #21
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d110      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd0:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003bd6:	2180      	movs	r1, #128	; 0x80
 8003bd8:	0549      	lsls	r1, r1, #21
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	61da      	str	r2, [r3, #28]
 8003bde:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003be0:	69da      	ldr	r2, [r3, #28]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	055b      	lsls	r3, r3, #21
 8003be6:	4013      	ands	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bec:	183b      	adds	r3, r7, r0
 8003bee:	2201      	movs	r2, #1
 8003bf0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf2:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <HAL_RCC_OscConfig+0x344>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d11a      	bne.n	8003c34 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfe:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <HAL_RCC_OscConfig+0x344>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_RCC_OscConfig+0x344>)
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	0049      	lsls	r1, r1, #1
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0c:	f7fe fbe6 	bl	80023dc <HAL_GetTick>
 8003c10:	0003      	movs	r3, r0
 8003c12:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fe fbe1 	bl	80023dc <HAL_GetTick>
 8003c1a:	0002      	movs	r2, r0
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b64      	cmp	r3, #100	; 0x64
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e1f5      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_OscConfig+0x344>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4013      	ands	r3, r2
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d10f      	bne.n	8003c5c <HAL_RCC_OscConfig+0x348>
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003c3e:	6a1a      	ldr	r2, [r3, #32]
 8003c40:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <HAL_RCC_OscConfig+0x338>)
 8003c42:	2101      	movs	r1, #1
 8003c44:	430a      	orrs	r2, r1
 8003c46:	621a      	str	r2, [r3, #32]
 8003c48:	e036      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3a4>
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	fffeffff 	.word	0xfffeffff
 8003c54:	fffbffff 	.word	0xfffbffff
 8003c58:	40007000 	.word	0x40007000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10c      	bne.n	8003c7e <HAL_RCC_OscConfig+0x36a>
 8003c64:	4bca      	ldr	r3, [pc, #808]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003c66:	6a1a      	ldr	r2, [r3, #32]
 8003c68:	4bc9      	ldr	r3, [pc, #804]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	438a      	bics	r2, r1
 8003c6e:	621a      	str	r2, [r3, #32]
 8003c70:	4bc7      	ldr	r3, [pc, #796]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003c72:	6a1a      	ldr	r2, [r3, #32]
 8003c74:	4bc6      	ldr	r3, [pc, #792]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003c76:	2104      	movs	r1, #4
 8003c78:	438a      	bics	r2, r1
 8003c7a:	621a      	str	r2, [r3, #32]
 8003c7c:	e01c      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3a4>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x38c>
 8003c86:	4bc2      	ldr	r3, [pc, #776]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003c88:	6a1a      	ldr	r2, [r3, #32]
 8003c8a:	4bc1      	ldr	r3, [pc, #772]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003c8c:	2104      	movs	r1, #4
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	621a      	str	r2, [r3, #32]
 8003c92:	4bbf      	ldr	r3, [pc, #764]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003c94:	6a1a      	ldr	r2, [r3, #32]
 8003c96:	4bbe      	ldr	r3, [pc, #760]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003c98:	2101      	movs	r1, #1
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	621a      	str	r2, [r3, #32]
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3a4>
 8003ca0:	4bbb      	ldr	r3, [pc, #748]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003ca2:	6a1a      	ldr	r2, [r3, #32]
 8003ca4:	4bba      	ldr	r3, [pc, #744]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	438a      	bics	r2, r1
 8003caa:	621a      	str	r2, [r3, #32]
 8003cac:	4bb8      	ldr	r3, [pc, #736]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003cae:	6a1a      	ldr	r2, [r3, #32]
 8003cb0:	4bb7      	ldr	r3, [pc, #732]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003cb2:	2104      	movs	r1, #4
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d014      	beq.n	8003cea <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc0:	f7fe fb8c 	bl	80023dc <HAL_GetTick>
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc8:	e009      	b.n	8003cde <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fe fb87 	bl	80023dc <HAL_GetTick>
 8003cce:	0002      	movs	r2, r0
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	4aaf      	ldr	r2, [pc, #700]	; (8003f94 <HAL_RCC_OscConfig+0x680>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e19a      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cde:	4bac      	ldr	r3, [pc, #688]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x3b6>
 8003ce8:	e013      	b.n	8003d12 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cea:	f7fe fb77 	bl	80023dc <HAL_GetTick>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf2:	e009      	b.n	8003d08 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf4:	f7fe fb72 	bl	80023dc <HAL_GetTick>
 8003cf8:	0002      	movs	r2, r0
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	4aa5      	ldr	r2, [pc, #660]	; (8003f94 <HAL_RCC_OscConfig+0x680>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e185      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d08:	4ba1      	ldr	r3, [pc, #644]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d12:	231f      	movs	r3, #31
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1c:	4b9c      	ldr	r3, [pc, #624]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	4b9b      	ldr	r3, [pc, #620]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003d22:	499d      	ldr	r1, [pc, #628]	; (8003f98 <HAL_RCC_OscConfig+0x684>)
 8003d24:	400a      	ands	r2, r1
 8003d26:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d063      	beq.n	8003dfa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d12a      	bne.n	8003d90 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d3a:	4b95      	ldr	r3, [pc, #596]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d3e:	4b94      	ldr	r3, [pc, #592]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003d40:	2104      	movs	r1, #4
 8003d42:	430a      	orrs	r2, r1
 8003d44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003d46:	4b92      	ldr	r3, [pc, #584]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4a:	4b91      	ldr	r3, [pc, #580]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d52:	f7fe fb43 	bl	80023dc <HAL_GetTick>
 8003d56:	0003      	movs	r3, r0
 8003d58:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d5c:	f7fe fb3e 	bl	80023dc <HAL_GetTick>
 8003d60:	0002      	movs	r2, r0
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e152      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d6e:	4b88      	ldr	r3, [pc, #544]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d72:	2202      	movs	r2, #2
 8003d74:	4013      	ands	r3, r2
 8003d76:	d0f1      	beq.n	8003d5c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d78:	4b85      	ldr	r3, [pc, #532]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	22f8      	movs	r2, #248	; 0xf8
 8003d7e:	4393      	bics	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	00da      	lsls	r2, r3, #3
 8003d88:	4b81      	ldr	r3, [pc, #516]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d8e:	e034      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	3305      	adds	r3, #5
 8003d96:	d111      	bne.n	8003dbc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003d98:	4b7d      	ldr	r3, [pc, #500]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d9c:	4b7c      	ldr	r3, [pc, #496]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003d9e:	2104      	movs	r1, #4
 8003da0:	438a      	bics	r2, r1
 8003da2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003da4:	4b7a      	ldr	r3, [pc, #488]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	22f8      	movs	r2, #248	; 0xf8
 8003daa:	4393      	bics	r3, r2
 8003dac:	0019      	movs	r1, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	00da      	lsls	r2, r3, #3
 8003db4:	4b76      	ldr	r3, [pc, #472]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003db6:	430a      	orrs	r2, r1
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34
 8003dba:	e01e      	b.n	8003dfa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003dbc:	4b74      	ldr	r3, [pc, #464]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc0:	4b73      	ldr	r3, [pc, #460]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003dc8:	4b71      	ldr	r3, [pc, #452]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dcc:	4b70      	ldr	r3, [pc, #448]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003dce:	2101      	movs	r1, #1
 8003dd0:	438a      	bics	r2, r1
 8003dd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd4:	f7fe fb02 	bl	80023dc <HAL_GetTick>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003dde:	f7fe fafd 	bl	80023dc <HAL_GetTick>
 8003de2:	0002      	movs	r2, r0
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e111      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003df0:	4b67      	ldr	r3, [pc, #412]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df4:	2202      	movs	r2, #2
 8003df6:	4013      	ands	r3, r2
 8003df8:	d1f1      	bne.n	8003dde <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	4013      	ands	r3, r2
 8003e02:	d05c      	beq.n	8003ebe <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003e04:	4b62      	ldr	r3, [pc, #392]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	220c      	movs	r2, #12
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d00e      	beq.n	8003e2e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003e10:	4b5f      	ldr	r3, [pc, #380]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	220c      	movs	r2, #12
 8003e16:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d114      	bne.n	8003e46 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003e1c:	4b5c      	ldr	r3, [pc, #368]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	23c0      	movs	r3, #192	; 0xc0
 8003e22:	025b      	lsls	r3, r3, #9
 8003e24:	401a      	ands	r2, r3
 8003e26:	23c0      	movs	r3, #192	; 0xc0
 8003e28:	025b      	lsls	r3, r3, #9
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d10b      	bne.n	8003e46 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003e2e:	4b58      	ldr	r3, [pc, #352]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	025b      	lsls	r3, r3, #9
 8003e36:	4013      	ands	r3, r2
 8003e38:	d040      	beq.n	8003ebc <HAL_RCC_OscConfig+0x5a8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d03c      	beq.n	8003ebc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0e6      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01b      	beq.n	8003e86 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003e4e:	4b50      	ldr	r3, [pc, #320]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e52:	4b4f      	ldr	r3, [pc, #316]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	0249      	lsls	r1, r1, #9
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fabe 	bl	80023dc <HAL_GetTick>
 8003e60:	0003      	movs	r3, r0
 8003e62:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e66:	f7fe fab9 	bl	80023dc <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e0cd      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003e78:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	025b      	lsls	r3, r3, #9
 8003e80:	4013      	ands	r3, r2
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x552>
 8003e84:	e01b      	b.n	8003ebe <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003e86:	4b42      	ldr	r3, [pc, #264]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e8a:	4b41      	ldr	r3, [pc, #260]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003e8c:	4943      	ldr	r1, [pc, #268]	; (8003f9c <HAL_RCC_OscConfig+0x688>)
 8003e8e:	400a      	ands	r2, r1
 8003e90:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e92:	f7fe faa3 	bl	80023dc <HAL_GetTick>
 8003e96:	0003      	movs	r3, r0
 8003e98:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e9c:	f7fe fa9e 	bl	80023dc <HAL_GetTick>
 8003ea0:	0002      	movs	r2, r0
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e0b2      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003eae:	4b38      	ldr	r3, [pc, #224]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	025b      	lsls	r3, r3, #9
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x588>
 8003eba:	e000      	b.n	8003ebe <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003ebc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d100      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x5b4>
 8003ec6:	e0a4      	b.n	8004012 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	220c      	movs	r2, #12
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d100      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x5c2>
 8003ed4:	e078      	b.n	8003fc8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d14c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ede:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003ee4:	492e      	ldr	r1, [pc, #184]	; (8003fa0 <HAL_RCC_OscConfig+0x68c>)
 8003ee6:	400a      	ands	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fe fa77 	bl	80023dc <HAL_GetTick>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef4:	f7fe fa72 	bl	80023dc <HAL_GetTick>
 8003ef8:	0002      	movs	r2, r0
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e086      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f06:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	049b      	lsls	r3, r3, #18
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f12:	4b1f      	ldr	r3, [pc, #124]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	220f      	movs	r2, #15
 8003f18:	4393      	bics	r3, r2
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003f22:	430a      	orrs	r2, r1
 8003f24:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f26:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4a1e      	ldr	r2, [pc, #120]	; (8003fa4 <HAL_RCC_OscConfig+0x690>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	0019      	movs	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f40:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003f46:	2180      	movs	r1, #128	; 0x80
 8003f48:	0449      	lsls	r1, r1, #17
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fe fa45 	bl	80023dc <HAL_GetTick>
 8003f52:	0003      	movs	r3, r0
 8003f54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fe fa40 	bl	80023dc <HAL_GetTick>
 8003f5c:	0002      	movs	r2, r0
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e054      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f6a:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	049b      	lsls	r3, r3, #18
 8003f72:	4013      	ands	r3, r2
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x644>
 8003f76:	e04c      	b.n	8004012 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <HAL_RCC_OscConfig+0x67c>)
 8003f7e:	4908      	ldr	r1, [pc, #32]	; (8003fa0 <HAL_RCC_OscConfig+0x68c>)
 8003f80:	400a      	ands	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f84:	f7fe fa2a 	bl	80023dc <HAL_GetTick>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f8c:	e015      	b.n	8003fba <HAL_RCC_OscConfig+0x6a6>
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	40021000 	.word	0x40021000
 8003f94:	00001388 	.word	0x00001388
 8003f98:	efffffff 	.word	0xefffffff
 8003f9c:	fffeffff 	.word	0xfffeffff
 8003fa0:	feffffff 	.word	0xfeffffff
 8003fa4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7fe fa18 	bl	80023dc <HAL_GetTick>
 8003fac:	0002      	movs	r2, r0
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e02c      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fba:	4b18      	ldr	r3, [pc, #96]	; (800401c <HAL_RCC_OscConfig+0x708>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	049b      	lsls	r3, r3, #18
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x694>
 8003fc6:	e024      	b.n	8004012 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e01f      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <HAL_RCC_OscConfig+0x708>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <HAL_RCC_OscConfig+0x708>)
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	23c0      	movs	r3, #192	; 0xc0
 8003fe4:	025b      	lsls	r3, r3, #9
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d10e      	bne.n	800400e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	220f      	movs	r2, #15
 8003ff4:	401a      	ands	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	23f0      	movs	r3, #240	; 0xf0
 8004002:	039b      	lsls	r3, r3, #14
 8004004:	401a      	ands	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d001      	beq.n	8004012 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	0018      	movs	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	b008      	add	sp, #32
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000

08004020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0bf      	b.n	80041b4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004034:	4b61      	ldr	r3, [pc, #388]	; (80041bc <HAL_RCC_ClockConfig+0x19c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2201      	movs	r2, #1
 800403a:	4013      	ands	r3, r2
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d911      	bls.n	8004066 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b5e      	ldr	r3, [pc, #376]	; (80041bc <HAL_RCC_ClockConfig+0x19c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	4393      	bics	r3, r2
 800404a:	0019      	movs	r1, r3
 800404c:	4b5b      	ldr	r3, [pc, #364]	; (80041bc <HAL_RCC_ClockConfig+0x19c>)
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004054:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_RCC_ClockConfig+0x19c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	4013      	ands	r3, r2
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d001      	beq.n	8004066 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e0a6      	b.n	80041b4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2202      	movs	r2, #2
 800406c:	4013      	ands	r3, r2
 800406e:	d015      	beq.n	800409c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2204      	movs	r2, #4
 8004076:	4013      	ands	r3, r2
 8004078:	d006      	beq.n	8004088 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800407a:	4b51      	ldr	r3, [pc, #324]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	4b50      	ldr	r3, [pc, #320]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 8004080:	21e0      	movs	r1, #224	; 0xe0
 8004082:	00c9      	lsls	r1, r1, #3
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004088:	4b4d      	ldr	r3, [pc, #308]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	22f0      	movs	r2, #240	; 0xf0
 800408e:	4393      	bics	r3, r2
 8004090:	0019      	movs	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	4b4a      	ldr	r3, [pc, #296]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	d04c      	beq.n	8004140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	029b      	lsls	r3, r3, #10
 80040b6:	4013      	ands	r3, r2
 80040b8:	d120      	bne.n	80040fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e07a      	b.n	80041b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c6:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	049b      	lsls	r3, r3, #18
 80040ce:	4013      	ands	r3, r2
 80040d0:	d114      	bne.n	80040fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e06e      	b.n	80041b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80040de:	4b38      	ldr	r3, [pc, #224]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 80040e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	025b      	lsls	r3, r3, #9
 80040e6:	4013      	ands	r3, r2
 80040e8:	d108      	bne.n	80040fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e062      	b.n	80041b4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ee:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2202      	movs	r2, #2
 80040f4:	4013      	ands	r3, r2
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e05b      	b.n	80041b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040fc:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2203      	movs	r2, #3
 8004102:	4393      	bics	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004110:	f7fe f964 	bl	80023dc <HAL_GetTick>
 8004114:	0003      	movs	r3, r0
 8004116:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004118:	e009      	b.n	800412e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800411a:	f7fe f95f 	bl	80023dc <HAL_GetTick>
 800411e:	0002      	movs	r2, r0
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	4a27      	ldr	r2, [pc, #156]	; (80041c4 <HAL_RCC_ClockConfig+0x1a4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e042      	b.n	80041b4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	220c      	movs	r2, #12
 8004134:	401a      	ands	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	429a      	cmp	r2, r3
 800413e:	d1ec      	bne.n	800411a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004140:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <HAL_RCC_ClockConfig+0x19c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2201      	movs	r2, #1
 8004146:	4013      	ands	r3, r2
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d211      	bcs.n	8004172 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCC_ClockConfig+0x19c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	4393      	bics	r3, r2
 8004156:	0019      	movs	r1, r3
 8004158:	4b18      	ldr	r3, [pc, #96]	; (80041bc <HAL_RCC_ClockConfig+0x19c>)
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004160:	4b16      	ldr	r3, [pc, #88]	; (80041bc <HAL_RCC_ClockConfig+0x19c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	4013      	ands	r3, r2
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d001      	beq.n	8004172 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e020      	b.n	80041b4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2204      	movs	r2, #4
 8004178:	4013      	ands	r3, r2
 800417a:	d009      	beq.n	8004190 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800417c:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a11      	ldr	r2, [pc, #68]	; (80041c8 <HAL_RCC_ClockConfig+0x1a8>)
 8004182:	4013      	ands	r3, r2
 8004184:	0019      	movs	r1, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 800418c:	430a      	orrs	r2, r1
 800418e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004190:	f000 f820 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8004194:	0001      	movs	r1, r0
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <HAL_RCC_ClockConfig+0x1a0>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	091b      	lsrs	r3, r3, #4
 800419c:	220f      	movs	r2, #15
 800419e:	4013      	ands	r3, r2
 80041a0:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <HAL_RCC_ClockConfig+0x1ac>)
 80041a2:	5cd3      	ldrb	r3, [r2, r3]
 80041a4:	000a      	movs	r2, r1
 80041a6:	40da      	lsrs	r2, r3
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_ClockConfig+0x1b0>)
 80041aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80041ac:	2003      	movs	r0, #3
 80041ae:	f7fe f8cf 	bl	8002350 <HAL_InitTick>
  
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b004      	add	sp, #16
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40022000 	.word	0x40022000
 80041c0:	40021000 	.word	0x40021000
 80041c4:	00001388 	.word	0x00001388
 80041c8:	fffff8ff 	.word	0xfffff8ff
 80041cc:	08004b68 	.word	0x08004b68
 80041d0:	20000004 	.word	0x20000004

080041d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b08f      	sub	sp, #60	; 0x3c
 80041d8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80041da:	2314      	movs	r3, #20
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	4a38      	ldr	r2, [pc, #224]	; (80042c0 <HAL_RCC_GetSysClockFreq+0xec>)
 80041e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80041e2:	c313      	stmia	r3!, {r0, r1, r4}
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80041e8:	1d3b      	adds	r3, r7, #4
 80041ea:	4a36      	ldr	r2, [pc, #216]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80041ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80041ee:	c313      	stmia	r3!, {r0, r1, r4}
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f8:	2300      	movs	r3, #0
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fc:	2300      	movs	r3, #0
 80041fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004200:	2300      	movs	r3, #0
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004208:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	220c      	movs	r2, #12
 8004212:	4013      	ands	r3, r2
 8004214:	2b0c      	cmp	r3, #12
 8004216:	d047      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0xd4>
 8004218:	d849      	bhi.n	80042ae <HAL_RCC_GetSysClockFreq+0xda>
 800421a:	2b04      	cmp	r3, #4
 800421c:	d002      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0x50>
 800421e:	2b08      	cmp	r3, #8
 8004220:	d003      	beq.n	800422a <HAL_RCC_GetSysClockFreq+0x56>
 8004222:	e044      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004224:	4b29      	ldr	r3, [pc, #164]	; (80042cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004226:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004228:	e044      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	0c9b      	lsrs	r3, r3, #18
 800422e:	220f      	movs	r2, #15
 8004230:	4013      	ands	r3, r2
 8004232:	2214      	movs	r2, #20
 8004234:	18ba      	adds	r2, r7, r2
 8004236:	5cd3      	ldrb	r3, [r2, r3]
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800423a:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	220f      	movs	r2, #15
 8004240:	4013      	ands	r3, r2
 8004242:	1d3a      	adds	r2, r7, #4
 8004244:	5cd3      	ldrb	r3, [r2, r3]
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800424a:	23c0      	movs	r3, #192	; 0xc0
 800424c:	025b      	lsls	r3, r3, #9
 800424e:	401a      	ands	r2, r3
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	025b      	lsls	r3, r3, #9
 8004254:	429a      	cmp	r2, r3
 8004256:	d109      	bne.n	800426c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800425a:	481c      	ldr	r0, [pc, #112]	; (80042cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800425c:	f7fb ff52 	bl	8000104 <__udivsi3>
 8004260:	0003      	movs	r3, r0
 8004262:	001a      	movs	r2, r3
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	4353      	muls	r3, r2
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
 800426a:	e01a      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800426c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426e:	23c0      	movs	r3, #192	; 0xc0
 8004270:	025b      	lsls	r3, r3, #9
 8004272:	401a      	ands	r2, r3
 8004274:	23c0      	movs	r3, #192	; 0xc0
 8004276:	025b      	lsls	r3, r3, #9
 8004278:	429a      	cmp	r2, r3
 800427a:	d109      	bne.n	8004290 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800427c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800427e:	4814      	ldr	r0, [pc, #80]	; (80042d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004280:	f7fb ff40 	bl	8000104 <__udivsi3>
 8004284:	0003      	movs	r3, r0
 8004286:	001a      	movs	r2, r3
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	4353      	muls	r3, r2
 800428c:	637b      	str	r3, [r7, #52]	; 0x34
 800428e:	e008      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004292:	4810      	ldr	r0, [pc, #64]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004294:	f7fb ff36 	bl	8000104 <__udivsi3>
 8004298:	0003      	movs	r3, r0
 800429a:	001a      	movs	r2, r3
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	4353      	muls	r3, r2
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80042a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042a6:	e005      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80042a8:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80042aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042ac:	e002      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x100>)
 80042b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80042b6:	0018      	movs	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b00f      	add	sp, #60	; 0x3c
 80042bc:	bd90      	pop	{r4, r7, pc}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	08004b48 	.word	0x08004b48
 80042c4:	08004b58 	.word	0x08004b58
 80042c8:	40021000 	.word	0x40021000
 80042cc:	00b71b00 	.word	0x00b71b00
 80042d0:	02dc6c00 	.word	0x02dc6c00
 80042d4:	007a1200 	.word	0x007a1200

080042d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0a8      	b.n	800443c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	2382      	movs	r3, #130	; 0x82
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d009      	beq.n	8004312 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	61da      	str	r2, [r3, #28]
 8004304:	e005      	b.n	8004312 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	225d      	movs	r2, #93	; 0x5d
 800431c:	5c9b      	ldrb	r3, [r3, r2]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	225c      	movs	r2, #92	; 0x5c
 8004328:	2100      	movs	r1, #0
 800432a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	0018      	movs	r0, r3
 8004330:	f7fd ff14 	bl	800215c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	225d      	movs	r2, #93	; 0x5d
 8004338:	2102      	movs	r1, #2
 800433a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2140      	movs	r1, #64	; 0x40
 8004348:	438a      	bics	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	23e0      	movs	r3, #224	; 0xe0
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	429a      	cmp	r2, r3
 8004356:	d902      	bls.n	800435e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e002      	b.n	8004364 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	015b      	lsls	r3, r3, #5
 8004362:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	23f0      	movs	r3, #240	; 0xf0
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	429a      	cmp	r2, r3
 800436e:	d008      	beq.n	8004382 <HAL_SPI_Init+0xaa>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	23e0      	movs	r3, #224	; 0xe0
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	429a      	cmp	r2, r3
 800437a:	d002      	beq.n	8004382 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	2382      	movs	r3, #130	; 0x82
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	401a      	ands	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6899      	ldr	r1, [r3, #8]
 8004390:	2384      	movs	r3, #132	; 0x84
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	400b      	ands	r3, r1
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2102      	movs	r1, #2
 800439e:	400b      	ands	r3, r1
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	2101      	movs	r1, #1
 80043a8:	400b      	ands	r3, r1
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6999      	ldr	r1, [r3, #24]
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	400b      	ands	r3, r1
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	2138      	movs	r1, #56	; 0x38
 80043be:	400b      	ands	r3, r1
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	2180      	movs	r1, #128	; 0x80
 80043c8:	400b      	ands	r3, r1
 80043ca:	431a      	orrs	r2, r3
 80043cc:	0011      	movs	r1, r2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	019b      	lsls	r3, r3, #6
 80043d6:	401a      	ands	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	2204      	movs	r2, #4
 80043e8:	401a      	ands	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	2110      	movs	r1, #16
 80043f0:	400b      	ands	r3, r1
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	2108      	movs	r1, #8
 80043fa:	400b      	ands	r3, r1
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68d9      	ldr	r1, [r3, #12]
 8004402:	23f0      	movs	r3, #240	; 0xf0
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	400b      	ands	r3, r1
 8004408:	431a      	orrs	r2, r3
 800440a:	0011      	movs	r1, r2
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	015b      	lsls	r3, r3, #5
 8004412:	401a      	ands	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4907      	ldr	r1, [pc, #28]	; (8004444 <HAL_SPI_Init+0x16c>)
 8004428:	400a      	ands	r2, r1
 800442a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	225d      	movs	r2, #93	; 0x5d
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	b004      	add	sp, #16
 8004442:	bd80      	pop	{r7, pc}
 8004444:	fffff7ff 	.word	0xfffff7ff

08004448 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	001a      	movs	r2, r3
 8004456:	1cbb      	adds	r3, r7, #2
 8004458:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800445a:	2301      	movs	r3, #1
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800445e:	2323      	movs	r3, #35	; 0x23
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	225c      	movs	r2, #92	; 0x5c
 800446a:	5c9b      	ldrb	r3, [r3, r2]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x2c>
 8004470:	2302      	movs	r3, #2
 8004472:	e1b5      	b.n	80047e0 <HAL_SPI_TransmitReceive+0x398>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	225c      	movs	r2, #92	; 0x5c
 8004478:	2101      	movs	r1, #1
 800447a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800447c:	f7fd ffae 	bl	80023dc <HAL_GetTick>
 8004480:	0003      	movs	r3, r0
 8004482:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004484:	201b      	movs	r0, #27
 8004486:	183b      	adds	r3, r7, r0
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	215d      	movs	r1, #93	; 0x5d
 800448c:	5c52      	ldrb	r2, [r2, r1]
 800448e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004496:	2312      	movs	r3, #18
 8004498:	18fb      	adds	r3, r7, r3
 800449a:	1cba      	adds	r2, r7, #2
 800449c:	8812      	ldrh	r2, [r2, #0]
 800449e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044a0:	183b      	adds	r3, r7, r0
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d011      	beq.n	80044cc <HAL_SPI_TransmitReceive+0x84>
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	2382      	movs	r3, #130	; 0x82
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d107      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d103      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x7a>
 80044ba:	183b      	adds	r3, r7, r0
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d004      	beq.n	80044cc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80044c2:	2323      	movs	r3, #35	; 0x23
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	2202      	movs	r2, #2
 80044c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80044ca:	e17e      	b.n	80047ca <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d006      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x98>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x98>
 80044d8:	1cbb      	adds	r3, r7, #2
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d104      	bne.n	80044ea <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80044e0:	2323      	movs	r3, #35	; 0x23
 80044e2:	18fb      	adds	r3, r7, r3
 80044e4:	2201      	movs	r2, #1
 80044e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80044e8:	e16f      	b.n	80047ca <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	225d      	movs	r2, #93	; 0x5d
 80044ee:	5c9b      	ldrb	r3, [r3, r2]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d003      	beq.n	80044fe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	225d      	movs	r2, #93	; 0x5d
 80044fa:	2105      	movs	r1, #5
 80044fc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1cba      	adds	r2, r7, #2
 800450e:	2146      	movs	r1, #70	; 0x46
 8004510:	8812      	ldrh	r2, [r2, #0]
 8004512:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1cba      	adds	r2, r7, #2
 8004518:	2144      	movs	r1, #68	; 0x44
 800451a:	8812      	ldrh	r2, [r2, #0]
 800451c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1cba      	adds	r2, r7, #2
 8004528:	8812      	ldrh	r2, [r2, #0]
 800452a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1cba      	adds	r2, r7, #2
 8004530:	8812      	ldrh	r2, [r2, #0]
 8004532:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	23e0      	movs	r3, #224	; 0xe0
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	429a      	cmp	r2, r3
 800454a:	d908      	bls.n	800455e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	49a4      	ldr	r1, [pc, #656]	; (80047e8 <HAL_SPI_TransmitReceive+0x3a0>)
 8004558:	400a      	ands	r2, r1
 800455a:	605a      	str	r2, [r3, #4]
 800455c:	e008      	b.n	8004570 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	0149      	lsls	r1, r1, #5
 800456c:	430a      	orrs	r2, r1
 800456e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2240      	movs	r2, #64	; 0x40
 8004578:	4013      	ands	r3, r2
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d007      	beq.n	800458e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2140      	movs	r1, #64	; 0x40
 800458a:	430a      	orrs	r2, r1
 800458c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	23e0      	movs	r3, #224	; 0xe0
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	429a      	cmp	r2, r3
 8004598:	d800      	bhi.n	800459c <HAL_SPI_TransmitReceive+0x154>
 800459a:	e07f      	b.n	800469c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_SPI_TransmitReceive+0x168>
 80045a4:	2312      	movs	r3, #18
 80045a6:	18fb      	adds	r3, r7, r3
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d000      	beq.n	80045b0 <HAL_SPI_TransmitReceive+0x168>
 80045ae:	e069      	b.n	8004684 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d4:	e056      	b.n	8004684 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2202      	movs	r2, #2
 80045de:	4013      	ands	r3, r2
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d11b      	bne.n	800461c <HAL_SPI_TransmitReceive+0x1d4>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <HAL_SPI_TransmitReceive+0x1d4>
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d113      	bne.n	800461c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	1c9a      	adds	r2, r3, #2
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2201      	movs	r2, #1
 8004624:	4013      	ands	r3, r2
 8004626:	2b01      	cmp	r3, #1
 8004628:	d11c      	bne.n	8004664 <HAL_SPI_TransmitReceive+0x21c>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2246      	movs	r2, #70	; 0x46
 800462e:	5a9b      	ldrh	r3, [r3, r2]
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d016      	beq.n	8004664 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	b292      	uxth	r2, r2
 8004642:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	1c9a      	adds	r2, r3, #2
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2246      	movs	r2, #70	; 0x46
 8004652:	5a9b      	ldrh	r3, [r3, r2]
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b299      	uxth	r1, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2246      	movs	r2, #70	; 0x46
 800465e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004660:	2301      	movs	r3, #1
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004664:	f7fd feba 	bl	80023dc <HAL_GetTick>
 8004668:	0002      	movs	r2, r0
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004670:	429a      	cmp	r2, r3
 8004672:	d807      	bhi.n	8004684 <HAL_SPI_TransmitReceive+0x23c>
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	3301      	adds	r3, #1
 8004678:	d004      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800467a:	2323      	movs	r3, #35	; 0x23
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	2203      	movs	r2, #3
 8004680:	701a      	strb	r2, [r3, #0]
        goto error;
 8004682:	e0a2      	b.n	80047ca <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1a3      	bne.n	80045d6 <HAL_SPI_TransmitReceive+0x18e>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2246      	movs	r2, #70	; 0x46
 8004692:	5a9b      	ldrh	r3, [r3, r2]
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d19d      	bne.n	80045d6 <HAL_SPI_TransmitReceive+0x18e>
 800469a:	e085      	b.n	80047a8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_SPI_TransmitReceive+0x268>
 80046a4:	2312      	movs	r3, #18
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d000      	beq.n	80046b0 <HAL_SPI_TransmitReceive+0x268>
 80046ae:	e070      	b.n	8004792 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	7812      	ldrb	r2, [r2, #0]
 80046bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d6:	e05c      	b.n	8004792 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2202      	movs	r2, #2
 80046e0:	4013      	ands	r3, r2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d11c      	bne.n	8004720 <HAL_SPI_TransmitReceive+0x2d8>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d017      	beq.n	8004720 <HAL_SPI_TransmitReceive+0x2d8>
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d114      	bne.n	8004720 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2201      	movs	r2, #1
 8004728:	4013      	ands	r3, r2
 800472a:	2b01      	cmp	r3, #1
 800472c:	d11e      	bne.n	800476c <HAL_SPI_TransmitReceive+0x324>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2246      	movs	r2, #70	; 0x46
 8004732:	5a9b      	ldrh	r3, [r3, r2]
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d018      	beq.n	800476c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	001a      	movs	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	7812      	ldrb	r2, [r2, #0]
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2246      	movs	r2, #70	; 0x46
 800475a:	5a9b      	ldrh	r3, [r3, r2]
 800475c:	b29b      	uxth	r3, r3
 800475e:	3b01      	subs	r3, #1
 8004760:	b299      	uxth	r1, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2246      	movs	r2, #70	; 0x46
 8004766:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004768:	2301      	movs	r3, #1
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800476c:	f7fd fe36 	bl	80023dc <HAL_GetTick>
 8004770:	0002      	movs	r2, r0
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004778:	429a      	cmp	r2, r3
 800477a:	d802      	bhi.n	8004782 <HAL_SPI_TransmitReceive+0x33a>
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	3301      	adds	r3, #1
 8004780:	d102      	bne.n	8004788 <HAL_SPI_TransmitReceive+0x340>
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004788:	2323      	movs	r3, #35	; 0x23
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	2203      	movs	r2, #3
 800478e:	701a      	strb	r2, [r3, #0]
        goto error;
 8004790:	e01b      	b.n	80047ca <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d19d      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x290>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2246      	movs	r2, #70	; 0x46
 80047a0:	5a9b      	ldrh	r3, [r3, r2]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d197      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 f94c 	bl	8004a4c <SPI_EndRxTxTransaction>
 80047b4:	1e03      	subs	r3, r0, #0
 80047b6:	d007      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80047b8:	2323      	movs	r3, #35	; 0x23
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	661a      	str	r2, [r3, #96]	; 0x60
 80047c6:	e000      	b.n	80047ca <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80047c8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	225d      	movs	r2, #93	; 0x5d
 80047ce:	2101      	movs	r1, #1
 80047d0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	225c      	movs	r2, #92	; 0x5c
 80047d6:	2100      	movs	r1, #0
 80047d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80047da:	2323      	movs	r3, #35	; 0x23
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	781b      	ldrb	r3, [r3, #0]
}
 80047e0:	0018      	movs	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b00a      	add	sp, #40	; 0x28
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	ffffefff 	.word	0xffffefff

080047ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	1dfb      	adds	r3, r7, #7
 80047fa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047fc:	f7fd fdee 	bl	80023dc <HAL_GetTick>
 8004800:	0002      	movs	r2, r0
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	18d3      	adds	r3, r2, r3
 800480a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800480c:	f7fd fde6 	bl	80023dc <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004814:	4b3a      	ldr	r3, [pc, #232]	; (8004900 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	015b      	lsls	r3, r3, #5
 800481a:	0d1b      	lsrs	r3, r3, #20
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	4353      	muls	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004822:	e058      	b.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	3301      	adds	r3, #1
 8004828:	d055      	beq.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800482a:	f7fd fdd7 	bl	80023dc <HAL_GetTick>
 800482e:	0002      	movs	r2, r0
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	429a      	cmp	r2, r3
 8004838:	d902      	bls.n	8004840 <SPI_WaitFlagStateUntilTimeout+0x54>
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d142      	bne.n	80048c6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	21e0      	movs	r1, #224	; 0xe0
 800484c:	438a      	bics	r2, r1
 800484e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	2382      	movs	r3, #130	; 0x82
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	429a      	cmp	r2, r3
 800485a:	d113      	bne.n	8004884 <SPI_WaitFlagStateUntilTimeout+0x98>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	429a      	cmp	r2, r3
 8004866:	d005      	beq.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	429a      	cmp	r2, r3
 8004872:	d107      	bne.n	8004884 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2140      	movs	r1, #64	; 0x40
 8004880:	438a      	bics	r2, r1
 8004882:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004888:	2380      	movs	r3, #128	; 0x80
 800488a:	019b      	lsls	r3, r3, #6
 800488c:	429a      	cmp	r2, r3
 800488e:	d110      	bne.n	80048b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	491a      	ldr	r1, [pc, #104]	; (8004904 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800489c:	400a      	ands	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2180      	movs	r1, #128	; 0x80
 80048ac:	0189      	lsls	r1, r1, #6
 80048ae:	430a      	orrs	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	225d      	movs	r2, #93	; 0x5d
 80048b6:	2101      	movs	r1, #1
 80048b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	225c      	movs	r2, #92	; 0x5c
 80048be:	2100      	movs	r1, #0
 80048c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e017      	b.n	80048f6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	4013      	ands	r3, r2
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	425a      	negs	r2, r3
 80048e6:	4153      	adcs	r3, r2
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	001a      	movs	r2, r3
 80048ec:	1dfb      	adds	r3, r7, #7
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d197      	bne.n	8004824 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	0018      	movs	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b008      	add	sp, #32
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	20000004 	.word	0x20000004
 8004904:	ffffdfff 	.word	0xffffdfff

08004908 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	; 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004916:	2317      	movs	r3, #23
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800491e:	f7fd fd5d 	bl	80023dc <HAL_GetTick>
 8004922:	0002      	movs	r2, r0
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	18d3      	adds	r3, r2, r3
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800492e:	f7fd fd55 	bl	80023dc <HAL_GetTick>
 8004932:	0003      	movs	r3, r0
 8004934:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800493e:	4b41      	ldr	r3, [pc, #260]	; (8004a44 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	0013      	movs	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	189b      	adds	r3, r3, r2
 8004948:	00da      	lsls	r2, r3, #3
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	0d1b      	lsrs	r3, r3, #20
 800494e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004950:	4353      	muls	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004954:	e068      	b.n	8004a28 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	23c0      	movs	r3, #192	; 0xc0
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	429a      	cmp	r2, r3
 800495e:	d10a      	bne.n	8004976 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	b2da      	uxtb	r2, r3
 800496c:	2117      	movs	r1, #23
 800496e:	187b      	adds	r3, r7, r1
 8004970:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004972:	187b      	adds	r3, r7, r1
 8004974:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	3301      	adds	r3, #1
 800497a:	d055      	beq.n	8004a28 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800497c:	f7fd fd2e 	bl	80023dc <HAL_GetTick>
 8004980:	0002      	movs	r2, r0
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004988:	429a      	cmp	r2, r3
 800498a:	d902      	bls.n	8004992 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	2b00      	cmp	r3, #0
 8004990:	d142      	bne.n	8004a18 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	21e0      	movs	r1, #224	; 0xe0
 800499e:	438a      	bics	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	2382      	movs	r3, #130	; 0x82
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d113      	bne.n	80049d6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d005      	beq.n	80049c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d107      	bne.n	80049d6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2140      	movs	r1, #64	; 0x40
 80049d2:	438a      	bics	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	019b      	lsls	r3, r3, #6
 80049de:	429a      	cmp	r2, r3
 80049e0:	d110      	bne.n	8004a04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4916      	ldr	r1, [pc, #88]	; (8004a48 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80049ee:	400a      	ands	r2, r1
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	0189      	lsls	r1, r1, #6
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	225d      	movs	r2, #93	; 0x5d
 8004a08:	2101      	movs	r1, #1
 8004a0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	225c      	movs	r2, #92	; 0x5c
 8004a10:	2100      	movs	r1, #0
 8004a12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e010      	b.n	8004a3a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d18e      	bne.n	8004956 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b00a      	add	sp, #40	; 0x28
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	20000004 	.word	0x20000004
 8004a48:	ffffdfff 	.word	0xffffdfff

08004a4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	23c0      	movs	r3, #192	; 0xc0
 8004a5c:	0159      	lsls	r1, r3, #5
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	0013      	movs	r3, r2
 8004a66:	2200      	movs	r2, #0
 8004a68:	f7ff ff4e 	bl	8004908 <SPI_WaitFifoStateUntilTimeout>
 8004a6c:	1e03      	subs	r3, r0, #0
 8004a6e:	d007      	beq.n	8004a80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a74:	2220      	movs	r2, #32
 8004a76:	431a      	orrs	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e027      	b.n	8004ad0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	0013      	movs	r3, r2
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2180      	movs	r1, #128	; 0x80
 8004a8e:	f7ff fead 	bl	80047ec <SPI_WaitFlagStateUntilTimeout>
 8004a92:	1e03      	subs	r3, r0, #0
 8004a94:	d007      	beq.n	8004aa6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e014      	b.n	8004ad0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	23c0      	movs	r3, #192	; 0xc0
 8004aaa:	00d9      	lsls	r1, r3, #3
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	0013      	movs	r3, r2
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f7ff ff27 	bl	8004908 <SPI_WaitFifoStateUntilTimeout>
 8004aba:	1e03      	subs	r3, r0, #0
 8004abc:	d007      	beq.n	8004ace <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e000      	b.n	8004ad0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b004      	add	sp, #16
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <memset>:
 8004ad8:	0003      	movs	r3, r0
 8004ada:	1882      	adds	r2, r0, r2
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d100      	bne.n	8004ae2 <memset+0xa>
 8004ae0:	4770      	bx	lr
 8004ae2:	7019      	strb	r1, [r3, #0]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	e7f9      	b.n	8004adc <memset+0x4>

08004ae8 <__libc_init_array>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	2600      	movs	r6, #0
 8004aec:	4c0c      	ldr	r4, [pc, #48]	; (8004b20 <__libc_init_array+0x38>)
 8004aee:	4d0d      	ldr	r5, [pc, #52]	; (8004b24 <__libc_init_array+0x3c>)
 8004af0:	1b64      	subs	r4, r4, r5
 8004af2:	10a4      	asrs	r4, r4, #2
 8004af4:	42a6      	cmp	r6, r4
 8004af6:	d109      	bne.n	8004b0c <__libc_init_array+0x24>
 8004af8:	2600      	movs	r6, #0
 8004afa:	f000 f819 	bl	8004b30 <_init>
 8004afe:	4c0a      	ldr	r4, [pc, #40]	; (8004b28 <__libc_init_array+0x40>)
 8004b00:	4d0a      	ldr	r5, [pc, #40]	; (8004b2c <__libc_init_array+0x44>)
 8004b02:	1b64      	subs	r4, r4, r5
 8004b04:	10a4      	asrs	r4, r4, #2
 8004b06:	42a6      	cmp	r6, r4
 8004b08:	d105      	bne.n	8004b16 <__libc_init_array+0x2e>
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
 8004b0c:	00b3      	lsls	r3, r6, #2
 8004b0e:	58eb      	ldr	r3, [r5, r3]
 8004b10:	4798      	blx	r3
 8004b12:	3601      	adds	r6, #1
 8004b14:	e7ee      	b.n	8004af4 <__libc_init_array+0xc>
 8004b16:	00b3      	lsls	r3, r6, #2
 8004b18:	58eb      	ldr	r3, [r5, r3]
 8004b1a:	4798      	blx	r3
 8004b1c:	3601      	adds	r6, #1
 8004b1e:	e7f2      	b.n	8004b06 <__libc_init_array+0x1e>
 8004b20:	08004b78 	.word	0x08004b78
 8004b24:	08004b78 	.word	0x08004b78
 8004b28:	08004b7c 	.word	0x08004b7c
 8004b2c:	08004b78 	.word	0x08004b78

08004b30 <_init>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr

08004b3c <_fini>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr
