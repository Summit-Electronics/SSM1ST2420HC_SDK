
1_AXIS_F091_AMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080053b4  080053b4  000153b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005424  08005424  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005424  08005424  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005424  08005424  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800542c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001154  20000010  0800543c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001164  0800543c  00021164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008bb8  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ac5  00000000  00000000  00028c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000663  00000000  00000000  0002af68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a53a  00000000  00000000  0002b5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a1ea  00000000  00000000  00045b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f6ef  00000000  00000000  0004fcef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f80  00000000  00000000  000ef3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f1360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800539c 	.word	0x0800539c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	0800539c 	.word	0x0800539c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f001 faaf 	bl	8001788 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f001 f963 	bl	80014fc <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 fdda 	bl	8000df8 <__aeabi_dsub>
 8000244:	f001 f95a 	bl	80014fc <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_f2iz>:
 8000258:	0241      	lsls	r1, r0, #9
 800025a:	0042      	lsls	r2, r0, #1
 800025c:	0fc3      	lsrs	r3, r0, #31
 800025e:	0a49      	lsrs	r1, r1, #9
 8000260:	2000      	movs	r0, #0
 8000262:	0e12      	lsrs	r2, r2, #24
 8000264:	2a7e      	cmp	r2, #126	; 0x7e
 8000266:	dd03      	ble.n	8000270 <__aeabi_f2iz+0x18>
 8000268:	2a9d      	cmp	r2, #157	; 0x9d
 800026a:	dd02      	ble.n	8000272 <__aeabi_f2iz+0x1a>
 800026c:	4a09      	ldr	r2, [pc, #36]	; (8000294 <__aeabi_f2iz+0x3c>)
 800026e:	1898      	adds	r0, r3, r2
 8000270:	4770      	bx	lr
 8000272:	2080      	movs	r0, #128	; 0x80
 8000274:	0400      	lsls	r0, r0, #16
 8000276:	4301      	orrs	r1, r0
 8000278:	2a95      	cmp	r2, #149	; 0x95
 800027a:	dc07      	bgt.n	800028c <__aeabi_f2iz+0x34>
 800027c:	2096      	movs	r0, #150	; 0x96
 800027e:	1a82      	subs	r2, r0, r2
 8000280:	40d1      	lsrs	r1, r2
 8000282:	4248      	negs	r0, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f3      	bne.n	8000270 <__aeabi_f2iz+0x18>
 8000288:	0008      	movs	r0, r1
 800028a:	e7f1      	b.n	8000270 <__aeabi_f2iz+0x18>
 800028c:	3a96      	subs	r2, #150	; 0x96
 800028e:	4091      	lsls	r1, r2
 8000290:	e7f7      	b.n	8000282 <__aeabi_f2iz+0x2a>
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	7fffffff 	.word	0x7fffffff

08000298 <__aeabi_ddiv>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	4657      	mov	r7, sl
 800029c:	464e      	mov	r6, r9
 800029e:	4645      	mov	r5, r8
 80002a0:	46de      	mov	lr, fp
 80002a2:	b5e0      	push	{r5, r6, r7, lr}
 80002a4:	030c      	lsls	r4, r1, #12
 80002a6:	001f      	movs	r7, r3
 80002a8:	004b      	lsls	r3, r1, #1
 80002aa:	4681      	mov	r9, r0
 80002ac:	4692      	mov	sl, r2
 80002ae:	0005      	movs	r5, r0
 80002b0:	b085      	sub	sp, #20
 80002b2:	0b24      	lsrs	r4, r4, #12
 80002b4:	0d5b      	lsrs	r3, r3, #21
 80002b6:	0fce      	lsrs	r6, r1, #31
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d100      	bne.n	80002be <__aeabi_ddiv+0x26>
 80002bc:	e152      	b.n	8000564 <__aeabi_ddiv+0x2cc>
 80002be:	4ad2      	ldr	r2, [pc, #840]	; (8000608 <__aeabi_ddiv+0x370>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d100      	bne.n	80002c6 <__aeabi_ddiv+0x2e>
 80002c4:	e16e      	b.n	80005a4 <__aeabi_ddiv+0x30c>
 80002c6:	0f42      	lsrs	r2, r0, #29
 80002c8:	00e4      	lsls	r4, r4, #3
 80002ca:	4314      	orrs	r4, r2
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	0412      	lsls	r2, r2, #16
 80002d0:	4322      	orrs	r2, r4
 80002d2:	4690      	mov	r8, r2
 80002d4:	4acd      	ldr	r2, [pc, #820]	; (800060c <__aeabi_ddiv+0x374>)
 80002d6:	00c5      	lsls	r5, r0, #3
 80002d8:	4693      	mov	fp, r2
 80002da:	449b      	add	fp, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	4699      	mov	r9, r3
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	033c      	lsls	r4, r7, #12
 80002e4:	007b      	lsls	r3, r7, #1
 80002e6:	4650      	mov	r0, sl
 80002e8:	0b24      	lsrs	r4, r4, #12
 80002ea:	0d5b      	lsrs	r3, r3, #21
 80002ec:	0fff      	lsrs	r7, r7, #31
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d100      	bne.n	80002f4 <__aeabi_ddiv+0x5c>
 80002f2:	e11a      	b.n	800052a <__aeabi_ddiv+0x292>
 80002f4:	4ac4      	ldr	r2, [pc, #784]	; (8000608 <__aeabi_ddiv+0x370>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d100      	bne.n	80002fc <__aeabi_ddiv+0x64>
 80002fa:	e15e      	b.n	80005ba <__aeabi_ddiv+0x322>
 80002fc:	0f42      	lsrs	r2, r0, #29
 80002fe:	00e4      	lsls	r4, r4, #3
 8000300:	4322      	orrs	r2, r4
 8000302:	2480      	movs	r4, #128	; 0x80
 8000304:	0424      	lsls	r4, r4, #16
 8000306:	4314      	orrs	r4, r2
 8000308:	4ac0      	ldr	r2, [pc, #768]	; (800060c <__aeabi_ddiv+0x374>)
 800030a:	00c1      	lsls	r1, r0, #3
 800030c:	4694      	mov	ip, r2
 800030e:	465a      	mov	r2, fp
 8000310:	4463      	add	r3, ip
 8000312:	1ad3      	subs	r3, r2, r3
 8000314:	469b      	mov	fp, r3
 8000316:	2000      	movs	r0, #0
 8000318:	0033      	movs	r3, r6
 800031a:	407b      	eors	r3, r7
 800031c:	469a      	mov	sl, r3
 800031e:	464b      	mov	r3, r9
 8000320:	2b0f      	cmp	r3, #15
 8000322:	d827      	bhi.n	8000374 <__aeabi_ddiv+0xdc>
 8000324:	4aba      	ldr	r2, [pc, #744]	; (8000610 <__aeabi_ddiv+0x378>)
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	58d3      	ldr	r3, [r2, r3]
 800032a:	469f      	mov	pc, r3
 800032c:	46b2      	mov	sl, r6
 800032e:	9b00      	ldr	r3, [sp, #0]
 8000330:	2b02      	cmp	r3, #2
 8000332:	d016      	beq.n	8000362 <__aeabi_ddiv+0xca>
 8000334:	2b03      	cmp	r3, #3
 8000336:	d100      	bne.n	800033a <__aeabi_ddiv+0xa2>
 8000338:	e287      	b.n	800084a <__aeabi_ddiv+0x5b2>
 800033a:	2b01      	cmp	r3, #1
 800033c:	d000      	beq.n	8000340 <__aeabi_ddiv+0xa8>
 800033e:	e0d5      	b.n	80004ec <__aeabi_ddiv+0x254>
 8000340:	2300      	movs	r3, #0
 8000342:	2200      	movs	r2, #0
 8000344:	2500      	movs	r5, #0
 8000346:	051b      	lsls	r3, r3, #20
 8000348:	4313      	orrs	r3, r2
 800034a:	4652      	mov	r2, sl
 800034c:	07d2      	lsls	r2, r2, #31
 800034e:	4313      	orrs	r3, r2
 8000350:	0028      	movs	r0, r5
 8000352:	0019      	movs	r1, r3
 8000354:	b005      	add	sp, #20
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	46bb      	mov	fp, r7
 800035a:	46b2      	mov	sl, r6
 800035c:	46a9      	mov	r9, r5
 800035e:	46a0      	mov	r8, r4
 8000360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000362:	2200      	movs	r2, #0
 8000364:	2500      	movs	r5, #0
 8000366:	4ba8      	ldr	r3, [pc, #672]	; (8000608 <__aeabi_ddiv+0x370>)
 8000368:	e7ed      	b.n	8000346 <__aeabi_ddiv+0xae>
 800036a:	46ba      	mov	sl, r7
 800036c:	46a0      	mov	r8, r4
 800036e:	000d      	movs	r5, r1
 8000370:	9000      	str	r0, [sp, #0]
 8000372:	e7dc      	b.n	800032e <__aeabi_ddiv+0x96>
 8000374:	4544      	cmp	r4, r8
 8000376:	d200      	bcs.n	800037a <__aeabi_ddiv+0xe2>
 8000378:	e1c4      	b.n	8000704 <__aeabi_ddiv+0x46c>
 800037a:	d100      	bne.n	800037e <__aeabi_ddiv+0xe6>
 800037c:	e1bf      	b.n	80006fe <__aeabi_ddiv+0x466>
 800037e:	2301      	movs	r3, #1
 8000380:	425b      	negs	r3, r3
 8000382:	469c      	mov	ip, r3
 8000384:	002e      	movs	r6, r5
 8000386:	4640      	mov	r0, r8
 8000388:	2500      	movs	r5, #0
 800038a:	44e3      	add	fp, ip
 800038c:	0223      	lsls	r3, r4, #8
 800038e:	0e0c      	lsrs	r4, r1, #24
 8000390:	431c      	orrs	r4, r3
 8000392:	0c1b      	lsrs	r3, r3, #16
 8000394:	4699      	mov	r9, r3
 8000396:	0423      	lsls	r3, r4, #16
 8000398:	020a      	lsls	r2, r1, #8
 800039a:	0c1f      	lsrs	r7, r3, #16
 800039c:	4649      	mov	r1, r9
 800039e:	9200      	str	r2, [sp, #0]
 80003a0:	9701      	str	r7, [sp, #4]
 80003a2:	f7ff ff35 	bl	8000210 <__aeabi_uidivmod>
 80003a6:	0002      	movs	r2, r0
 80003a8:	437a      	muls	r2, r7
 80003aa:	040b      	lsls	r3, r1, #16
 80003ac:	0c31      	lsrs	r1, r6, #16
 80003ae:	4680      	mov	r8, r0
 80003b0:	4319      	orrs	r1, r3
 80003b2:	428a      	cmp	r2, r1
 80003b4:	d907      	bls.n	80003c6 <__aeabi_ddiv+0x12e>
 80003b6:	2301      	movs	r3, #1
 80003b8:	425b      	negs	r3, r3
 80003ba:	469c      	mov	ip, r3
 80003bc:	1909      	adds	r1, r1, r4
 80003be:	44e0      	add	r8, ip
 80003c0:	428c      	cmp	r4, r1
 80003c2:	d800      	bhi.n	80003c6 <__aeabi_ddiv+0x12e>
 80003c4:	e201      	b.n	80007ca <__aeabi_ddiv+0x532>
 80003c6:	1a88      	subs	r0, r1, r2
 80003c8:	4649      	mov	r1, r9
 80003ca:	f7ff ff21 	bl	8000210 <__aeabi_uidivmod>
 80003ce:	9a01      	ldr	r2, [sp, #4]
 80003d0:	0436      	lsls	r6, r6, #16
 80003d2:	4342      	muls	r2, r0
 80003d4:	0409      	lsls	r1, r1, #16
 80003d6:	0c36      	lsrs	r6, r6, #16
 80003d8:	0003      	movs	r3, r0
 80003da:	430e      	orrs	r6, r1
 80003dc:	42b2      	cmp	r2, r6
 80003de:	d904      	bls.n	80003ea <__aeabi_ddiv+0x152>
 80003e0:	1936      	adds	r6, r6, r4
 80003e2:	3b01      	subs	r3, #1
 80003e4:	42b4      	cmp	r4, r6
 80003e6:	d800      	bhi.n	80003ea <__aeabi_ddiv+0x152>
 80003e8:	e1e9      	b.n	80007be <__aeabi_ddiv+0x526>
 80003ea:	1ab0      	subs	r0, r6, r2
 80003ec:	4642      	mov	r2, r8
 80003ee:	9e00      	ldr	r6, [sp, #0]
 80003f0:	0412      	lsls	r2, r2, #16
 80003f2:	431a      	orrs	r2, r3
 80003f4:	0c33      	lsrs	r3, r6, #16
 80003f6:	001f      	movs	r7, r3
 80003f8:	0c11      	lsrs	r1, r2, #16
 80003fa:	4690      	mov	r8, r2
 80003fc:	9302      	str	r3, [sp, #8]
 80003fe:	0413      	lsls	r3, r2, #16
 8000400:	0432      	lsls	r2, r6, #16
 8000402:	0c16      	lsrs	r6, r2, #16
 8000404:	0032      	movs	r2, r6
 8000406:	0c1b      	lsrs	r3, r3, #16
 8000408:	435a      	muls	r2, r3
 800040a:	9603      	str	r6, [sp, #12]
 800040c:	437b      	muls	r3, r7
 800040e:	434e      	muls	r6, r1
 8000410:	4379      	muls	r1, r7
 8000412:	0c17      	lsrs	r7, r2, #16
 8000414:	46bc      	mov	ip, r7
 8000416:	199b      	adds	r3, r3, r6
 8000418:	4463      	add	r3, ip
 800041a:	429e      	cmp	r6, r3
 800041c:	d903      	bls.n	8000426 <__aeabi_ddiv+0x18e>
 800041e:	2680      	movs	r6, #128	; 0x80
 8000420:	0276      	lsls	r6, r6, #9
 8000422:	46b4      	mov	ip, r6
 8000424:	4461      	add	r1, ip
 8000426:	0c1e      	lsrs	r6, r3, #16
 8000428:	1871      	adds	r1, r6, r1
 800042a:	0416      	lsls	r6, r2, #16
 800042c:	041b      	lsls	r3, r3, #16
 800042e:	0c36      	lsrs	r6, r6, #16
 8000430:	199e      	adds	r6, r3, r6
 8000432:	4288      	cmp	r0, r1
 8000434:	d302      	bcc.n	800043c <__aeabi_ddiv+0x1a4>
 8000436:	d112      	bne.n	800045e <__aeabi_ddiv+0x1c6>
 8000438:	42b5      	cmp	r5, r6
 800043a:	d210      	bcs.n	800045e <__aeabi_ddiv+0x1c6>
 800043c:	4643      	mov	r3, r8
 800043e:	1e5a      	subs	r2, r3, #1
 8000440:	9b00      	ldr	r3, [sp, #0]
 8000442:	469c      	mov	ip, r3
 8000444:	4465      	add	r5, ip
 8000446:	001f      	movs	r7, r3
 8000448:	429d      	cmp	r5, r3
 800044a:	419b      	sbcs	r3, r3
 800044c:	425b      	negs	r3, r3
 800044e:	191b      	adds	r3, r3, r4
 8000450:	18c0      	adds	r0, r0, r3
 8000452:	4284      	cmp	r4, r0
 8000454:	d200      	bcs.n	8000458 <__aeabi_ddiv+0x1c0>
 8000456:	e19e      	b.n	8000796 <__aeabi_ddiv+0x4fe>
 8000458:	d100      	bne.n	800045c <__aeabi_ddiv+0x1c4>
 800045a:	e199      	b.n	8000790 <__aeabi_ddiv+0x4f8>
 800045c:	4690      	mov	r8, r2
 800045e:	1bae      	subs	r6, r5, r6
 8000460:	42b5      	cmp	r5, r6
 8000462:	41ad      	sbcs	r5, r5
 8000464:	1a40      	subs	r0, r0, r1
 8000466:	426d      	negs	r5, r5
 8000468:	1b40      	subs	r0, r0, r5
 800046a:	4284      	cmp	r4, r0
 800046c:	d100      	bne.n	8000470 <__aeabi_ddiv+0x1d8>
 800046e:	e1d2      	b.n	8000816 <__aeabi_ddiv+0x57e>
 8000470:	4649      	mov	r1, r9
 8000472:	f7ff fecd 	bl	8000210 <__aeabi_uidivmod>
 8000476:	9a01      	ldr	r2, [sp, #4]
 8000478:	040b      	lsls	r3, r1, #16
 800047a:	4342      	muls	r2, r0
 800047c:	0c31      	lsrs	r1, r6, #16
 800047e:	0005      	movs	r5, r0
 8000480:	4319      	orrs	r1, r3
 8000482:	428a      	cmp	r2, r1
 8000484:	d900      	bls.n	8000488 <__aeabi_ddiv+0x1f0>
 8000486:	e16c      	b.n	8000762 <__aeabi_ddiv+0x4ca>
 8000488:	1a88      	subs	r0, r1, r2
 800048a:	4649      	mov	r1, r9
 800048c:	f7ff fec0 	bl	8000210 <__aeabi_uidivmod>
 8000490:	9a01      	ldr	r2, [sp, #4]
 8000492:	0436      	lsls	r6, r6, #16
 8000494:	4342      	muls	r2, r0
 8000496:	0409      	lsls	r1, r1, #16
 8000498:	0c36      	lsrs	r6, r6, #16
 800049a:	0003      	movs	r3, r0
 800049c:	430e      	orrs	r6, r1
 800049e:	42b2      	cmp	r2, r6
 80004a0:	d900      	bls.n	80004a4 <__aeabi_ddiv+0x20c>
 80004a2:	e153      	b.n	800074c <__aeabi_ddiv+0x4b4>
 80004a4:	9803      	ldr	r0, [sp, #12]
 80004a6:	1ab6      	subs	r6, r6, r2
 80004a8:	0002      	movs	r2, r0
 80004aa:	042d      	lsls	r5, r5, #16
 80004ac:	431d      	orrs	r5, r3
 80004ae:	9f02      	ldr	r7, [sp, #8]
 80004b0:	042b      	lsls	r3, r5, #16
 80004b2:	0c1b      	lsrs	r3, r3, #16
 80004b4:	435a      	muls	r2, r3
 80004b6:	437b      	muls	r3, r7
 80004b8:	469c      	mov	ip, r3
 80004ba:	0c29      	lsrs	r1, r5, #16
 80004bc:	4348      	muls	r0, r1
 80004be:	0c13      	lsrs	r3, r2, #16
 80004c0:	4484      	add	ip, r0
 80004c2:	4463      	add	r3, ip
 80004c4:	4379      	muls	r1, r7
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d903      	bls.n	80004d2 <__aeabi_ddiv+0x23a>
 80004ca:	2080      	movs	r0, #128	; 0x80
 80004cc:	0240      	lsls	r0, r0, #9
 80004ce:	4684      	mov	ip, r0
 80004d0:	4461      	add	r1, ip
 80004d2:	0c18      	lsrs	r0, r3, #16
 80004d4:	0412      	lsls	r2, r2, #16
 80004d6:	041b      	lsls	r3, r3, #16
 80004d8:	0c12      	lsrs	r2, r2, #16
 80004da:	1840      	adds	r0, r0, r1
 80004dc:	189b      	adds	r3, r3, r2
 80004de:	4286      	cmp	r6, r0
 80004e0:	d200      	bcs.n	80004e4 <__aeabi_ddiv+0x24c>
 80004e2:	e100      	b.n	80006e6 <__aeabi_ddiv+0x44e>
 80004e4:	d100      	bne.n	80004e8 <__aeabi_ddiv+0x250>
 80004e6:	e0fb      	b.n	80006e0 <__aeabi_ddiv+0x448>
 80004e8:	2301      	movs	r3, #1
 80004ea:	431d      	orrs	r5, r3
 80004ec:	4b49      	ldr	r3, [pc, #292]	; (8000614 <__aeabi_ddiv+0x37c>)
 80004ee:	445b      	add	r3, fp
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	dc00      	bgt.n	80004f6 <__aeabi_ddiv+0x25e>
 80004f4:	e0aa      	b.n	800064c <__aeabi_ddiv+0x3b4>
 80004f6:	076a      	lsls	r2, r5, #29
 80004f8:	d000      	beq.n	80004fc <__aeabi_ddiv+0x264>
 80004fa:	e13d      	b.n	8000778 <__aeabi_ddiv+0x4e0>
 80004fc:	08e9      	lsrs	r1, r5, #3
 80004fe:	4642      	mov	r2, r8
 8000500:	01d2      	lsls	r2, r2, #7
 8000502:	d506      	bpl.n	8000512 <__aeabi_ddiv+0x27a>
 8000504:	4642      	mov	r2, r8
 8000506:	4b44      	ldr	r3, [pc, #272]	; (8000618 <__aeabi_ddiv+0x380>)
 8000508:	401a      	ands	r2, r3
 800050a:	2380      	movs	r3, #128	; 0x80
 800050c:	4690      	mov	r8, r2
 800050e:	00db      	lsls	r3, r3, #3
 8000510:	445b      	add	r3, fp
 8000512:	4a42      	ldr	r2, [pc, #264]	; (800061c <__aeabi_ddiv+0x384>)
 8000514:	4293      	cmp	r3, r2
 8000516:	dd00      	ble.n	800051a <__aeabi_ddiv+0x282>
 8000518:	e723      	b.n	8000362 <__aeabi_ddiv+0xca>
 800051a:	4642      	mov	r2, r8
 800051c:	055b      	lsls	r3, r3, #21
 800051e:	0755      	lsls	r5, r2, #29
 8000520:	0252      	lsls	r2, r2, #9
 8000522:	430d      	orrs	r5, r1
 8000524:	0b12      	lsrs	r2, r2, #12
 8000526:	0d5b      	lsrs	r3, r3, #21
 8000528:	e70d      	b.n	8000346 <__aeabi_ddiv+0xae>
 800052a:	4651      	mov	r1, sl
 800052c:	4321      	orrs	r1, r4
 800052e:	d100      	bne.n	8000532 <__aeabi_ddiv+0x29a>
 8000530:	e07c      	b.n	800062c <__aeabi_ddiv+0x394>
 8000532:	2c00      	cmp	r4, #0
 8000534:	d100      	bne.n	8000538 <__aeabi_ddiv+0x2a0>
 8000536:	e0fb      	b.n	8000730 <__aeabi_ddiv+0x498>
 8000538:	0020      	movs	r0, r4
 800053a:	f001 f92f 	bl	800179c <__clzsi2>
 800053e:	0002      	movs	r2, r0
 8000540:	3a0b      	subs	r2, #11
 8000542:	231d      	movs	r3, #29
 8000544:	1a9b      	subs	r3, r3, r2
 8000546:	4652      	mov	r2, sl
 8000548:	0001      	movs	r1, r0
 800054a:	40da      	lsrs	r2, r3
 800054c:	4653      	mov	r3, sl
 800054e:	3908      	subs	r1, #8
 8000550:	408b      	lsls	r3, r1
 8000552:	408c      	lsls	r4, r1
 8000554:	0019      	movs	r1, r3
 8000556:	4314      	orrs	r4, r2
 8000558:	4b31      	ldr	r3, [pc, #196]	; (8000620 <__aeabi_ddiv+0x388>)
 800055a:	4458      	add	r0, fp
 800055c:	469b      	mov	fp, r3
 800055e:	4483      	add	fp, r0
 8000560:	2000      	movs	r0, #0
 8000562:	e6d9      	b.n	8000318 <__aeabi_ddiv+0x80>
 8000564:	0003      	movs	r3, r0
 8000566:	4323      	orrs	r3, r4
 8000568:	4698      	mov	r8, r3
 800056a:	d044      	beq.n	80005f6 <__aeabi_ddiv+0x35e>
 800056c:	2c00      	cmp	r4, #0
 800056e:	d100      	bne.n	8000572 <__aeabi_ddiv+0x2da>
 8000570:	e0cf      	b.n	8000712 <__aeabi_ddiv+0x47a>
 8000572:	0020      	movs	r0, r4
 8000574:	f001 f912 	bl	800179c <__clzsi2>
 8000578:	0001      	movs	r1, r0
 800057a:	0002      	movs	r2, r0
 800057c:	390b      	subs	r1, #11
 800057e:	231d      	movs	r3, #29
 8000580:	1a5b      	subs	r3, r3, r1
 8000582:	4649      	mov	r1, r9
 8000584:	0010      	movs	r0, r2
 8000586:	40d9      	lsrs	r1, r3
 8000588:	3808      	subs	r0, #8
 800058a:	4084      	lsls	r4, r0
 800058c:	000b      	movs	r3, r1
 800058e:	464d      	mov	r5, r9
 8000590:	4323      	orrs	r3, r4
 8000592:	4698      	mov	r8, r3
 8000594:	4085      	lsls	r5, r0
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <__aeabi_ddiv+0x38c>)
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	469b      	mov	fp, r3
 800059c:	2300      	movs	r3, #0
 800059e:	4699      	mov	r9, r3
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	e69e      	b.n	80002e2 <__aeabi_ddiv+0x4a>
 80005a4:	0002      	movs	r2, r0
 80005a6:	4322      	orrs	r2, r4
 80005a8:	4690      	mov	r8, r2
 80005aa:	d11d      	bne.n	80005e8 <__aeabi_ddiv+0x350>
 80005ac:	2208      	movs	r2, #8
 80005ae:	469b      	mov	fp, r3
 80005b0:	2302      	movs	r3, #2
 80005b2:	2500      	movs	r5, #0
 80005b4:	4691      	mov	r9, r2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	e693      	b.n	80002e2 <__aeabi_ddiv+0x4a>
 80005ba:	4651      	mov	r1, sl
 80005bc:	4321      	orrs	r1, r4
 80005be:	d109      	bne.n	80005d4 <__aeabi_ddiv+0x33c>
 80005c0:	2302      	movs	r3, #2
 80005c2:	464a      	mov	r2, r9
 80005c4:	431a      	orrs	r2, r3
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <__aeabi_ddiv+0x390>)
 80005c8:	4691      	mov	r9, r2
 80005ca:	469c      	mov	ip, r3
 80005cc:	2400      	movs	r4, #0
 80005ce:	2002      	movs	r0, #2
 80005d0:	44e3      	add	fp, ip
 80005d2:	e6a1      	b.n	8000318 <__aeabi_ddiv+0x80>
 80005d4:	2303      	movs	r3, #3
 80005d6:	464a      	mov	r2, r9
 80005d8:	431a      	orrs	r2, r3
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <__aeabi_ddiv+0x390>)
 80005dc:	4691      	mov	r9, r2
 80005de:	469c      	mov	ip, r3
 80005e0:	4651      	mov	r1, sl
 80005e2:	2003      	movs	r0, #3
 80005e4:	44e3      	add	fp, ip
 80005e6:	e697      	b.n	8000318 <__aeabi_ddiv+0x80>
 80005e8:	220c      	movs	r2, #12
 80005ea:	469b      	mov	fp, r3
 80005ec:	2303      	movs	r3, #3
 80005ee:	46a0      	mov	r8, r4
 80005f0:	4691      	mov	r9, r2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	e675      	b.n	80002e2 <__aeabi_ddiv+0x4a>
 80005f6:	2304      	movs	r3, #4
 80005f8:	4699      	mov	r9, r3
 80005fa:	2300      	movs	r3, #0
 80005fc:	469b      	mov	fp, r3
 80005fe:	3301      	adds	r3, #1
 8000600:	2500      	movs	r5, #0
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	e66d      	b.n	80002e2 <__aeabi_ddiv+0x4a>
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	000007ff 	.word	0x000007ff
 800060c:	fffffc01 	.word	0xfffffc01
 8000610:	080053d4 	.word	0x080053d4
 8000614:	000003ff 	.word	0x000003ff
 8000618:	feffffff 	.word	0xfeffffff
 800061c:	000007fe 	.word	0x000007fe
 8000620:	000003f3 	.word	0x000003f3
 8000624:	fffffc0d 	.word	0xfffffc0d
 8000628:	fffff801 	.word	0xfffff801
 800062c:	464a      	mov	r2, r9
 800062e:	2301      	movs	r3, #1
 8000630:	431a      	orrs	r2, r3
 8000632:	4691      	mov	r9, r2
 8000634:	2400      	movs	r4, #0
 8000636:	2001      	movs	r0, #1
 8000638:	e66e      	b.n	8000318 <__aeabi_ddiv+0x80>
 800063a:	2300      	movs	r3, #0
 800063c:	2280      	movs	r2, #128	; 0x80
 800063e:	469a      	mov	sl, r3
 8000640:	2500      	movs	r5, #0
 8000642:	4b88      	ldr	r3, [pc, #544]	; (8000864 <__aeabi_ddiv+0x5cc>)
 8000644:	0312      	lsls	r2, r2, #12
 8000646:	e67e      	b.n	8000346 <__aeabi_ddiv+0xae>
 8000648:	2501      	movs	r5, #1
 800064a:	426d      	negs	r5, r5
 800064c:	2201      	movs	r2, #1
 800064e:	1ad2      	subs	r2, r2, r3
 8000650:	2a38      	cmp	r2, #56	; 0x38
 8000652:	dd00      	ble.n	8000656 <__aeabi_ddiv+0x3be>
 8000654:	e674      	b.n	8000340 <__aeabi_ddiv+0xa8>
 8000656:	2a1f      	cmp	r2, #31
 8000658:	dc00      	bgt.n	800065c <__aeabi_ddiv+0x3c4>
 800065a:	e0bd      	b.n	80007d8 <__aeabi_ddiv+0x540>
 800065c:	211f      	movs	r1, #31
 800065e:	4249      	negs	r1, r1
 8000660:	1acb      	subs	r3, r1, r3
 8000662:	4641      	mov	r1, r8
 8000664:	40d9      	lsrs	r1, r3
 8000666:	000b      	movs	r3, r1
 8000668:	2a20      	cmp	r2, #32
 800066a:	d004      	beq.n	8000676 <__aeabi_ddiv+0x3de>
 800066c:	4641      	mov	r1, r8
 800066e:	4a7e      	ldr	r2, [pc, #504]	; (8000868 <__aeabi_ddiv+0x5d0>)
 8000670:	445a      	add	r2, fp
 8000672:	4091      	lsls	r1, r2
 8000674:	430d      	orrs	r5, r1
 8000676:	0029      	movs	r1, r5
 8000678:	1e4a      	subs	r2, r1, #1
 800067a:	4191      	sbcs	r1, r2
 800067c:	4319      	orrs	r1, r3
 800067e:	2307      	movs	r3, #7
 8000680:	001d      	movs	r5, r3
 8000682:	2200      	movs	r2, #0
 8000684:	400d      	ands	r5, r1
 8000686:	420b      	tst	r3, r1
 8000688:	d100      	bne.n	800068c <__aeabi_ddiv+0x3f4>
 800068a:	e0d0      	b.n	800082e <__aeabi_ddiv+0x596>
 800068c:	220f      	movs	r2, #15
 800068e:	2300      	movs	r3, #0
 8000690:	400a      	ands	r2, r1
 8000692:	2a04      	cmp	r2, #4
 8000694:	d100      	bne.n	8000698 <__aeabi_ddiv+0x400>
 8000696:	e0c7      	b.n	8000828 <__aeabi_ddiv+0x590>
 8000698:	1d0a      	adds	r2, r1, #4
 800069a:	428a      	cmp	r2, r1
 800069c:	4189      	sbcs	r1, r1
 800069e:	4249      	negs	r1, r1
 80006a0:	185b      	adds	r3, r3, r1
 80006a2:	0011      	movs	r1, r2
 80006a4:	021a      	lsls	r2, r3, #8
 80006a6:	d400      	bmi.n	80006aa <__aeabi_ddiv+0x412>
 80006a8:	e0be      	b.n	8000828 <__aeabi_ddiv+0x590>
 80006aa:	2301      	movs	r3, #1
 80006ac:	2200      	movs	r2, #0
 80006ae:	2500      	movs	r5, #0
 80006b0:	e649      	b.n	8000346 <__aeabi_ddiv+0xae>
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	4643      	mov	r3, r8
 80006b6:	0312      	lsls	r2, r2, #12
 80006b8:	4213      	tst	r3, r2
 80006ba:	d008      	beq.n	80006ce <__aeabi_ddiv+0x436>
 80006bc:	4214      	tst	r4, r2
 80006be:	d106      	bne.n	80006ce <__aeabi_ddiv+0x436>
 80006c0:	4322      	orrs	r2, r4
 80006c2:	0312      	lsls	r2, r2, #12
 80006c4:	46ba      	mov	sl, r7
 80006c6:	000d      	movs	r5, r1
 80006c8:	4b66      	ldr	r3, [pc, #408]	; (8000864 <__aeabi_ddiv+0x5cc>)
 80006ca:	0b12      	lsrs	r2, r2, #12
 80006cc:	e63b      	b.n	8000346 <__aeabi_ddiv+0xae>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	4643      	mov	r3, r8
 80006d2:	0312      	lsls	r2, r2, #12
 80006d4:	431a      	orrs	r2, r3
 80006d6:	0312      	lsls	r2, r2, #12
 80006d8:	46b2      	mov	sl, r6
 80006da:	4b62      	ldr	r3, [pc, #392]	; (8000864 <__aeabi_ddiv+0x5cc>)
 80006dc:	0b12      	lsrs	r2, r2, #12
 80006de:	e632      	b.n	8000346 <__aeabi_ddiv+0xae>
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d100      	bne.n	80006e6 <__aeabi_ddiv+0x44e>
 80006e4:	e702      	b.n	80004ec <__aeabi_ddiv+0x254>
 80006e6:	19a6      	adds	r6, r4, r6
 80006e8:	1e6a      	subs	r2, r5, #1
 80006ea:	42a6      	cmp	r6, r4
 80006ec:	d200      	bcs.n	80006f0 <__aeabi_ddiv+0x458>
 80006ee:	e089      	b.n	8000804 <__aeabi_ddiv+0x56c>
 80006f0:	4286      	cmp	r6, r0
 80006f2:	d200      	bcs.n	80006f6 <__aeabi_ddiv+0x45e>
 80006f4:	e09f      	b.n	8000836 <__aeabi_ddiv+0x59e>
 80006f6:	d100      	bne.n	80006fa <__aeabi_ddiv+0x462>
 80006f8:	e0af      	b.n	800085a <__aeabi_ddiv+0x5c2>
 80006fa:	0015      	movs	r5, r2
 80006fc:	e6f4      	b.n	80004e8 <__aeabi_ddiv+0x250>
 80006fe:	42a9      	cmp	r1, r5
 8000700:	d900      	bls.n	8000704 <__aeabi_ddiv+0x46c>
 8000702:	e63c      	b.n	800037e <__aeabi_ddiv+0xe6>
 8000704:	4643      	mov	r3, r8
 8000706:	07de      	lsls	r6, r3, #31
 8000708:	0858      	lsrs	r0, r3, #1
 800070a:	086b      	lsrs	r3, r5, #1
 800070c:	431e      	orrs	r6, r3
 800070e:	07ed      	lsls	r5, r5, #31
 8000710:	e63c      	b.n	800038c <__aeabi_ddiv+0xf4>
 8000712:	f001 f843 	bl	800179c <__clzsi2>
 8000716:	0001      	movs	r1, r0
 8000718:	0002      	movs	r2, r0
 800071a:	3115      	adds	r1, #21
 800071c:	3220      	adds	r2, #32
 800071e:	291c      	cmp	r1, #28
 8000720:	dc00      	bgt.n	8000724 <__aeabi_ddiv+0x48c>
 8000722:	e72c      	b.n	800057e <__aeabi_ddiv+0x2e6>
 8000724:	464b      	mov	r3, r9
 8000726:	3808      	subs	r0, #8
 8000728:	4083      	lsls	r3, r0
 800072a:	2500      	movs	r5, #0
 800072c:	4698      	mov	r8, r3
 800072e:	e732      	b.n	8000596 <__aeabi_ddiv+0x2fe>
 8000730:	f001 f834 	bl	800179c <__clzsi2>
 8000734:	0003      	movs	r3, r0
 8000736:	001a      	movs	r2, r3
 8000738:	3215      	adds	r2, #21
 800073a:	3020      	adds	r0, #32
 800073c:	2a1c      	cmp	r2, #28
 800073e:	dc00      	bgt.n	8000742 <__aeabi_ddiv+0x4aa>
 8000740:	e6ff      	b.n	8000542 <__aeabi_ddiv+0x2aa>
 8000742:	4654      	mov	r4, sl
 8000744:	3b08      	subs	r3, #8
 8000746:	2100      	movs	r1, #0
 8000748:	409c      	lsls	r4, r3
 800074a:	e705      	b.n	8000558 <__aeabi_ddiv+0x2c0>
 800074c:	1936      	adds	r6, r6, r4
 800074e:	3b01      	subs	r3, #1
 8000750:	42b4      	cmp	r4, r6
 8000752:	d900      	bls.n	8000756 <__aeabi_ddiv+0x4be>
 8000754:	e6a6      	b.n	80004a4 <__aeabi_ddiv+0x20c>
 8000756:	42b2      	cmp	r2, r6
 8000758:	d800      	bhi.n	800075c <__aeabi_ddiv+0x4c4>
 800075a:	e6a3      	b.n	80004a4 <__aeabi_ddiv+0x20c>
 800075c:	1e83      	subs	r3, r0, #2
 800075e:	1936      	adds	r6, r6, r4
 8000760:	e6a0      	b.n	80004a4 <__aeabi_ddiv+0x20c>
 8000762:	1909      	adds	r1, r1, r4
 8000764:	3d01      	subs	r5, #1
 8000766:	428c      	cmp	r4, r1
 8000768:	d900      	bls.n	800076c <__aeabi_ddiv+0x4d4>
 800076a:	e68d      	b.n	8000488 <__aeabi_ddiv+0x1f0>
 800076c:	428a      	cmp	r2, r1
 800076e:	d800      	bhi.n	8000772 <__aeabi_ddiv+0x4da>
 8000770:	e68a      	b.n	8000488 <__aeabi_ddiv+0x1f0>
 8000772:	1e85      	subs	r5, r0, #2
 8000774:	1909      	adds	r1, r1, r4
 8000776:	e687      	b.n	8000488 <__aeabi_ddiv+0x1f0>
 8000778:	220f      	movs	r2, #15
 800077a:	402a      	ands	r2, r5
 800077c:	2a04      	cmp	r2, #4
 800077e:	d100      	bne.n	8000782 <__aeabi_ddiv+0x4ea>
 8000780:	e6bc      	b.n	80004fc <__aeabi_ddiv+0x264>
 8000782:	1d29      	adds	r1, r5, #4
 8000784:	42a9      	cmp	r1, r5
 8000786:	41ad      	sbcs	r5, r5
 8000788:	426d      	negs	r5, r5
 800078a:	08c9      	lsrs	r1, r1, #3
 800078c:	44a8      	add	r8, r5
 800078e:	e6b6      	b.n	80004fe <__aeabi_ddiv+0x266>
 8000790:	42af      	cmp	r7, r5
 8000792:	d900      	bls.n	8000796 <__aeabi_ddiv+0x4fe>
 8000794:	e662      	b.n	800045c <__aeabi_ddiv+0x1c4>
 8000796:	4281      	cmp	r1, r0
 8000798:	d804      	bhi.n	80007a4 <__aeabi_ddiv+0x50c>
 800079a:	d000      	beq.n	800079e <__aeabi_ddiv+0x506>
 800079c:	e65e      	b.n	800045c <__aeabi_ddiv+0x1c4>
 800079e:	42ae      	cmp	r6, r5
 80007a0:	d800      	bhi.n	80007a4 <__aeabi_ddiv+0x50c>
 80007a2:	e65b      	b.n	800045c <__aeabi_ddiv+0x1c4>
 80007a4:	2302      	movs	r3, #2
 80007a6:	425b      	negs	r3, r3
 80007a8:	469c      	mov	ip, r3
 80007aa:	9b00      	ldr	r3, [sp, #0]
 80007ac:	44e0      	add	r8, ip
 80007ae:	469c      	mov	ip, r3
 80007b0:	4465      	add	r5, ip
 80007b2:	429d      	cmp	r5, r3
 80007b4:	419b      	sbcs	r3, r3
 80007b6:	425b      	negs	r3, r3
 80007b8:	191b      	adds	r3, r3, r4
 80007ba:	18c0      	adds	r0, r0, r3
 80007bc:	e64f      	b.n	800045e <__aeabi_ddiv+0x1c6>
 80007be:	42b2      	cmp	r2, r6
 80007c0:	d800      	bhi.n	80007c4 <__aeabi_ddiv+0x52c>
 80007c2:	e612      	b.n	80003ea <__aeabi_ddiv+0x152>
 80007c4:	1e83      	subs	r3, r0, #2
 80007c6:	1936      	adds	r6, r6, r4
 80007c8:	e60f      	b.n	80003ea <__aeabi_ddiv+0x152>
 80007ca:	428a      	cmp	r2, r1
 80007cc:	d800      	bhi.n	80007d0 <__aeabi_ddiv+0x538>
 80007ce:	e5fa      	b.n	80003c6 <__aeabi_ddiv+0x12e>
 80007d0:	1e83      	subs	r3, r0, #2
 80007d2:	4698      	mov	r8, r3
 80007d4:	1909      	adds	r1, r1, r4
 80007d6:	e5f6      	b.n	80003c6 <__aeabi_ddiv+0x12e>
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <__aeabi_ddiv+0x5d4>)
 80007da:	0028      	movs	r0, r5
 80007dc:	445b      	add	r3, fp
 80007de:	4641      	mov	r1, r8
 80007e0:	409d      	lsls	r5, r3
 80007e2:	4099      	lsls	r1, r3
 80007e4:	40d0      	lsrs	r0, r2
 80007e6:	1e6b      	subs	r3, r5, #1
 80007e8:	419d      	sbcs	r5, r3
 80007ea:	4643      	mov	r3, r8
 80007ec:	4301      	orrs	r1, r0
 80007ee:	4329      	orrs	r1, r5
 80007f0:	40d3      	lsrs	r3, r2
 80007f2:	074a      	lsls	r2, r1, #29
 80007f4:	d100      	bne.n	80007f8 <__aeabi_ddiv+0x560>
 80007f6:	e755      	b.n	80006a4 <__aeabi_ddiv+0x40c>
 80007f8:	220f      	movs	r2, #15
 80007fa:	400a      	ands	r2, r1
 80007fc:	2a04      	cmp	r2, #4
 80007fe:	d000      	beq.n	8000802 <__aeabi_ddiv+0x56a>
 8000800:	e74a      	b.n	8000698 <__aeabi_ddiv+0x400>
 8000802:	e74f      	b.n	80006a4 <__aeabi_ddiv+0x40c>
 8000804:	0015      	movs	r5, r2
 8000806:	4286      	cmp	r6, r0
 8000808:	d000      	beq.n	800080c <__aeabi_ddiv+0x574>
 800080a:	e66d      	b.n	80004e8 <__aeabi_ddiv+0x250>
 800080c:	9a00      	ldr	r2, [sp, #0]
 800080e:	429a      	cmp	r2, r3
 8000810:	d000      	beq.n	8000814 <__aeabi_ddiv+0x57c>
 8000812:	e669      	b.n	80004e8 <__aeabi_ddiv+0x250>
 8000814:	e66a      	b.n	80004ec <__aeabi_ddiv+0x254>
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <__aeabi_ddiv+0x5d8>)
 8000818:	445b      	add	r3, fp
 800081a:	2b00      	cmp	r3, #0
 800081c:	dc00      	bgt.n	8000820 <__aeabi_ddiv+0x588>
 800081e:	e713      	b.n	8000648 <__aeabi_ddiv+0x3b0>
 8000820:	2501      	movs	r5, #1
 8000822:	2100      	movs	r1, #0
 8000824:	44a8      	add	r8, r5
 8000826:	e66a      	b.n	80004fe <__aeabi_ddiv+0x266>
 8000828:	075d      	lsls	r5, r3, #29
 800082a:	025b      	lsls	r3, r3, #9
 800082c:	0b1a      	lsrs	r2, r3, #12
 800082e:	08c9      	lsrs	r1, r1, #3
 8000830:	2300      	movs	r3, #0
 8000832:	430d      	orrs	r5, r1
 8000834:	e587      	b.n	8000346 <__aeabi_ddiv+0xae>
 8000836:	9900      	ldr	r1, [sp, #0]
 8000838:	3d02      	subs	r5, #2
 800083a:	004a      	lsls	r2, r1, #1
 800083c:	428a      	cmp	r2, r1
 800083e:	41bf      	sbcs	r7, r7
 8000840:	427f      	negs	r7, r7
 8000842:	193f      	adds	r7, r7, r4
 8000844:	19f6      	adds	r6, r6, r7
 8000846:	9200      	str	r2, [sp, #0]
 8000848:	e7dd      	b.n	8000806 <__aeabi_ddiv+0x56e>
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	4643      	mov	r3, r8
 800084e:	0312      	lsls	r2, r2, #12
 8000850:	431a      	orrs	r2, r3
 8000852:	0312      	lsls	r2, r2, #12
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <__aeabi_ddiv+0x5cc>)
 8000856:	0b12      	lsrs	r2, r2, #12
 8000858:	e575      	b.n	8000346 <__aeabi_ddiv+0xae>
 800085a:	9900      	ldr	r1, [sp, #0]
 800085c:	4299      	cmp	r1, r3
 800085e:	d3ea      	bcc.n	8000836 <__aeabi_ddiv+0x59e>
 8000860:	0015      	movs	r5, r2
 8000862:	e7d3      	b.n	800080c <__aeabi_ddiv+0x574>
 8000864:	000007ff 	.word	0x000007ff
 8000868:	0000043e 	.word	0x0000043e
 800086c:	0000041e 	.word	0x0000041e
 8000870:	000003ff 	.word	0x000003ff

08000874 <__aeabi_dmul>:
 8000874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000876:	4645      	mov	r5, r8
 8000878:	46de      	mov	lr, fp
 800087a:	4657      	mov	r7, sl
 800087c:	464e      	mov	r6, r9
 800087e:	b5e0      	push	{r5, r6, r7, lr}
 8000880:	001f      	movs	r7, r3
 8000882:	030b      	lsls	r3, r1, #12
 8000884:	0b1b      	lsrs	r3, r3, #12
 8000886:	469b      	mov	fp, r3
 8000888:	004d      	lsls	r5, r1, #1
 800088a:	0fcb      	lsrs	r3, r1, #31
 800088c:	0004      	movs	r4, r0
 800088e:	4691      	mov	r9, r2
 8000890:	4698      	mov	r8, r3
 8000892:	b087      	sub	sp, #28
 8000894:	0d6d      	lsrs	r5, r5, #21
 8000896:	d100      	bne.n	800089a <__aeabi_dmul+0x26>
 8000898:	e1cd      	b.n	8000c36 <__aeabi_dmul+0x3c2>
 800089a:	4bce      	ldr	r3, [pc, #824]	; (8000bd4 <__aeabi_dmul+0x360>)
 800089c:	429d      	cmp	r5, r3
 800089e:	d100      	bne.n	80008a2 <__aeabi_dmul+0x2e>
 80008a0:	e1e9      	b.n	8000c76 <__aeabi_dmul+0x402>
 80008a2:	465a      	mov	r2, fp
 80008a4:	0f43      	lsrs	r3, r0, #29
 80008a6:	00d2      	lsls	r2, r2, #3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	0412      	lsls	r2, r2, #16
 80008ae:	431a      	orrs	r2, r3
 80008b0:	00c3      	lsls	r3, r0, #3
 80008b2:	469a      	mov	sl, r3
 80008b4:	4bc8      	ldr	r3, [pc, #800]	; (8000bd8 <__aeabi_dmul+0x364>)
 80008b6:	4693      	mov	fp, r2
 80008b8:	469c      	mov	ip, r3
 80008ba:	2300      	movs	r3, #0
 80008bc:	2600      	movs	r6, #0
 80008be:	4465      	add	r5, ip
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	033c      	lsls	r4, r7, #12
 80008c4:	007b      	lsls	r3, r7, #1
 80008c6:	4648      	mov	r0, r9
 80008c8:	0b24      	lsrs	r4, r4, #12
 80008ca:	0d5b      	lsrs	r3, r3, #21
 80008cc:	0fff      	lsrs	r7, r7, #31
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d100      	bne.n	80008d4 <__aeabi_dmul+0x60>
 80008d2:	e189      	b.n	8000be8 <__aeabi_dmul+0x374>
 80008d4:	4abf      	ldr	r2, [pc, #764]	; (8000bd4 <__aeabi_dmul+0x360>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d019      	beq.n	800090e <__aeabi_dmul+0x9a>
 80008da:	0f42      	lsrs	r2, r0, #29
 80008dc:	00e4      	lsls	r4, r4, #3
 80008de:	4322      	orrs	r2, r4
 80008e0:	2480      	movs	r4, #128	; 0x80
 80008e2:	0424      	lsls	r4, r4, #16
 80008e4:	4314      	orrs	r4, r2
 80008e6:	4abc      	ldr	r2, [pc, #752]	; (8000bd8 <__aeabi_dmul+0x364>)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4694      	mov	ip, r2
 80008ec:	4642      	mov	r2, r8
 80008ee:	4463      	add	r3, ip
 80008f0:	195b      	adds	r3, r3, r5
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	9b01      	ldr	r3, [sp, #4]
 80008f6:	407a      	eors	r2, r7
 80008f8:	3301      	adds	r3, #1
 80008fa:	00c0      	lsls	r0, r0, #3
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	9302      	str	r3, [sp, #8]
 8000900:	2e0a      	cmp	r6, #10
 8000902:	dd1c      	ble.n	800093e <__aeabi_dmul+0xca>
 8000904:	003a      	movs	r2, r7
 8000906:	2e0b      	cmp	r6, #11
 8000908:	d05e      	beq.n	80009c8 <__aeabi_dmul+0x154>
 800090a:	4647      	mov	r7, r8
 800090c:	e056      	b.n	80009bc <__aeabi_dmul+0x148>
 800090e:	4649      	mov	r1, r9
 8000910:	4bb0      	ldr	r3, [pc, #704]	; (8000bd4 <__aeabi_dmul+0x360>)
 8000912:	4321      	orrs	r1, r4
 8000914:	18eb      	adds	r3, r5, r3
 8000916:	9301      	str	r3, [sp, #4]
 8000918:	2900      	cmp	r1, #0
 800091a:	d12a      	bne.n	8000972 <__aeabi_dmul+0xfe>
 800091c:	2080      	movs	r0, #128	; 0x80
 800091e:	2202      	movs	r2, #2
 8000920:	0100      	lsls	r0, r0, #4
 8000922:	002b      	movs	r3, r5
 8000924:	4684      	mov	ip, r0
 8000926:	4316      	orrs	r6, r2
 8000928:	4642      	mov	r2, r8
 800092a:	4463      	add	r3, ip
 800092c:	407a      	eors	r2, r7
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	2e0a      	cmp	r6, #10
 8000934:	dd00      	ble.n	8000938 <__aeabi_dmul+0xc4>
 8000936:	e231      	b.n	8000d9c <__aeabi_dmul+0x528>
 8000938:	2000      	movs	r0, #0
 800093a:	2400      	movs	r4, #0
 800093c:	2102      	movs	r1, #2
 800093e:	2e02      	cmp	r6, #2
 8000940:	dc26      	bgt.n	8000990 <__aeabi_dmul+0x11c>
 8000942:	3e01      	subs	r6, #1
 8000944:	2e01      	cmp	r6, #1
 8000946:	d852      	bhi.n	80009ee <__aeabi_dmul+0x17a>
 8000948:	2902      	cmp	r1, #2
 800094a:	d04c      	beq.n	80009e6 <__aeabi_dmul+0x172>
 800094c:	2901      	cmp	r1, #1
 800094e:	d000      	beq.n	8000952 <__aeabi_dmul+0xde>
 8000950:	e118      	b.n	8000b84 <__aeabi_dmul+0x310>
 8000952:	2300      	movs	r3, #0
 8000954:	2400      	movs	r4, #0
 8000956:	2500      	movs	r5, #0
 8000958:	051b      	lsls	r3, r3, #20
 800095a:	4323      	orrs	r3, r4
 800095c:	07d2      	lsls	r2, r2, #31
 800095e:	4313      	orrs	r3, r2
 8000960:	0028      	movs	r0, r5
 8000962:	0019      	movs	r1, r3
 8000964:	b007      	add	sp, #28
 8000966:	bcf0      	pop	{r4, r5, r6, r7}
 8000968:	46bb      	mov	fp, r7
 800096a:	46b2      	mov	sl, r6
 800096c:	46a9      	mov	r9, r5
 800096e:	46a0      	mov	r8, r4
 8000970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	2203      	movs	r2, #3
 8000976:	0109      	lsls	r1, r1, #4
 8000978:	002b      	movs	r3, r5
 800097a:	468c      	mov	ip, r1
 800097c:	4316      	orrs	r6, r2
 800097e:	4642      	mov	r2, r8
 8000980:	4463      	add	r3, ip
 8000982:	407a      	eors	r2, r7
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	9302      	str	r3, [sp, #8]
 8000988:	2e0a      	cmp	r6, #10
 800098a:	dd00      	ble.n	800098e <__aeabi_dmul+0x11a>
 800098c:	e228      	b.n	8000de0 <__aeabi_dmul+0x56c>
 800098e:	2103      	movs	r1, #3
 8000990:	2501      	movs	r5, #1
 8000992:	40b5      	lsls	r5, r6
 8000994:	46ac      	mov	ip, r5
 8000996:	26a6      	movs	r6, #166	; 0xa6
 8000998:	4663      	mov	r3, ip
 800099a:	00f6      	lsls	r6, r6, #3
 800099c:	4035      	ands	r5, r6
 800099e:	4233      	tst	r3, r6
 80009a0:	d10b      	bne.n	80009ba <__aeabi_dmul+0x146>
 80009a2:	2690      	movs	r6, #144	; 0x90
 80009a4:	00b6      	lsls	r6, r6, #2
 80009a6:	4233      	tst	r3, r6
 80009a8:	d118      	bne.n	80009dc <__aeabi_dmul+0x168>
 80009aa:	3eb9      	subs	r6, #185	; 0xb9
 80009ac:	3eff      	subs	r6, #255	; 0xff
 80009ae:	421e      	tst	r6, r3
 80009b0:	d01d      	beq.n	80009ee <__aeabi_dmul+0x17a>
 80009b2:	46a3      	mov	fp, r4
 80009b4:	4682      	mov	sl, r0
 80009b6:	9100      	str	r1, [sp, #0]
 80009b8:	e000      	b.n	80009bc <__aeabi_dmul+0x148>
 80009ba:	0017      	movs	r7, r2
 80009bc:	9900      	ldr	r1, [sp, #0]
 80009be:	003a      	movs	r2, r7
 80009c0:	2902      	cmp	r1, #2
 80009c2:	d010      	beq.n	80009e6 <__aeabi_dmul+0x172>
 80009c4:	465c      	mov	r4, fp
 80009c6:	4650      	mov	r0, sl
 80009c8:	2903      	cmp	r1, #3
 80009ca:	d1bf      	bne.n	800094c <__aeabi_dmul+0xd8>
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	031b      	lsls	r3, r3, #12
 80009d0:	431c      	orrs	r4, r3
 80009d2:	0324      	lsls	r4, r4, #12
 80009d4:	0005      	movs	r5, r0
 80009d6:	4b7f      	ldr	r3, [pc, #508]	; (8000bd4 <__aeabi_dmul+0x360>)
 80009d8:	0b24      	lsrs	r4, r4, #12
 80009da:	e7bd      	b.n	8000958 <__aeabi_dmul+0xe4>
 80009dc:	2480      	movs	r4, #128	; 0x80
 80009de:	2200      	movs	r2, #0
 80009e0:	4b7c      	ldr	r3, [pc, #496]	; (8000bd4 <__aeabi_dmul+0x360>)
 80009e2:	0324      	lsls	r4, r4, #12
 80009e4:	e7b8      	b.n	8000958 <__aeabi_dmul+0xe4>
 80009e6:	2400      	movs	r4, #0
 80009e8:	2500      	movs	r5, #0
 80009ea:	4b7a      	ldr	r3, [pc, #488]	; (8000bd4 <__aeabi_dmul+0x360>)
 80009ec:	e7b4      	b.n	8000958 <__aeabi_dmul+0xe4>
 80009ee:	4653      	mov	r3, sl
 80009f0:	041e      	lsls	r6, r3, #16
 80009f2:	0c36      	lsrs	r6, r6, #16
 80009f4:	0c1f      	lsrs	r7, r3, #16
 80009f6:	0033      	movs	r3, r6
 80009f8:	0c01      	lsrs	r1, r0, #16
 80009fa:	0400      	lsls	r0, r0, #16
 80009fc:	0c00      	lsrs	r0, r0, #16
 80009fe:	4343      	muls	r3, r0
 8000a00:	4698      	mov	r8, r3
 8000a02:	0003      	movs	r3, r0
 8000a04:	437b      	muls	r3, r7
 8000a06:	4699      	mov	r9, r3
 8000a08:	0033      	movs	r3, r6
 8000a0a:	434b      	muls	r3, r1
 8000a0c:	469c      	mov	ip, r3
 8000a0e:	4643      	mov	r3, r8
 8000a10:	000d      	movs	r5, r1
 8000a12:	0c1b      	lsrs	r3, r3, #16
 8000a14:	469a      	mov	sl, r3
 8000a16:	437d      	muls	r5, r7
 8000a18:	44cc      	add	ip, r9
 8000a1a:	44d4      	add	ip, sl
 8000a1c:	9500      	str	r5, [sp, #0]
 8000a1e:	45e1      	cmp	r9, ip
 8000a20:	d904      	bls.n	8000a2c <__aeabi_dmul+0x1b8>
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	4699      	mov	r9, r3
 8000a28:	444d      	add	r5, r9
 8000a2a:	9500      	str	r5, [sp, #0]
 8000a2c:	4663      	mov	r3, ip
 8000a2e:	0c1b      	lsrs	r3, r3, #16
 8000a30:	001d      	movs	r5, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	041b      	lsls	r3, r3, #16
 8000a36:	469c      	mov	ip, r3
 8000a38:	4643      	mov	r3, r8
 8000a3a:	041b      	lsls	r3, r3, #16
 8000a3c:	0c1b      	lsrs	r3, r3, #16
 8000a3e:	4698      	mov	r8, r3
 8000a40:	4663      	mov	r3, ip
 8000a42:	4443      	add	r3, r8
 8000a44:	9303      	str	r3, [sp, #12]
 8000a46:	0c23      	lsrs	r3, r4, #16
 8000a48:	4698      	mov	r8, r3
 8000a4a:	0033      	movs	r3, r6
 8000a4c:	0424      	lsls	r4, r4, #16
 8000a4e:	0c24      	lsrs	r4, r4, #16
 8000a50:	4363      	muls	r3, r4
 8000a52:	469c      	mov	ip, r3
 8000a54:	0023      	movs	r3, r4
 8000a56:	437b      	muls	r3, r7
 8000a58:	4699      	mov	r9, r3
 8000a5a:	4643      	mov	r3, r8
 8000a5c:	435e      	muls	r6, r3
 8000a5e:	435f      	muls	r7, r3
 8000a60:	444e      	add	r6, r9
 8000a62:	4663      	mov	r3, ip
 8000a64:	46b2      	mov	sl, r6
 8000a66:	0c1e      	lsrs	r6, r3, #16
 8000a68:	4456      	add	r6, sl
 8000a6a:	45b1      	cmp	r9, r6
 8000a6c:	d903      	bls.n	8000a76 <__aeabi_dmul+0x202>
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	025b      	lsls	r3, r3, #9
 8000a72:	4699      	mov	r9, r3
 8000a74:	444f      	add	r7, r9
 8000a76:	0c33      	lsrs	r3, r6, #16
 8000a78:	4699      	mov	r9, r3
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	444b      	add	r3, r9
 8000a7e:	9305      	str	r3, [sp, #20]
 8000a80:	4663      	mov	r3, ip
 8000a82:	46ac      	mov	ip, r5
 8000a84:	041f      	lsls	r7, r3, #16
 8000a86:	0c3f      	lsrs	r7, r7, #16
 8000a88:	0436      	lsls	r6, r6, #16
 8000a8a:	19f6      	adds	r6, r6, r7
 8000a8c:	44b4      	add	ip, r6
 8000a8e:	4663      	mov	r3, ip
 8000a90:	9304      	str	r3, [sp, #16]
 8000a92:	465b      	mov	r3, fp
 8000a94:	0c1b      	lsrs	r3, r3, #16
 8000a96:	469c      	mov	ip, r3
 8000a98:	465b      	mov	r3, fp
 8000a9a:	041f      	lsls	r7, r3, #16
 8000a9c:	0c3f      	lsrs	r7, r7, #16
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	4343      	muls	r3, r0
 8000aa2:	4699      	mov	r9, r3
 8000aa4:	4663      	mov	r3, ip
 8000aa6:	4343      	muls	r3, r0
 8000aa8:	469a      	mov	sl, r3
 8000aaa:	464b      	mov	r3, r9
 8000aac:	4660      	mov	r0, ip
 8000aae:	0c1b      	lsrs	r3, r3, #16
 8000ab0:	469b      	mov	fp, r3
 8000ab2:	4348      	muls	r0, r1
 8000ab4:	4379      	muls	r1, r7
 8000ab6:	4451      	add	r1, sl
 8000ab8:	4459      	add	r1, fp
 8000aba:	458a      	cmp	sl, r1
 8000abc:	d903      	bls.n	8000ac6 <__aeabi_dmul+0x252>
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	025b      	lsls	r3, r3, #9
 8000ac2:	469a      	mov	sl, r3
 8000ac4:	4450      	add	r0, sl
 8000ac6:	0c0b      	lsrs	r3, r1, #16
 8000ac8:	469a      	mov	sl, r3
 8000aca:	464b      	mov	r3, r9
 8000acc:	041b      	lsls	r3, r3, #16
 8000ace:	0c1b      	lsrs	r3, r3, #16
 8000ad0:	4699      	mov	r9, r3
 8000ad2:	003b      	movs	r3, r7
 8000ad4:	4363      	muls	r3, r4
 8000ad6:	0409      	lsls	r1, r1, #16
 8000ad8:	4645      	mov	r5, r8
 8000ada:	4449      	add	r1, r9
 8000adc:	4699      	mov	r9, r3
 8000ade:	4663      	mov	r3, ip
 8000ae0:	435c      	muls	r4, r3
 8000ae2:	436b      	muls	r3, r5
 8000ae4:	469c      	mov	ip, r3
 8000ae6:	464b      	mov	r3, r9
 8000ae8:	0c1b      	lsrs	r3, r3, #16
 8000aea:	4698      	mov	r8, r3
 8000aec:	436f      	muls	r7, r5
 8000aee:	193f      	adds	r7, r7, r4
 8000af0:	4447      	add	r7, r8
 8000af2:	4450      	add	r0, sl
 8000af4:	42bc      	cmp	r4, r7
 8000af6:	d903      	bls.n	8000b00 <__aeabi_dmul+0x28c>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	025b      	lsls	r3, r3, #9
 8000afc:	4698      	mov	r8, r3
 8000afe:	44c4      	add	ip, r8
 8000b00:	9b04      	ldr	r3, [sp, #16]
 8000b02:	9d00      	ldr	r5, [sp, #0]
 8000b04:	4698      	mov	r8, r3
 8000b06:	4445      	add	r5, r8
 8000b08:	42b5      	cmp	r5, r6
 8000b0a:	41b6      	sbcs	r6, r6
 8000b0c:	4273      	negs	r3, r6
 8000b0e:	4698      	mov	r8, r3
 8000b10:	464b      	mov	r3, r9
 8000b12:	041e      	lsls	r6, r3, #16
 8000b14:	9b05      	ldr	r3, [sp, #20]
 8000b16:	043c      	lsls	r4, r7, #16
 8000b18:	4699      	mov	r9, r3
 8000b1a:	0c36      	lsrs	r6, r6, #16
 8000b1c:	19a4      	adds	r4, r4, r6
 8000b1e:	444c      	add	r4, r9
 8000b20:	46a1      	mov	r9, r4
 8000b22:	4683      	mov	fp, r0
 8000b24:	186e      	adds	r6, r5, r1
 8000b26:	44c1      	add	r9, r8
 8000b28:	428e      	cmp	r6, r1
 8000b2a:	4189      	sbcs	r1, r1
 8000b2c:	44cb      	add	fp, r9
 8000b2e:	465d      	mov	r5, fp
 8000b30:	4249      	negs	r1, r1
 8000b32:	186d      	adds	r5, r5, r1
 8000b34:	429c      	cmp	r4, r3
 8000b36:	41a4      	sbcs	r4, r4
 8000b38:	45c1      	cmp	r9, r8
 8000b3a:	419b      	sbcs	r3, r3
 8000b3c:	4583      	cmp	fp, r0
 8000b3e:	4180      	sbcs	r0, r0
 8000b40:	428d      	cmp	r5, r1
 8000b42:	4189      	sbcs	r1, r1
 8000b44:	425b      	negs	r3, r3
 8000b46:	4264      	negs	r4, r4
 8000b48:	431c      	orrs	r4, r3
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	9b03      	ldr	r3, [sp, #12]
 8000b4e:	4249      	negs	r1, r1
 8000b50:	4301      	orrs	r1, r0
 8000b52:	0270      	lsls	r0, r6, #9
 8000b54:	0c3f      	lsrs	r7, r7, #16
 8000b56:	4318      	orrs	r0, r3
 8000b58:	19e4      	adds	r4, r4, r7
 8000b5a:	1e47      	subs	r7, r0, #1
 8000b5c:	41b8      	sbcs	r0, r7
 8000b5e:	1864      	adds	r4, r4, r1
 8000b60:	4464      	add	r4, ip
 8000b62:	0df6      	lsrs	r6, r6, #23
 8000b64:	0261      	lsls	r1, r4, #9
 8000b66:	4330      	orrs	r0, r6
 8000b68:	0dec      	lsrs	r4, r5, #23
 8000b6a:	026e      	lsls	r6, r5, #9
 8000b6c:	430c      	orrs	r4, r1
 8000b6e:	4330      	orrs	r0, r6
 8000b70:	01c9      	lsls	r1, r1, #7
 8000b72:	d400      	bmi.n	8000b76 <__aeabi_dmul+0x302>
 8000b74:	e0f1      	b.n	8000d5a <__aeabi_dmul+0x4e6>
 8000b76:	2101      	movs	r1, #1
 8000b78:	0843      	lsrs	r3, r0, #1
 8000b7a:	4001      	ands	r1, r0
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	07e0      	lsls	r0, r4, #31
 8000b80:	4318      	orrs	r0, r3
 8000b82:	0864      	lsrs	r4, r4, #1
 8000b84:	4915      	ldr	r1, [pc, #84]	; (8000bdc <__aeabi_dmul+0x368>)
 8000b86:	9b02      	ldr	r3, [sp, #8]
 8000b88:	468c      	mov	ip, r1
 8000b8a:	4463      	add	r3, ip
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	dc00      	bgt.n	8000b92 <__aeabi_dmul+0x31e>
 8000b90:	e097      	b.n	8000cc2 <__aeabi_dmul+0x44e>
 8000b92:	0741      	lsls	r1, r0, #29
 8000b94:	d009      	beq.n	8000baa <__aeabi_dmul+0x336>
 8000b96:	210f      	movs	r1, #15
 8000b98:	4001      	ands	r1, r0
 8000b9a:	2904      	cmp	r1, #4
 8000b9c:	d005      	beq.n	8000baa <__aeabi_dmul+0x336>
 8000b9e:	1d01      	adds	r1, r0, #4
 8000ba0:	4281      	cmp	r1, r0
 8000ba2:	4180      	sbcs	r0, r0
 8000ba4:	4240      	negs	r0, r0
 8000ba6:	1824      	adds	r4, r4, r0
 8000ba8:	0008      	movs	r0, r1
 8000baa:	01e1      	lsls	r1, r4, #7
 8000bac:	d506      	bpl.n	8000bbc <__aeabi_dmul+0x348>
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	00c9      	lsls	r1, r1, #3
 8000bb2:	468c      	mov	ip, r1
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <__aeabi_dmul+0x36c>)
 8000bb6:	401c      	ands	r4, r3
 8000bb8:	9b02      	ldr	r3, [sp, #8]
 8000bba:	4463      	add	r3, ip
 8000bbc:	4909      	ldr	r1, [pc, #36]	; (8000be4 <__aeabi_dmul+0x370>)
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	dd00      	ble.n	8000bc4 <__aeabi_dmul+0x350>
 8000bc2:	e710      	b.n	80009e6 <__aeabi_dmul+0x172>
 8000bc4:	0761      	lsls	r1, r4, #29
 8000bc6:	08c5      	lsrs	r5, r0, #3
 8000bc8:	0264      	lsls	r4, r4, #9
 8000bca:	055b      	lsls	r3, r3, #21
 8000bcc:	430d      	orrs	r5, r1
 8000bce:	0b24      	lsrs	r4, r4, #12
 8000bd0:	0d5b      	lsrs	r3, r3, #21
 8000bd2:	e6c1      	b.n	8000958 <__aeabi_dmul+0xe4>
 8000bd4:	000007ff 	.word	0x000007ff
 8000bd8:	fffffc01 	.word	0xfffffc01
 8000bdc:	000003ff 	.word	0x000003ff
 8000be0:	feffffff 	.word	0xfeffffff
 8000be4:	000007fe 	.word	0x000007fe
 8000be8:	464b      	mov	r3, r9
 8000bea:	4323      	orrs	r3, r4
 8000bec:	d059      	beq.n	8000ca2 <__aeabi_dmul+0x42e>
 8000bee:	2c00      	cmp	r4, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dmul+0x380>
 8000bf2:	e0a3      	b.n	8000d3c <__aeabi_dmul+0x4c8>
 8000bf4:	0020      	movs	r0, r4
 8000bf6:	f000 fdd1 	bl	800179c <__clzsi2>
 8000bfa:	0001      	movs	r1, r0
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	390b      	subs	r1, #11
 8000c00:	221d      	movs	r2, #29
 8000c02:	1a52      	subs	r2, r2, r1
 8000c04:	4649      	mov	r1, r9
 8000c06:	0018      	movs	r0, r3
 8000c08:	40d1      	lsrs	r1, r2
 8000c0a:	464a      	mov	r2, r9
 8000c0c:	3808      	subs	r0, #8
 8000c0e:	4082      	lsls	r2, r0
 8000c10:	4084      	lsls	r4, r0
 8000c12:	0010      	movs	r0, r2
 8000c14:	430c      	orrs	r4, r1
 8000c16:	4a74      	ldr	r2, [pc, #464]	; (8000de8 <__aeabi_dmul+0x574>)
 8000c18:	1aeb      	subs	r3, r5, r3
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	4642      	mov	r2, r8
 8000c1e:	4463      	add	r3, ip
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	9b01      	ldr	r3, [sp, #4]
 8000c24:	407a      	eors	r2, r7
 8000c26:	3301      	adds	r3, #1
 8000c28:	2100      	movs	r1, #0
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	9302      	str	r3, [sp, #8]
 8000c2e:	2e0a      	cmp	r6, #10
 8000c30:	dd00      	ble.n	8000c34 <__aeabi_dmul+0x3c0>
 8000c32:	e667      	b.n	8000904 <__aeabi_dmul+0x90>
 8000c34:	e683      	b.n	800093e <__aeabi_dmul+0xca>
 8000c36:	465b      	mov	r3, fp
 8000c38:	4303      	orrs	r3, r0
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	d02a      	beq.n	8000c94 <__aeabi_dmul+0x420>
 8000c3e:	465b      	mov	r3, fp
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d06d      	beq.n	8000d20 <__aeabi_dmul+0x4ac>
 8000c44:	4658      	mov	r0, fp
 8000c46:	f000 fda9 	bl	800179c <__clzsi2>
 8000c4a:	0001      	movs	r1, r0
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	390b      	subs	r1, #11
 8000c50:	221d      	movs	r2, #29
 8000c52:	1a52      	subs	r2, r2, r1
 8000c54:	0021      	movs	r1, r4
 8000c56:	0018      	movs	r0, r3
 8000c58:	465d      	mov	r5, fp
 8000c5a:	40d1      	lsrs	r1, r2
 8000c5c:	3808      	subs	r0, #8
 8000c5e:	4085      	lsls	r5, r0
 8000c60:	000a      	movs	r2, r1
 8000c62:	4084      	lsls	r4, r0
 8000c64:	432a      	orrs	r2, r5
 8000c66:	4693      	mov	fp, r2
 8000c68:	46a2      	mov	sl, r4
 8000c6a:	4d5f      	ldr	r5, [pc, #380]	; (8000de8 <__aeabi_dmul+0x574>)
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	1aed      	subs	r5, r5, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	e625      	b.n	80008c2 <__aeabi_dmul+0x4e>
 8000c76:	465b      	mov	r3, fp
 8000c78:	4303      	orrs	r3, r0
 8000c7a:	469a      	mov	sl, r3
 8000c7c:	d105      	bne.n	8000c8a <__aeabi_dmul+0x416>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	469b      	mov	fp, r3
 8000c82:	3302      	adds	r3, #2
 8000c84:	2608      	movs	r6, #8
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	e61b      	b.n	80008c2 <__aeabi_dmul+0x4e>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	4682      	mov	sl, r0
 8000c8e:	260c      	movs	r6, #12
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	e616      	b.n	80008c2 <__aeabi_dmul+0x4e>
 8000c94:	2300      	movs	r3, #0
 8000c96:	469b      	mov	fp, r3
 8000c98:	3301      	adds	r3, #1
 8000c9a:	2604      	movs	r6, #4
 8000c9c:	2500      	movs	r5, #0
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	e60f      	b.n	80008c2 <__aeabi_dmul+0x4e>
 8000ca2:	4642      	mov	r2, r8
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	9501      	str	r5, [sp, #4]
 8000ca8:	431e      	orrs	r6, r3
 8000caa:	9b01      	ldr	r3, [sp, #4]
 8000cac:	407a      	eors	r2, r7
 8000cae:	3301      	adds	r3, #1
 8000cb0:	2400      	movs	r4, #0
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	9302      	str	r3, [sp, #8]
 8000cba:	2e0a      	cmp	r6, #10
 8000cbc:	dd00      	ble.n	8000cc0 <__aeabi_dmul+0x44c>
 8000cbe:	e621      	b.n	8000904 <__aeabi_dmul+0x90>
 8000cc0:	e63d      	b.n	800093e <__aeabi_dmul+0xca>
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	1ac9      	subs	r1, r1, r3
 8000cc6:	2938      	cmp	r1, #56	; 0x38
 8000cc8:	dd00      	ble.n	8000ccc <__aeabi_dmul+0x458>
 8000cca:	e642      	b.n	8000952 <__aeabi_dmul+0xde>
 8000ccc:	291f      	cmp	r1, #31
 8000cce:	dd47      	ble.n	8000d60 <__aeabi_dmul+0x4ec>
 8000cd0:	261f      	movs	r6, #31
 8000cd2:	0025      	movs	r5, r4
 8000cd4:	4276      	negs	r6, r6
 8000cd6:	1af3      	subs	r3, r6, r3
 8000cd8:	40dd      	lsrs	r5, r3
 8000cda:	002b      	movs	r3, r5
 8000cdc:	2920      	cmp	r1, #32
 8000cde:	d005      	beq.n	8000cec <__aeabi_dmul+0x478>
 8000ce0:	4942      	ldr	r1, [pc, #264]	; (8000dec <__aeabi_dmul+0x578>)
 8000ce2:	9d02      	ldr	r5, [sp, #8]
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	4465      	add	r5, ip
 8000ce8:	40ac      	lsls	r4, r5
 8000cea:	4320      	orrs	r0, r4
 8000cec:	1e41      	subs	r1, r0, #1
 8000cee:	4188      	sbcs	r0, r1
 8000cf0:	4318      	orrs	r0, r3
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	001d      	movs	r5, r3
 8000cf6:	2400      	movs	r4, #0
 8000cf8:	4005      	ands	r5, r0
 8000cfa:	4203      	tst	r3, r0
 8000cfc:	d04a      	beq.n	8000d94 <__aeabi_dmul+0x520>
 8000cfe:	230f      	movs	r3, #15
 8000d00:	2400      	movs	r4, #0
 8000d02:	4003      	ands	r3, r0
 8000d04:	2b04      	cmp	r3, #4
 8000d06:	d042      	beq.n	8000d8e <__aeabi_dmul+0x51a>
 8000d08:	1d03      	adds	r3, r0, #4
 8000d0a:	4283      	cmp	r3, r0
 8000d0c:	4180      	sbcs	r0, r0
 8000d0e:	4240      	negs	r0, r0
 8000d10:	1824      	adds	r4, r4, r0
 8000d12:	0018      	movs	r0, r3
 8000d14:	0223      	lsls	r3, r4, #8
 8000d16:	d53a      	bpl.n	8000d8e <__aeabi_dmul+0x51a>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	2500      	movs	r5, #0
 8000d1e:	e61b      	b.n	8000958 <__aeabi_dmul+0xe4>
 8000d20:	f000 fd3c 	bl	800179c <__clzsi2>
 8000d24:	0001      	movs	r1, r0
 8000d26:	0003      	movs	r3, r0
 8000d28:	3115      	adds	r1, #21
 8000d2a:	3320      	adds	r3, #32
 8000d2c:	291c      	cmp	r1, #28
 8000d2e:	dd8f      	ble.n	8000c50 <__aeabi_dmul+0x3dc>
 8000d30:	3808      	subs	r0, #8
 8000d32:	2200      	movs	r2, #0
 8000d34:	4084      	lsls	r4, r0
 8000d36:	4692      	mov	sl, r2
 8000d38:	46a3      	mov	fp, r4
 8000d3a:	e796      	b.n	8000c6a <__aeabi_dmul+0x3f6>
 8000d3c:	f000 fd2e 	bl	800179c <__clzsi2>
 8000d40:	0001      	movs	r1, r0
 8000d42:	0003      	movs	r3, r0
 8000d44:	3115      	adds	r1, #21
 8000d46:	3320      	adds	r3, #32
 8000d48:	291c      	cmp	r1, #28
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_dmul+0x4da>
 8000d4c:	e758      	b.n	8000c00 <__aeabi_dmul+0x38c>
 8000d4e:	0002      	movs	r2, r0
 8000d50:	464c      	mov	r4, r9
 8000d52:	3a08      	subs	r2, #8
 8000d54:	2000      	movs	r0, #0
 8000d56:	4094      	lsls	r4, r2
 8000d58:	e75d      	b.n	8000c16 <__aeabi_dmul+0x3a2>
 8000d5a:	9b01      	ldr	r3, [sp, #4]
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	e711      	b.n	8000b84 <__aeabi_dmul+0x310>
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <__aeabi_dmul+0x57c>)
 8000d62:	0026      	movs	r6, r4
 8000d64:	469c      	mov	ip, r3
 8000d66:	0003      	movs	r3, r0
 8000d68:	9d02      	ldr	r5, [sp, #8]
 8000d6a:	40cb      	lsrs	r3, r1
 8000d6c:	4465      	add	r5, ip
 8000d6e:	40ae      	lsls	r6, r5
 8000d70:	431e      	orrs	r6, r3
 8000d72:	0003      	movs	r3, r0
 8000d74:	40ab      	lsls	r3, r5
 8000d76:	1e58      	subs	r0, r3, #1
 8000d78:	4183      	sbcs	r3, r0
 8000d7a:	0030      	movs	r0, r6
 8000d7c:	4318      	orrs	r0, r3
 8000d7e:	40cc      	lsrs	r4, r1
 8000d80:	0743      	lsls	r3, r0, #29
 8000d82:	d0c7      	beq.n	8000d14 <__aeabi_dmul+0x4a0>
 8000d84:	230f      	movs	r3, #15
 8000d86:	4003      	ands	r3, r0
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d1bd      	bne.n	8000d08 <__aeabi_dmul+0x494>
 8000d8c:	e7c2      	b.n	8000d14 <__aeabi_dmul+0x4a0>
 8000d8e:	0765      	lsls	r5, r4, #29
 8000d90:	0264      	lsls	r4, r4, #9
 8000d92:	0b24      	lsrs	r4, r4, #12
 8000d94:	08c0      	lsrs	r0, r0, #3
 8000d96:	2300      	movs	r3, #0
 8000d98:	4305      	orrs	r5, r0
 8000d9a:	e5dd      	b.n	8000958 <__aeabi_dmul+0xe4>
 8000d9c:	2500      	movs	r5, #0
 8000d9e:	2302      	movs	r3, #2
 8000da0:	2e0f      	cmp	r6, #15
 8000da2:	d10c      	bne.n	8000dbe <__aeabi_dmul+0x54a>
 8000da4:	2480      	movs	r4, #128	; 0x80
 8000da6:	465b      	mov	r3, fp
 8000da8:	0324      	lsls	r4, r4, #12
 8000daa:	4223      	tst	r3, r4
 8000dac:	d00e      	beq.n	8000dcc <__aeabi_dmul+0x558>
 8000dae:	4221      	tst	r1, r4
 8000db0:	d10c      	bne.n	8000dcc <__aeabi_dmul+0x558>
 8000db2:	430c      	orrs	r4, r1
 8000db4:	0324      	lsls	r4, r4, #12
 8000db6:	003a      	movs	r2, r7
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <__aeabi_dmul+0x580>)
 8000dba:	0b24      	lsrs	r4, r4, #12
 8000dbc:	e5cc      	b.n	8000958 <__aeabi_dmul+0xe4>
 8000dbe:	2e0b      	cmp	r6, #11
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_dmul+0x550>
 8000dc2:	e5a2      	b.n	800090a <__aeabi_dmul+0x96>
 8000dc4:	468b      	mov	fp, r1
 8000dc6:	46aa      	mov	sl, r5
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	e5f7      	b.n	80009bc <__aeabi_dmul+0x148>
 8000dcc:	2480      	movs	r4, #128	; 0x80
 8000dce:	465b      	mov	r3, fp
 8000dd0:	0324      	lsls	r4, r4, #12
 8000dd2:	431c      	orrs	r4, r3
 8000dd4:	0324      	lsls	r4, r4, #12
 8000dd6:	4642      	mov	r2, r8
 8000dd8:	4655      	mov	r5, sl
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <__aeabi_dmul+0x580>)
 8000ddc:	0b24      	lsrs	r4, r4, #12
 8000dde:	e5bb      	b.n	8000958 <__aeabi_dmul+0xe4>
 8000de0:	464d      	mov	r5, r9
 8000de2:	0021      	movs	r1, r4
 8000de4:	2303      	movs	r3, #3
 8000de6:	e7db      	b.n	8000da0 <__aeabi_dmul+0x52c>
 8000de8:	fffffc0d 	.word	0xfffffc0d
 8000dec:	0000043e 	.word	0x0000043e
 8000df0:	0000041e 	.word	0x0000041e
 8000df4:	000007ff 	.word	0x000007ff

08000df8 <__aeabi_dsub>:
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	4657      	mov	r7, sl
 8000dfc:	464e      	mov	r6, r9
 8000dfe:	4645      	mov	r5, r8
 8000e00:	46de      	mov	lr, fp
 8000e02:	b5e0      	push	{r5, r6, r7, lr}
 8000e04:	000d      	movs	r5, r1
 8000e06:	0004      	movs	r4, r0
 8000e08:	0019      	movs	r1, r3
 8000e0a:	0010      	movs	r0, r2
 8000e0c:	032b      	lsls	r3, r5, #12
 8000e0e:	0a5b      	lsrs	r3, r3, #9
 8000e10:	0f62      	lsrs	r2, r4, #29
 8000e12:	431a      	orrs	r2, r3
 8000e14:	00e3      	lsls	r3, r4, #3
 8000e16:	030c      	lsls	r4, r1, #12
 8000e18:	0a64      	lsrs	r4, r4, #9
 8000e1a:	0f47      	lsrs	r7, r0, #29
 8000e1c:	4327      	orrs	r7, r4
 8000e1e:	4cd0      	ldr	r4, [pc, #832]	; (8001160 <__aeabi_dsub+0x368>)
 8000e20:	006e      	lsls	r6, r5, #1
 8000e22:	4691      	mov	r9, r2
 8000e24:	b083      	sub	sp, #12
 8000e26:	004a      	lsls	r2, r1, #1
 8000e28:	00c0      	lsls	r0, r0, #3
 8000e2a:	4698      	mov	r8, r3
 8000e2c:	46a2      	mov	sl, r4
 8000e2e:	0d76      	lsrs	r6, r6, #21
 8000e30:	0fed      	lsrs	r5, r5, #31
 8000e32:	0d52      	lsrs	r2, r2, #21
 8000e34:	0fc9      	lsrs	r1, r1, #31
 8000e36:	9001      	str	r0, [sp, #4]
 8000e38:	42a2      	cmp	r2, r4
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_dsub+0x46>
 8000e3c:	e0b9      	b.n	8000fb2 <__aeabi_dsub+0x1ba>
 8000e3e:	2401      	movs	r4, #1
 8000e40:	4061      	eors	r1, r4
 8000e42:	468b      	mov	fp, r1
 8000e44:	428d      	cmp	r5, r1
 8000e46:	d100      	bne.n	8000e4a <__aeabi_dsub+0x52>
 8000e48:	e08d      	b.n	8000f66 <__aeabi_dsub+0x16e>
 8000e4a:	1ab4      	subs	r4, r6, r2
 8000e4c:	46a4      	mov	ip, r4
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	dc00      	bgt.n	8000e54 <__aeabi_dsub+0x5c>
 8000e52:	e0b7      	b.n	8000fc4 <__aeabi_dsub+0x1cc>
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dsub+0x62>
 8000e58:	e0cb      	b.n	8000ff2 <__aeabi_dsub+0x1fa>
 8000e5a:	4ac1      	ldr	r2, [pc, #772]	; (8001160 <__aeabi_dsub+0x368>)
 8000e5c:	4296      	cmp	r6, r2
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dsub+0x6a>
 8000e60:	e186      	b.n	8001170 <__aeabi_dsub+0x378>
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	0412      	lsls	r2, r2, #16
 8000e66:	4317      	orrs	r7, r2
 8000e68:	4662      	mov	r2, ip
 8000e6a:	2a38      	cmp	r2, #56	; 0x38
 8000e6c:	dd00      	ble.n	8000e70 <__aeabi_dsub+0x78>
 8000e6e:	e1a4      	b.n	80011ba <__aeabi_dsub+0x3c2>
 8000e70:	2a1f      	cmp	r2, #31
 8000e72:	dd00      	ble.n	8000e76 <__aeabi_dsub+0x7e>
 8000e74:	e21d      	b.n	80012b2 <__aeabi_dsub+0x4ba>
 8000e76:	4661      	mov	r1, ip
 8000e78:	2220      	movs	r2, #32
 8000e7a:	003c      	movs	r4, r7
 8000e7c:	1a52      	subs	r2, r2, r1
 8000e7e:	0001      	movs	r1, r0
 8000e80:	4090      	lsls	r0, r2
 8000e82:	4094      	lsls	r4, r2
 8000e84:	1e42      	subs	r2, r0, #1
 8000e86:	4190      	sbcs	r0, r2
 8000e88:	4662      	mov	r2, ip
 8000e8a:	46a0      	mov	r8, r4
 8000e8c:	4664      	mov	r4, ip
 8000e8e:	40d7      	lsrs	r7, r2
 8000e90:	464a      	mov	r2, r9
 8000e92:	40e1      	lsrs	r1, r4
 8000e94:	4644      	mov	r4, r8
 8000e96:	1bd2      	subs	r2, r2, r7
 8000e98:	4691      	mov	r9, r2
 8000e9a:	430c      	orrs	r4, r1
 8000e9c:	4304      	orrs	r4, r0
 8000e9e:	1b1c      	subs	r4, r3, r4
 8000ea0:	42a3      	cmp	r3, r4
 8000ea2:	4192      	sbcs	r2, r2
 8000ea4:	464b      	mov	r3, r9
 8000ea6:	4252      	negs	r2, r2
 8000ea8:	1a9b      	subs	r3, r3, r2
 8000eaa:	469a      	mov	sl, r3
 8000eac:	4653      	mov	r3, sl
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	d400      	bmi.n	8000eb4 <__aeabi_dsub+0xbc>
 8000eb2:	e12b      	b.n	800110c <__aeabi_dsub+0x314>
 8000eb4:	4653      	mov	r3, sl
 8000eb6:	025a      	lsls	r2, r3, #9
 8000eb8:	0a53      	lsrs	r3, r2, #9
 8000eba:	469a      	mov	sl, r3
 8000ebc:	4653      	mov	r3, sl
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dsub+0xcc>
 8000ec2:	e166      	b.n	8001192 <__aeabi_dsub+0x39a>
 8000ec4:	4650      	mov	r0, sl
 8000ec6:	f000 fc69 	bl	800179c <__clzsi2>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	3b08      	subs	r3, #8
 8000ece:	2220      	movs	r2, #32
 8000ed0:	0020      	movs	r0, r4
 8000ed2:	1ad2      	subs	r2, r2, r3
 8000ed4:	4651      	mov	r1, sl
 8000ed6:	40d0      	lsrs	r0, r2
 8000ed8:	4099      	lsls	r1, r3
 8000eda:	0002      	movs	r2, r0
 8000edc:	409c      	lsls	r4, r3
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	dd00      	ble.n	8000ee6 <__aeabi_dsub+0xee>
 8000ee4:	e164      	b.n	80011b0 <__aeabi_dsub+0x3b8>
 8000ee6:	1b9b      	subs	r3, r3, r6
 8000ee8:	1c59      	adds	r1, r3, #1
 8000eea:	291f      	cmp	r1, #31
 8000eec:	dd00      	ble.n	8000ef0 <__aeabi_dsub+0xf8>
 8000eee:	e0fe      	b.n	80010ee <__aeabi_dsub+0x2f6>
 8000ef0:	2320      	movs	r3, #32
 8000ef2:	0010      	movs	r0, r2
 8000ef4:	0026      	movs	r6, r4
 8000ef6:	1a5b      	subs	r3, r3, r1
 8000ef8:	409c      	lsls	r4, r3
 8000efa:	4098      	lsls	r0, r3
 8000efc:	40ce      	lsrs	r6, r1
 8000efe:	40ca      	lsrs	r2, r1
 8000f00:	1e63      	subs	r3, r4, #1
 8000f02:	419c      	sbcs	r4, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	4692      	mov	sl, r2
 8000f08:	2600      	movs	r6, #0
 8000f0a:	4304      	orrs	r4, r0
 8000f0c:	0763      	lsls	r3, r4, #29
 8000f0e:	d009      	beq.n	8000f24 <__aeabi_dsub+0x12c>
 8000f10:	230f      	movs	r3, #15
 8000f12:	4023      	ands	r3, r4
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d005      	beq.n	8000f24 <__aeabi_dsub+0x12c>
 8000f18:	1d23      	adds	r3, r4, #4
 8000f1a:	42a3      	cmp	r3, r4
 8000f1c:	41a4      	sbcs	r4, r4
 8000f1e:	4264      	negs	r4, r4
 8000f20:	44a2      	add	sl, r4
 8000f22:	001c      	movs	r4, r3
 8000f24:	4653      	mov	r3, sl
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	d400      	bmi.n	8000f2c <__aeabi_dsub+0x134>
 8000f2a:	e0f2      	b.n	8001112 <__aeabi_dsub+0x31a>
 8000f2c:	4b8c      	ldr	r3, [pc, #560]	; (8001160 <__aeabi_dsub+0x368>)
 8000f2e:	3601      	adds	r6, #1
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d100      	bne.n	8000f36 <__aeabi_dsub+0x13e>
 8000f34:	e10f      	b.n	8001156 <__aeabi_dsub+0x35e>
 8000f36:	4653      	mov	r3, sl
 8000f38:	498a      	ldr	r1, [pc, #552]	; (8001164 <__aeabi_dsub+0x36c>)
 8000f3a:	08e4      	lsrs	r4, r4, #3
 8000f3c:	400b      	ands	r3, r1
 8000f3e:	0019      	movs	r1, r3
 8000f40:	075b      	lsls	r3, r3, #29
 8000f42:	4323      	orrs	r3, r4
 8000f44:	0572      	lsls	r2, r6, #21
 8000f46:	024c      	lsls	r4, r1, #9
 8000f48:	0b24      	lsrs	r4, r4, #12
 8000f4a:	0d52      	lsrs	r2, r2, #21
 8000f4c:	0512      	lsls	r2, r2, #20
 8000f4e:	4322      	orrs	r2, r4
 8000f50:	07ed      	lsls	r5, r5, #31
 8000f52:	432a      	orrs	r2, r5
 8000f54:	0018      	movs	r0, r3
 8000f56:	0011      	movs	r1, r2
 8000f58:	b003      	add	sp, #12
 8000f5a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f5c:	46bb      	mov	fp, r7
 8000f5e:	46b2      	mov	sl, r6
 8000f60:	46a9      	mov	r9, r5
 8000f62:	46a0      	mov	r8, r4
 8000f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f66:	1ab4      	subs	r4, r6, r2
 8000f68:	46a4      	mov	ip, r4
 8000f6a:	2c00      	cmp	r4, #0
 8000f6c:	dd59      	ble.n	8001022 <__aeabi_dsub+0x22a>
 8000f6e:	2a00      	cmp	r2, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_dsub+0x17c>
 8000f72:	e0b0      	b.n	80010d6 <__aeabi_dsub+0x2de>
 8000f74:	4556      	cmp	r6, sl
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dsub+0x182>
 8000f78:	e0fa      	b.n	8001170 <__aeabi_dsub+0x378>
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	0412      	lsls	r2, r2, #16
 8000f7e:	4317      	orrs	r7, r2
 8000f80:	4662      	mov	r2, ip
 8000f82:	2a38      	cmp	r2, #56	; 0x38
 8000f84:	dd00      	ble.n	8000f88 <__aeabi_dsub+0x190>
 8000f86:	e0d4      	b.n	8001132 <__aeabi_dsub+0x33a>
 8000f88:	2a1f      	cmp	r2, #31
 8000f8a:	dc00      	bgt.n	8000f8e <__aeabi_dsub+0x196>
 8000f8c:	e1c0      	b.n	8001310 <__aeabi_dsub+0x518>
 8000f8e:	0039      	movs	r1, r7
 8000f90:	3a20      	subs	r2, #32
 8000f92:	40d1      	lsrs	r1, r2
 8000f94:	4662      	mov	r2, ip
 8000f96:	2a20      	cmp	r2, #32
 8000f98:	d006      	beq.n	8000fa8 <__aeabi_dsub+0x1b0>
 8000f9a:	4664      	mov	r4, ip
 8000f9c:	2240      	movs	r2, #64	; 0x40
 8000f9e:	1b12      	subs	r2, r2, r4
 8000fa0:	003c      	movs	r4, r7
 8000fa2:	4094      	lsls	r4, r2
 8000fa4:	4304      	orrs	r4, r0
 8000fa6:	9401      	str	r4, [sp, #4]
 8000fa8:	9c01      	ldr	r4, [sp, #4]
 8000faa:	1e62      	subs	r2, r4, #1
 8000fac:	4194      	sbcs	r4, r2
 8000fae:	430c      	orrs	r4, r1
 8000fb0:	e0c3      	b.n	800113a <__aeabi_dsub+0x342>
 8000fb2:	003c      	movs	r4, r7
 8000fb4:	4304      	orrs	r4, r0
 8000fb6:	d02b      	beq.n	8001010 <__aeabi_dsub+0x218>
 8000fb8:	468b      	mov	fp, r1
 8000fba:	428d      	cmp	r5, r1
 8000fbc:	d02e      	beq.n	800101c <__aeabi_dsub+0x224>
 8000fbe:	4c6a      	ldr	r4, [pc, #424]	; (8001168 <__aeabi_dsub+0x370>)
 8000fc0:	46a4      	mov	ip, r4
 8000fc2:	44b4      	add	ip, r6
 8000fc4:	4664      	mov	r4, ip
 8000fc6:	2c00      	cmp	r4, #0
 8000fc8:	d05f      	beq.n	800108a <__aeabi_dsub+0x292>
 8000fca:	1b94      	subs	r4, r2, r6
 8000fcc:	46a4      	mov	ip, r4
 8000fce:	2e00      	cmp	r6, #0
 8000fd0:	d000      	beq.n	8000fd4 <__aeabi_dsub+0x1dc>
 8000fd2:	e120      	b.n	8001216 <__aeabi_dsub+0x41e>
 8000fd4:	464c      	mov	r4, r9
 8000fd6:	431c      	orrs	r4, r3
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_dsub+0x1e4>
 8000fda:	e1c7      	b.n	800136c <__aeabi_dsub+0x574>
 8000fdc:	4661      	mov	r1, ip
 8000fde:	1e4c      	subs	r4, r1, #1
 8000fe0:	2901      	cmp	r1, #1
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dsub+0x1ee>
 8000fe4:	e223      	b.n	800142e <__aeabi_dsub+0x636>
 8000fe6:	4d5e      	ldr	r5, [pc, #376]	; (8001160 <__aeabi_dsub+0x368>)
 8000fe8:	45ac      	cmp	ip, r5
 8000fea:	d100      	bne.n	8000fee <__aeabi_dsub+0x1f6>
 8000fec:	e1d8      	b.n	80013a0 <__aeabi_dsub+0x5a8>
 8000fee:	46a4      	mov	ip, r4
 8000ff0:	e11a      	b.n	8001228 <__aeabi_dsub+0x430>
 8000ff2:	003a      	movs	r2, r7
 8000ff4:	4302      	orrs	r2, r0
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_dsub+0x202>
 8000ff8:	e0e4      	b.n	80011c4 <__aeabi_dsub+0x3cc>
 8000ffa:	0022      	movs	r2, r4
 8000ffc:	3a01      	subs	r2, #1
 8000ffe:	2c01      	cmp	r4, #1
 8001000:	d100      	bne.n	8001004 <__aeabi_dsub+0x20c>
 8001002:	e1c3      	b.n	800138c <__aeabi_dsub+0x594>
 8001004:	4956      	ldr	r1, [pc, #344]	; (8001160 <__aeabi_dsub+0x368>)
 8001006:	428c      	cmp	r4, r1
 8001008:	d100      	bne.n	800100c <__aeabi_dsub+0x214>
 800100a:	e0b1      	b.n	8001170 <__aeabi_dsub+0x378>
 800100c:	4694      	mov	ip, r2
 800100e:	e72b      	b.n	8000e68 <__aeabi_dsub+0x70>
 8001010:	2401      	movs	r4, #1
 8001012:	4061      	eors	r1, r4
 8001014:	468b      	mov	fp, r1
 8001016:	428d      	cmp	r5, r1
 8001018:	d000      	beq.n	800101c <__aeabi_dsub+0x224>
 800101a:	e716      	b.n	8000e4a <__aeabi_dsub+0x52>
 800101c:	4952      	ldr	r1, [pc, #328]	; (8001168 <__aeabi_dsub+0x370>)
 800101e:	468c      	mov	ip, r1
 8001020:	44b4      	add	ip, r6
 8001022:	4664      	mov	r4, ip
 8001024:	2c00      	cmp	r4, #0
 8001026:	d100      	bne.n	800102a <__aeabi_dsub+0x232>
 8001028:	e0d3      	b.n	80011d2 <__aeabi_dsub+0x3da>
 800102a:	1b91      	subs	r1, r2, r6
 800102c:	468c      	mov	ip, r1
 800102e:	2e00      	cmp	r6, #0
 8001030:	d100      	bne.n	8001034 <__aeabi_dsub+0x23c>
 8001032:	e15e      	b.n	80012f2 <__aeabi_dsub+0x4fa>
 8001034:	494a      	ldr	r1, [pc, #296]	; (8001160 <__aeabi_dsub+0x368>)
 8001036:	428a      	cmp	r2, r1
 8001038:	d100      	bne.n	800103c <__aeabi_dsub+0x244>
 800103a:	e1be      	b.n	80013ba <__aeabi_dsub+0x5c2>
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	464c      	mov	r4, r9
 8001040:	0409      	lsls	r1, r1, #16
 8001042:	430c      	orrs	r4, r1
 8001044:	46a1      	mov	r9, r4
 8001046:	4661      	mov	r1, ip
 8001048:	2938      	cmp	r1, #56	; 0x38
 800104a:	dd00      	ble.n	800104e <__aeabi_dsub+0x256>
 800104c:	e1ba      	b.n	80013c4 <__aeabi_dsub+0x5cc>
 800104e:	291f      	cmp	r1, #31
 8001050:	dd00      	ble.n	8001054 <__aeabi_dsub+0x25c>
 8001052:	e227      	b.n	80014a4 <__aeabi_dsub+0x6ac>
 8001054:	2420      	movs	r4, #32
 8001056:	1a64      	subs	r4, r4, r1
 8001058:	4649      	mov	r1, r9
 800105a:	40a1      	lsls	r1, r4
 800105c:	001e      	movs	r6, r3
 800105e:	4688      	mov	r8, r1
 8001060:	4661      	mov	r1, ip
 8001062:	40a3      	lsls	r3, r4
 8001064:	40ce      	lsrs	r6, r1
 8001066:	4641      	mov	r1, r8
 8001068:	1e5c      	subs	r4, r3, #1
 800106a:	41a3      	sbcs	r3, r4
 800106c:	4331      	orrs	r1, r6
 800106e:	4319      	orrs	r1, r3
 8001070:	000c      	movs	r4, r1
 8001072:	4663      	mov	r3, ip
 8001074:	4649      	mov	r1, r9
 8001076:	40d9      	lsrs	r1, r3
 8001078:	187f      	adds	r7, r7, r1
 800107a:	1824      	adds	r4, r4, r0
 800107c:	4284      	cmp	r4, r0
 800107e:	419b      	sbcs	r3, r3
 8001080:	425b      	negs	r3, r3
 8001082:	469a      	mov	sl, r3
 8001084:	0016      	movs	r6, r2
 8001086:	44ba      	add	sl, r7
 8001088:	e05d      	b.n	8001146 <__aeabi_dsub+0x34e>
 800108a:	4c38      	ldr	r4, [pc, #224]	; (800116c <__aeabi_dsub+0x374>)
 800108c:	1c72      	adds	r2, r6, #1
 800108e:	4222      	tst	r2, r4
 8001090:	d000      	beq.n	8001094 <__aeabi_dsub+0x29c>
 8001092:	e0df      	b.n	8001254 <__aeabi_dsub+0x45c>
 8001094:	464a      	mov	r2, r9
 8001096:	431a      	orrs	r2, r3
 8001098:	2e00      	cmp	r6, #0
 800109a:	d000      	beq.n	800109e <__aeabi_dsub+0x2a6>
 800109c:	e15c      	b.n	8001358 <__aeabi_dsub+0x560>
 800109e:	2a00      	cmp	r2, #0
 80010a0:	d100      	bne.n	80010a4 <__aeabi_dsub+0x2ac>
 80010a2:	e1cf      	b.n	8001444 <__aeabi_dsub+0x64c>
 80010a4:	003a      	movs	r2, r7
 80010a6:	4302      	orrs	r2, r0
 80010a8:	d100      	bne.n	80010ac <__aeabi_dsub+0x2b4>
 80010aa:	e17f      	b.n	80013ac <__aeabi_dsub+0x5b4>
 80010ac:	1a1c      	subs	r4, r3, r0
 80010ae:	464a      	mov	r2, r9
 80010b0:	42a3      	cmp	r3, r4
 80010b2:	4189      	sbcs	r1, r1
 80010b4:	1bd2      	subs	r2, r2, r7
 80010b6:	4249      	negs	r1, r1
 80010b8:	1a52      	subs	r2, r2, r1
 80010ba:	4692      	mov	sl, r2
 80010bc:	0212      	lsls	r2, r2, #8
 80010be:	d400      	bmi.n	80010c2 <__aeabi_dsub+0x2ca>
 80010c0:	e20a      	b.n	80014d8 <__aeabi_dsub+0x6e0>
 80010c2:	1ac4      	subs	r4, r0, r3
 80010c4:	42a0      	cmp	r0, r4
 80010c6:	4180      	sbcs	r0, r0
 80010c8:	464b      	mov	r3, r9
 80010ca:	4240      	negs	r0, r0
 80010cc:	1aff      	subs	r7, r7, r3
 80010ce:	1a3b      	subs	r3, r7, r0
 80010d0:	469a      	mov	sl, r3
 80010d2:	465d      	mov	r5, fp
 80010d4:	e71a      	b.n	8000f0c <__aeabi_dsub+0x114>
 80010d6:	003a      	movs	r2, r7
 80010d8:	4302      	orrs	r2, r0
 80010da:	d073      	beq.n	80011c4 <__aeabi_dsub+0x3cc>
 80010dc:	0022      	movs	r2, r4
 80010de:	3a01      	subs	r2, #1
 80010e0:	2c01      	cmp	r4, #1
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dsub+0x2ee>
 80010e4:	e0cb      	b.n	800127e <__aeabi_dsub+0x486>
 80010e6:	4554      	cmp	r4, sl
 80010e8:	d042      	beq.n	8001170 <__aeabi_dsub+0x378>
 80010ea:	4694      	mov	ip, r2
 80010ec:	e748      	b.n	8000f80 <__aeabi_dsub+0x188>
 80010ee:	0010      	movs	r0, r2
 80010f0:	3b1f      	subs	r3, #31
 80010f2:	40d8      	lsrs	r0, r3
 80010f4:	2920      	cmp	r1, #32
 80010f6:	d003      	beq.n	8001100 <__aeabi_dsub+0x308>
 80010f8:	2340      	movs	r3, #64	; 0x40
 80010fa:	1a5b      	subs	r3, r3, r1
 80010fc:	409a      	lsls	r2, r3
 80010fe:	4314      	orrs	r4, r2
 8001100:	1e63      	subs	r3, r4, #1
 8001102:	419c      	sbcs	r4, r3
 8001104:	2300      	movs	r3, #0
 8001106:	2600      	movs	r6, #0
 8001108:	469a      	mov	sl, r3
 800110a:	4304      	orrs	r4, r0
 800110c:	0763      	lsls	r3, r4, #29
 800110e:	d000      	beq.n	8001112 <__aeabi_dsub+0x31a>
 8001110:	e6fe      	b.n	8000f10 <__aeabi_dsub+0x118>
 8001112:	4652      	mov	r2, sl
 8001114:	08e3      	lsrs	r3, r4, #3
 8001116:	0752      	lsls	r2, r2, #29
 8001118:	4313      	orrs	r3, r2
 800111a:	4652      	mov	r2, sl
 800111c:	46b4      	mov	ip, r6
 800111e:	08d2      	lsrs	r2, r2, #3
 8001120:	490f      	ldr	r1, [pc, #60]	; (8001160 <__aeabi_dsub+0x368>)
 8001122:	458c      	cmp	ip, r1
 8001124:	d02a      	beq.n	800117c <__aeabi_dsub+0x384>
 8001126:	0312      	lsls	r2, r2, #12
 8001128:	0b14      	lsrs	r4, r2, #12
 800112a:	4662      	mov	r2, ip
 800112c:	0552      	lsls	r2, r2, #21
 800112e:	0d52      	lsrs	r2, r2, #21
 8001130:	e70c      	b.n	8000f4c <__aeabi_dsub+0x154>
 8001132:	003c      	movs	r4, r7
 8001134:	4304      	orrs	r4, r0
 8001136:	1e62      	subs	r2, r4, #1
 8001138:	4194      	sbcs	r4, r2
 800113a:	18e4      	adds	r4, r4, r3
 800113c:	429c      	cmp	r4, r3
 800113e:	4192      	sbcs	r2, r2
 8001140:	4252      	negs	r2, r2
 8001142:	444a      	add	r2, r9
 8001144:	4692      	mov	sl, r2
 8001146:	4653      	mov	r3, sl
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	d5df      	bpl.n	800110c <__aeabi_dsub+0x314>
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__aeabi_dsub+0x368>)
 800114e:	3601      	adds	r6, #1
 8001150:	429e      	cmp	r6, r3
 8001152:	d000      	beq.n	8001156 <__aeabi_dsub+0x35e>
 8001154:	e0a0      	b.n	8001298 <__aeabi_dsub+0x4a0>
 8001156:	0032      	movs	r2, r6
 8001158:	2400      	movs	r4, #0
 800115a:	2300      	movs	r3, #0
 800115c:	e6f6      	b.n	8000f4c <__aeabi_dsub+0x154>
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	000007ff 	.word	0x000007ff
 8001164:	ff7fffff 	.word	0xff7fffff
 8001168:	fffff801 	.word	0xfffff801
 800116c:	000007fe 	.word	0x000007fe
 8001170:	08db      	lsrs	r3, r3, #3
 8001172:	464a      	mov	r2, r9
 8001174:	0752      	lsls	r2, r2, #29
 8001176:	4313      	orrs	r3, r2
 8001178:	464a      	mov	r2, r9
 800117a:	08d2      	lsrs	r2, r2, #3
 800117c:	0019      	movs	r1, r3
 800117e:	4311      	orrs	r1, r2
 8001180:	d100      	bne.n	8001184 <__aeabi_dsub+0x38c>
 8001182:	e1b5      	b.n	80014f0 <__aeabi_dsub+0x6f8>
 8001184:	2480      	movs	r4, #128	; 0x80
 8001186:	0324      	lsls	r4, r4, #12
 8001188:	4314      	orrs	r4, r2
 800118a:	0324      	lsls	r4, r4, #12
 800118c:	4ad5      	ldr	r2, [pc, #852]	; (80014e4 <__aeabi_dsub+0x6ec>)
 800118e:	0b24      	lsrs	r4, r4, #12
 8001190:	e6dc      	b.n	8000f4c <__aeabi_dsub+0x154>
 8001192:	0020      	movs	r0, r4
 8001194:	f000 fb02 	bl	800179c <__clzsi2>
 8001198:	0003      	movs	r3, r0
 800119a:	3318      	adds	r3, #24
 800119c:	2b1f      	cmp	r3, #31
 800119e:	dc00      	bgt.n	80011a2 <__aeabi_dsub+0x3aa>
 80011a0:	e695      	b.n	8000ece <__aeabi_dsub+0xd6>
 80011a2:	0022      	movs	r2, r4
 80011a4:	3808      	subs	r0, #8
 80011a6:	4082      	lsls	r2, r0
 80011a8:	2400      	movs	r4, #0
 80011aa:	429e      	cmp	r6, r3
 80011ac:	dc00      	bgt.n	80011b0 <__aeabi_dsub+0x3b8>
 80011ae:	e69a      	b.n	8000ee6 <__aeabi_dsub+0xee>
 80011b0:	1af6      	subs	r6, r6, r3
 80011b2:	4bcd      	ldr	r3, [pc, #820]	; (80014e8 <__aeabi_dsub+0x6f0>)
 80011b4:	401a      	ands	r2, r3
 80011b6:	4692      	mov	sl, r2
 80011b8:	e6a8      	b.n	8000f0c <__aeabi_dsub+0x114>
 80011ba:	003c      	movs	r4, r7
 80011bc:	4304      	orrs	r4, r0
 80011be:	1e62      	subs	r2, r4, #1
 80011c0:	4194      	sbcs	r4, r2
 80011c2:	e66c      	b.n	8000e9e <__aeabi_dsub+0xa6>
 80011c4:	464a      	mov	r2, r9
 80011c6:	08db      	lsrs	r3, r3, #3
 80011c8:	0752      	lsls	r2, r2, #29
 80011ca:	4313      	orrs	r3, r2
 80011cc:	464a      	mov	r2, r9
 80011ce:	08d2      	lsrs	r2, r2, #3
 80011d0:	e7a6      	b.n	8001120 <__aeabi_dsub+0x328>
 80011d2:	4cc6      	ldr	r4, [pc, #792]	; (80014ec <__aeabi_dsub+0x6f4>)
 80011d4:	1c72      	adds	r2, r6, #1
 80011d6:	4222      	tst	r2, r4
 80011d8:	d000      	beq.n	80011dc <__aeabi_dsub+0x3e4>
 80011da:	e0ac      	b.n	8001336 <__aeabi_dsub+0x53e>
 80011dc:	464a      	mov	r2, r9
 80011de:	431a      	orrs	r2, r3
 80011e0:	2e00      	cmp	r6, #0
 80011e2:	d000      	beq.n	80011e6 <__aeabi_dsub+0x3ee>
 80011e4:	e105      	b.n	80013f2 <__aeabi_dsub+0x5fa>
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_dsub+0x3f4>
 80011ea:	e156      	b.n	800149a <__aeabi_dsub+0x6a2>
 80011ec:	003a      	movs	r2, r7
 80011ee:	4302      	orrs	r2, r0
 80011f0:	d100      	bne.n	80011f4 <__aeabi_dsub+0x3fc>
 80011f2:	e0db      	b.n	80013ac <__aeabi_dsub+0x5b4>
 80011f4:	181c      	adds	r4, r3, r0
 80011f6:	429c      	cmp	r4, r3
 80011f8:	419b      	sbcs	r3, r3
 80011fa:	444f      	add	r7, r9
 80011fc:	46ba      	mov	sl, r7
 80011fe:	425b      	negs	r3, r3
 8001200:	449a      	add	sl, r3
 8001202:	4653      	mov	r3, sl
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	d400      	bmi.n	800120a <__aeabi_dsub+0x412>
 8001208:	e780      	b.n	800110c <__aeabi_dsub+0x314>
 800120a:	4652      	mov	r2, sl
 800120c:	4bb6      	ldr	r3, [pc, #728]	; (80014e8 <__aeabi_dsub+0x6f0>)
 800120e:	2601      	movs	r6, #1
 8001210:	401a      	ands	r2, r3
 8001212:	4692      	mov	sl, r2
 8001214:	e77a      	b.n	800110c <__aeabi_dsub+0x314>
 8001216:	4cb3      	ldr	r4, [pc, #716]	; (80014e4 <__aeabi_dsub+0x6ec>)
 8001218:	42a2      	cmp	r2, r4
 800121a:	d100      	bne.n	800121e <__aeabi_dsub+0x426>
 800121c:	e0c0      	b.n	80013a0 <__aeabi_dsub+0x5a8>
 800121e:	2480      	movs	r4, #128	; 0x80
 8001220:	464d      	mov	r5, r9
 8001222:	0424      	lsls	r4, r4, #16
 8001224:	4325      	orrs	r5, r4
 8001226:	46a9      	mov	r9, r5
 8001228:	4664      	mov	r4, ip
 800122a:	2c38      	cmp	r4, #56	; 0x38
 800122c:	dc53      	bgt.n	80012d6 <__aeabi_dsub+0x4de>
 800122e:	4661      	mov	r1, ip
 8001230:	2c1f      	cmp	r4, #31
 8001232:	dd00      	ble.n	8001236 <__aeabi_dsub+0x43e>
 8001234:	e0cd      	b.n	80013d2 <__aeabi_dsub+0x5da>
 8001236:	2520      	movs	r5, #32
 8001238:	001e      	movs	r6, r3
 800123a:	1b2d      	subs	r5, r5, r4
 800123c:	464c      	mov	r4, r9
 800123e:	40ab      	lsls	r3, r5
 8001240:	40ac      	lsls	r4, r5
 8001242:	40ce      	lsrs	r6, r1
 8001244:	1e5d      	subs	r5, r3, #1
 8001246:	41ab      	sbcs	r3, r5
 8001248:	4334      	orrs	r4, r6
 800124a:	4323      	orrs	r3, r4
 800124c:	464c      	mov	r4, r9
 800124e:	40cc      	lsrs	r4, r1
 8001250:	1b3f      	subs	r7, r7, r4
 8001252:	e045      	b.n	80012e0 <__aeabi_dsub+0x4e8>
 8001254:	464a      	mov	r2, r9
 8001256:	1a1c      	subs	r4, r3, r0
 8001258:	1bd1      	subs	r1, r2, r7
 800125a:	42a3      	cmp	r3, r4
 800125c:	4192      	sbcs	r2, r2
 800125e:	4252      	negs	r2, r2
 8001260:	4692      	mov	sl, r2
 8001262:	000a      	movs	r2, r1
 8001264:	4651      	mov	r1, sl
 8001266:	1a52      	subs	r2, r2, r1
 8001268:	4692      	mov	sl, r2
 800126a:	0212      	lsls	r2, r2, #8
 800126c:	d500      	bpl.n	8001270 <__aeabi_dsub+0x478>
 800126e:	e083      	b.n	8001378 <__aeabi_dsub+0x580>
 8001270:	4653      	mov	r3, sl
 8001272:	4323      	orrs	r3, r4
 8001274:	d000      	beq.n	8001278 <__aeabi_dsub+0x480>
 8001276:	e621      	b.n	8000ebc <__aeabi_dsub+0xc4>
 8001278:	2200      	movs	r2, #0
 800127a:	2500      	movs	r5, #0
 800127c:	e753      	b.n	8001126 <__aeabi_dsub+0x32e>
 800127e:	181c      	adds	r4, r3, r0
 8001280:	429c      	cmp	r4, r3
 8001282:	419b      	sbcs	r3, r3
 8001284:	444f      	add	r7, r9
 8001286:	46ba      	mov	sl, r7
 8001288:	425b      	negs	r3, r3
 800128a:	449a      	add	sl, r3
 800128c:	4653      	mov	r3, sl
 800128e:	2601      	movs	r6, #1
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	d400      	bmi.n	8001296 <__aeabi_dsub+0x49e>
 8001294:	e73a      	b.n	800110c <__aeabi_dsub+0x314>
 8001296:	2602      	movs	r6, #2
 8001298:	4652      	mov	r2, sl
 800129a:	4b93      	ldr	r3, [pc, #588]	; (80014e8 <__aeabi_dsub+0x6f0>)
 800129c:	2101      	movs	r1, #1
 800129e:	401a      	ands	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	4021      	ands	r1, r4
 80012a4:	0862      	lsrs	r2, r4, #1
 80012a6:	430a      	orrs	r2, r1
 80012a8:	07dc      	lsls	r4, r3, #31
 80012aa:	085b      	lsrs	r3, r3, #1
 80012ac:	469a      	mov	sl, r3
 80012ae:	4314      	orrs	r4, r2
 80012b0:	e62c      	b.n	8000f0c <__aeabi_dsub+0x114>
 80012b2:	0039      	movs	r1, r7
 80012b4:	3a20      	subs	r2, #32
 80012b6:	40d1      	lsrs	r1, r2
 80012b8:	4662      	mov	r2, ip
 80012ba:	2a20      	cmp	r2, #32
 80012bc:	d006      	beq.n	80012cc <__aeabi_dsub+0x4d4>
 80012be:	4664      	mov	r4, ip
 80012c0:	2240      	movs	r2, #64	; 0x40
 80012c2:	1b12      	subs	r2, r2, r4
 80012c4:	003c      	movs	r4, r7
 80012c6:	4094      	lsls	r4, r2
 80012c8:	4304      	orrs	r4, r0
 80012ca:	9401      	str	r4, [sp, #4]
 80012cc:	9c01      	ldr	r4, [sp, #4]
 80012ce:	1e62      	subs	r2, r4, #1
 80012d0:	4194      	sbcs	r4, r2
 80012d2:	430c      	orrs	r4, r1
 80012d4:	e5e3      	b.n	8000e9e <__aeabi_dsub+0xa6>
 80012d6:	4649      	mov	r1, r9
 80012d8:	4319      	orrs	r1, r3
 80012da:	000b      	movs	r3, r1
 80012dc:	1e5c      	subs	r4, r3, #1
 80012de:	41a3      	sbcs	r3, r4
 80012e0:	1ac4      	subs	r4, r0, r3
 80012e2:	42a0      	cmp	r0, r4
 80012e4:	419b      	sbcs	r3, r3
 80012e6:	425b      	negs	r3, r3
 80012e8:	1afb      	subs	r3, r7, r3
 80012ea:	469a      	mov	sl, r3
 80012ec:	465d      	mov	r5, fp
 80012ee:	0016      	movs	r6, r2
 80012f0:	e5dc      	b.n	8000eac <__aeabi_dsub+0xb4>
 80012f2:	4649      	mov	r1, r9
 80012f4:	4319      	orrs	r1, r3
 80012f6:	d100      	bne.n	80012fa <__aeabi_dsub+0x502>
 80012f8:	e0ae      	b.n	8001458 <__aeabi_dsub+0x660>
 80012fa:	4661      	mov	r1, ip
 80012fc:	4664      	mov	r4, ip
 80012fe:	3901      	subs	r1, #1
 8001300:	2c01      	cmp	r4, #1
 8001302:	d100      	bne.n	8001306 <__aeabi_dsub+0x50e>
 8001304:	e0e0      	b.n	80014c8 <__aeabi_dsub+0x6d0>
 8001306:	4c77      	ldr	r4, [pc, #476]	; (80014e4 <__aeabi_dsub+0x6ec>)
 8001308:	45a4      	cmp	ip, r4
 800130a:	d056      	beq.n	80013ba <__aeabi_dsub+0x5c2>
 800130c:	468c      	mov	ip, r1
 800130e:	e69a      	b.n	8001046 <__aeabi_dsub+0x24e>
 8001310:	4661      	mov	r1, ip
 8001312:	2220      	movs	r2, #32
 8001314:	003c      	movs	r4, r7
 8001316:	1a52      	subs	r2, r2, r1
 8001318:	4094      	lsls	r4, r2
 800131a:	0001      	movs	r1, r0
 800131c:	4090      	lsls	r0, r2
 800131e:	46a0      	mov	r8, r4
 8001320:	4664      	mov	r4, ip
 8001322:	1e42      	subs	r2, r0, #1
 8001324:	4190      	sbcs	r0, r2
 8001326:	4662      	mov	r2, ip
 8001328:	40e1      	lsrs	r1, r4
 800132a:	4644      	mov	r4, r8
 800132c:	40d7      	lsrs	r7, r2
 800132e:	430c      	orrs	r4, r1
 8001330:	4304      	orrs	r4, r0
 8001332:	44b9      	add	r9, r7
 8001334:	e701      	b.n	800113a <__aeabi_dsub+0x342>
 8001336:	496b      	ldr	r1, [pc, #428]	; (80014e4 <__aeabi_dsub+0x6ec>)
 8001338:	428a      	cmp	r2, r1
 800133a:	d100      	bne.n	800133e <__aeabi_dsub+0x546>
 800133c:	e70c      	b.n	8001158 <__aeabi_dsub+0x360>
 800133e:	1818      	adds	r0, r3, r0
 8001340:	4298      	cmp	r0, r3
 8001342:	419b      	sbcs	r3, r3
 8001344:	444f      	add	r7, r9
 8001346:	425b      	negs	r3, r3
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	07dc      	lsls	r4, r3, #31
 800134c:	0840      	lsrs	r0, r0, #1
 800134e:	085b      	lsrs	r3, r3, #1
 8001350:	469a      	mov	sl, r3
 8001352:	0016      	movs	r6, r2
 8001354:	4304      	orrs	r4, r0
 8001356:	e6d9      	b.n	800110c <__aeabi_dsub+0x314>
 8001358:	2a00      	cmp	r2, #0
 800135a:	d000      	beq.n	800135e <__aeabi_dsub+0x566>
 800135c:	e081      	b.n	8001462 <__aeabi_dsub+0x66a>
 800135e:	003b      	movs	r3, r7
 8001360:	4303      	orrs	r3, r0
 8001362:	d11d      	bne.n	80013a0 <__aeabi_dsub+0x5a8>
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	2500      	movs	r5, #0
 8001368:	0312      	lsls	r2, r2, #12
 800136a:	e70b      	b.n	8001184 <__aeabi_dsub+0x38c>
 800136c:	08c0      	lsrs	r0, r0, #3
 800136e:	077b      	lsls	r3, r7, #29
 8001370:	465d      	mov	r5, fp
 8001372:	4303      	orrs	r3, r0
 8001374:	08fa      	lsrs	r2, r7, #3
 8001376:	e6d3      	b.n	8001120 <__aeabi_dsub+0x328>
 8001378:	1ac4      	subs	r4, r0, r3
 800137a:	42a0      	cmp	r0, r4
 800137c:	4180      	sbcs	r0, r0
 800137e:	464b      	mov	r3, r9
 8001380:	4240      	negs	r0, r0
 8001382:	1aff      	subs	r7, r7, r3
 8001384:	1a3b      	subs	r3, r7, r0
 8001386:	469a      	mov	sl, r3
 8001388:	465d      	mov	r5, fp
 800138a:	e597      	b.n	8000ebc <__aeabi_dsub+0xc4>
 800138c:	1a1c      	subs	r4, r3, r0
 800138e:	464a      	mov	r2, r9
 8001390:	42a3      	cmp	r3, r4
 8001392:	419b      	sbcs	r3, r3
 8001394:	1bd7      	subs	r7, r2, r7
 8001396:	425b      	negs	r3, r3
 8001398:	1afb      	subs	r3, r7, r3
 800139a:	469a      	mov	sl, r3
 800139c:	2601      	movs	r6, #1
 800139e:	e585      	b.n	8000eac <__aeabi_dsub+0xb4>
 80013a0:	08c0      	lsrs	r0, r0, #3
 80013a2:	077b      	lsls	r3, r7, #29
 80013a4:	465d      	mov	r5, fp
 80013a6:	4303      	orrs	r3, r0
 80013a8:	08fa      	lsrs	r2, r7, #3
 80013aa:	e6e7      	b.n	800117c <__aeabi_dsub+0x384>
 80013ac:	464a      	mov	r2, r9
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	0752      	lsls	r2, r2, #29
 80013b2:	4313      	orrs	r3, r2
 80013b4:	464a      	mov	r2, r9
 80013b6:	08d2      	lsrs	r2, r2, #3
 80013b8:	e6b5      	b.n	8001126 <__aeabi_dsub+0x32e>
 80013ba:	08c0      	lsrs	r0, r0, #3
 80013bc:	077b      	lsls	r3, r7, #29
 80013be:	4303      	orrs	r3, r0
 80013c0:	08fa      	lsrs	r2, r7, #3
 80013c2:	e6db      	b.n	800117c <__aeabi_dsub+0x384>
 80013c4:	4649      	mov	r1, r9
 80013c6:	4319      	orrs	r1, r3
 80013c8:	000b      	movs	r3, r1
 80013ca:	1e59      	subs	r1, r3, #1
 80013cc:	418b      	sbcs	r3, r1
 80013ce:	001c      	movs	r4, r3
 80013d0:	e653      	b.n	800107a <__aeabi_dsub+0x282>
 80013d2:	464d      	mov	r5, r9
 80013d4:	3c20      	subs	r4, #32
 80013d6:	40e5      	lsrs	r5, r4
 80013d8:	2920      	cmp	r1, #32
 80013da:	d005      	beq.n	80013e8 <__aeabi_dsub+0x5f0>
 80013dc:	2440      	movs	r4, #64	; 0x40
 80013de:	1a64      	subs	r4, r4, r1
 80013e0:	4649      	mov	r1, r9
 80013e2:	40a1      	lsls	r1, r4
 80013e4:	430b      	orrs	r3, r1
 80013e6:	4698      	mov	r8, r3
 80013e8:	4643      	mov	r3, r8
 80013ea:	1e5c      	subs	r4, r3, #1
 80013ec:	41a3      	sbcs	r3, r4
 80013ee:	432b      	orrs	r3, r5
 80013f0:	e776      	b.n	80012e0 <__aeabi_dsub+0x4e8>
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	d0e1      	beq.n	80013ba <__aeabi_dsub+0x5c2>
 80013f6:	003a      	movs	r2, r7
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	4302      	orrs	r2, r0
 80013fc:	d100      	bne.n	8001400 <__aeabi_dsub+0x608>
 80013fe:	e6b8      	b.n	8001172 <__aeabi_dsub+0x37a>
 8001400:	464a      	mov	r2, r9
 8001402:	0752      	lsls	r2, r2, #29
 8001404:	2480      	movs	r4, #128	; 0x80
 8001406:	4313      	orrs	r3, r2
 8001408:	464a      	mov	r2, r9
 800140a:	0324      	lsls	r4, r4, #12
 800140c:	08d2      	lsrs	r2, r2, #3
 800140e:	4222      	tst	r2, r4
 8001410:	d007      	beq.n	8001422 <__aeabi_dsub+0x62a>
 8001412:	08fe      	lsrs	r6, r7, #3
 8001414:	4226      	tst	r6, r4
 8001416:	d104      	bne.n	8001422 <__aeabi_dsub+0x62a>
 8001418:	465d      	mov	r5, fp
 800141a:	0032      	movs	r2, r6
 800141c:	08c3      	lsrs	r3, r0, #3
 800141e:	077f      	lsls	r7, r7, #29
 8001420:	433b      	orrs	r3, r7
 8001422:	0f59      	lsrs	r1, r3, #29
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	0749      	lsls	r1, r1, #29
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	430b      	orrs	r3, r1
 800142c:	e6a6      	b.n	800117c <__aeabi_dsub+0x384>
 800142e:	1ac4      	subs	r4, r0, r3
 8001430:	42a0      	cmp	r0, r4
 8001432:	4180      	sbcs	r0, r0
 8001434:	464b      	mov	r3, r9
 8001436:	4240      	negs	r0, r0
 8001438:	1aff      	subs	r7, r7, r3
 800143a:	1a3b      	subs	r3, r7, r0
 800143c:	469a      	mov	sl, r3
 800143e:	465d      	mov	r5, fp
 8001440:	2601      	movs	r6, #1
 8001442:	e533      	b.n	8000eac <__aeabi_dsub+0xb4>
 8001444:	003b      	movs	r3, r7
 8001446:	4303      	orrs	r3, r0
 8001448:	d100      	bne.n	800144c <__aeabi_dsub+0x654>
 800144a:	e715      	b.n	8001278 <__aeabi_dsub+0x480>
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	077b      	lsls	r3, r7, #29
 8001450:	465d      	mov	r5, fp
 8001452:	4303      	orrs	r3, r0
 8001454:	08fa      	lsrs	r2, r7, #3
 8001456:	e666      	b.n	8001126 <__aeabi_dsub+0x32e>
 8001458:	08c0      	lsrs	r0, r0, #3
 800145a:	077b      	lsls	r3, r7, #29
 800145c:	4303      	orrs	r3, r0
 800145e:	08fa      	lsrs	r2, r7, #3
 8001460:	e65e      	b.n	8001120 <__aeabi_dsub+0x328>
 8001462:	003a      	movs	r2, r7
 8001464:	08db      	lsrs	r3, r3, #3
 8001466:	4302      	orrs	r2, r0
 8001468:	d100      	bne.n	800146c <__aeabi_dsub+0x674>
 800146a:	e682      	b.n	8001172 <__aeabi_dsub+0x37a>
 800146c:	464a      	mov	r2, r9
 800146e:	0752      	lsls	r2, r2, #29
 8001470:	2480      	movs	r4, #128	; 0x80
 8001472:	4313      	orrs	r3, r2
 8001474:	464a      	mov	r2, r9
 8001476:	0324      	lsls	r4, r4, #12
 8001478:	08d2      	lsrs	r2, r2, #3
 800147a:	4222      	tst	r2, r4
 800147c:	d007      	beq.n	800148e <__aeabi_dsub+0x696>
 800147e:	08fe      	lsrs	r6, r7, #3
 8001480:	4226      	tst	r6, r4
 8001482:	d104      	bne.n	800148e <__aeabi_dsub+0x696>
 8001484:	465d      	mov	r5, fp
 8001486:	0032      	movs	r2, r6
 8001488:	08c3      	lsrs	r3, r0, #3
 800148a:	077f      	lsls	r7, r7, #29
 800148c:	433b      	orrs	r3, r7
 800148e:	0f59      	lsrs	r1, r3, #29
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	0749      	lsls	r1, r1, #29
 8001496:	430b      	orrs	r3, r1
 8001498:	e670      	b.n	800117c <__aeabi_dsub+0x384>
 800149a:	08c0      	lsrs	r0, r0, #3
 800149c:	077b      	lsls	r3, r7, #29
 800149e:	4303      	orrs	r3, r0
 80014a0:	08fa      	lsrs	r2, r7, #3
 80014a2:	e640      	b.n	8001126 <__aeabi_dsub+0x32e>
 80014a4:	464c      	mov	r4, r9
 80014a6:	3920      	subs	r1, #32
 80014a8:	40cc      	lsrs	r4, r1
 80014aa:	4661      	mov	r1, ip
 80014ac:	2920      	cmp	r1, #32
 80014ae:	d006      	beq.n	80014be <__aeabi_dsub+0x6c6>
 80014b0:	4666      	mov	r6, ip
 80014b2:	2140      	movs	r1, #64	; 0x40
 80014b4:	1b89      	subs	r1, r1, r6
 80014b6:	464e      	mov	r6, r9
 80014b8:	408e      	lsls	r6, r1
 80014ba:	4333      	orrs	r3, r6
 80014bc:	4698      	mov	r8, r3
 80014be:	4643      	mov	r3, r8
 80014c0:	1e59      	subs	r1, r3, #1
 80014c2:	418b      	sbcs	r3, r1
 80014c4:	431c      	orrs	r4, r3
 80014c6:	e5d8      	b.n	800107a <__aeabi_dsub+0x282>
 80014c8:	181c      	adds	r4, r3, r0
 80014ca:	4284      	cmp	r4, r0
 80014cc:	4180      	sbcs	r0, r0
 80014ce:	444f      	add	r7, r9
 80014d0:	46ba      	mov	sl, r7
 80014d2:	4240      	negs	r0, r0
 80014d4:	4482      	add	sl, r0
 80014d6:	e6d9      	b.n	800128c <__aeabi_dsub+0x494>
 80014d8:	4653      	mov	r3, sl
 80014da:	4323      	orrs	r3, r4
 80014dc:	d100      	bne.n	80014e0 <__aeabi_dsub+0x6e8>
 80014de:	e6cb      	b.n	8001278 <__aeabi_dsub+0x480>
 80014e0:	e614      	b.n	800110c <__aeabi_dsub+0x314>
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	000007ff 	.word	0x000007ff
 80014e8:	ff7fffff 	.word	0xff7fffff
 80014ec:	000007fe 	.word	0x000007fe
 80014f0:	2300      	movs	r3, #0
 80014f2:	4a01      	ldr	r2, [pc, #4]	; (80014f8 <__aeabi_dsub+0x700>)
 80014f4:	001c      	movs	r4, r3
 80014f6:	e529      	b.n	8000f4c <__aeabi_dsub+0x154>
 80014f8:	000007ff 	.word	0x000007ff

080014fc <__aeabi_d2iz>:
 80014fc:	000a      	movs	r2, r1
 80014fe:	b530      	push	{r4, r5, lr}
 8001500:	4c13      	ldr	r4, [pc, #76]	; (8001550 <__aeabi_d2iz+0x54>)
 8001502:	0053      	lsls	r3, r2, #1
 8001504:	0309      	lsls	r1, r1, #12
 8001506:	0005      	movs	r5, r0
 8001508:	0b09      	lsrs	r1, r1, #12
 800150a:	2000      	movs	r0, #0
 800150c:	0d5b      	lsrs	r3, r3, #21
 800150e:	0fd2      	lsrs	r2, r2, #31
 8001510:	42a3      	cmp	r3, r4
 8001512:	dd04      	ble.n	800151e <__aeabi_d2iz+0x22>
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <__aeabi_d2iz+0x58>)
 8001516:	4283      	cmp	r3, r0
 8001518:	dd02      	ble.n	8001520 <__aeabi_d2iz+0x24>
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <__aeabi_d2iz+0x5c>)
 800151c:	18d0      	adds	r0, r2, r3
 800151e:	bd30      	pop	{r4, r5, pc}
 8001520:	2080      	movs	r0, #128	; 0x80
 8001522:	0340      	lsls	r0, r0, #13
 8001524:	4301      	orrs	r1, r0
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <__aeabi_d2iz+0x60>)
 8001528:	1ac0      	subs	r0, r0, r3
 800152a:	281f      	cmp	r0, #31
 800152c:	dd08      	ble.n	8001540 <__aeabi_d2iz+0x44>
 800152e:	480c      	ldr	r0, [pc, #48]	; (8001560 <__aeabi_d2iz+0x64>)
 8001530:	1ac3      	subs	r3, r0, r3
 8001532:	40d9      	lsrs	r1, r3
 8001534:	000b      	movs	r3, r1
 8001536:	4258      	negs	r0, r3
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__aeabi_d2iz+0x22>
 800153c:	0018      	movs	r0, r3
 800153e:	e7ee      	b.n	800151e <__aeabi_d2iz+0x22>
 8001540:	4c08      	ldr	r4, [pc, #32]	; (8001564 <__aeabi_d2iz+0x68>)
 8001542:	40c5      	lsrs	r5, r0
 8001544:	46a4      	mov	ip, r4
 8001546:	4463      	add	r3, ip
 8001548:	4099      	lsls	r1, r3
 800154a:	000b      	movs	r3, r1
 800154c:	432b      	orrs	r3, r5
 800154e:	e7f2      	b.n	8001536 <__aeabi_d2iz+0x3a>
 8001550:	000003fe 	.word	0x000003fe
 8001554:	0000041d 	.word	0x0000041d
 8001558:	7fffffff 	.word	0x7fffffff
 800155c:	00000433 	.word	0x00000433
 8001560:	00000413 	.word	0x00000413
 8001564:	fffffbed 	.word	0xfffffbed

08001568 <__aeabi_i2d>:
 8001568:	b570      	push	{r4, r5, r6, lr}
 800156a:	2800      	cmp	r0, #0
 800156c:	d016      	beq.n	800159c <__aeabi_i2d+0x34>
 800156e:	17c3      	asrs	r3, r0, #31
 8001570:	18c5      	adds	r5, r0, r3
 8001572:	405d      	eors	r5, r3
 8001574:	0fc4      	lsrs	r4, r0, #31
 8001576:	0028      	movs	r0, r5
 8001578:	f000 f910 	bl	800179c <__clzsi2>
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <__aeabi_i2d+0x5c>)
 800157e:	1a1b      	subs	r3, r3, r0
 8001580:	280a      	cmp	r0, #10
 8001582:	dc16      	bgt.n	80015b2 <__aeabi_i2d+0x4a>
 8001584:	0002      	movs	r2, r0
 8001586:	002e      	movs	r6, r5
 8001588:	3215      	adds	r2, #21
 800158a:	4096      	lsls	r6, r2
 800158c:	220b      	movs	r2, #11
 800158e:	1a12      	subs	r2, r2, r0
 8001590:	40d5      	lsrs	r5, r2
 8001592:	055b      	lsls	r3, r3, #21
 8001594:	032d      	lsls	r5, r5, #12
 8001596:	0b2d      	lsrs	r5, r5, #12
 8001598:	0d5b      	lsrs	r3, r3, #21
 800159a:	e003      	b.n	80015a4 <__aeabi_i2d+0x3c>
 800159c:	2400      	movs	r4, #0
 800159e:	2300      	movs	r3, #0
 80015a0:	2500      	movs	r5, #0
 80015a2:	2600      	movs	r6, #0
 80015a4:	051b      	lsls	r3, r3, #20
 80015a6:	432b      	orrs	r3, r5
 80015a8:	07e4      	lsls	r4, r4, #31
 80015aa:	4323      	orrs	r3, r4
 80015ac:	0030      	movs	r0, r6
 80015ae:	0019      	movs	r1, r3
 80015b0:	bd70      	pop	{r4, r5, r6, pc}
 80015b2:	380b      	subs	r0, #11
 80015b4:	4085      	lsls	r5, r0
 80015b6:	055b      	lsls	r3, r3, #21
 80015b8:	032d      	lsls	r5, r5, #12
 80015ba:	2600      	movs	r6, #0
 80015bc:	0b2d      	lsrs	r5, r5, #12
 80015be:	0d5b      	lsrs	r3, r3, #21
 80015c0:	e7f0      	b.n	80015a4 <__aeabi_i2d+0x3c>
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	0000041e 	.word	0x0000041e

080015c8 <__aeabi_ui2d>:
 80015c8:	b510      	push	{r4, lr}
 80015ca:	1e04      	subs	r4, r0, #0
 80015cc:	d010      	beq.n	80015f0 <__aeabi_ui2d+0x28>
 80015ce:	f000 f8e5 	bl	800179c <__clzsi2>
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <__aeabi_ui2d+0x48>)
 80015d4:	1a1b      	subs	r3, r3, r0
 80015d6:	280a      	cmp	r0, #10
 80015d8:	dc11      	bgt.n	80015fe <__aeabi_ui2d+0x36>
 80015da:	220b      	movs	r2, #11
 80015dc:	0021      	movs	r1, r4
 80015de:	1a12      	subs	r2, r2, r0
 80015e0:	40d1      	lsrs	r1, r2
 80015e2:	3015      	adds	r0, #21
 80015e4:	030a      	lsls	r2, r1, #12
 80015e6:	055b      	lsls	r3, r3, #21
 80015e8:	4084      	lsls	r4, r0
 80015ea:	0b12      	lsrs	r2, r2, #12
 80015ec:	0d5b      	lsrs	r3, r3, #21
 80015ee:	e001      	b.n	80015f4 <__aeabi_ui2d+0x2c>
 80015f0:	2300      	movs	r3, #0
 80015f2:	2200      	movs	r2, #0
 80015f4:	051b      	lsls	r3, r3, #20
 80015f6:	4313      	orrs	r3, r2
 80015f8:	0020      	movs	r0, r4
 80015fa:	0019      	movs	r1, r3
 80015fc:	bd10      	pop	{r4, pc}
 80015fe:	0022      	movs	r2, r4
 8001600:	380b      	subs	r0, #11
 8001602:	4082      	lsls	r2, r0
 8001604:	055b      	lsls	r3, r3, #21
 8001606:	0312      	lsls	r2, r2, #12
 8001608:	2400      	movs	r4, #0
 800160a:	0b12      	lsrs	r2, r2, #12
 800160c:	0d5b      	lsrs	r3, r3, #21
 800160e:	e7f1      	b.n	80015f4 <__aeabi_ui2d+0x2c>
 8001610:	0000041e 	.word	0x0000041e

08001614 <__aeabi_d2f>:
 8001614:	0002      	movs	r2, r0
 8001616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001618:	004b      	lsls	r3, r1, #1
 800161a:	030d      	lsls	r5, r1, #12
 800161c:	0f40      	lsrs	r0, r0, #29
 800161e:	0d5b      	lsrs	r3, r3, #21
 8001620:	0fcc      	lsrs	r4, r1, #31
 8001622:	0a6d      	lsrs	r5, r5, #9
 8001624:	493a      	ldr	r1, [pc, #232]	; (8001710 <__aeabi_d2f+0xfc>)
 8001626:	4305      	orrs	r5, r0
 8001628:	1c58      	adds	r0, r3, #1
 800162a:	00d7      	lsls	r7, r2, #3
 800162c:	4208      	tst	r0, r1
 800162e:	d00a      	beq.n	8001646 <__aeabi_d2f+0x32>
 8001630:	4938      	ldr	r1, [pc, #224]	; (8001714 <__aeabi_d2f+0x100>)
 8001632:	1859      	adds	r1, r3, r1
 8001634:	29fe      	cmp	r1, #254	; 0xfe
 8001636:	dd16      	ble.n	8001666 <__aeabi_d2f+0x52>
 8001638:	20ff      	movs	r0, #255	; 0xff
 800163a:	2200      	movs	r2, #0
 800163c:	05c0      	lsls	r0, r0, #23
 800163e:	4310      	orrs	r0, r2
 8001640:	07e4      	lsls	r4, r4, #31
 8001642:	4320      	orrs	r0, r4
 8001644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001646:	2b00      	cmp	r3, #0
 8001648:	d106      	bne.n	8001658 <__aeabi_d2f+0x44>
 800164a:	433d      	orrs	r5, r7
 800164c:	d026      	beq.n	800169c <__aeabi_d2f+0x88>
 800164e:	2205      	movs	r2, #5
 8001650:	0192      	lsls	r2, r2, #6
 8001652:	0a52      	lsrs	r2, r2, #9
 8001654:	b2d8      	uxtb	r0, r3
 8001656:	e7f1      	b.n	800163c <__aeabi_d2f+0x28>
 8001658:	432f      	orrs	r7, r5
 800165a:	d0ed      	beq.n	8001638 <__aeabi_d2f+0x24>
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	03d2      	lsls	r2, r2, #15
 8001660:	20ff      	movs	r0, #255	; 0xff
 8001662:	432a      	orrs	r2, r5
 8001664:	e7ea      	b.n	800163c <__aeabi_d2f+0x28>
 8001666:	2900      	cmp	r1, #0
 8001668:	dd1b      	ble.n	80016a2 <__aeabi_d2f+0x8e>
 800166a:	0192      	lsls	r2, r2, #6
 800166c:	1e50      	subs	r0, r2, #1
 800166e:	4182      	sbcs	r2, r0
 8001670:	00ed      	lsls	r5, r5, #3
 8001672:	0f7f      	lsrs	r7, r7, #29
 8001674:	432a      	orrs	r2, r5
 8001676:	433a      	orrs	r2, r7
 8001678:	0753      	lsls	r3, r2, #29
 800167a:	d047      	beq.n	800170c <__aeabi_d2f+0xf8>
 800167c:	230f      	movs	r3, #15
 800167e:	4013      	ands	r3, r2
 8001680:	2b04      	cmp	r3, #4
 8001682:	d000      	beq.n	8001686 <__aeabi_d2f+0x72>
 8001684:	3204      	adds	r2, #4
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	04db      	lsls	r3, r3, #19
 800168a:	4013      	ands	r3, r2
 800168c:	d03e      	beq.n	800170c <__aeabi_d2f+0xf8>
 800168e:	1c48      	adds	r0, r1, #1
 8001690:	29fe      	cmp	r1, #254	; 0xfe
 8001692:	d0d1      	beq.n	8001638 <__aeabi_d2f+0x24>
 8001694:	0192      	lsls	r2, r2, #6
 8001696:	0a52      	lsrs	r2, r2, #9
 8001698:	b2c0      	uxtb	r0, r0
 800169a:	e7cf      	b.n	800163c <__aeabi_d2f+0x28>
 800169c:	2000      	movs	r0, #0
 800169e:	2200      	movs	r2, #0
 80016a0:	e7cc      	b.n	800163c <__aeabi_d2f+0x28>
 80016a2:	000a      	movs	r2, r1
 80016a4:	3217      	adds	r2, #23
 80016a6:	db2f      	blt.n	8001708 <__aeabi_d2f+0xf4>
 80016a8:	2680      	movs	r6, #128	; 0x80
 80016aa:	0436      	lsls	r6, r6, #16
 80016ac:	432e      	orrs	r6, r5
 80016ae:	251e      	movs	r5, #30
 80016b0:	1a6d      	subs	r5, r5, r1
 80016b2:	2d1f      	cmp	r5, #31
 80016b4:	dd11      	ble.n	80016da <__aeabi_d2f+0xc6>
 80016b6:	2202      	movs	r2, #2
 80016b8:	4252      	negs	r2, r2
 80016ba:	1a52      	subs	r2, r2, r1
 80016bc:	0031      	movs	r1, r6
 80016be:	40d1      	lsrs	r1, r2
 80016c0:	2d20      	cmp	r5, #32
 80016c2:	d004      	beq.n	80016ce <__aeabi_d2f+0xba>
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <__aeabi_d2f+0x104>)
 80016c6:	4694      	mov	ip, r2
 80016c8:	4463      	add	r3, ip
 80016ca:	409e      	lsls	r6, r3
 80016cc:	4337      	orrs	r7, r6
 80016ce:	003a      	movs	r2, r7
 80016d0:	1e53      	subs	r3, r2, #1
 80016d2:	419a      	sbcs	r2, r3
 80016d4:	430a      	orrs	r2, r1
 80016d6:	2100      	movs	r1, #0
 80016d8:	e7ce      	b.n	8001678 <__aeabi_d2f+0x64>
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <__aeabi_d2f+0x108>)
 80016dc:	0038      	movs	r0, r7
 80016de:	4694      	mov	ip, r2
 80016e0:	4463      	add	r3, ip
 80016e2:	4098      	lsls	r0, r3
 80016e4:	003a      	movs	r2, r7
 80016e6:	1e41      	subs	r1, r0, #1
 80016e8:	4188      	sbcs	r0, r1
 80016ea:	409e      	lsls	r6, r3
 80016ec:	40ea      	lsrs	r2, r5
 80016ee:	4330      	orrs	r0, r6
 80016f0:	4302      	orrs	r2, r0
 80016f2:	2100      	movs	r1, #0
 80016f4:	0753      	lsls	r3, r2, #29
 80016f6:	d1c1      	bne.n	800167c <__aeabi_d2f+0x68>
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	0013      	movs	r3, r2
 80016fc:	04c9      	lsls	r1, r1, #19
 80016fe:	2001      	movs	r0, #1
 8001700:	400b      	ands	r3, r1
 8001702:	420a      	tst	r2, r1
 8001704:	d1c6      	bne.n	8001694 <__aeabi_d2f+0x80>
 8001706:	e7a3      	b.n	8001650 <__aeabi_d2f+0x3c>
 8001708:	2300      	movs	r3, #0
 800170a:	e7a0      	b.n	800164e <__aeabi_d2f+0x3a>
 800170c:	000b      	movs	r3, r1
 800170e:	e79f      	b.n	8001650 <__aeabi_d2f+0x3c>
 8001710:	000007fe 	.word	0x000007fe
 8001714:	fffffc80 	.word	0xfffffc80
 8001718:	fffffca2 	.word	0xfffffca2
 800171c:	fffffc82 	.word	0xfffffc82

08001720 <__aeabi_cdrcmple>:
 8001720:	4684      	mov	ip, r0
 8001722:	0010      	movs	r0, r2
 8001724:	4662      	mov	r2, ip
 8001726:	468c      	mov	ip, r1
 8001728:	0019      	movs	r1, r3
 800172a:	4663      	mov	r3, ip
 800172c:	e000      	b.n	8001730 <__aeabi_cdcmpeq>
 800172e:	46c0      	nop			; (mov r8, r8)

08001730 <__aeabi_cdcmpeq>:
 8001730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001732:	f000 f8f9 	bl	8001928 <__ledf2>
 8001736:	2800      	cmp	r0, #0
 8001738:	d401      	bmi.n	800173e <__aeabi_cdcmpeq+0xe>
 800173a:	2100      	movs	r1, #0
 800173c:	42c8      	cmn	r0, r1
 800173e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001740 <__aeabi_dcmpeq>:
 8001740:	b510      	push	{r4, lr}
 8001742:	f000 f849 	bl	80017d8 <__eqdf2>
 8001746:	4240      	negs	r0, r0
 8001748:	3001      	adds	r0, #1
 800174a:	bd10      	pop	{r4, pc}

0800174c <__aeabi_dcmplt>:
 800174c:	b510      	push	{r4, lr}
 800174e:	f000 f8eb 	bl	8001928 <__ledf2>
 8001752:	2800      	cmp	r0, #0
 8001754:	db01      	blt.n	800175a <__aeabi_dcmplt+0xe>
 8001756:	2000      	movs	r0, #0
 8001758:	bd10      	pop	{r4, pc}
 800175a:	2001      	movs	r0, #1
 800175c:	bd10      	pop	{r4, pc}
 800175e:	46c0      	nop			; (mov r8, r8)

08001760 <__aeabi_dcmple>:
 8001760:	b510      	push	{r4, lr}
 8001762:	f000 f8e1 	bl	8001928 <__ledf2>
 8001766:	2800      	cmp	r0, #0
 8001768:	dd01      	ble.n	800176e <__aeabi_dcmple+0xe>
 800176a:	2000      	movs	r0, #0
 800176c:	bd10      	pop	{r4, pc}
 800176e:	2001      	movs	r0, #1
 8001770:	bd10      	pop	{r4, pc}
 8001772:	46c0      	nop			; (mov r8, r8)

08001774 <__aeabi_dcmpgt>:
 8001774:	b510      	push	{r4, lr}
 8001776:	f000 f871 	bl	800185c <__gedf2>
 800177a:	2800      	cmp	r0, #0
 800177c:	dc01      	bgt.n	8001782 <__aeabi_dcmpgt+0xe>
 800177e:	2000      	movs	r0, #0
 8001780:	bd10      	pop	{r4, pc}
 8001782:	2001      	movs	r0, #1
 8001784:	bd10      	pop	{r4, pc}
 8001786:	46c0      	nop			; (mov r8, r8)

08001788 <__aeabi_dcmpge>:
 8001788:	b510      	push	{r4, lr}
 800178a:	f000 f867 	bl	800185c <__gedf2>
 800178e:	2800      	cmp	r0, #0
 8001790:	da01      	bge.n	8001796 <__aeabi_dcmpge+0xe>
 8001792:	2000      	movs	r0, #0
 8001794:	bd10      	pop	{r4, pc}
 8001796:	2001      	movs	r0, #1
 8001798:	bd10      	pop	{r4, pc}
 800179a:	46c0      	nop			; (mov r8, r8)

0800179c <__clzsi2>:
 800179c:	211c      	movs	r1, #28
 800179e:	2301      	movs	r3, #1
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	4298      	cmp	r0, r3
 80017a4:	d301      	bcc.n	80017aa <__clzsi2+0xe>
 80017a6:	0c00      	lsrs	r0, r0, #16
 80017a8:	3910      	subs	r1, #16
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	4298      	cmp	r0, r3
 80017ae:	d301      	bcc.n	80017b4 <__clzsi2+0x18>
 80017b0:	0a00      	lsrs	r0, r0, #8
 80017b2:	3908      	subs	r1, #8
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	4298      	cmp	r0, r3
 80017b8:	d301      	bcc.n	80017be <__clzsi2+0x22>
 80017ba:	0900      	lsrs	r0, r0, #4
 80017bc:	3904      	subs	r1, #4
 80017be:	a202      	add	r2, pc, #8	; (adr r2, 80017c8 <__clzsi2+0x2c>)
 80017c0:	5c10      	ldrb	r0, [r2, r0]
 80017c2:	1840      	adds	r0, r0, r1
 80017c4:	4770      	bx	lr
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	02020304 	.word	0x02020304
 80017cc:	01010101 	.word	0x01010101
	...

080017d8 <__eqdf2>:
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	464e      	mov	r6, r9
 80017dc:	4645      	mov	r5, r8
 80017de:	46de      	mov	lr, fp
 80017e0:	4657      	mov	r7, sl
 80017e2:	4690      	mov	r8, r2
 80017e4:	b5e0      	push	{r5, r6, r7, lr}
 80017e6:	0017      	movs	r7, r2
 80017e8:	031a      	lsls	r2, r3, #12
 80017ea:	0b12      	lsrs	r2, r2, #12
 80017ec:	0005      	movs	r5, r0
 80017ee:	4684      	mov	ip, r0
 80017f0:	4819      	ldr	r0, [pc, #100]	; (8001858 <__eqdf2+0x80>)
 80017f2:	030e      	lsls	r6, r1, #12
 80017f4:	004c      	lsls	r4, r1, #1
 80017f6:	4691      	mov	r9, r2
 80017f8:	005a      	lsls	r2, r3, #1
 80017fa:	0fdb      	lsrs	r3, r3, #31
 80017fc:	469b      	mov	fp, r3
 80017fe:	0b36      	lsrs	r6, r6, #12
 8001800:	0d64      	lsrs	r4, r4, #21
 8001802:	0fc9      	lsrs	r1, r1, #31
 8001804:	0d52      	lsrs	r2, r2, #21
 8001806:	4284      	cmp	r4, r0
 8001808:	d019      	beq.n	800183e <__eqdf2+0x66>
 800180a:	4282      	cmp	r2, r0
 800180c:	d010      	beq.n	8001830 <__eqdf2+0x58>
 800180e:	2001      	movs	r0, #1
 8001810:	4294      	cmp	r4, r2
 8001812:	d10e      	bne.n	8001832 <__eqdf2+0x5a>
 8001814:	454e      	cmp	r6, r9
 8001816:	d10c      	bne.n	8001832 <__eqdf2+0x5a>
 8001818:	2001      	movs	r0, #1
 800181a:	45c4      	cmp	ip, r8
 800181c:	d109      	bne.n	8001832 <__eqdf2+0x5a>
 800181e:	4559      	cmp	r1, fp
 8001820:	d017      	beq.n	8001852 <__eqdf2+0x7a>
 8001822:	2c00      	cmp	r4, #0
 8001824:	d105      	bne.n	8001832 <__eqdf2+0x5a>
 8001826:	0030      	movs	r0, r6
 8001828:	4328      	orrs	r0, r5
 800182a:	1e43      	subs	r3, r0, #1
 800182c:	4198      	sbcs	r0, r3
 800182e:	e000      	b.n	8001832 <__eqdf2+0x5a>
 8001830:	2001      	movs	r0, #1
 8001832:	bcf0      	pop	{r4, r5, r6, r7}
 8001834:	46bb      	mov	fp, r7
 8001836:	46b2      	mov	sl, r6
 8001838:	46a9      	mov	r9, r5
 800183a:	46a0      	mov	r8, r4
 800183c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800183e:	0033      	movs	r3, r6
 8001840:	2001      	movs	r0, #1
 8001842:	432b      	orrs	r3, r5
 8001844:	d1f5      	bne.n	8001832 <__eqdf2+0x5a>
 8001846:	42a2      	cmp	r2, r4
 8001848:	d1f3      	bne.n	8001832 <__eqdf2+0x5a>
 800184a:	464b      	mov	r3, r9
 800184c:	433b      	orrs	r3, r7
 800184e:	d1f0      	bne.n	8001832 <__eqdf2+0x5a>
 8001850:	e7e2      	b.n	8001818 <__eqdf2+0x40>
 8001852:	2000      	movs	r0, #0
 8001854:	e7ed      	b.n	8001832 <__eqdf2+0x5a>
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	000007ff 	.word	0x000007ff

0800185c <__gedf2>:
 800185c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185e:	4647      	mov	r7, r8
 8001860:	46ce      	mov	lr, r9
 8001862:	0004      	movs	r4, r0
 8001864:	0018      	movs	r0, r3
 8001866:	0016      	movs	r6, r2
 8001868:	031b      	lsls	r3, r3, #12
 800186a:	0b1b      	lsrs	r3, r3, #12
 800186c:	4d2d      	ldr	r5, [pc, #180]	; (8001924 <__gedf2+0xc8>)
 800186e:	004a      	lsls	r2, r1, #1
 8001870:	4699      	mov	r9, r3
 8001872:	b580      	push	{r7, lr}
 8001874:	0043      	lsls	r3, r0, #1
 8001876:	030f      	lsls	r7, r1, #12
 8001878:	46a4      	mov	ip, r4
 800187a:	46b0      	mov	r8, r6
 800187c:	0b3f      	lsrs	r7, r7, #12
 800187e:	0d52      	lsrs	r2, r2, #21
 8001880:	0fc9      	lsrs	r1, r1, #31
 8001882:	0d5b      	lsrs	r3, r3, #21
 8001884:	0fc0      	lsrs	r0, r0, #31
 8001886:	42aa      	cmp	r2, r5
 8001888:	d021      	beq.n	80018ce <__gedf2+0x72>
 800188a:	42ab      	cmp	r3, r5
 800188c:	d013      	beq.n	80018b6 <__gedf2+0x5a>
 800188e:	2a00      	cmp	r2, #0
 8001890:	d122      	bne.n	80018d8 <__gedf2+0x7c>
 8001892:	433c      	orrs	r4, r7
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <__gedf2+0x42>
 8001898:	464d      	mov	r5, r9
 800189a:	432e      	orrs	r6, r5
 800189c:	d022      	beq.n	80018e4 <__gedf2+0x88>
 800189e:	2c00      	cmp	r4, #0
 80018a0:	d010      	beq.n	80018c4 <__gedf2+0x68>
 80018a2:	4281      	cmp	r1, r0
 80018a4:	d022      	beq.n	80018ec <__gedf2+0x90>
 80018a6:	2002      	movs	r0, #2
 80018a8:	3901      	subs	r1, #1
 80018aa:	4008      	ands	r0, r1
 80018ac:	3801      	subs	r0, #1
 80018ae:	bcc0      	pop	{r6, r7}
 80018b0:	46b9      	mov	r9, r7
 80018b2:	46b0      	mov	r8, r6
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b6:	464d      	mov	r5, r9
 80018b8:	432e      	orrs	r6, r5
 80018ba:	d129      	bne.n	8001910 <__gedf2+0xb4>
 80018bc:	2a00      	cmp	r2, #0
 80018be:	d1f0      	bne.n	80018a2 <__gedf2+0x46>
 80018c0:	433c      	orrs	r4, r7
 80018c2:	d1ee      	bne.n	80018a2 <__gedf2+0x46>
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d1f2      	bne.n	80018ae <__gedf2+0x52>
 80018c8:	2001      	movs	r0, #1
 80018ca:	4240      	negs	r0, r0
 80018cc:	e7ef      	b.n	80018ae <__gedf2+0x52>
 80018ce:	003d      	movs	r5, r7
 80018d0:	4325      	orrs	r5, r4
 80018d2:	d11d      	bne.n	8001910 <__gedf2+0xb4>
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d0ee      	beq.n	80018b6 <__gedf2+0x5a>
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1e2      	bne.n	80018a2 <__gedf2+0x46>
 80018dc:	464c      	mov	r4, r9
 80018de:	4326      	orrs	r6, r4
 80018e0:	d1df      	bne.n	80018a2 <__gedf2+0x46>
 80018e2:	e7e0      	b.n	80018a6 <__gedf2+0x4a>
 80018e4:	2000      	movs	r0, #0
 80018e6:	2c00      	cmp	r4, #0
 80018e8:	d0e1      	beq.n	80018ae <__gedf2+0x52>
 80018ea:	e7dc      	b.n	80018a6 <__gedf2+0x4a>
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dc0a      	bgt.n	8001906 <__gedf2+0xaa>
 80018f0:	dbe8      	blt.n	80018c4 <__gedf2+0x68>
 80018f2:	454f      	cmp	r7, r9
 80018f4:	d8d7      	bhi.n	80018a6 <__gedf2+0x4a>
 80018f6:	d00e      	beq.n	8001916 <__gedf2+0xba>
 80018f8:	2000      	movs	r0, #0
 80018fa:	454f      	cmp	r7, r9
 80018fc:	d2d7      	bcs.n	80018ae <__gedf2+0x52>
 80018fe:	2900      	cmp	r1, #0
 8001900:	d0e2      	beq.n	80018c8 <__gedf2+0x6c>
 8001902:	0008      	movs	r0, r1
 8001904:	e7d3      	b.n	80018ae <__gedf2+0x52>
 8001906:	4243      	negs	r3, r0
 8001908:	4158      	adcs	r0, r3
 800190a:	0040      	lsls	r0, r0, #1
 800190c:	3801      	subs	r0, #1
 800190e:	e7ce      	b.n	80018ae <__gedf2+0x52>
 8001910:	2002      	movs	r0, #2
 8001912:	4240      	negs	r0, r0
 8001914:	e7cb      	b.n	80018ae <__gedf2+0x52>
 8001916:	45c4      	cmp	ip, r8
 8001918:	d8c5      	bhi.n	80018a6 <__gedf2+0x4a>
 800191a:	2000      	movs	r0, #0
 800191c:	45c4      	cmp	ip, r8
 800191e:	d2c6      	bcs.n	80018ae <__gedf2+0x52>
 8001920:	e7ed      	b.n	80018fe <__gedf2+0xa2>
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	000007ff 	.word	0x000007ff

08001928 <__ledf2>:
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	4647      	mov	r7, r8
 800192c:	46ce      	mov	lr, r9
 800192e:	0004      	movs	r4, r0
 8001930:	0018      	movs	r0, r3
 8001932:	0016      	movs	r6, r2
 8001934:	031b      	lsls	r3, r3, #12
 8001936:	0b1b      	lsrs	r3, r3, #12
 8001938:	4d2c      	ldr	r5, [pc, #176]	; (80019ec <__ledf2+0xc4>)
 800193a:	004a      	lsls	r2, r1, #1
 800193c:	4699      	mov	r9, r3
 800193e:	b580      	push	{r7, lr}
 8001940:	0043      	lsls	r3, r0, #1
 8001942:	030f      	lsls	r7, r1, #12
 8001944:	46a4      	mov	ip, r4
 8001946:	46b0      	mov	r8, r6
 8001948:	0b3f      	lsrs	r7, r7, #12
 800194a:	0d52      	lsrs	r2, r2, #21
 800194c:	0fc9      	lsrs	r1, r1, #31
 800194e:	0d5b      	lsrs	r3, r3, #21
 8001950:	0fc0      	lsrs	r0, r0, #31
 8001952:	42aa      	cmp	r2, r5
 8001954:	d00d      	beq.n	8001972 <__ledf2+0x4a>
 8001956:	42ab      	cmp	r3, r5
 8001958:	d010      	beq.n	800197c <__ledf2+0x54>
 800195a:	2a00      	cmp	r2, #0
 800195c:	d127      	bne.n	80019ae <__ledf2+0x86>
 800195e:	433c      	orrs	r4, r7
 8001960:	2b00      	cmp	r3, #0
 8001962:	d111      	bne.n	8001988 <__ledf2+0x60>
 8001964:	464d      	mov	r5, r9
 8001966:	432e      	orrs	r6, r5
 8001968:	d10e      	bne.n	8001988 <__ledf2+0x60>
 800196a:	2000      	movs	r0, #0
 800196c:	2c00      	cmp	r4, #0
 800196e:	d015      	beq.n	800199c <__ledf2+0x74>
 8001970:	e00e      	b.n	8001990 <__ledf2+0x68>
 8001972:	003d      	movs	r5, r7
 8001974:	4325      	orrs	r5, r4
 8001976:	d110      	bne.n	800199a <__ledf2+0x72>
 8001978:	4293      	cmp	r3, r2
 800197a:	d118      	bne.n	80019ae <__ledf2+0x86>
 800197c:	464d      	mov	r5, r9
 800197e:	432e      	orrs	r6, r5
 8001980:	d10b      	bne.n	800199a <__ledf2+0x72>
 8001982:	2a00      	cmp	r2, #0
 8001984:	d102      	bne.n	800198c <__ledf2+0x64>
 8001986:	433c      	orrs	r4, r7
 8001988:	2c00      	cmp	r4, #0
 800198a:	d00b      	beq.n	80019a4 <__ledf2+0x7c>
 800198c:	4281      	cmp	r1, r0
 800198e:	d014      	beq.n	80019ba <__ledf2+0x92>
 8001990:	2002      	movs	r0, #2
 8001992:	3901      	subs	r1, #1
 8001994:	4008      	ands	r0, r1
 8001996:	3801      	subs	r0, #1
 8001998:	e000      	b.n	800199c <__ledf2+0x74>
 800199a:	2002      	movs	r0, #2
 800199c:	bcc0      	pop	{r6, r7}
 800199e:	46b9      	mov	r9, r7
 80019a0:	46b0      	mov	r8, r6
 80019a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d1f9      	bne.n	800199c <__ledf2+0x74>
 80019a8:	2001      	movs	r0, #1
 80019aa:	4240      	negs	r0, r0
 80019ac:	e7f6      	b.n	800199c <__ledf2+0x74>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1ec      	bne.n	800198c <__ledf2+0x64>
 80019b2:	464c      	mov	r4, r9
 80019b4:	4326      	orrs	r6, r4
 80019b6:	d1e9      	bne.n	800198c <__ledf2+0x64>
 80019b8:	e7ea      	b.n	8001990 <__ledf2+0x68>
 80019ba:	429a      	cmp	r2, r3
 80019bc:	dd04      	ble.n	80019c8 <__ledf2+0xa0>
 80019be:	4243      	negs	r3, r0
 80019c0:	4158      	adcs	r0, r3
 80019c2:	0040      	lsls	r0, r0, #1
 80019c4:	3801      	subs	r0, #1
 80019c6:	e7e9      	b.n	800199c <__ledf2+0x74>
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbeb      	blt.n	80019a4 <__ledf2+0x7c>
 80019cc:	454f      	cmp	r7, r9
 80019ce:	d8df      	bhi.n	8001990 <__ledf2+0x68>
 80019d0:	d006      	beq.n	80019e0 <__ledf2+0xb8>
 80019d2:	2000      	movs	r0, #0
 80019d4:	454f      	cmp	r7, r9
 80019d6:	d2e1      	bcs.n	800199c <__ledf2+0x74>
 80019d8:	2900      	cmp	r1, #0
 80019da:	d0e5      	beq.n	80019a8 <__ledf2+0x80>
 80019dc:	0008      	movs	r0, r1
 80019de:	e7dd      	b.n	800199c <__ledf2+0x74>
 80019e0:	45c4      	cmp	ip, r8
 80019e2:	d8d5      	bhi.n	8001990 <__ledf2+0x68>
 80019e4:	2000      	movs	r0, #0
 80019e6:	45c4      	cmp	ip, r8
 80019e8:	d2d8      	bcs.n	800199c <__ledf2+0x74>
 80019ea:	e7f5      	b.n	80019d8 <__ledf2+0xb0>
 80019ec:	000007ff 	.word	0x000007ff

080019f0 <TMC5160_Basic_Init>:
uint8_t AMS_Ready;		//check for interrupt
uint16_t AngleP[1000];
int setOffset = 0;

void TMC5160_Basic_Init(CurrentConfig *Current)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	/* CURRENT SETTINGS
	 I_RUN, Max run current = 20 = ~2.0A
	 I_HOLD, Max Hold current = 20 = ~2.0A
	*/

	uint32_t IHOLD_IRUN = 0x00070000; // standard IHOLD DELAY value
 80019f8:	23e0      	movs	r3, #224	; 0xe0
 80019fa:	02db      	lsls	r3, r3, #11
 80019fc:	60fb      	str	r3, [r7, #12]
	//uint32_t GSTAT_VALUE = 0x00000000; //default value for GSTAT

	if(Current->IHOLD > 20) // set upper current limit ~2.0A
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b14      	cmp	r3, #20
 8001a04:	d902      	bls.n	8001a0c <TMC5160_Basic_Init+0x1c>
	{
		Current->IHOLD = 20;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2214      	movs	r2, #20
 8001a0a:	605a      	str	r2, [r3, #4]
	}

	if(Current->IRUN > 20) // set upper current limit ~2.0A
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b14      	cmp	r3, #20
 8001a12:	d902      	bls.n	8001a1a <TMC5160_Basic_Init+0x2a>
	{
		Current->IRUN = 20;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2214      	movs	r2, #20
 8001a18:	601a      	str	r2, [r3, #0]
	}

	IHOLD_IRUN += Current->IHOLD + (Current->IRUN <<8);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	18d3      	adds	r3, r2, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	18d3      	adds	r3, r2, r3
 8001a2a:	60fb      	str	r3, [r7, #12]

	TMC5160_SPIWrite(0x00, 0x00000008, 1); // writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2108      	movs	r1, #8
 8001a30:	2000      	movs	r0, #0
 8001a32:	f000 f9e1 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x00, 0x00000008, 0); // writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 8001a36:	2200      	movs	r2, #0
 8001a38:	2108      	movs	r1, #8
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 f9dc 	bl	8001df8 <TMC5160_SPIWrite>
	{
		TMC5160_SPIWrite(0x01, 0x00000001, 1); // write 1 bit to GSTAT to clear all error flags
		// TODO: is clearing the flags enough? or poweqr cycle needed?
	}*/

	TMC5160_SPIWrite(0x03, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 1 = 0x03(SLAVECONF)
 8001a40:	2201      	movs	r2, #1
 8001a42:	2100      	movs	r1, #0
 8001a44:	2003      	movs	r0, #3
 8001a46:	f000 f9d7 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x05, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 2 = 0x05(X_COMPARE)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2005      	movs	r0, #5
 8001a50:	f000 f9d2 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x06, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 3 = 0x06(OTP_PROG)
 8001a54:	2201      	movs	r2, #1
 8001a56:	2100      	movs	r1, #0
 8001a58:	2006      	movs	r0, #6
 8001a5a:	f000 f9cd 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x08, 0x0000000F, 1); // writing value 0x0000000F = 15 = 0.0 to address 4 = 0x08(FACTORY_CONF)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	210f      	movs	r1, #15
 8001a62:	2008      	movs	r0, #8
 8001a64:	f000 f9c8 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x09, 0x00010606, 1); // writing value 0x00010606 = 67078 = 0.0 to address 5 = 0x09(SHORT_CONF)
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <TMC5160_Basic_Init+0x1c8>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	2009      	movs	r0, #9
 8001a70:	f000 f9c2 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x0A, 0x00080400, 1); // writing value 0x00080400 = 525312 = 0.0 to address 6 = 0x0A(DRV_CONF)
 8001a74:	4b51      	ldr	r3, [pc, #324]	; (8001bbc <TMC5160_Basic_Init+0x1cc>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	0019      	movs	r1, r3
 8001a7a:	200a      	movs	r0, #10
 8001a7c:	f000 f9bc 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x0B, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 7 = 0x0B(GLOBAL_SCALER)
 8001a80:	2201      	movs	r2, #1
 8001a82:	2100      	movs	r1, #0
 8001a84:	200b      	movs	r0, #11
 8001a86:	f000 f9b7 	bl	8001df8 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x10, IHOLD_IRUN, 1); // writing value 0x00070A03 = 461315 = 0.0 to address 8 = 0x10(IHOLD_IRUN)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	0019      	movs	r1, r3
 8001a90:	2010      	movs	r0, #16
 8001a92:	f000 f9b1 	bl	8001df8 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x11, 0x0000000A, 1); // writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 8001a96:	2201      	movs	r2, #1
 8001a98:	210a      	movs	r1, #10
 8001a9a:	2011      	movs	r0, #17
 8001a9c:	f000 f9ac 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x13, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2013      	movs	r0, #19
 8001aa6:	f000 f9a7 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x14, 0x00000000, 1); // writing value 0x00000010 = 16 = 0.0 to address 11 = 0x14(TCOOLTHRS)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2100      	movs	r1, #0
 8001aae:	2014      	movs	r0, #20
 8001ab0:	f000 f9a2 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x15, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 12 = 0x15(THIGH)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2015      	movs	r0, #21
 8001aba:	f000 f99d 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2C, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 23 = 0x2C(TZEROWAIT)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	202c      	movs	r0, #44	; 0x2c
 8001ac4:	f000 f998 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x33, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 25 = 0x33(VDCMIN)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2100      	movs	r1, #0
 8001acc:	2033      	movs	r0, #51	; 0x33
 8001ace:	f000 f993 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x34, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 26 = 0x34(SW_MODE)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2034      	movs	r0, #52	; 0x34
 8001ad8:	f000 f98e 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x38, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 27 = 0x38(ENCMODE)
 8001adc:	2201      	movs	r2, #1
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2038      	movs	r0, #56	; 0x38
 8001ae2:	f000 f989 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x39, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 28 = 0x39(X_ENC)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2039      	movs	r0, #57	; 0x39
 8001aec:	f000 f984 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x3A, 0x00010000, 1); // writing value 0x00010000 = 65536 = 0.0 to address 29 = 0x3A(ENC_CONST)
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	025b      	lsls	r3, r3, #9
 8001af4:	2201      	movs	r2, #1
 8001af6:	0019      	movs	r1, r3
 8001af8:	203a      	movs	r0, #58	; 0x3a
 8001afa:	f000 f97d 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x3D, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 30 = 0x3D(ENC_DEVIATION)
 8001afe:	2201      	movs	r2, #1
 8001b00:	2100      	movs	r1, #0
 8001b02:	203d      	movs	r0, #61	; 0x3d
 8001b04:	f000 f978 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x60, 0xAAAAB554, 1); // writing value 0xAAAAB554 = 0 = 0.0 to address 31 = 0x60(MSLUT[0])
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <TMC5160_Basic_Init+0x1d0>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	2060      	movs	r0, #96	; 0x60
 8001b10:	f000 f972 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x61, 0x4A9554AA, 1); // writing value 0x4A9554AA = 1251300522 = 0.0 to address 32 = 0x61(MSLUT[1])
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <TMC5160_Basic_Init+0x1d4>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	0019      	movs	r1, r3
 8001b1a:	2061      	movs	r0, #97	; 0x61
 8001b1c:	f000 f96c 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x62, 0x24492929, 1); // writing value 0x24492929 = 608774441 = 0.0 to address 33 = 0x62(MSLUT[2])
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <TMC5160_Basic_Init+0x1d8>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	0019      	movs	r1, r3
 8001b26:	2062      	movs	r0, #98	; 0x62
 8001b28:	f000 f966 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x63, 0x10104222, 1); // writing value 0x10104222 = 269500962 = 0.0 to address 34 = 0x63(MSLUT[3])
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <TMC5160_Basic_Init+0x1dc>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	0019      	movs	r1, r3
 8001b32:	2063      	movs	r0, #99	; 0x63
 8001b34:	f000 f960 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x64, 0xFBFFFFFF, 1); // writing value 0xFBFFFFFF = 0 = 0.0 to address 35 = 0x64(MSLUT[4])
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <TMC5160_Basic_Init+0x1e0>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	2064      	movs	r0, #100	; 0x64
 8001b40:	f000 f95a 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x65, 0xB5BB777D, 1); // writing value 0xB5BB777D = 0 = 0.0 to address 36 = 0x65(MSLUT[5])
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <TMC5160_Basic_Init+0x1e4>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	0019      	movs	r1, r3
 8001b4a:	2065      	movs	r0, #101	; 0x65
 8001b4c:	f000 f954 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x66, 0x49295556, 1); // writing value 0x49295556 = 1227445590 = 0.0 to address 37 = 0x66(MSLUT[6])
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <TMC5160_Basic_Init+0x1e8>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	0019      	movs	r1, r3
 8001b56:	2066      	movs	r0, #102	; 0x66
 8001b58:	f000 f94e 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x67, 0x00404222, 1); // writing value 0x00404222 = 4211234 = 0.0 to address 38 = 0x67(MSLUT[7])
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <TMC5160_Basic_Init+0x1ec>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	0019      	movs	r1, r3
 8001b62:	2067      	movs	r0, #103	; 0x67
 8001b64:	f000 f948 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x68, 0xFFFF8056, 1); // writing value 0xFFFF8056 = 0 = 0.0 to address 39 = 0x68(MSLUTSEL)
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <TMC5160_Basic_Init+0x1f0>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	2068      	movs	r0, #104	; 0x68
 8001b70:	f000 f942 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x69, 0x00F70000, 1); // writing value 0x00F70000 = 16187392 = 0.0 to address 40 = 0x69(MSLUTSTART)
 8001b74:	23f7      	movs	r3, #247	; 0xf7
 8001b76:	041b      	lsls	r3, r3, #16
 8001b78:	2201      	movs	r2, #1
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	2069      	movs	r0, #105	; 0x69
 8001b7e:	f000 f93b 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6C, 0x00410153, 1); // writing value 0x00410153 = 4260099 = 0.0 to address 41 = 0x6C(CHOPCONF)
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <TMC5160_Basic_Init+0x1f4>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	0019      	movs	r1, r3
 8001b88:	206c      	movs	r0, #108	; 0x6c
 8001b8a:	f000 f935 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6D, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 42 = 0x6D(COOLCONF)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2100      	movs	r1, #0
 8001b92:	206d      	movs	r0, #109	; 0x6d
 8001b94:	f000 f930 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6E, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 43 = 0x6E(DCCTRL)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	206e      	movs	r0, #110	; 0x6e
 8001b9e:	f000 f92b 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x70, 0xC40C001E, 1); // writing value 0xC40C001E = 0 = 0.0 to address 44 = 0x70(PWMCONF)
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <TMC5160_Basic_Init+0x1f8>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	2070      	movs	r0, #112	; 0x70
 8001baa:	f000 f925 	bl	8001df8 <TMC5160_SPIWrite>

}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	00010606 	.word	0x00010606
 8001bbc:	00080400 	.word	0x00080400
 8001bc0:	aaaab554 	.word	0xaaaab554
 8001bc4:	4a9554aa 	.word	0x4a9554aa
 8001bc8:	24492929 	.word	0x24492929
 8001bcc:	10104222 	.word	0x10104222
 8001bd0:	fbffffff 	.word	0xfbffffff
 8001bd4:	b5bb777d 	.word	0xb5bb777d
 8001bd8:	49295556 	.word	0x49295556
 8001bdc:	00404222 	.word	0x00404222
 8001be0:	ffff8056 	.word	0xffff8056
 8001be4:	00410153 	.word	0x00410153
 8001be8:	c40c001e 	.word	0xc40c001e

08001bec <TMC5160_Rotate_To>:
	}
}


void TMC5160_Rotate_To(uint32_t Position, RampConfig *Ramp)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
	uint32_t Target_Angle = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
	uint32_t AMS_Angle = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
	uint32_t ENC_Angle = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
	uint32_t TMC_Angle = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]

	TMC5160_SPIWrite(0x11, 	0x0000000A, 1); 	// writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 8001c06:	2201      	movs	r2, #1
 8001c08:	210a      	movs	r1, #10
 8001c0a:	2011      	movs	r0, #17
 8001c0c:	f000 f8f4 	bl	8001df8 <TMC5160_SPIWrite>
	//TMC5160_SPIWrite(0x00, 	0x00000008, 1); 	// writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
	TMC5160_SPIWrite(0x13, 	0x000001F4, 1); 	// writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 8001c10:	23fa      	movs	r3, #250	; 0xfa
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2201      	movs	r2, #1
 8001c16:	0019      	movs	r1, r3
 8001c18:	2013      	movs	r0, #19
 8001c1a:	f000 f8ed 	bl	8001df8 <TMC5160_SPIWrite>

	// setup for profile
	TMC5160_SPIWrite(0x23, Ramp->VSTART, 1); 	// = 1000 = 0.0 to address 15 = 0x23(VSTART)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2201      	movs	r2, #1
 8001c24:	0019      	movs	r1, r3
 8001c26:	2023      	movs	r0, #35	; 0x23
 8001c28:	f000 f8e6 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x24, Ramp->A1, 1); 		// = 5600 = 0.0 to address 16 = 0x24(A1)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	0019      	movs	r1, r3
 8001c34:	2024      	movs	r0, #36	; 0x24
 8001c36:	f000 f8df 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x25, Ramp->V1, 1); 		// = 12800 = 0.0 to address 17 = 0x25(V1)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	0019      	movs	r1, r3
 8001c42:	2025      	movs	r0, #37	; 0x25
 8001c44:	f000 f8d8 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x26, Ramp->AMAX, 1); 		// = 12800 = 0.0 to address 18 = 0x26(AMAX)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	0019      	movs	r1, r3
 8001c50:	2026      	movs	r0, #38	; 0x26
 8001c52:	f000 f8d1 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x27, Ramp->VMAX, 1); 		// = 51200 = 0.0 to address 19 = 0x27(VMAX)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	2027      	movs	r0, #39	; 0x27
 8001c60:	f000 f8ca 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x28, Ramp->DMAX, 1); 		// = 700 = 0.0 to address 20 = 0x28(DMAX)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	2028      	movs	r0, #40	; 0x28
 8001c6e:	f000 f8c3 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2A, Ramp->D1, 1); 		// = 1400 = 0.0 to address 21 = 0x2A(D1)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2201      	movs	r2, #1
 8001c78:	0019      	movs	r1, r3
 8001c7a:	202a      	movs	r0, #42	; 0x2a
 8001c7c:	f000 f8bc 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2B, Ramp->VSTOP, 1); 	// = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2201      	movs	r2, #1
 8001c86:	0019      	movs	r1, r3
 8001c88:	202b      	movs	r0, #43	; 0x2b
 8001c8a:	f000 f8b5 	bl	8001df8 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x20, 	0x00000000, 1); 	// writing value 0x00000000 = 0 = 0.0 to address 13 = 0x20(RAMPMODE) MTP
 8001c8e:	2201      	movs	r2, #1
 8001c90:	2100      	movs	r1, #0
 8001c92:	2020      	movs	r0, #32
 8001c94:	f000 f8b0 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2D, Position, 1); 		// writing value to address 24 = 0x2D(XTARGET)  1 lap
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	202d      	movs	r0, #45	; 0x2d
 8001ca0:	f000 f8aa 	bl	8001df8 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x21,	0x00000000, 0);		// READ position register
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2021      	movs	r0, #33	; 0x21
 8001caa:	f000 f8a5 	bl	8001df8 <TMC5160_SPIWrite>

	/*Convert to Angle so we can compare to Hall Sensor*/

	if((int)Position < 0)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	da02      	bge.n	8001cba <TMC5160_Rotate_To+0xce>
	{
		Position = Position * (-1); 			// make positive for easier math
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	425b      	negs	r3, r3
 8001cb8:	607b      	str	r3, [r7, #4]
	}

	if(Position == 0) 							// to fix the first reading when target position = 0
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <TMC5160_Rotate_To+0xe0>
	{
		AMS_Angle = 1;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
		ENC_Angle = 1;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
		TMC_Angle = 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
	}

    Target_Angle = ((Position / 256) * 1.8);	//convert target position to angle
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff fc79 	bl	80015c8 <__aeabi_ui2d>
 8001cd6:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <TMC5160_Rotate_To+0x144>)
 8001cd8:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <TMC5160_Rotate_To+0x148>)
 8001cda:	f7fe fdcb 	bl	8000874 <__aeabi_dmul>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	000b      	movs	r3, r1
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	f7fe fa99 	bl	800021c <__aeabi_d2uiz>
 8001cea:	0003      	movs	r3, r0
 8001cec:	613b      	str	r3, [r7, #16]

	// enter loop to check if position is reached
	while(TMC_Angle != Target_Angle) //&& AMS_Angle != Target_Angle && ENC_Angle != Target_Angle
 8001cee:	e016      	b.n	8001d1e <TMC5160_Rotate_To+0x132>
	{
		TMC_Angle = TMC_Get_Position();
 8001cf0:	f000 f826 	bl	8001d40 <TMC_Get_Position>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	617b      	str	r3, [r7, #20]

		if(AMS_ENB == 1)// Hall sensor is enabled
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <TMC5160_Rotate_To+0x14c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d106      	bne.n	8001d0e <TMC5160_Rotate_To+0x122>
		{
			HAL_Delay(1);//to reduce sensor readout freq
 8001d00:	2001      	movs	r0, #1
 8001d02:	f000 ffab 	bl	8002c5c <HAL_Delay>
			AMS_Angle = AMS5055_Get_Position();
 8001d06:	f000 f8f1 	bl	8001eec <AMS5055_Get_Position>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	60fb      	str	r3, [r7, #12]
		}

		if(ENC_ENB == 1)// Encoder is enabled
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <TMC5160_Rotate_To+0x150>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d103      	bne.n	8001d1e <TMC5160_Rotate_To+0x132>
		{
			ENC_Angle = ENC_Get_Position();
 8001d16:	f000 fa51 	bl	80021bc <ENC_Get_Position>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	60bb      	str	r3, [r7, #8]
	while(TMC_Angle != Target_Angle) //&& AMS_Angle != Target_Angle && ENC_Angle != Target_Angle
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d1e4      	bne.n	8001cf0 <TMC5160_Rotate_To+0x104>
		}
	}
 }
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b006      	add	sp, #24
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	cccccccd 	.word	0xcccccccd
 8001d34:	3ffccccc 	.word	0x3ffccccc
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20001134 	.word	0x20001134

08001d40 <TMC_Get_Position>:

uint16_t TMC_Get_Position()
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
	uint32_t AngleT = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]

	AngleT = TMC5160_SPIWrite(0x21, 0x00000000, 0); //read step counter from TMC5160
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2021      	movs	r0, #33	; 0x21
 8001d50:	f000 f852 	bl	8001df8 <TMC5160_SPIWrite>
 8001d54:	0003      	movs	r3, r0
 8001d56:	607b      	str	r3, [r7, #4]


	if((int)AngleT < 0)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da02      	bge.n	8001d64 <TMC_Get_Position+0x24>
	{
		AngleT = AngleT * (-1); // make positive for easier math
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	425b      	negs	r3, r3
 8001d62:	607b      	str	r3, [r7, #4]
	}

	AngleT = ((AngleT / 256)* 1.8);//convert target position to angle
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff fc2d 	bl	80015c8 <__aeabi_ui2d>
 8001d6e:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <TMC_Get_Position+0x54>)
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <TMC_Get_Position+0x58>)
 8001d72:	f7fe fd7f 	bl	8000874 <__aeabi_dmul>
 8001d76:	0002      	movs	r2, r0
 8001d78:	000b      	movs	r3, r1
 8001d7a:	0010      	movs	r0, r2
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	f7fe fa4d 	bl	800021c <__aeabi_d2uiz>
 8001d82:	0003      	movs	r3, r0
 8001d84:	607b      	str	r3, [r7, #4]

	return AngleT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	b29b      	uxth	r3, r3
}
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b002      	add	sp, #8
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	cccccccd 	.word	0xcccccccd
 8001d98:	3ffccccc 	.word	0x3ffccccc

08001d9c <TMC5160_Stop>:

void TMC5160_Stop(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	TMC5160_SPIWrite(0x27,0x00000000, 1); //set VMAX to 0
 8001da0:	2201      	movs	r2, #1
 8001da2:	2100      	movs	r1, #0
 8001da4:	2027      	movs	r0, #39	; 0x27
 8001da6:	f000 f827 	bl	8001df8 <TMC5160_SPIWrite>
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <Drive_Enable>:

void Drive_Enable(int state)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	if(state == 1) // Enable driver
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d10a      	bne.n	8001dd4 <Drive_Enable+0x24>
	{
		HAL_GPIO_WritePin(GPIOA, DRV_ENN_Pin, 0); // LOW = ON
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	0059      	lsls	r1, r3, #1
 8001dc2:	2390      	movs	r3, #144	; 0x90
 8001dc4:	05db      	lsls	r3, r3, #23
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f002 f99f 	bl	800410c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001dce:	200a      	movs	r0, #10
 8001dd0:	f000 ff44 	bl	8002c5c <HAL_Delay>
	}

	if(state == 0) // disable drive
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10a      	bne.n	8001df0 <Drive_Enable+0x40>
	{
		HAL_GPIO_WritePin(GPIOA, DRV_ENN_Pin, 1); // HIGH = OFF
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	0059      	lsls	r1, r3, #1
 8001dde:	2390      	movs	r3, #144	; 0x90
 8001de0:	05db      	lsls	r3, r3, #23
 8001de2:	2201      	movs	r2, #1
 8001de4:	0018      	movs	r0, r3
 8001de6:	f002 f991 	bl	800410c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001dea:	200a      	movs	r0, #10
 8001dec:	f000 ff36 	bl	8002c5c <HAL_Delay>
	}
}
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b002      	add	sp, #8
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <TMC5160_SPIWrite>:


uint32_t TMC5160_SPIWrite(uint8_t Address, uint32_t Value, int Action)
{
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b08d      	sub	sp, #52	; 0x34
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	240f      	movs	r4, #15
 8001e04:	193b      	adds	r3, r7, r4
 8001e06:	1c02      	adds	r2, r0, #0
 8001e08:	701a      	strb	r2, [r3, #0]

	uint8_t SPI2TxData[5];  //TX data array SPI2
	uint8_t SPI2RxData[5];  //RX data array SPI2
	uint32_t SPI2Rx = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,0); // set TMC CS low
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	015b      	lsls	r3, r3, #5
 8001e12:	482d      	ldr	r0, [pc, #180]	; (8001ec8 <TMC5160_SPIWrite+0xd0>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	0019      	movs	r1, r3
 8001e18:	f002 f978 	bl	800410c <HAL_GPIO_WritePin>

	  if (Action == 1) //Write
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <TMC5160_SPIWrite+0x3a>
	  {
		SPI2TxData[0] = Address + 0x80;
 8001e22:	193b      	adds	r3, r7, r4
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	3b80      	subs	r3, #128	; 0x80
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	231c      	movs	r3, #28
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e005      	b.n	8001e3e <TMC5160_SPIWrite+0x46>
	  }

	  else //Read
	  {
		SPI2TxData[0] = Address;
 8001e32:	231c      	movs	r3, #28
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	220f      	movs	r2, #15
 8001e38:	18ba      	adds	r2, r7, r2
 8001e3a:	7812      	ldrb	r2, [r2, #0]
 8001e3c:	701a      	strb	r2, [r3, #0]
	  }

	  SPI2TxData[1] = Value >> 24;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	0e1b      	lsrs	r3, r3, #24
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	211c      	movs	r1, #28
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	705a      	strb	r2, [r3, #1]
	  SPI2TxData[2] = Value >> 16;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	709a      	strb	r2, [r3, #2]
	  SPI2TxData[3] = Value >> 8;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	70da      	strb	r2, [r3, #3]
	  SPI2TxData[4] = Value;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	711a      	strb	r2, [r3, #4]

	  HAL_SPI_TransmitReceive(&hspi2, SPI2TxData, SPI2RxData, 0x05, 100);
 8001e66:	2414      	movs	r4, #20
 8001e68:	193a      	adds	r2, r7, r4
 8001e6a:	1879      	adds	r1, r7, r1
 8001e6c:	4817      	ldr	r0, [pc, #92]	; (8001ecc <TMC5160_SPIWrite+0xd4>)
 8001e6e:	2364      	movs	r3, #100	; 0x64
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2305      	movs	r3, #5
 8001e74:	f002 ff1e 	bl	8004cb4 <HAL_SPI_TransmitReceive>


	  SPI2Rx += (SPI2RxData[1] << 24);
 8001e78:	0021      	movs	r1, r4
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	061b      	lsls	r3, r3, #24
 8001e80:	001a      	movs	r2, r3
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	189b      	adds	r3, r3, r2
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[2] << 16);
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	789b      	ldrb	r3, [r3, #2]
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	001a      	movs	r2, r3
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	189b      	adds	r3, r3, r2
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[3] << 8);
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	78db      	ldrb	r3, [r3, #3]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	001a      	movs	r2, r3
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	189b      	adds	r3, r3, r2
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[4] << 0);
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	791b      	ldrb	r3, [r3, #4]
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	189b      	adds	r3, r3, r2
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,1); // set TMC CS high
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	015b      	lsls	r3, r3, #5
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <TMC5160_SPIWrite+0xd0>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	0019      	movs	r1, r3
 8001eba:	f002 f927 	bl	800410c <HAL_GPIO_WritePin>

	  return SPI2Rx;
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b00b      	add	sp, #44	; 0x2c
 8001ec6:	bd90      	pop	{r4, r7, pc}
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	200010a8 	.word	0x200010a8

08001ed0 <AMS5055_Basic_Init>:

void AMS5055_Basic_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
	//start new angle measuremnt
	//AMS5055_Get_Position();  // Angle read when standstill is offset
	AMSoffset = AMS5055_Get_Position();  // Angle read when standstill is offset
 8001ed4:	f000 f80a 	bl	8001eec <AMS5055_Get_Position>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	001a      	movs	r2, r3
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <AMS5055_Basic_Init+0x18>)
 8001ede:	801a      	strh	r2, [r3, #0]

	//TODO berekening loopt niet goed van pos naar angle
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	2000002c 	.word	0x2000002c

08001eec <AMS5055_Get_Position>:

uint16_t AMS5055_Get_Position()
{
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
	uint16_t Angle = 0;
 8001ef2:	1dbb      	adds	r3, r7, #6
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	801a      	strh	r2, [r3, #0]
	float Calc_angle = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	603b      	str	r3, [r7, #0]


	AMS5055_SPIWriteInt(ANGULAR_DATA,1);
 8001efc:	4b51      	ldr	r3, [pc, #324]	; (8002044 <AMS5055_Get_Position+0x158>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f8ed 	bl	80020e0 <AMS5055_SPIWriteInt>

	while(AMS_Ready != 1) //wacht op INT
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <AMS5055_Get_Position+0x15c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d1fb      	bne.n	8001f08 <AMS5055_Get_Position+0x1c>
	{
	}

	Angle = AMS5055_SPIWriteInt(NOP,1);
 8001f10:	1dbc      	adds	r4, r7, #6
 8001f12:	2101      	movs	r1, #1
 8001f14:	2000      	movs	r0, #0
 8001f16:	f000 f8e3 	bl	80020e0 <AMS5055_SPIWriteInt>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	8023      	strh	r3, [r4, #0]

	if(Angle > 32768)
 8001f1e:	1dbb      	adds	r3, r7, #6
 8001f20:	881a      	ldrh	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d906      	bls.n	8001f38 <AMS5055_Get_Position+0x4c>
	{
		Angle = Angle - 32768;
 8001f2a:	1dbb      	adds	r3, r7, #6
 8001f2c:	1dba      	adds	r2, r7, #6
 8001f2e:	8812      	ldrh	r2, [r2, #0]
 8001f30:	4946      	ldr	r1, [pc, #280]	; (800204c <AMS5055_Get_Position+0x160>)
 8001f32:	468c      	mov	ip, r1
 8001f34:	4462      	add	r2, ip
 8001f36:	801a      	strh	r2, [r3, #0]
	}

	if(Angle > 16384)
 8001f38:	1dbb      	adds	r3, r7, #6
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	01db      	lsls	r3, r3, #7
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d906      	bls.n	8001f52 <AMS5055_Get_Position+0x66>
	{
		Angle = Angle - 16384;
 8001f44:	1dbb      	adds	r3, r7, #6
 8001f46:	1dba      	adds	r2, r7, #6
 8001f48:	8812      	ldrh	r2, [r2, #0]
 8001f4a:	4941      	ldr	r1, [pc, #260]	; (8002050 <AMS5055_Get_Position+0x164>)
 8001f4c:	468c      	mov	ip, r1
 8001f4e:	4462      	add	r2, ip
 8001f50:	801a      	strh	r2, [r3, #0]
	}

	if(Angle > 8192)
 8001f52:	1dbb      	adds	r3, r7, #6
 8001f54:	881a      	ldrh	r2, [r3, #0]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	019b      	lsls	r3, r3, #6
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d906      	bls.n	8001f6c <AMS5055_Get_Position+0x80>
	{
		Angle = Angle - 8192;
 8001f5e:	1dbb      	adds	r3, r7, #6
 8001f60:	1dba      	adds	r2, r7, #6
 8001f62:	8812      	ldrh	r2, [r2, #0]
 8001f64:	493b      	ldr	r1, [pc, #236]	; (8002054 <AMS5055_Get_Position+0x168>)
 8001f66:	468c      	mov	ip, r1
 8001f68:	4462      	add	r2, ip
 8001f6a:	801a      	strh	r2, [r3, #0]
	}

	Angle >>= 1;
 8001f6c:	1dbb      	adds	r3, r7, #6
 8001f6e:	1dba      	adds	r2, r7, #6
 8001f70:	8812      	ldrh	r2, [r2, #0]
 8001f72:	0852      	lsrs	r2, r2, #1
 8001f74:	801a      	strh	r2, [r3, #0]

	if(Ax == 0 && setOffset == 0) // first reading and no offset
 8001f76:	4b38      	ldr	r3, [pc, #224]	; (8002058 <AMS5055_Get_Position+0x16c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <AMS5055_Get_Position+0xa6>
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <AMS5055_Get_Position+0x170>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <AMS5055_Get_Position+0xa6>
	{
		setOffset = 1;
 8001f86:	4b35      	ldr	r3, [pc, #212]	; (800205c <AMS5055_Get_Position+0x170>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
		return Angle;   // return unprocessed offset value
 8001f8c:	1dbb      	adds	r3, r7, #6
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	e054      	b.n	800203c <AMS5055_Get_Position+0x150>
	}

	else
	{
		Angles[Ax] = Angle;  //uncomment to enable logging of Angle position
 8001f92:	4b31      	ldr	r3, [pc, #196]	; (8002058 <AMS5055_Get_Position+0x16c>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4b32      	ldr	r3, [pc, #200]	; (8002060 <AMS5055_Get_Position+0x174>)
 8001f98:	0052      	lsls	r2, r2, #1
 8001f9a:	1db9      	adds	r1, r7, #6
 8001f9c:	8809      	ldrh	r1, [r1, #0]
 8001f9e:	52d1      	strh	r1, [r2, r3]

		if(Angle <= AMSoffset)
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <AMS5055_Get_Position+0x178>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	1dba      	adds	r2, r7, #6
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d806      	bhi.n	8001fba <AMS5055_Get_Position+0xce>
		{
			Angle += 4095;  //add 4095 to correctly loop
 8001fac:	1dbb      	adds	r3, r7, #6
 8001fae:	1dba      	adds	r2, r7, #6
 8001fb0:	8812      	ldrh	r2, [r2, #0]
 8001fb2:	492d      	ldr	r1, [pc, #180]	; (8002068 <AMS5055_Get_Position+0x17c>)
 8001fb4:	468c      	mov	ip, r1
 8001fb6:	4462      	add	r2, ip
 8001fb8:	801a      	strh	r2, [r3, #0]
		}

		Angle = Angle - AMSoffset;  // AMS is not calibrated, so angle needs to be fixed
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <AMS5055_Get_Position+0x178>)
 8001fbc:	881a      	ldrh	r2, [r3, #0]
 8001fbe:	1dbb      	adds	r3, r7, #6
 8001fc0:	1db9      	adds	r1, r7, #6
 8001fc2:	8809      	ldrh	r1, [r1, #0]
 8001fc4:	1a8a      	subs	r2, r1, r2
 8001fc6:	801a      	strh	r2, [r3, #0]


		Calc_angle = (Angle / 4095.0) * 360.0; //12 bit resolution
 8001fc8:	1dbb      	adds	r3, r7, #6
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff facb 	bl	8001568 <__aeabi_i2d>
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <AMS5055_Get_Position+0x180>)
 8001fd6:	f7fe f95f 	bl	8000298 <__aeabi_ddiv>
 8001fda:	0002      	movs	r2, r0
 8001fdc:	000b      	movs	r3, r1
 8001fde:	0010      	movs	r0, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <AMS5055_Get_Position+0x184>)
 8001fe6:	f7fe fc45 	bl	8000874 <__aeabi_dmul>
 8001fea:	0002      	movs	r2, r0
 8001fec:	000b      	movs	r3, r1
 8001fee:	0010      	movs	r0, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	f7ff fb0f 	bl	8001614 <__aeabi_d2f>
 8001ff6:	1c03      	adds	r3, r0, #0
 8001ff8:	603b      	str	r3, [r7, #0]

		AngleP[Ax] = (int)Calc_angle;  //uncomment to enable logging of Angle position
 8001ffa:	6838      	ldr	r0, [r7, #0]
 8001ffc:	f7fe f92c 	bl	8000258 <__aeabi_f2iz>
 8002000:	0001      	movs	r1, r0
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <AMS5055_Get_Position+0x16c>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	b289      	uxth	r1, r1
 8002008:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <AMS5055_Get_Position+0x188>)
 800200a:	0052      	lsls	r2, r2, #1
 800200c:	52d1      	strh	r1, [r2, r3]

		if (Ax >= 1000) // to prevent overflow
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <AMS5055_Get_Position+0x16c>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	23fa      	movs	r3, #250	; 0xfa
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	429a      	cmp	r2, r3
 8002018:	db03      	blt.n	8002022 <AMS5055_Get_Position+0x136>
		{
			Ax = 0;
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <AMS5055_Get_Position+0x16c>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e007      	b.n	8002032 <AMS5055_Get_Position+0x146>
		}

		else
		{
			Ax++;
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <AMS5055_Get_Position+0x16c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <AMS5055_Get_Position+0x16c>)
 800202a:	601a      	str	r2, [r3, #0]
			AMS_Ready = 0;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <AMS5055_Get_Position+0x15c>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
		}

		return (int)Calc_angle; // return calculated angle
 8002032:	6838      	ldr	r0, [r7, #0]
 8002034:	f7fe f910 	bl	8000258 <__aeabi_f2iz>
 8002038:	0003      	movs	r3, r0
 800203a:	b29b      	uxth	r3, r3
	}
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b003      	add	sp, #12
 8002042:	bd90      	pop	{r4, r7, pc}
 8002044:	00003fff 	.word	0x00003fff
 8002048:	20000804 	.word	0x20000804
 800204c:	ffff8000 	.word	0xffff8000
 8002050:	ffffc000 	.word	0xffffc000
 8002054:	ffffe000 	.word	0xffffe000
 8002058:	20000800 	.word	0x20000800
 800205c:	20000fd8 	.word	0x20000fd8
 8002060:	20000030 	.word	0x20000030
 8002064:	2000002c 	.word	0x2000002c
 8002068:	00000fff 	.word	0x00000fff
 800206c:	40affe00 	.word	0x40affe00
 8002070:	40768000 	.word	0x40768000
 8002074:	20000808 	.word	0x20000808

08002078 <AMSParity>:

uint8_t AMSParity(uint16_t value)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	0002      	movs	r2, r0
 8002080:	1dbb      	adds	r3, r7, #6
 8002082:	801a      	strh	r2, [r3, #0]
	uint8_t cnt = 0;
 8002084:	230f      	movs	r3, #15
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < 16; i++)
 800208c:	230e      	movs	r3, #14
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e015      	b.n	80020c2 <AMSParity+0x4a>
	{
		if (value & 0x1)
 8002096:	1dbb      	adds	r3, r7, #6
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	2201      	movs	r2, #1
 800209c:	4013      	ands	r3, r2
 800209e:	d005      	beq.n	80020ac <AMSParity+0x34>
		{
			cnt++;
 80020a0:	210f      	movs	r1, #15
 80020a2:	187b      	adds	r3, r7, r1
 80020a4:	781a      	ldrb	r2, [r3, #0]
 80020a6:	187b      	adds	r3, r7, r1
 80020a8:	3201      	adds	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
		}

		value >>= 1;
 80020ac:	1dbb      	adds	r3, r7, #6
 80020ae:	1dba      	adds	r2, r7, #6
 80020b0:	8812      	ldrh	r2, [r2, #0]
 80020b2:	0852      	lsrs	r2, r2, #1
 80020b4:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 16; i++)
 80020b6:	210e      	movs	r1, #14
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	781a      	ldrb	r2, [r3, #0]
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	3201      	adds	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	230e      	movs	r3, #14
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b0f      	cmp	r3, #15
 80020ca:	d9e4      	bls.n	8002096 <AMSParity+0x1e>
	}
	return cnt & 0x1;
 80020cc:	230f      	movs	r3, #15
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	b2db      	uxtb	r3, r3
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}

080020e0 <AMS5055_SPIWriteInt>:

uint16_t AMS5055_SPIWriteInt(uint16_t Address, int Action)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	0002      	movs	r2, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	1dbb      	adds	r3, r7, #6
 80020ec:	801a      	strh	r2, [r3, #0]
	*/

	uint8_t SPI1TxData[2];	//TX data array SPI1
	uint8_t SPI1RxData[2];	//RX data array SPI1

	uint16_t SPI1Rx = 0;
 80020ee:	2314      	movs	r3, #20
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	2200      	movs	r2, #0
 80020f4:	801a      	strh	r2, [r3, #0]
	uint16_t SPI1Tx = 0;
 80020f6:	2416      	movs	r4, #22
 80020f8:	193b      	adds	r3, r7, r4
 80020fa:	2200      	movs	r2, #0
 80020fc:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low
 80020fe:	2390      	movs	r3, #144	; 0x90
 8002100:	05db      	lsls	r3, r3, #23
 8002102:	2200      	movs	r2, #0
 8002104:	2110      	movs	r1, #16
 8002106:	0018      	movs	r0, r3
 8002108:	f002 f800 	bl	800410c <HAL_GPIO_WritePin>


	  SPI1Tx = (Address << 1);
 800210c:	0021      	movs	r1, r4
 800210e:	187a      	adds	r2, r7, r1
 8002110:	1dbb      	adds	r3, r7, #6
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	18db      	adds	r3, r3, r3
 8002116:	8013      	strh	r3, [r2, #0]

	  if (Action == 1) //READ
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d105      	bne.n	800212a <AMS5055_SPIWriteInt+0x4a>
	  {
		  SPI1Tx = SPI1Tx | 0x8000;
 800211e:	187b      	adds	r3, r7, r1
 8002120:	187a      	adds	r2, r7, r1
 8002122:	8812      	ldrh	r2, [r2, #0]
 8002124:	4923      	ldr	r1, [pc, #140]	; (80021b4 <AMS5055_SPIWriteInt+0xd4>)
 8002126:	430a      	orrs	r2, r1
 8002128:	801a      	strh	r2, [r3, #0]
	  }

	  SPI1Tx = SPI1Tx | AMSParity(SPI1Tx);
 800212a:	2416      	movs	r4, #22
 800212c:	193b      	adds	r3, r7, r4
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff ffa1 	bl	8002078 <AMSParity>
 8002136:	0003      	movs	r3, r0
 8002138:	b299      	uxth	r1, r3
 800213a:	193b      	adds	r3, r7, r4
 800213c:	193a      	adds	r2, r7, r4
 800213e:	8812      	ldrh	r2, [r2, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	801a      	strh	r2, [r3, #0]

	 // HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low

	  SPI1TxData[0] = SPI1Tx >> 8;
 8002144:	0021      	movs	r1, r4
 8002146:	193b      	adds	r3, r7, r4
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	b29b      	uxth	r3, r3
 800214e:	b2da      	uxtb	r2, r3
 8002150:	2010      	movs	r0, #16
 8002152:	183b      	adds	r3, r7, r0
 8002154:	701a      	strb	r2, [r3, #0]
	  SPI1TxData[1] = SPI1Tx;
 8002156:	187b      	adds	r3, r7, r1
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	183b      	adds	r3, r7, r0
 800215e:	705a      	strb	r2, [r3, #1]

	  HAL_SPI_TransmitReceive(&hspi1, SPI1TxData, SPI1RxData, 0x02, 100);
 8002160:	240c      	movs	r4, #12
 8002162:	193a      	adds	r2, r7, r4
 8002164:	1839      	adds	r1, r7, r0
 8002166:	4814      	ldr	r0, [pc, #80]	; (80021b8 <AMS5055_SPIWriteInt+0xd8>)
 8002168:	2364      	movs	r3, #100	; 0x64
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2302      	movs	r3, #2
 800216e:	f002 fda1 	bl	8004cb4 <HAL_SPI_TransmitReceive>
	//HAL_SPI_TransmitReceive(&hspi1, SPI1Tx, SPI1Rx, 0x02, 100);

	  //HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high

	  SPI1Rx += (SPI1RxData[0] << 8);	//<< 8
 8002172:	193b      	adds	r3, r7, r4
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	b299      	uxth	r1, r3
 800217c:	2014      	movs	r0, #20
 800217e:	183b      	adds	r3, r7, r0
 8002180:	183a      	adds	r2, r7, r0
 8002182:	8812      	ldrh	r2, [r2, #0]
 8002184:	188a      	adds	r2, r1, r2
 8002186:	801a      	strh	r2, [r3, #0]
	  SPI1Rx += (SPI1RxData[1] << 0);	//<< 0
 8002188:	193b      	adds	r3, r7, r4
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	b299      	uxth	r1, r3
 800218e:	183b      	adds	r3, r7, r0
 8002190:	0004      	movs	r4, r0
 8002192:	183a      	adds	r2, r7, r0
 8002194:	8812      	ldrh	r2, [r2, #0]
 8002196:	188a      	adds	r2, r1, r2
 8002198:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high
 800219a:	2390      	movs	r3, #144	; 0x90
 800219c:	05db      	lsls	r3, r3, #23
 800219e:	2201      	movs	r2, #1
 80021a0:	2110      	movs	r1, #16
 80021a2:	0018      	movs	r0, r3
 80021a4:	f001 ffb2 	bl	800410c <HAL_GPIO_WritePin>

	  return SPI1Rx;
 80021a8:	193b      	adds	r3, r7, r4
 80021aa:	881b      	ldrh	r3, [r3, #0]
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b007      	add	sp, #28
 80021b2:	bd90      	pop	{r4, r7, pc}
 80021b4:	ffff8000 	.word	0xffff8000
 80021b8:	20001044 	.word	0x20001044

080021bc <ENC_Get_Position>:

uint16_t ENC_Get_Position(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
	uint32_t Enc_Position = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	2039      	movs	r0, #57	; 0x39
 80021c8:	f7ff fe16 	bl	8001df8 <TMC5160_SPIWrite>
 80021cc:	0003      	movs	r3, r0
 80021ce:	607b      	str	r3, [r7, #4]

	if((int)Enc_Position <= 0)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	dc02      	bgt.n	80021dc <ENC_Get_Position+0x20>
	{
		Enc_Position = Enc_Position * (-1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	425b      	negs	r3, r3
 80021da:	607b      	str	r3, [r7, #4]
	}

	Enc_Position = ((Enc_Position / 256)* 1.8);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7ff f9f1 	bl	80015c8 <__aeabi_ui2d>
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <ENC_Get_Position+0x50>)
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <ENC_Get_Position+0x54>)
 80021ea:	f7fe fb43 	bl	8000874 <__aeabi_dmul>
 80021ee:	0002      	movs	r2, r0
 80021f0:	000b      	movs	r3, r1
 80021f2:	0010      	movs	r0, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	f7fe f811 	bl	800021c <__aeabi_d2uiz>
 80021fa:	0003      	movs	r3, r0
 80021fc:	607b      	str	r3, [r7, #4]

	return Enc_Position;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	b29b      	uxth	r3, r3
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b002      	add	sp, #8
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	cccccccd 	.word	0xcccccccd
 8002210:	3ffccccc 	.word	0x3ffccccc

08002214 <HAL_CAN_RxFifo0MsgPendingCallback>:
int Datacheck;			//temp value for checking incomming CAN Data


/*  CAN RECEIVE INTERRUPT */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CANRxHeader, CANRxData);
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800221e:	4a09      	ldr	r2, [pc, #36]	; (8002244 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	2100      	movs	r1, #0
 8002224:	f001 f9c2 	bl	80035ac <HAL_CAN_GetRxMessage>

	if (CANRxData[0] == 0x01)
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d102      	bne.n	8002236 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Datacheck = 1;
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]
	}
}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	b002      	add	sp, #8
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	20001154 	.word	0x20001154
 8002244:	20001138 	.word	0x20001138
 8002248:	2000115c 	.word	0x2000115c

0800224c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	0002      	movs	r2, r0
 8002254:	1dbb      	adds	r3, r7, #6
 8002256:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == AMS_INT_Pin && AMS_Ready == 0)
 8002258:	1dbb      	adds	r3, r7, #6
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_GPIO_EXTI_Callback+0x22>
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d102      	bne.n	800226e <HAL_GPIO_EXTI_Callback+0x22>
	{
		AMS_Ready = 1;
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_GPIO_EXTI_Callback+0x2c>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
	}
}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	b002      	add	sp, #8
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	20000804 	.word	0x20000804

0800227c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	4c50      	ldr	r4, [pc, #320]	; (80023c0 <main+0x144>)
 8002280:	44a5      	add	sp, r4
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002284:	f000 fc86 	bl	8002b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002288:	f000 f8aa 	bl	80023e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800228c:	f000 fa2a 	bl	80026e4 <MX_GPIO_Init>
  MX_ADC_Init();
 8002290:	f000 f8ea 	bl	8002468 <MX_ADC_Init>
  MX_CAN_Init();
 8002294:	f000 f944 	bl	8002520 <MX_CAN_Init>
  MX_SPI1_Init();
 8002298:	f000 f9a8 	bl	80025ec <MX_SPI1_Init>
  MX_SPI2_Init();
 800229c:	f000 f9e4 	bl	8002668 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  TMC5160_Stop();
 80022a0:	f7ff fd7c 	bl	8001d9c <TMC5160_Stop>
  HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,1); // LOW = ON
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	0059      	lsls	r1, r3, #1
 80022a8:	2390      	movs	r3, #144	; 0x90
 80022aa:	05db      	lsls	r3, r3, #23
 80022ac:	2201      	movs	r2, #1
 80022ae:	0018      	movs	r0, r3
 80022b0:	f001 ff2c 	bl	800410c <HAL_GPIO_WritePin>
  HAL_Delay(2500);	//startup delay, so motor does not spin on debug
 80022b4:	4b43      	ldr	r3, [pc, #268]	; (80023c4 <main+0x148>)
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 fcd0 	bl	8002c5c <HAL_Delay>

  Ramp1.VSTART 	= 10;
 80022bc:	4b42      	ldr	r3, [pc, #264]	; (80023c8 <main+0x14c>)
 80022be:	220a      	movs	r2, #10
 80022c0:	601a      	str	r2, [r3, #0]
  Ramp1.A1 		= 1000;
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <main+0x14c>)
 80022c4:	22fa      	movs	r2, #250	; 0xfa
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	605a      	str	r2, [r3, #4]
  Ramp1.V1 		= 10000;
 80022ca:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <main+0x14c>)
 80022cc:	4a3f      	ldr	r2, [pc, #252]	; (80023cc <main+0x150>)
 80022ce:	609a      	str	r2, [r3, #8]
  Ramp1.AMAX 	= 12800;
 80022d0:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <main+0x14c>)
 80022d2:	22c8      	movs	r2, #200	; 0xc8
 80022d4:	0192      	lsls	r2, r2, #6
 80022d6:	60da      	str	r2, [r3, #12]
  Ramp1.VMAX 	= 51200;
 80022d8:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <main+0x14c>)
 80022da:	22c8      	movs	r2, #200	; 0xc8
 80022dc:	0212      	lsls	r2, r2, #8
 80022de:	611a      	str	r2, [r3, #16]
  Ramp1.DMAX 	= 700;
 80022e0:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <main+0x14c>)
 80022e2:	22af      	movs	r2, #175	; 0xaf
 80022e4:	0092      	lsls	r2, r2, #2
 80022e6:	615a      	str	r2, [r3, #20]
  Ramp1.D1 		= 1400;
 80022e8:	4b37      	ldr	r3, [pc, #220]	; (80023c8 <main+0x14c>)
 80022ea:	22af      	movs	r2, #175	; 0xaf
 80022ec:	00d2      	lsls	r2, r2, #3
 80022ee:	619a      	str	r2, [r3, #24]
  Ramp1.VSTOP 	= 10;
 80022f0:	4b35      	ldr	r3, [pc, #212]	; (80023c8 <main+0x14c>)
 80022f2:	220a      	movs	r2, #10
 80022f4:	61da      	str	r2, [r3, #28]

  CurrentSetting1.IHOLD = 3;
 80022f6:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <main+0x154>)
 80022f8:	2203      	movs	r2, #3
 80022fa:	605a      	str	r2, [r3, #4]
  CurrentSetting1.IRUN 	= 1;
 80022fc:	4b34      	ldr	r3, [pc, #208]	; (80023d0 <main+0x154>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]

  int h = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	4a33      	ldr	r2, [pc, #204]	; (80023d4 <main+0x158>)
 8002306:	18ba      	adds	r2, r7, r2
 8002308:	6013      	str	r3, [r2, #0]
  uint32_t Enc_Position[500];
  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set AM CS low
 800230a:	2390      	movs	r3, #144	; 0x90
 800230c:	05db      	lsls	r3, r3, #23
 800230e:	2201      	movs	r2, #1
 8002310:	2110      	movs	r1, #16
 8002312:	0018      	movs	r0, r3
 8002314:	f001 fefa 	bl	800410c <HAL_GPIO_WritePin>

  Drive_Enable(0); // enable driver
 8002318:	2000      	movs	r0, #0
 800231a:	f7ff fd49 	bl	8001db0 <Drive_Enable>
  TMC5160_Stop();
 800231e:	f7ff fd3d 	bl	8001d9c <TMC5160_Stop>

  AMS5055_Basic_Init();
 8002322:	f7ff fdd5 	bl	8001ed0 <AMS5055_Basic_Init>

  TMC5160_SPIWrite(0x21, 0x00000000, 1);// writing value to address 24 = 0x2D(XTARGET)  1 lap
 8002326:	2201      	movs	r2, #1
 8002328:	2100      	movs	r1, #0
 800232a:	2021      	movs	r0, #33	; 0x21
 800232c:	f7ff fd64 	bl	8001df8 <TMC5160_SPIWrite>
  TMC5160_Rotate_To(0, &Ramp1);
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <main+0x14c>)
 8002332:	0019      	movs	r1, r3
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff fc59 	bl	8001bec <TMC5160_Rotate_To>
  HAL_Delay(1500);
 800233a:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <main+0x15c>)
 800233c:	0018      	movs	r0, r3
 800233e:	f000 fc8d 	bl	8002c5c <HAL_Delay>


  /* Perform Basic Init of TMC5160 and AMS5055 */
  TMC5160_Basic_Init(&CurrentSetting1);
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <main+0x154>)
 8002344:	0018      	movs	r0, r3
 8002346:	f7ff fb53 	bl	80019f0 <TMC5160_Basic_Init>


  Drive_Enable(1); // enable driver
 800234a:	2001      	movs	r0, #1
 800234c:	f7ff fd30 	bl	8001db0 <Drive_Enable>

  TMC5160_Rotate_To(51200, &Ramp1); // move to Position X
 8002350:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <main+0x14c>)
 8002352:	23c8      	movs	r3, #200	; 0xc8
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	0011      	movs	r1, r2
 8002358:	0018      	movs	r0, r3
 800235a:	f7ff fc47 	bl	8001bec <TMC5160_Rotate_To>
  HAL_Delay(100);
 800235e:	2064      	movs	r0, #100	; 0x64
 8002360:	f000 fc7c 	bl	8002c5c <HAL_Delay>
  TMC5160_Rotate_To(0, &Ramp1); // move to Position X
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <main+0x14c>)
 8002366:	0019      	movs	r1, r3
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff fc3f 	bl	8001bec <TMC5160_Rotate_To>

  TMC5160_Stop();
 800236e:	f7ff fd15 	bl	8001d9c <TMC5160_Stop>
  Drive_Enable(0);
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff fd1c 	bl	8001db0 <Drive_Enable>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  Enc_Position[h] = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	2039      	movs	r0, #57	; 0x39
 800237e:	f7ff fd3b 	bl	8001df8 <TMC5160_SPIWrite>
 8002382:	0001      	movs	r1, r0
 8002384:	4b15      	ldr	r3, [pc, #84]	; (80023dc <main+0x160>)
 8002386:	22fb      	movs	r2, #251	; 0xfb
 8002388:	00d2      	lsls	r2, r2, #3
 800238a:	189b      	adds	r3, r3, r2
 800238c:	19db      	adds	r3, r3, r7
 800238e:	4c11      	ldr	r4, [pc, #68]	; (80023d4 <main+0x158>)
 8002390:	193a      	adds	r2, r7, r4
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	50d1      	str	r1, [r2, r3]
	  HAL_Delay(5);
 8002398:	2005      	movs	r0, #5
 800239a:	f000 fc5f 	bl	8002c5c <HAL_Delay>
	  h++;
 800239e:	0021      	movs	r1, r4
 80023a0:	187b      	adds	r3, r7, r1
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	187a      	adds	r2, r7, r1
 80023a8:	6013      	str	r3, [r2, #0]

	  if(h == 500)
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	23fa      	movs	r3, #250	; 0xfa
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d1e0      	bne.n	8002378 <main+0xfc>
	  {
			h = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	187a      	adds	r2, r7, r1
 80023ba:	6013      	str	r3, [r2, #0]
	  Enc_Position[h] = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 80023bc:	e7dc      	b.n	8002378 <main+0xfc>
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	fffff824 	.word	0xfffff824
 80023c4:	000009c4 	.word	0x000009c4
 80023c8:	2000110c 	.word	0x2000110c
 80023cc:	00002710 	.word	0x00002710
 80023d0:	2000112c 	.word	0x2000112c
 80023d4:	000007d4 	.word	0x000007d4
 80023d8:	000005dc 	.word	0x000005dc
 80023dc:	fffff82c 	.word	0xfffff82c

080023e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b093      	sub	sp, #76	; 0x4c
 80023e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e6:	2414      	movs	r4, #20
 80023e8:	193b      	adds	r3, r7, r4
 80023ea:	0018      	movs	r0, r3
 80023ec:	2334      	movs	r3, #52	; 0x34
 80023ee:	001a      	movs	r2, r3
 80023f0:	2100      	movs	r1, #0
 80023f2:	f002 ffa7 	bl	8005344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	0018      	movs	r0, r3
 80023fa:	2310      	movs	r3, #16
 80023fc:	001a      	movs	r2, r3
 80023fe:	2100      	movs	r1, #0
 8002400:	f002 ffa0 	bl	8005344 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8002404:	0021      	movs	r1, r4
 8002406:	187b      	adds	r3, r7, r1
 8002408:	2211      	movs	r2, #17
 800240a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800240c:	187b      	adds	r3, r7, r1
 800240e:	2201      	movs	r2, #1
 8002410:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002412:	187b      	adds	r3, r7, r1
 8002414:	2201      	movs	r2, #1
 8002416:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002418:	187b      	adds	r3, r7, r1
 800241a:	2210      	movs	r2, #16
 800241c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800241e:	187b      	adds	r3, r7, r1
 8002420:	2200      	movs	r2, #0
 8002422:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002424:	187b      	adds	r3, r7, r1
 8002426:	0018      	movs	r0, r3
 8002428:	f001 feaa 	bl	8004180 <HAL_RCC_OscConfig>
 800242c:	1e03      	subs	r3, r0, #0
 800242e:	d001      	beq.n	8002434 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8002430:	f000 fa04 	bl	800283c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	2207      	movs	r2, #7
 8002438:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	2201      	movs	r2, #1
 800243e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2200      	movs	r2, #0
 800244a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2100      	movs	r1, #0
 8002450:	0018      	movs	r0, r3
 8002452:	f002 fa1b 	bl	800488c <HAL_RCC_ClockConfig>
 8002456:	1e03      	subs	r3, r0, #0
 8002458:	d001      	beq.n	800245e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800245a:	f000 f9ef 	bl	800283c <Error_Handler>
  }
}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b013      	add	sp, #76	; 0x4c
 8002464:	bd90      	pop	{r4, r7, pc}
	...

08002468 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	0018      	movs	r0, r3
 8002472:	230c      	movs	r3, #12
 8002474:	001a      	movs	r2, r3
 8002476:	2100      	movs	r1, #0
 8002478:	f002 ff64 	bl	8005344 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800247c:	4b26      	ldr	r3, [pc, #152]	; (8002518 <MX_ADC_Init+0xb0>)
 800247e:	4a27      	ldr	r2, [pc, #156]	; (800251c <MX_ADC_Init+0xb4>)
 8002480:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002482:	4b25      	ldr	r3, [pc, #148]	; (8002518 <MX_ADC_Init+0xb0>)
 8002484:	2200      	movs	r2, #0
 8002486:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002488:	4b23      	ldr	r3, [pc, #140]	; (8002518 <MX_ADC_Init+0xb0>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800248e:	4b22      	ldr	r3, [pc, #136]	; (8002518 <MX_ADC_Init+0xb0>)
 8002490:	2200      	movs	r2, #0
 8002492:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002494:	4b20      	ldr	r3, [pc, #128]	; (8002518 <MX_ADC_Init+0xb0>)
 8002496:	2201      	movs	r2, #1
 8002498:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <MX_ADC_Init+0xb0>)
 800249c:	2204      	movs	r2, #4
 800249e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <MX_ADC_Init+0xb0>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80024a6:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <MX_ADC_Init+0xb0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80024ac:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <MX_ADC_Init+0xb0>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <MX_ADC_Init+0xb0>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024b8:	4b17      	ldr	r3, [pc, #92]	; (8002518 <MX_ADC_Init+0xb0>)
 80024ba:	22c2      	movs	r2, #194	; 0xc2
 80024bc:	32ff      	adds	r2, #255	; 0xff
 80024be:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <MX_ADC_Init+0xb0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_ADC_Init+0xb0>)
 80024c8:	2224      	movs	r2, #36	; 0x24
 80024ca:	2100      	movs	r1, #0
 80024cc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <MX_ADC_Init+0xb0>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <MX_ADC_Init+0xb0>)
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 fbe4 	bl	8002ca4 <HAL_ADC_Init>
 80024dc:	1e03      	subs	r3, r0, #0
 80024de:	d001      	beq.n	80024e4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80024e0:	f000 f9ac 	bl	800283c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2280      	movs	r2, #128	; 0x80
 80024ee:	0152      	lsls	r2, r2, #5
 80024f0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	2280      	movs	r2, #128	; 0x80
 80024f6:	0552      	lsls	r2, r2, #21
 80024f8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80024fa:	1d3a      	adds	r2, r7, #4
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_ADC_Init+0xb0>)
 80024fe:	0011      	movs	r1, r2
 8002500:	0018      	movs	r0, r3
 8002502:	f000 fd0f 	bl	8002f24 <HAL_ADC_ConfigChannel>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d001      	beq.n	800250e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800250a:	f000 f997 	bl	800283c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b004      	add	sp, #16
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	20000fdc 	.word	0x20000fdc
 800251c:	40012400 	.word	0x40012400

08002520 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002526:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <MX_CAN_Init+0xc4>)
 8002528:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <MX_CAN_Init+0xc8>)
 800252a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <MX_CAN_Init+0xc4>)
 800252e:	2210      	movs	r2, #16
 8002530:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002532:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <MX_CAN_Init+0xc4>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002538:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <MX_CAN_Init+0xc4>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800253e:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <MX_CAN_Init+0xc4>)
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	0252      	lsls	r2, r2, #9
 8002544:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <MX_CAN_Init+0xc4>)
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <MX_CAN_Init+0xc4>)
 800254e:	2200      	movs	r2, #0
 8002550:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <MX_CAN_Init+0xc4>)
 8002554:	2200      	movs	r2, #0
 8002556:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <MX_CAN_Init+0xc4>)
 800255a:	2200      	movs	r2, #0
 800255c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <MX_CAN_Init+0xc4>)
 8002560:	2200      	movs	r2, #0
 8002562:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <MX_CAN_Init+0xc4>)
 8002566:	2200      	movs	r2, #0
 8002568:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <MX_CAN_Init+0xc4>)
 800256c:	2200      	movs	r2, #0
 800256e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002570:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <MX_CAN_Init+0xc4>)
 8002572:	0018      	movs	r0, r3
 8002574:	f000 fde4 	bl	8003140 <HAL_CAN_Init>
 8002578:	1e03      	subs	r3, r0, #0
 800257a:	d001      	beq.n	8002580 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800257c:	f000 f95e 	bl	800283c <Error_Handler>

  /* CAN filter */

  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 8002580:	003b      	movs	r3, r7
 8002582:	2201      	movs	r2, #1
 8002584:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 10;
 8002586:	003b      	movs	r3, r7
 8002588:	220a      	movs	r2, #10
 800258a:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800258c:	003b      	movs	r3, r7
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x0000;
 8002592:	003b      	movs	r3, r7
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8002598:	003b      	movs	r3, r7
 800259a:	2200      	movs	r2, #0
 800259c:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800259e:	003b      	movs	r3, r7
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80025a4:	003b      	movs	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80025aa:	003b      	movs	r3, r7
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80025b0:	003b      	movs	r3, r7
 80025b2:	2201      	movs	r2, #1
 80025b4:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 0;
 80025b6:	003b      	movs	r3, r7
 80025b8:	2200      	movs	r2, #0
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80025bc:	003a      	movs	r2, r7
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <MX_CAN_Init+0xc4>)
 80025c0:	0011      	movs	r1, r2
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 feba 	bl	800333c <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <MX_CAN_Init+0xc4>)
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 ffa8 	bl	8003520 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <MX_CAN_Init+0xc4>)
 80025d2:	2102      	movs	r1, #2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f001 f905 	bl	80037e4 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b00a      	add	sp, #40	; 0x28
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	2000101c 	.word	0x2000101c
 80025e8:	40006400 	.word	0x40006400

080025ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <MX_SPI1_Init+0x74>)
 80025f2:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <MX_SPI1_Init+0x78>)
 80025f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <MX_SPI1_Init+0x74>)
 80025f8:	2282      	movs	r2, #130	; 0x82
 80025fa:	0052      	lsls	r2, r2, #1
 80025fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025fe:	4b18      	ldr	r3, [pc, #96]	; (8002660 <MX_SPI1_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <MX_SPI1_Init+0x74>)
 8002606:	22e0      	movs	r2, #224	; 0xe0
 8002608:	00d2      	lsls	r2, r2, #3
 800260a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <MX_SPI1_Init+0x74>)
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <MX_SPI1_Init+0x74>)
 8002614:	2200      	movs	r2, #0
 8002616:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <MX_SPI1_Init+0x74>)
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	0092      	lsls	r2, r2, #2
 800261e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <MX_SPI1_Init+0x74>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002626:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <MX_SPI1_Init+0x74>)
 8002628:	2200      	movs	r2, #0
 800262a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <MX_SPI1_Init+0x74>)
 800262e:	2200      	movs	r2, #0
 8002630:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <MX_SPI1_Init+0x74>)
 8002634:	2200      	movs	r2, #0
 8002636:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <MX_SPI1_Init+0x74>)
 800263a:	2207      	movs	r2, #7
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <MX_SPI1_Init+0x74>)
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <MX_SPI1_Init+0x74>)
 8002646:	2208      	movs	r2, #8
 8002648:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <MX_SPI1_Init+0x74>)
 800264c:	0018      	movs	r0, r3
 800264e:	f002 fa79 	bl	8004b44 <HAL_SPI_Init>
 8002652:	1e03      	subs	r3, r0, #0
 8002654:	d001      	beq.n	800265a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002656:	f000 f8f1 	bl	800283c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20001044 	.word	0x20001044
 8002664:	40013000 	.word	0x40013000

08002668 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <MX_SPI2_Init+0x74>)
 800266e:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <MX_SPI2_Init+0x78>)
 8002670:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <MX_SPI2_Init+0x74>)
 8002674:	2282      	movs	r2, #130	; 0x82
 8002676:	0052      	lsls	r2, r2, #1
 8002678:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <MX_SPI2_Init+0x74>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002680:	4b16      	ldr	r3, [pc, #88]	; (80026dc <MX_SPI2_Init+0x74>)
 8002682:	22e0      	movs	r2, #224	; 0xe0
 8002684:	00d2      	lsls	r2, r2, #3
 8002686:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <MX_SPI2_Init+0x74>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <MX_SPI2_Init+0x74>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <MX_SPI2_Init+0x74>)
 8002696:	2280      	movs	r2, #128	; 0x80
 8002698:	0092      	lsls	r2, r2, #2
 800269a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <MX_SPI2_Init+0x74>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <MX_SPI2_Init+0x74>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <MX_SPI2_Init+0x74>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <MX_SPI2_Init+0x74>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <MX_SPI2_Init+0x74>)
 80026b6:	2207      	movs	r2, #7
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <MX_SPI2_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <MX_SPI2_Init+0x74>)
 80026c2:	2208      	movs	r2, #8
 80026c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <MX_SPI2_Init+0x74>)
 80026c8:	0018      	movs	r0, r3
 80026ca:	f002 fa3b 	bl	8004b44 <HAL_SPI_Init>
 80026ce:	1e03      	subs	r3, r0, #0
 80026d0:	d001      	beq.n	80026d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80026d2:	f000 f8b3 	bl	800283c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	200010a8 	.word	0x200010a8
 80026e0:	40003800 	.word	0x40003800

080026e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	240c      	movs	r4, #12
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	0018      	movs	r0, r3
 80026f0:	2314      	movs	r3, #20
 80026f2:	001a      	movs	r2, r3
 80026f4:	2100      	movs	r1, #0
 80026f6:	f002 fe25 	bl	8005344 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026fa:	4b4d      	ldr	r3, [pc, #308]	; (8002830 <MX_GPIO_Init+0x14c>)
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	4b4c      	ldr	r3, [pc, #304]	; (8002830 <MX_GPIO_Init+0x14c>)
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	03c9      	lsls	r1, r1, #15
 8002704:	430a      	orrs	r2, r1
 8002706:	615a      	str	r2, [r3, #20]
 8002708:	4b49      	ldr	r3, [pc, #292]	; (8002830 <MX_GPIO_Init+0x14c>)
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	03db      	lsls	r3, r3, #15
 8002710:	4013      	ands	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	4b46      	ldr	r3, [pc, #280]	; (8002830 <MX_GPIO_Init+0x14c>)
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	4b45      	ldr	r3, [pc, #276]	; (8002830 <MX_GPIO_Init+0x14c>)
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	0289      	lsls	r1, r1, #10
 8002720:	430a      	orrs	r2, r1
 8002722:	615a      	str	r2, [r3, #20]
 8002724:	4b42      	ldr	r3, [pc, #264]	; (8002830 <MX_GPIO_Init+0x14c>)
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	4013      	ands	r3, r2
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <MX_GPIO_Init+0x14c>)
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	4b3e      	ldr	r3, [pc, #248]	; (8002830 <MX_GPIO_Init+0x14c>)
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	02c9      	lsls	r1, r1, #11
 800273c:	430a      	orrs	r2, r1
 800273e:	615a      	str	r2, [r3, #20]
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <MX_GPIO_Init+0x14c>)
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	02db      	lsls	r3, r3, #11
 8002748:	4013      	ands	r3, r2
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin, GPIO_PIN_RESET);
 800274e:	238a      	movs	r3, #138	; 0x8a
 8002750:	0059      	lsls	r1, r3, #1
 8002752:	2390      	movs	r3, #144	; 0x90
 8002754:	05db      	lsls	r3, r3, #23
 8002756:	2200      	movs	r2, #0
 8002758:	0018      	movs	r0, r3
 800275a:	f001 fcd7 	bl	800410c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin, GPIO_PIN_RESET);
 800275e:	4935      	ldr	r1, [pc, #212]	; (8002834 <MX_GPIO_Init+0x150>)
 8002760:	4b35      	ldr	r3, [pc, #212]	; (8002838 <MX_GPIO_Init+0x154>)
 8002762:	2200      	movs	r2, #0
 8002764:	0018      	movs	r0, r3
 8002766:	f001 fcd1 	bl	800410c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_STB_Pin AMS_CS_Pin DRV_ENN_Pin */
  GPIO_InitStruct.Pin = CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin;
 800276a:	193b      	adds	r3, r7, r4
 800276c:	228a      	movs	r2, #138	; 0x8a
 800276e:	0052      	lsls	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	193b      	adds	r3, r7, r4
 8002774:	2201      	movs	r2, #1
 8002776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	193b      	adds	r3, r7, r4
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	193b      	adds	r3, r7, r4
 8002780:	2200      	movs	r2, #0
 8002782:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	193a      	adds	r2, r7, r4
 8002786:	2390      	movs	r3, #144	; 0x90
 8002788:	05db      	lsls	r3, r3, #23
 800278a:	0011      	movs	r1, r2
 800278c:	0018      	movs	r0, r3
 800278e:	f001 fb45 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_INT_Pin */
  GPIO_InitStruct.Pin = AMS_INT_Pin;
 8002792:	0021      	movs	r1, r4
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800279a:	187b      	adds	r3, r7, r1
 800279c:	2288      	movs	r2, #136	; 0x88
 800279e:	0352      	lsls	r2, r2, #13
 80027a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	000c      	movs	r4, r1
 80027a4:	193b      	adds	r3, r7, r4
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AMS_INT_GPIO_Port, &GPIO_InitStruct);
 80027aa:	193b      	adds	r3, r7, r4
 80027ac:	4a22      	ldr	r2, [pc, #136]	; (8002838 <MX_GPIO_Init+0x154>)
 80027ae:	0019      	movs	r1, r3
 80027b0:	0010      	movs	r0, r2
 80027b2:	f001 fb33 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC_CS_Pin EXT_OUT_1_Pin EXT_OUT_2_Pin */
  GPIO_InitStruct.Pin = TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin;
 80027b6:	193b      	adds	r3, r7, r4
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <MX_GPIO_Init+0x150>)
 80027ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027bc:	193b      	adds	r3, r7, r4
 80027be:	2201      	movs	r2, #1
 80027c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	193b      	adds	r3, r7, r4
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c8:	193b      	adds	r3, r7, r4
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ce:	193b      	adds	r3, r7, r4
 80027d0:	4a19      	ldr	r2, [pc, #100]	; (8002838 <MX_GPIO_Init+0x154>)
 80027d2:	0019      	movs	r1, r3
 80027d4:	0010      	movs	r0, r2
 80027d6:	f001 fb21 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : REFL_UC_Pin */
  GPIO_InitStruct.Pin = REFL_UC_Pin;
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	2240      	movs	r2, #64	; 0x40
 80027de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e0:	193b      	adds	r3, r7, r4
 80027e2:	2200      	movs	r2, #0
 80027e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	2201      	movs	r2, #1
 80027ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REFL_UC_GPIO_Port, &GPIO_InitStruct);
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <MX_GPIO_Init+0x154>)
 80027f0:	0019      	movs	r1, r3
 80027f2:	0010      	movs	r0, r2
 80027f4:	f001 fb12 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : REFR_UC_Pin */
  GPIO_InitStruct.Pin = REFR_UC_Pin;
 80027f8:	0021      	movs	r1, r4
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002800:	187b      	adds	r3, r7, r1
 8002802:	2200      	movs	r2, #0
 8002804:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	187b      	adds	r3, r7, r1
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REFR_UC_GPIO_Port, &GPIO_InitStruct);
 800280c:	187b      	adds	r3, r7, r1
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <MX_GPIO_Init+0x154>)
 8002810:	0019      	movs	r1, r3
 8002812:	0010      	movs	r0, r2
 8002814:	f001 fb02 	bl	8003e1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	2005      	movs	r0, #5
 800281e:	f001 facb 	bl	8003db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002822:	2005      	movs	r0, #5
 8002824:	f001 fadd 	bl	8003de2 <HAL_NVIC_EnableIRQ>

}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	b009      	add	sp, #36	; 0x24
 800282e:	bd90      	pop	{r4, r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	00001030 	.word	0x00001030
 8002838:	48000400 	.word	0x48000400

0800283c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002840:	b672      	cpsid	i
}
 8002842:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002844:	e7fe      	b.n	8002844 <Error_Handler+0x8>
	...

08002848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_MspInit+0x44>)
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_MspInit+0x44>)
 8002854:	2101      	movs	r1, #1
 8002856:	430a      	orrs	r2, r1
 8002858:	619a      	str	r2, [r3, #24]
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <HAL_MspInit+0x44>)
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2201      	movs	r2, #1
 8002860:	4013      	ands	r3, r2
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_MspInit+0x44>)
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_MspInit+0x44>)
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	0549      	lsls	r1, r1, #21
 8002870:	430a      	orrs	r2, r1
 8002872:	61da      	str	r2, [r3, #28]
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_MspInit+0x44>)
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	055b      	lsls	r3, r3, #21
 800287c:	4013      	ands	r3, r2
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b002      	add	sp, #8
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b08b      	sub	sp, #44	; 0x2c
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	2414      	movs	r4, #20
 800289a:	193b      	adds	r3, r7, r4
 800289c:	0018      	movs	r0, r3
 800289e:	2314      	movs	r3, #20
 80028a0:	001a      	movs	r2, r3
 80028a2:	2100      	movs	r1, #0
 80028a4:	f002 fd4e 	bl	8005344 <memset>
  if(hadc->Instance==ADC1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_ADC_MspInit+0x84>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d12b      	bne.n	800290a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028b2:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_ADC_MspInit+0x88>)
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <HAL_ADC_MspInit+0x88>)
 80028b8:	2180      	movs	r1, #128	; 0x80
 80028ba:	0089      	lsls	r1, r1, #2
 80028bc:	430a      	orrs	r2, r1
 80028be:	619a      	str	r2, [r3, #24]
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_ADC_MspInit+0x88>)
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_ADC_MspInit+0x88>)
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_ADC_MspInit+0x88>)
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	0289      	lsls	r1, r1, #10
 80028d8:	430a      	orrs	r2, r1
 80028da:	615a      	str	r2, [r3, #20]
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_ADC_MspInit+0x88>)
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	029b      	lsls	r3, r3, #10
 80028e4:	4013      	ands	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = AIN_MCU_Pin;
 80028ea:	193b      	adds	r3, r7, r4
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028f0:	193b      	adds	r3, r7, r4
 80028f2:	2203      	movs	r2, #3
 80028f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AIN_MCU_GPIO_Port, &GPIO_InitStruct);
 80028fc:	193a      	adds	r2, r7, r4
 80028fe:	2390      	movs	r3, #144	; 0x90
 8002900:	05db      	lsls	r3, r3, #23
 8002902:	0011      	movs	r1, r2
 8002904:	0018      	movs	r0, r3
 8002906:	f001 fa89 	bl	8003e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b00b      	add	sp, #44	; 0x2c
 8002910:	bd90      	pop	{r4, r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	40012400 	.word	0x40012400
 8002918:	40021000 	.word	0x40021000

0800291c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b08b      	sub	sp, #44	; 0x2c
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	2414      	movs	r4, #20
 8002926:	193b      	adds	r3, r7, r4
 8002928:	0018      	movs	r0, r3
 800292a:	2314      	movs	r3, #20
 800292c:	001a      	movs	r2, r3
 800292e:	2100      	movs	r1, #0
 8002930:	f002 fd08 	bl	8005344 <memset>
  if(hcan->Instance==CAN)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a20      	ldr	r2, [pc, #128]	; (80029bc <HAL_CAN_MspInit+0xa0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d13a      	bne.n	80029b4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_CAN_MspInit+0xa4>)
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <HAL_CAN_MspInit+0xa4>)
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0489      	lsls	r1, r1, #18
 8002948:	430a      	orrs	r2, r1
 800294a:	61da      	str	r2, [r3, #28]
 800294c:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_CAN_MspInit+0xa4>)
 800294e:	69da      	ldr	r2, [r3, #28]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	049b      	lsls	r3, r3, #18
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295a:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_CAN_MspInit+0xa4>)
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_CAN_MspInit+0xa4>)
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	02c9      	lsls	r1, r1, #11
 8002964:	430a      	orrs	r2, r1
 8002966:	615a      	str	r2, [r3, #20]
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_CAN_MspInit+0xa4>)
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	02db      	lsls	r3, r3, #11
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002976:	193b      	adds	r3, r7, r4
 8002978:	22c0      	movs	r2, #192	; 0xc0
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	0021      	movs	r1, r4
 8002980:	187b      	adds	r3, r7, r1
 8002982:	2202      	movs	r2, #2
 8002984:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	187b      	adds	r3, r7, r1
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800298c:	187b      	adds	r3, r7, r1
 800298e:	2203      	movs	r2, #3
 8002990:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002992:	187b      	adds	r3, r7, r1
 8002994:	2204      	movs	r2, #4
 8002996:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002998:	187b      	adds	r3, r7, r1
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_CAN_MspInit+0xa8>)
 800299c:	0019      	movs	r1, r3
 800299e:	0010      	movs	r0, r2
 80029a0:	f001 fa3c 	bl	8003e1c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2100      	movs	r1, #0
 80029a8:	201e      	movs	r0, #30
 80029aa:	f001 fa05 	bl	8003db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80029ae:	201e      	movs	r0, #30
 80029b0:	f001 fa17 	bl	8003de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b00b      	add	sp, #44	; 0x2c
 80029ba:	bd90      	pop	{r4, r7, pc}
 80029bc:	40006400 	.word	0x40006400
 80029c0:	40021000 	.word	0x40021000
 80029c4:	48000400 	.word	0x48000400

080029c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b08d      	sub	sp, #52	; 0x34
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	241c      	movs	r4, #28
 80029d2:	193b      	adds	r3, r7, r4
 80029d4:	0018      	movs	r0, r3
 80029d6:	2314      	movs	r3, #20
 80029d8:	001a      	movs	r2, r3
 80029da:	2100      	movs	r1, #0
 80029dc:	f002 fcb2 	bl	8005344 <memset>
  if(hspi->Instance==SPI1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a39      	ldr	r2, [pc, #228]	; (8002acc <HAL_SPI_MspInit+0x104>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d133      	bne.n	8002a52 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_SPI_MspInit+0x108>)
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	4b38      	ldr	r3, [pc, #224]	; (8002ad0 <HAL_SPI_MspInit+0x108>)
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	0149      	lsls	r1, r1, #5
 80029f4:	430a      	orrs	r2, r1
 80029f6:	619a      	str	r2, [r3, #24]
 80029f8:	4b35      	ldr	r3, [pc, #212]	; (8002ad0 <HAL_SPI_MspInit+0x108>)
 80029fa:	699a      	ldr	r2, [r3, #24]
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	015b      	lsls	r3, r3, #5
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_SPI_MspInit+0x108>)
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	4b31      	ldr	r3, [pc, #196]	; (8002ad0 <HAL_SPI_MspInit+0x108>)
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	0289      	lsls	r1, r1, #10
 8002a10:	430a      	orrs	r2, r1
 8002a12:	615a      	str	r2, [r3, #20]
 8002a14:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <HAL_SPI_MspInit+0x108>)
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	029b      	lsls	r3, r3, #10
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AMS_SCK_Pin|AMS_MISO_Pin|AMS_MOSI_Pin;
 8002a22:	0021      	movs	r1, r4
 8002a24:	187b      	adds	r3, r7, r1
 8002a26:	22e0      	movs	r2, #224	; 0xe0
 8002a28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	187b      	adds	r3, r7, r1
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	187b      	adds	r3, r7, r1
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a36:	187b      	adds	r3, r7, r1
 8002a38:	2203      	movs	r2, #3
 8002a3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	187a      	adds	r2, r7, r1
 8002a44:	2390      	movs	r3, #144	; 0x90
 8002a46:	05db      	lsls	r3, r3, #23
 8002a48:	0011      	movs	r1, r2
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f001 f9e6 	bl	8003e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a50:	e037      	b.n	8002ac2 <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1f      	ldr	r2, [pc, #124]	; (8002ad4 <HAL_SPI_MspInit+0x10c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d132      	bne.n	8002ac2 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <HAL_SPI_MspInit+0x108>)
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_SPI_MspInit+0x108>)
 8002a62:	2180      	movs	r1, #128	; 0x80
 8002a64:	01c9      	lsls	r1, r1, #7
 8002a66:	430a      	orrs	r2, r1
 8002a68:	61da      	str	r2, [r3, #28]
 8002a6a:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_SPI_MspInit+0x108>)
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	01db      	lsls	r3, r3, #7
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_SPI_MspInit+0x108>)
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <HAL_SPI_MspInit+0x108>)
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	02c9      	lsls	r1, r1, #11
 8002a82:	430a      	orrs	r2, r1
 8002a84:	615a      	str	r2, [r3, #20]
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_SPI_MspInit+0x108>)
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	02db      	lsls	r3, r3, #11
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMC_SCK_Pin|TMC_MISO_Pin|TMC_MOSI_Pin;
 8002a94:	211c      	movs	r1, #28
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	22e0      	movs	r2, #224	; 0xe0
 8002a9a:	0212      	lsls	r2, r2, #8
 8002a9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aaa:	187b      	adds	r3, r7, r1
 8002aac:	2203      	movs	r2, #3
 8002aae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002ab0:	187b      	adds	r3, r7, r1
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab6:	187b      	adds	r3, r7, r1
 8002ab8:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <HAL_SPI_MspInit+0x110>)
 8002aba:	0019      	movs	r1, r3
 8002abc:	0010      	movs	r0, r2
 8002abe:	f001 f9ad 	bl	8003e1c <HAL_GPIO_Init>
}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b00d      	add	sp, #52	; 0x34
 8002ac8:	bd90      	pop	{r4, r7, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	40013000 	.word	0x40013000
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40003800 	.word	0x40003800
 8002ad8:	48000400 	.word	0x48000400

08002adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <NMI_Handler+0x4>

08002ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae6:	e7fe      	b.n	8002ae6 <HardFault_Handler+0x4>

08002ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b00:	f000 f890 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AMS_INT_Pin);
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f001 fb1a 	bl	8004148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <CEC_CAN_IRQHandler+0x14>)
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 fe88 	bl	8003838 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	2000101c 	.word	0x2000101c

08002b34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b40:	480d      	ldr	r0, [pc, #52]	; (8002b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b44:	480d      	ldr	r0, [pc, #52]	; (8002b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b46:	490e      	ldr	r1, [pc, #56]	; (8002b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b48:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <LoopForever+0xe>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b4c:	e002      	b.n	8002b54 <LoopCopyDataInit>

08002b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b52:	3304      	adds	r3, #4

08002b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b58:	d3f9      	bcc.n	8002b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5a:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b5c:	4c0b      	ldr	r4, [pc, #44]	; (8002b8c <LoopForever+0x16>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b60:	e001      	b.n	8002b66 <LoopFillZerobss>

08002b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b64:	3204      	adds	r2, #4

08002b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b68:	d3fb      	bcc.n	8002b62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b6a:	f7ff ffe3 	bl	8002b34 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002b6e:	f002 fbf1 	bl	8005354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b72:	f7ff fb83 	bl	800227c <main>

08002b76 <LoopForever>:

LoopForever:
    b LoopForever
 8002b76:	e7fe      	b.n	8002b76 <LoopForever>
  ldr   r0, =_estack
 8002b78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002b84:	0800542c 	.word	0x0800542c
  ldr r2, =_sbss
 8002b88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002b8c:	20001164 	.word	0x20001164

08002b90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b90:	e7fe      	b.n	8002b90 <ADC1_COMP_IRQHandler>
	...

08002b94 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b98:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_Init+0x24>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_Init+0x24>)
 8002b9e:	2110      	movs	r1, #16
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	f000 f809 	bl	8002bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002baa:	f7ff fe4d 	bl	8002848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	40022000 	.word	0x40022000

08002bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_InitTick+0x5c>)
 8002bc6:	681c      	ldr	r4, [r3, #0]
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_InitTick+0x60>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	0019      	movs	r1, r3
 8002bce:	23fa      	movs	r3, #250	; 0xfa
 8002bd0:	0098      	lsls	r0, r3, #2
 8002bd2:	f7fd fa97 	bl	8000104 <__udivsi3>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	0019      	movs	r1, r3
 8002bda:	0020      	movs	r0, r4
 8002bdc:	f7fd fa92 	bl	8000104 <__udivsi3>
 8002be0:	0003      	movs	r3, r0
 8002be2:	0018      	movs	r0, r3
 8002be4:	f001 f90d 	bl	8003e02 <HAL_SYSTICK_Config>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e00f      	b.n	8002c10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d80b      	bhi.n	8002c0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	425b      	negs	r3, r3
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f001 f8da 	bl	8003db8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_InitTick+0x64>)
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b003      	add	sp, #12
 8002c16:	bd90      	pop	{r4, r7, pc}
 8002c18:	20000004 	.word	0x20000004
 8002c1c:	2000000c 	.word	0x2000000c
 8002c20:	20000008 	.word	0x20000008

08002c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_IncTick+0x1c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_IncTick+0x20>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	18d2      	adds	r2, r2, r3
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_IncTick+0x20>)
 8002c36:	601a      	str	r2, [r3, #0]
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	2000000c 	.word	0x2000000c
 8002c44:	20001160 	.word	0x20001160

08002c48 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <HAL_GetTick+0x10>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	20001160 	.word	0x20001160

08002c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c64:	f7ff fff0 	bl	8002c48 <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3301      	adds	r3, #1
 8002c74:	d005      	beq.n	8002c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_Delay+0x44>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	189b      	adds	r3, r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	f7ff ffe0 	bl	8002c48 <HAL_GetTick>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d8f7      	bhi.n	8002c84 <HAL_Delay+0x28>
  {
  }
}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b004      	add	sp, #16
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	2000000c 	.word	0x2000000c

08002ca4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cac:	230f      	movs	r3, #15
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e125      	b.n	8002f0e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2234      	movs	r2, #52	; 0x34
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7ff fdd8 	bl	8002890 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d000      	beq.n	8002cec <HAL_ADC_Init+0x48>
 8002cea:	e103      	b.n	8002ef4 <HAL_ADC_Init+0x250>
 8002cec:	230f      	movs	r3, #15
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d000      	beq.n	8002cf8 <HAL_ADC_Init+0x54>
 8002cf6:	e0fd      	b.n	8002ef4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2204      	movs	r2, #4
 8002d00:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002d02:	d000      	beq.n	8002d06 <HAL_ADC_Init+0x62>
 8002d04:	e0f6      	b.n	8002ef4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	4a83      	ldr	r2, [pc, #524]	; (8002f18 <HAL_ADC_Init+0x274>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2202      	movs	r2, #2
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d112      	bne.n	8002d4a <HAL_ADC_Init+0xa6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d009      	beq.n	8002d46 <HAL_ADC_Init+0xa2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_Init+0xa6>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_ADC_Init+0xa8>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d116      	bne.n	8002d7e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2218      	movs	r2, #24
 8002d58:	4393      	bics	r3, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	0899      	lsrs	r1, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4964      	ldr	r1, [pc, #400]	; (8002f1c <HAL_ADC_Init+0x278>)
 8002d8a:	400a      	ands	r2, r1
 8002d8c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7e1b      	ldrb	r3, [r3, #24]
 8002d92:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7e5b      	ldrb	r3, [r3, #25]
 8002d98:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d9a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7e9b      	ldrb	r3, [r3, #26]
 8002da0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002da2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d002      	beq.n	8002db2 <HAL_ADC_Init+0x10e>
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	015b      	lsls	r3, r3, #5
 8002db0:	e000      	b.n	8002db4 <HAL_ADC_Init+0x110>
 8002db2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002db4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002dba:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_Init+0x124>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	e000      	b.n	8002dca <HAL_ADC_Init+0x126>
 8002dc8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002dca:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2124      	movs	r1, #36	; 0x24
 8002dd0:	5c5b      	ldrb	r3, [r3, r1]
 8002dd2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002dd4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7edb      	ldrb	r3, [r3, #27]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d115      	bne.n	8002e10 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7e9b      	ldrb	r3, [r3, #26]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	0252      	lsls	r2, r2, #9
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	e00b      	b.n	8002e10 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e08:	2201      	movs	r2, #1
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	23c2      	movs	r3, #194	; 0xc2
 8002e16:	33ff      	adds	r3, #255	; 0xff
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d007      	beq.n	8002e2c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e24:	4313      	orrs	r3, r2
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68d9      	ldr	r1, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	055b      	lsls	r3, r3, #21
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d01b      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d017      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d013      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d00f      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d00b      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d007      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	2b06      	cmp	r3, #6
 8002e76:	d003      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	2b07      	cmp	r3, #7
 8002e7e:	d112      	bne.n	8002ea6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2107      	movs	r1, #7
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6959      	ldr	r1, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	2207      	movs	r2, #7
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <HAL_ADC_Init+0x27c>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d10b      	bne.n	8002ece <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ecc:	e01c      	b.n	8002f08 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	2212      	movs	r2, #18
 8002ed4:	4393      	bics	r3, r2
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002eea:	230f      	movs	r3, #15
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ef2:	e009      	b.n	8002f08 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	2210      	movs	r2, #16
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002f00:	230f      	movs	r3, #15
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f08:	230f      	movs	r3, #15
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	781b      	ldrb	r3, [r3, #0]
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b004      	add	sp, #16
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	fffffefd 	.word	0xfffffefd
 8002f1c:	fffe0219 	.word	0xfffe0219
 8002f20:	833fffe7 	.word	0x833fffe7

08002f24 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f2e:	230f      	movs	r3, #15
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	055b      	lsls	r3, r3, #21
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d011      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x46>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d00d      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x46>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d009      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x46>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d005      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x46>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d001      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x46>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2234      	movs	r2, #52	; 0x34
 8002f6e:	5c9b      	ldrb	r3, [r3, r2]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x54>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e0d0      	b.n	800311a <HAL_ADC_ConfigChannel+0x1f6>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2234      	movs	r2, #52	; 0x34
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2204      	movs	r2, #4
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d000      	beq.n	8002f8e <HAL_ADC_ConfigChannel+0x6a>
 8002f8c:	e0b4      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a64      	ldr	r2, [pc, #400]	; (8003124 <HAL_ADC_ConfigChannel+0x200>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d100      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x76>
 8002f98:	e082      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	055b      	lsls	r3, r3, #21
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d037      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d033      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d02f      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d02b      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d027      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d023      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	2b06      	cmp	r3, #6
 8002fea:	d01f      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	2b07      	cmp	r3, #7
 8002ff2:	d01b      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	2107      	movs	r1, #7
 8003000:	400b      	ands	r3, r1
 8003002:	429a      	cmp	r2, r3
 8003004:	d012      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2107      	movs	r1, #7
 8003012:	438a      	bics	r2, r1
 8003014:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6959      	ldr	r1, [r3, #20]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2207      	movs	r2, #7
 8003022:	401a      	ands	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b10      	cmp	r3, #16
 8003032:	d007      	beq.n	8003044 <HAL_ADC_ConfigChannel+0x120>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b11      	cmp	r3, #17
 800303a:	d003      	beq.n	8003044 <HAL_ADC_ConfigChannel+0x120>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b12      	cmp	r3, #18
 8003042:	d163      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003044:	4b38      	ldr	r3, [pc, #224]	; (8003128 <HAL_ADC_ConfigChannel+0x204>)
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b10      	cmp	r3, #16
 800304e:	d009      	beq.n	8003064 <HAL_ADC_ConfigChannel+0x140>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b11      	cmp	r3, #17
 8003056:	d102      	bne.n	800305e <HAL_ADC_ConfigChannel+0x13a>
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	03db      	lsls	r3, r3, #15
 800305c:	e004      	b.n	8003068 <HAL_ADC_ConfigChannel+0x144>
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	045b      	lsls	r3, r3, #17
 8003062:	e001      	b.n	8003068 <HAL_ADC_ConfigChannel+0x144>
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	041b      	lsls	r3, r3, #16
 8003068:	4a2f      	ldr	r2, [pc, #188]	; (8003128 <HAL_ADC_ConfigChannel+0x204>)
 800306a:	430b      	orrs	r3, r1
 800306c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b10      	cmp	r3, #16
 8003074:	d14a      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <HAL_ADC_ConfigChannel+0x208>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	492d      	ldr	r1, [pc, #180]	; (8003130 <HAL_ADC_ConfigChannel+0x20c>)
 800307c:	0018      	movs	r0, r3
 800307e:	f7fd f841 	bl	8000104 <__udivsi3>
 8003082:	0003      	movs	r3, r0
 8003084:	001a      	movs	r2, r3
 8003086:	0013      	movs	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	189b      	adds	r3, r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003090:	e002      	b.n	8003098 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3b01      	subs	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f9      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x16e>
 800309e:	e035      	b.n	800310c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2101      	movs	r1, #1
 80030ac:	4099      	lsls	r1, r3
 80030ae:	000b      	movs	r3, r1
 80030b0:	43d9      	mvns	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	400a      	ands	r2, r1
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b10      	cmp	r3, #16
 80030c0:	d007      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x1ae>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b11      	cmp	r3, #17
 80030c8:	d003      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x1ae>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b12      	cmp	r3, #18
 80030d0:	d11c      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_ADC_ConfigChannel+0x204>)
 80030d4:	6819      	ldr	r1, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d007      	beq.n	80030ee <HAL_ADC_ConfigChannel+0x1ca>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b11      	cmp	r3, #17
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x1c6>
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <HAL_ADC_ConfigChannel+0x210>)
 80030e8:	e002      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x1cc>
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <HAL_ADC_ConfigChannel+0x214>)
 80030ec:	e000      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x1cc>
 80030ee:	4b13      	ldr	r3, [pc, #76]	; (800313c <HAL_ADC_ConfigChannel+0x218>)
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_ADC_ConfigChannel+0x204>)
 80030f2:	400b      	ands	r3, r1
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e009      	b.n	800310c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	2220      	movs	r2, #32
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003104:	230f      	movs	r3, #15
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2234      	movs	r2, #52	; 0x34
 8003110:	2100      	movs	r1, #0
 8003112:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003114:	230f      	movs	r3, #15
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	781b      	ldrb	r3, [r3, #0]
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	00001001 	.word	0x00001001
 8003128:	40012708 	.word	0x40012708
 800312c:	20000004 	.word	0x20000004
 8003130:	000f4240 	.word	0x000f4240
 8003134:	ffbfffff 	.word	0xffbfffff
 8003138:	feffffff 	.word	0xfeffffff
 800313c:	ff7fffff 	.word	0xff7fffff

08003140 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0f0      	b.n	8003334 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	5c9b      	ldrb	r3, [r3, r2]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff fbdb 	bl	800291c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2101      	movs	r1, #1
 8003172:	430a      	orrs	r2, r1
 8003174:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003176:	f7ff fd67 	bl	8002c48 <HAL_GetTick>
 800317a:	0003      	movs	r3, r0
 800317c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800317e:	e013      	b.n	80031a8 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003180:	f7ff fd62 	bl	8002c48 <HAL_GetTick>
 8003184:	0002      	movs	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b0a      	cmp	r3, #10
 800318c:	d90c      	bls.n	80031a8 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	0292      	lsls	r2, r2, #10
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	2105      	movs	r1, #5
 80031a2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0c5      	b.n	8003334 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	4013      	ands	r3, r2
 80031b2:	d0e5      	beq.n	8003180 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2102      	movs	r1, #2
 80031c0:	438a      	bics	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c4:	f7ff fd40 	bl	8002c48 <HAL_GetTick>
 80031c8:	0003      	movs	r3, r0
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031cc:	e013      	b.n	80031f6 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031ce:	f7ff fd3b 	bl	8002c48 <HAL_GetTick>
 80031d2:	0002      	movs	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b0a      	cmp	r3, #10
 80031da:	d90c      	bls.n	80031f6 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	0292      	lsls	r2, r2, #10
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	2105      	movs	r1, #5
 80031f0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e09e      	b.n	8003334 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	4013      	ands	r3, r2
 8003200:	d1e5      	bne.n	80031ce <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7e1b      	ldrb	r3, [r3, #24]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e007      	b.n	800322c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	438a      	bics	r2, r1
 800322a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7e5b      	ldrb	r3, [r3, #25]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d108      	bne.n	8003246 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2140      	movs	r1, #64	; 0x40
 8003240:	430a      	orrs	r2, r1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e007      	b.n	8003256 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	438a      	bics	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7e9b      	ldrb	r3, [r3, #26]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d108      	bne.n	8003270 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2120      	movs	r1, #32
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e007      	b.n	8003280 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2120      	movs	r1, #32
 800327c:	438a      	bics	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7edb      	ldrb	r3, [r3, #27]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d108      	bne.n	800329a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2110      	movs	r1, #16
 8003294:	438a      	bics	r2, r1
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e007      	b.n	80032aa <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2110      	movs	r1, #16
 80032a6:	430a      	orrs	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7f1b      	ldrb	r3, [r3, #28]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2108      	movs	r1, #8
 80032be:	430a      	orrs	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e007      	b.n	80032d4 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2108      	movs	r1, #8
 80032d0:	438a      	bics	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7f5b      	ldrb	r3, [r3, #29]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d108      	bne.n	80032ee <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2104      	movs	r1, #4
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e007      	b.n	80032fe <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2104      	movs	r1, #4
 80032fa:	438a      	bics	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	431a      	orrs	r2, r3
 8003314:	0011      	movs	r1, r2
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	1e5a      	subs	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b004      	add	sp, #16
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800334c:	2013      	movs	r0, #19
 800334e:	183b      	adds	r3, r7, r0
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	2120      	movs	r1, #32
 8003354:	5c52      	ldrb	r2, [r2, r1]
 8003356:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8003358:	0002      	movs	r2, r0
 800335a:	18bb      	adds	r3, r7, r2
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d004      	beq.n	800336c <HAL_CAN_ConfigFilter+0x30>
 8003362:	18bb      	adds	r3, r7, r2
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d000      	beq.n	800336c <HAL_CAN_ConfigFilter+0x30>
 800336a:	e0cd      	b.n	8003508 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	58d3      	ldr	r3, [r2, r3]
 8003374:	2201      	movs	r2, #1
 8003376:	431a      	orrs	r2, r3
 8003378:	0011      	movs	r1, r2
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	221f      	movs	r2, #31
 8003388:	4013      	ands	r3, r2
 800338a:	2201      	movs	r2, #1
 800338c:	409a      	lsls	r2, r3
 800338e:	0013      	movs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	2387      	movs	r3, #135	; 0x87
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	58d3      	ldr	r3, [r2, r3]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	43d2      	mvns	r2, r2
 800339e:	401a      	ands	r2, r3
 80033a0:	0011      	movs	r1, r2
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	2387      	movs	r3, #135	; 0x87
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d129      	bne.n	8003406 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	2383      	movs	r3, #131	; 0x83
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	58d3      	ldr	r3, [r2, r3]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	43d2      	mvns	r2, r2
 80033be:	401a      	ands	r2, r3
 80033c0:	0011      	movs	r1, r2
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	2383      	movs	r3, #131	; 0x83
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033dc:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3248      	adds	r2, #72	; 0x48
 80033e2:	00d2      	lsls	r2, r2, #3
 80033e4:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033fa:	6979      	ldr	r1, [r7, #20]
 80033fc:	3348      	adds	r3, #72	; 0x48
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	18cb      	adds	r3, r1, r3
 8003402:	3304      	adds	r3, #4
 8003404:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d128      	bne.n	8003460 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	2383      	movs	r3, #131	; 0x83
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	58d2      	ldr	r2, [r2, r3]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	431a      	orrs	r2, r3
 800341a:	0011      	movs	r1, r2
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	2383      	movs	r3, #131	; 0x83
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	041b      	lsls	r3, r3, #16
 8003430:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003436:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3248      	adds	r2, #72	; 0x48
 800343c:	00d2      	lsls	r2, r2, #3
 800343e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003452:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003454:	6979      	ldr	r1, [r7, #20]
 8003456:	3348      	adds	r3, #72	; 0x48
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	18cb      	adds	r3, r1, r3
 800345c:	3304      	adds	r3, #4
 800345e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10c      	bne.n	8003482 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	2381      	movs	r3, #129	; 0x81
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	58d3      	ldr	r3, [r2, r3]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	43d2      	mvns	r2, r2
 8003474:	401a      	ands	r2, r3
 8003476:	0011      	movs	r1, r2
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	2381      	movs	r3, #129	; 0x81
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	50d1      	str	r1, [r2, r3]
 8003480:	e00a      	b.n	8003498 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	2381      	movs	r3, #129	; 0x81
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	58d2      	ldr	r2, [r2, r3]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	431a      	orrs	r2, r3
 800348e:	0011      	movs	r1, r2
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	2381      	movs	r3, #129	; 0x81
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10c      	bne.n	80034ba <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	2385      	movs	r3, #133	; 0x85
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	58d3      	ldr	r3, [r2, r3]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	43d2      	mvns	r2, r2
 80034ac:	401a      	ands	r2, r3
 80034ae:	0011      	movs	r1, r2
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	2385      	movs	r3, #133	; 0x85
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	50d1      	str	r1, [r2, r3]
 80034b8:	e00a      	b.n	80034d0 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	2385      	movs	r3, #133	; 0x85
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	58d2      	ldr	r2, [r2, r3]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	0011      	movs	r1, r2
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	2385      	movs	r3, #133	; 0x85
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10a      	bne.n	80034ee <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	2387      	movs	r3, #135	; 0x87
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	58d2      	ldr	r2, [r2, r3]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	0011      	movs	r1, r2
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	2387      	movs	r3, #135	; 0x87
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	58d3      	ldr	r3, [r2, r3]
 80034f6:	2201      	movs	r2, #1
 80034f8:	4393      	bics	r3, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	e007      	b.n	8003518 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	02d2      	lsls	r2, r2, #11
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
  }
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b006      	add	sp, #24
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	5c9b      	ldrb	r3, [r3, r2]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	d12f      	bne.n	8003594 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	2102      	movs	r1, #2
 800353a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2101      	movs	r1, #1
 8003548:	438a      	bics	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800354c:	f7ff fb7c 	bl	8002c48 <HAL_GetTick>
 8003550:	0003      	movs	r3, r0
 8003552:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003554:	e013      	b.n	800357e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003556:	f7ff fb77 	bl	8002c48 <HAL_GetTick>
 800355a:	0002      	movs	r2, r0
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b0a      	cmp	r3, #10
 8003562:	d90c      	bls.n	800357e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2280      	movs	r2, #128	; 0x80
 800356a:	0292      	lsls	r2, r2, #10
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	2105      	movs	r1, #5
 8003578:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e012      	b.n	80035a4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	4013      	ands	r3, r2
 8003588:	d1e5      	bne.n	8003556 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	e007      	b.n	80035a4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	2280      	movs	r2, #128	; 0x80
 800359a:	0312      	lsls	r2, r2, #12
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
  }
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b004      	add	sp, #16
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035ba:	2017      	movs	r0, #23
 80035bc:	183b      	adds	r3, r7, r0
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	2120      	movs	r1, #32
 80035c2:	5c52      	ldrb	r2, [r2, r1]
 80035c4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80035c6:	0002      	movs	r2, r0
 80035c8:	18bb      	adds	r3, r7, r2
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d004      	beq.n	80035da <HAL_CAN_GetRxMessage+0x2e>
 80035d0:	18bb      	adds	r3, r7, r2
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d000      	beq.n	80035da <HAL_CAN_GetRxMessage+0x2e>
 80035d8:	e0f8      	b.n	80037cc <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10e      	bne.n	80035fe <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2203      	movs	r2, #3
 80035e8:	4013      	ands	r3, r2
 80035ea:	d117      	bne.n	800361c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	2280      	movs	r2, #128	; 0x80
 80035f2:	0392      	lsls	r2, r2, #14
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0ee      	b.n	80037dc <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2203      	movs	r2, #3
 8003606:	4013      	ands	r3, r2
 8003608:	d108      	bne.n	800361c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	2280      	movs	r2, #128	; 0x80
 8003610:	0392      	lsls	r2, r2, #14
 8003612:	431a      	orrs	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0df      	b.n	80037dc <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	321b      	adds	r2, #27
 8003624:	0112      	lsls	r2, r2, #4
 8003626:	58d3      	ldr	r3, [r2, r3]
 8003628:	2204      	movs	r2, #4
 800362a:	401a      	ands	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	321b      	adds	r2, #27
 8003640:	0112      	lsls	r2, r2, #4
 8003642:	58d3      	ldr	r3, [r2, r3]
 8003644:	0d5b      	lsrs	r3, r3, #21
 8003646:	055b      	lsls	r3, r3, #21
 8003648:	0d5a      	lsrs	r2, r3, #21
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e00a      	b.n	8003666 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	321b      	adds	r2, #27
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	58d3      	ldr	r3, [r2, r3]
 800365c:	08db      	lsrs	r3, r3, #3
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	08da      	lsrs	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	321b      	adds	r2, #27
 800366e:	0112      	lsls	r2, r2, #4
 8003670:	58d3      	ldr	r3, [r2, r3]
 8003672:	2202      	movs	r2, #2
 8003674:	401a      	ands	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	331b      	adds	r3, #27
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	18d3      	adds	r3, r2, r3
 8003686:	3304      	adds	r3, #4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	220f      	movs	r2, #15
 800368c:	401a      	ands	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	331b      	adds	r3, #27
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	18d3      	adds	r3, r2, r3
 800369e:	3304      	adds	r3, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	22ff      	movs	r2, #255	; 0xff
 80036a6:	401a      	ands	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	331b      	adds	r3, #27
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	18d3      	adds	r3, r2, r3
 80036b8:	3304      	adds	r3, #4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	0c1a      	lsrs	r2, r3, #16
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	23dc      	movs	r3, #220	; 0xdc
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	0112      	lsls	r2, r2, #4
 80036d2:	188a      	adds	r2, r1, r2
 80036d4:	18d3      	adds	r3, r2, r3
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	23dc      	movs	r3, #220	; 0xdc
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	0112      	lsls	r2, r2, #4
 80036ea:	188a      	adds	r2, r1, r2
 80036ec:	18d3      	adds	r3, r2, r3
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	0a1a      	lsrs	r2, r3, #8
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6819      	ldr	r1, [r3, #0]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	23dc      	movs	r3, #220	; 0xdc
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	0112      	lsls	r2, r2, #4
 8003706:	188a      	adds	r2, r1, r2
 8003708:	18d3      	adds	r3, r2, r3
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	0c1a      	lsrs	r2, r3, #16
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	3302      	adds	r3, #2
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	23dc      	movs	r3, #220	; 0xdc
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	0112      	lsls	r2, r2, #4
 8003722:	188a      	adds	r2, r1, r2
 8003724:	18d3      	adds	r3, r2, r3
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0e1a      	lsrs	r2, r3, #24
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	3303      	adds	r3, #3
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	23de      	movs	r3, #222	; 0xde
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	0112      	lsls	r2, r2, #4
 800373e:	188a      	adds	r2, r1, r2
 8003740:	18d3      	adds	r3, r2, r3
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	3304      	adds	r3, #4
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	23de      	movs	r3, #222	; 0xde
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	0112      	lsls	r2, r2, #4
 8003758:	188a      	adds	r2, r1, r2
 800375a:	18d3      	adds	r3, r2, r3
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	0a1a      	lsrs	r2, r3, #8
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	3305      	adds	r3, #5
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6819      	ldr	r1, [r3, #0]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	23de      	movs	r3, #222	; 0xde
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	188a      	adds	r2, r1, r2
 8003776:	18d3      	adds	r3, r2, r3
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0c1a      	lsrs	r2, r3, #16
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	3306      	adds	r3, #6
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6819      	ldr	r1, [r3, #0]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	23de      	movs	r3, #222	; 0xde
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	0112      	lsls	r2, r2, #4
 8003790:	188a      	adds	r2, r1, r2
 8003792:	18d3      	adds	r3, r2, r3
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	0e1a      	lsrs	r2, r3, #24
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	3307      	adds	r3, #7
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d108      	bne.n	80037b8 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2120      	movs	r1, #32
 80037b2:	430a      	orrs	r2, r1
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	e007      	b.n	80037c8 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2120      	movs	r1, #32
 80037c4:	430a      	orrs	r2, r1
 80037c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e007      	b.n	80037dc <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	02d2      	lsls	r2, r2, #11
 80037d4:	431a      	orrs	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
  }
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b006      	add	sp, #24
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037ee:	200f      	movs	r0, #15
 80037f0:	183b      	adds	r3, r7, r0
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	2120      	movs	r1, #32
 80037f6:	5c52      	ldrb	r2, [r2, r1]
 80037f8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80037fa:	0002      	movs	r2, r0
 80037fc:	18bb      	adds	r3, r7, r2
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d003      	beq.n	800380c <HAL_CAN_ActivateNotification+0x28>
 8003804:	18bb      	adds	r3, r7, r2
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d109      	bne.n	8003820 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6959      	ldr	r1, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e007      	b.n	8003830 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	2280      	movs	r2, #128	; 0x80
 8003826:	02d2      	lsls	r2, r2, #11
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
  }
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	b004      	add	sp, #16
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003840:	2300      	movs	r3, #0
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	2201      	movs	r2, #1
 8003878:	4013      	ands	r3, r2
 800387a:	d100      	bne.n	800387e <HAL_CAN_IRQHandler+0x46>
 800387c:	e084      	b.n	8003988 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2201      	movs	r2, #1
 8003882:	4013      	ands	r3, r2
 8003884:	d024      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2201      	movs	r2, #1
 800388c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2202      	movs	r2, #2
 8003892:	4013      	ands	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f000 f981 	bl	8003ba0 <HAL_CAN_TxMailbox0CompleteCallback>
 800389e:	e017      	b.n	80038d0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2204      	movs	r2, #4
 80038a4:	4013      	ands	r3, r2
 80038a6:	d005      	beq.n	80038b4 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	4313      	orrs	r3, r2
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
 80038b2:	e00d      	b.n	80038d0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2208      	movs	r2, #8
 80038b8:	4013      	ands	r3, r2
 80038ba:	d005      	beq.n	80038c8 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	0152      	lsls	r2, r2, #5
 80038c2:	4313      	orrs	r3, r2
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
 80038c6:	e003      	b.n	80038d0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 f980 	bl	8003bd0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	d028      	beq.n	800392c <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	0052      	lsls	r2, r2, #1
 80038e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4013      	ands	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f000 f95d 	bl	8003bb0 <HAL_CAN_TxMailbox1CompleteCallback>
 80038f6:	e019      	b.n	800392c <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4013      	ands	r3, r2
 8003900:	d005      	beq.n	800390e <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	2280      	movs	r2, #128	; 0x80
 8003906:	0192      	lsls	r2, r2, #6
 8003908:	4313      	orrs	r3, r2
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
 800390c:	e00e      	b.n	800392c <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	4013      	ands	r3, r2
 8003916:	d005      	beq.n	8003924 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	2280      	movs	r2, #128	; 0x80
 800391c:	01d2      	lsls	r2, r2, #7
 800391e:	4313      	orrs	r3, r2
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
 8003922:	e003      	b.n	800392c <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	0018      	movs	r0, r3
 8003928:	f000 f95a 	bl	8003be0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	025b      	lsls	r3, r3, #9
 8003932:	4013      	ands	r3, r2
 8003934:	d028      	beq.n	8003988 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2280      	movs	r2, #128	; 0x80
 800393c:	0252      	lsls	r2, r2, #9
 800393e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	029b      	lsls	r3, r3, #10
 8003946:	4013      	ands	r3, r2
 8003948:	d004      	beq.n	8003954 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	0018      	movs	r0, r3
 800394e:	f000 f937 	bl	8003bc0 <HAL_CAN_TxMailbox2CompleteCallback>
 8003952:	e019      	b.n	8003988 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	02db      	lsls	r3, r3, #11
 800395a:	4013      	ands	r3, r2
 800395c:	d005      	beq.n	800396a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	2280      	movs	r2, #128	; 0x80
 8003962:	0212      	lsls	r2, r2, #8
 8003964:	4313      	orrs	r3, r2
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	e00e      	b.n	8003988 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	031b      	lsls	r3, r3, #12
 8003970:	4013      	ands	r3, r2
 8003972:	d005      	beq.n	8003980 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	0252      	lsls	r2, r2, #9
 800397a:	4313      	orrs	r3, r2
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
 800397e:	e003      	b.n	8003988 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	0018      	movs	r0, r3
 8003984:	f000 f934 	bl	8003bf0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	2208      	movs	r2, #8
 800398c:	4013      	ands	r3, r2
 800398e:	d00c      	beq.n	80039aa <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2210      	movs	r2, #16
 8003994:	4013      	ands	r3, r2
 8003996:	d008      	beq.n	80039aa <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	0092      	lsls	r2, r2, #2
 800399e:	4313      	orrs	r3, r2
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2210      	movs	r2, #16
 80039a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	2204      	movs	r2, #4
 80039ae:	4013      	ands	r3, r2
 80039b0:	d00b      	beq.n	80039ca <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2208      	movs	r2, #8
 80039b6:	4013      	ands	r3, r2
 80039b8:	d007      	beq.n	80039ca <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2208      	movs	r2, #8
 80039c0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	0018      	movs	r0, r3
 80039c6:	f000 f91b 	bl	8003c00 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	2202      	movs	r2, #2
 80039ce:	4013      	ands	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2203      	movs	r2, #3
 80039da:	4013      	ands	r3, r2
 80039dc:	d003      	beq.n	80039e6 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7fe fc17 	bl	8002214 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	2240      	movs	r2, #64	; 0x40
 80039ea:	4013      	ands	r3, r2
 80039ec:	d00c      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2210      	movs	r2, #16
 80039f2:	4013      	ands	r3, r2
 80039f4:	d008      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	2280      	movs	r2, #128	; 0x80
 80039fa:	00d2      	lsls	r2, r2, #3
 80039fc:	4313      	orrs	r3, r2
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2210      	movs	r2, #16
 8003a06:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2208      	movs	r2, #8
 8003a14:	4013      	ands	r3, r2
 8003a16:	d007      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 f8fc 	bl	8003c20 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	2210      	movs	r2, #16
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2203      	movs	r2, #3
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d003      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f000 f8e6 	bl	8003c10 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	029b      	lsls	r3, r3, #10
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	2210      	movs	r2, #16
 8003a52:	4013      	ands	r3, r2
 8003a54:	d007      	beq.n	8003a66 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2210      	movs	r2, #16
 8003a5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f000 f8e5 	bl	8003c30 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	025b      	lsls	r3, r3, #9
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d00b      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2208      	movs	r2, #8
 8003a74:	4013      	ands	r3, r2
 8003a76:	d007      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 f8dc 	bl	8003c40 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d100      	bne.n	8003a94 <HAL_CAN_IRQHandler+0x25c>
 8003a92:	e074      	b.n	8003b7e <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2204      	movs	r2, #4
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d100      	bne.n	8003a9e <HAL_CAN_IRQHandler+0x266>
 8003a9c:	e06b      	b.n	8003b76 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a9e:	6a3a      	ldr	r2, [r7, #32]
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d007      	beq.n	8003ab8 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003aae:	d003      	beq.n	8003ab8 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ab8:	6a3a      	ldr	r2, [r7, #32]
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ac8:	d003      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	2202      	movs	r2, #2
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ad2:	6a3a      	ldr	r2, [r7, #32]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d007      	beq.n	8003aec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ae2:	d003      	beq.n	8003aec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003aec:	6a3a      	ldr	r2, [r7, #32]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	4013      	ands	r3, r2
 8003af4:	d03f      	beq.n	8003b76 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2270      	movs	r2, #112	; 0x70
 8003afa:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003afc:	d03b      	beq.n	8003b76 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2270      	movs	r2, #112	; 0x70
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b60      	cmp	r3, #96	; 0x60
 8003b06:	d027      	beq.n	8003b58 <HAL_CAN_IRQHandler+0x320>
 8003b08:	d82c      	bhi.n	8003b64 <HAL_CAN_IRQHandler+0x32c>
 8003b0a:	2b50      	cmp	r3, #80	; 0x50
 8003b0c:	d01f      	beq.n	8003b4e <HAL_CAN_IRQHandler+0x316>
 8003b0e:	d829      	bhi.n	8003b64 <HAL_CAN_IRQHandler+0x32c>
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d017      	beq.n	8003b44 <HAL_CAN_IRQHandler+0x30c>
 8003b14:	d826      	bhi.n	8003b64 <HAL_CAN_IRQHandler+0x32c>
 8003b16:	2b30      	cmp	r3, #48	; 0x30
 8003b18:	d00f      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x302>
 8003b1a:	d823      	bhi.n	8003b64 <HAL_CAN_IRQHandler+0x32c>
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d002      	beq.n	8003b26 <HAL_CAN_IRQHandler+0x2ee>
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d005      	beq.n	8003b30 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b24:	e01e      	b.n	8003b64 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	2208      	movs	r2, #8
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b2e:	e01a      	b.n	8003b66 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	2210      	movs	r2, #16
 8003b34:	4313      	orrs	r3, r2
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b38:	e015      	b.n	8003b66 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b42:	e010      	b.n	8003b66 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	2240      	movs	r2, #64	; 0x40
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b4c:	e00b      	b.n	8003b66 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	2280      	movs	r2, #128	; 0x80
 8003b52:	4313      	orrs	r3, r2
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b56:	e006      	b.n	8003b66 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	0052      	lsls	r2, r2, #1
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b62:	e000      	b.n	8003b66 <HAL_CAN_IRQHandler+0x32e>
            break;
 8003b64:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2170      	movs	r1, #112	; 0x70
 8003b72:	438a      	bics	r2, r1
 8003b74:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 f85c 	bl	8003c50 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b00a      	add	sp, #40	; 0x28
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b002      	add	sp, #8
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b002      	add	sp, #8
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b002      	add	sp, #8
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b002      	add	sp, #8
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b002      	add	sp, #8
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b002      	add	sp, #8
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b002      	add	sp, #8
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	0002      	movs	r2, r0
 8003c68:	1dfb      	adds	r3, r7, #7
 8003c6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c6c:	1dfb      	adds	r3, r7, #7
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b7f      	cmp	r3, #127	; 0x7f
 8003c72:	d809      	bhi.n	8003c88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c74:	1dfb      	adds	r3, r7, #7
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	001a      	movs	r2, r3
 8003c7a:	231f      	movs	r3, #31
 8003c7c:	401a      	ands	r2, r3
 8003c7e:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <__NVIC_EnableIRQ+0x30>)
 8003c80:	2101      	movs	r1, #1
 8003c82:	4091      	lsls	r1, r2
 8003c84:	000a      	movs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
  }
}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	e000e100 	.word	0xe000e100

08003c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	0002      	movs	r2, r0
 8003c9c:	6039      	str	r1, [r7, #0]
 8003c9e:	1dfb      	adds	r3, r7, #7
 8003ca0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ca2:	1dfb      	adds	r3, r7, #7
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ca8:	d828      	bhi.n	8003cfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003caa:	4a2f      	ldr	r2, [pc, #188]	; (8003d68 <__NVIC_SetPriority+0xd4>)
 8003cac:	1dfb      	adds	r3, r7, #7
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b25b      	sxtb	r3, r3
 8003cb2:	089b      	lsrs	r3, r3, #2
 8003cb4:	33c0      	adds	r3, #192	; 0xc0
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	589b      	ldr	r3, [r3, r2]
 8003cba:	1dfa      	adds	r2, r7, #7
 8003cbc:	7812      	ldrb	r2, [r2, #0]
 8003cbe:	0011      	movs	r1, r2
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	00d2      	lsls	r2, r2, #3
 8003cc6:	21ff      	movs	r1, #255	; 0xff
 8003cc8:	4091      	lsls	r1, r2
 8003cca:	000a      	movs	r2, r1
 8003ccc:	43d2      	mvns	r2, r2
 8003cce:	401a      	ands	r2, r3
 8003cd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	019b      	lsls	r3, r3, #6
 8003cd6:	22ff      	movs	r2, #255	; 0xff
 8003cd8:	401a      	ands	r2, r3
 8003cda:	1dfb      	adds	r3, r7, #7
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	4003      	ands	r3, r0
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ce8:	481f      	ldr	r0, [pc, #124]	; (8003d68 <__NVIC_SetPriority+0xd4>)
 8003cea:	1dfb      	adds	r3, r7, #7
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	b25b      	sxtb	r3, r3
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	33c0      	adds	r3, #192	; 0xc0
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003cfa:	e031      	b.n	8003d60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cfc:	4a1b      	ldr	r2, [pc, #108]	; (8003d6c <__NVIC_SetPriority+0xd8>)
 8003cfe:	1dfb      	adds	r3, r7, #7
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	0019      	movs	r1, r3
 8003d04:	230f      	movs	r3, #15
 8003d06:	400b      	ands	r3, r1
 8003d08:	3b08      	subs	r3, #8
 8003d0a:	089b      	lsrs	r3, r3, #2
 8003d0c:	3306      	adds	r3, #6
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	18d3      	adds	r3, r2, r3
 8003d12:	3304      	adds	r3, #4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	1dfa      	adds	r2, r7, #7
 8003d18:	7812      	ldrb	r2, [r2, #0]
 8003d1a:	0011      	movs	r1, r2
 8003d1c:	2203      	movs	r2, #3
 8003d1e:	400a      	ands	r2, r1
 8003d20:	00d2      	lsls	r2, r2, #3
 8003d22:	21ff      	movs	r1, #255	; 0xff
 8003d24:	4091      	lsls	r1, r2
 8003d26:	000a      	movs	r2, r1
 8003d28:	43d2      	mvns	r2, r2
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	019b      	lsls	r3, r3, #6
 8003d32:	22ff      	movs	r2, #255	; 0xff
 8003d34:	401a      	ands	r2, r3
 8003d36:	1dfb      	adds	r3, r7, #7
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	4003      	ands	r3, r0
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d44:	4809      	ldr	r0, [pc, #36]	; (8003d6c <__NVIC_SetPriority+0xd8>)
 8003d46:	1dfb      	adds	r3, r7, #7
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	001c      	movs	r4, r3
 8003d4c:	230f      	movs	r3, #15
 8003d4e:	4023      	ands	r3, r4
 8003d50:	3b08      	subs	r3, #8
 8003d52:	089b      	lsrs	r3, r3, #2
 8003d54:	430a      	orrs	r2, r1
 8003d56:	3306      	adds	r3, #6
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	18c3      	adds	r3, r0, r3
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	601a      	str	r2, [r3, #0]
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b003      	add	sp, #12
 8003d66:	bd90      	pop	{r4, r7, pc}
 8003d68:	e000e100 	.word	0xe000e100
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	1e5a      	subs	r2, r3, #1
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	045b      	lsls	r3, r3, #17
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d301      	bcc.n	8003d88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d84:	2301      	movs	r3, #1
 8003d86:	e010      	b.n	8003daa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <SysTick_Config+0x44>)
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	3a01      	subs	r2, #1
 8003d8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d90:	2301      	movs	r3, #1
 8003d92:	425b      	negs	r3, r3
 8003d94:	2103      	movs	r1, #3
 8003d96:	0018      	movs	r0, r3
 8003d98:	f7ff ff7c 	bl	8003c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <SysTick_Config+0x44>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da2:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <SysTick_Config+0x44>)
 8003da4:	2207      	movs	r2, #7
 8003da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b002      	add	sp, #8
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	e000e010 	.word	0xe000e010

08003db8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	210f      	movs	r1, #15
 8003dc4:	187b      	adds	r3, r7, r1
 8003dc6:	1c02      	adds	r2, r0, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	187b      	adds	r3, r7, r1
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	b25b      	sxtb	r3, r3
 8003dd2:	0011      	movs	r1, r2
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7ff ff5d 	bl	8003c94 <__NVIC_SetPriority>
}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b004      	add	sp, #16
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	0002      	movs	r2, r0
 8003dea:	1dfb      	adds	r3, r7, #7
 8003dec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dee:	1dfb      	adds	r3, r7, #7
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7ff ff33 	bl	8003c60 <__NVIC_EnableIRQ>
}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7ff ffaf 	bl	8003d70 <SysTick_Config>
 8003e12:	0003      	movs	r3, r0
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2a:	e155      	b.n	80040d8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2101      	movs	r1, #1
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4091      	lsls	r1, r2
 8003e36:	000a      	movs	r2, r1
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d100      	bne.n	8003e44 <HAL_GPIO_Init+0x28>
 8003e42:	e146      	b.n	80040d2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2203      	movs	r2, #3
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d005      	beq.n	8003e5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2203      	movs	r2, #3
 8003e56:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d130      	bne.n	8003ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	2203      	movs	r2, #3
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	0013      	movs	r3, r2
 8003e6c:	43da      	mvns	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	0013      	movs	r3, r2
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e92:	2201      	movs	r2, #1
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	409a      	lsls	r2, r3
 8003e98:	0013      	movs	r3, r2
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	401a      	ands	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	0013      	movs	r3, r2
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d017      	beq.n	8003efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	0013      	movs	r3, r2
 8003eda:	43da      	mvns	r2, r3
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	409a      	lsls	r2, r3
 8003eec:	0013      	movs	r3, r2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2203      	movs	r2, #3
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d123      	bne.n	8003f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	08da      	lsrs	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3208      	adds	r2, #8
 8003f0e:	0092      	lsls	r2, r2, #2
 8003f10:	58d3      	ldr	r3, [r2, r3]
 8003f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2207      	movs	r2, #7
 8003f18:	4013      	ands	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	220f      	movs	r2, #15
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	0013      	movs	r3, r2
 8003f22:	43da      	mvns	r2, r3
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4013      	ands	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2107      	movs	r1, #7
 8003f32:	400b      	ands	r3, r1
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	409a      	lsls	r2, r3
 8003f38:	0013      	movs	r3, r2
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	08da      	lsrs	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3208      	adds	r2, #8
 8003f48:	0092      	lsls	r2, r2, #2
 8003f4a:	6939      	ldr	r1, [r7, #16]
 8003f4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	2203      	movs	r2, #3
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	0013      	movs	r3, r2
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	409a      	lsls	r2, r3
 8003f74:	0013      	movs	r3, r2
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	23c0      	movs	r3, #192	; 0xc0
 8003f88:	029b      	lsls	r3, r3, #10
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d100      	bne.n	8003f90 <HAL_GPIO_Init+0x174>
 8003f8e:	e0a0      	b.n	80040d2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f90:	4b57      	ldr	r3, [pc, #348]	; (80040f0 <HAL_GPIO_Init+0x2d4>)
 8003f92:	699a      	ldr	r2, [r3, #24]
 8003f94:	4b56      	ldr	r3, [pc, #344]	; (80040f0 <HAL_GPIO_Init+0x2d4>)
 8003f96:	2101      	movs	r1, #1
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	619a      	str	r2, [r3, #24]
 8003f9c:	4b54      	ldr	r3, [pc, #336]	; (80040f0 <HAL_GPIO_Init+0x2d4>)
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fa8:	4a52      	ldr	r2, [pc, #328]	; (80040f4 <HAL_GPIO_Init+0x2d8>)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	089b      	lsrs	r3, r3, #2
 8003fae:	3302      	adds	r3, #2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	589b      	ldr	r3, [r3, r2]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	4013      	ands	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	220f      	movs	r2, #15
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	0013      	movs	r3, r2
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	2390      	movs	r3, #144	; 0x90
 8003fd0:	05db      	lsls	r3, r3, #23
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d019      	beq.n	800400a <HAL_GPIO_Init+0x1ee>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a47      	ldr	r2, [pc, #284]	; (80040f8 <HAL_GPIO_Init+0x2dc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_GPIO_Init+0x1ea>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a46      	ldr	r2, [pc, #280]	; (80040fc <HAL_GPIO_Init+0x2e0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00d      	beq.n	8004002 <HAL_GPIO_Init+0x1e6>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a45      	ldr	r2, [pc, #276]	; (8004100 <HAL_GPIO_Init+0x2e4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d007      	beq.n	8003ffe <HAL_GPIO_Init+0x1e2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a44      	ldr	r2, [pc, #272]	; (8004104 <HAL_GPIO_Init+0x2e8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d101      	bne.n	8003ffa <HAL_GPIO_Init+0x1de>
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	e008      	b.n	800400c <HAL_GPIO_Init+0x1f0>
 8003ffa:	2305      	movs	r3, #5
 8003ffc:	e006      	b.n	800400c <HAL_GPIO_Init+0x1f0>
 8003ffe:	2303      	movs	r3, #3
 8004000:	e004      	b.n	800400c <HAL_GPIO_Init+0x1f0>
 8004002:	2302      	movs	r3, #2
 8004004:	e002      	b.n	800400c <HAL_GPIO_Init+0x1f0>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_GPIO_Init+0x1f0>
 800400a:	2300      	movs	r3, #0
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	2103      	movs	r1, #3
 8004010:	400a      	ands	r2, r1
 8004012:	0092      	lsls	r2, r2, #2
 8004014:	4093      	lsls	r3, r2
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800401c:	4935      	ldr	r1, [pc, #212]	; (80040f4 <HAL_GPIO_Init+0x2d8>)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	3302      	adds	r3, #2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800402a:	4b37      	ldr	r3, [pc, #220]	; (8004108 <HAL_GPIO_Init+0x2ec>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	43da      	mvns	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4013      	ands	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	025b      	lsls	r3, r3, #9
 8004042:	4013      	ands	r3, r2
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800404e:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <HAL_GPIO_Init+0x2ec>)
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004054:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <HAL_GPIO_Init+0x2ec>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	43da      	mvns	r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4013      	ands	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	029b      	lsls	r3, r3, #10
 800406c:	4013      	ands	r3, r2
 800406e:	d003      	beq.n	8004078 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004078:	4b23      	ldr	r3, [pc, #140]	; (8004108 <HAL_GPIO_Init+0x2ec>)
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800407e:	4b22      	ldr	r3, [pc, #136]	; (8004108 <HAL_GPIO_Init+0x2ec>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	43da      	mvns	r2, r3
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4013      	ands	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	2380      	movs	r3, #128	; 0x80
 8004094:	035b      	lsls	r3, r3, #13
 8004096:	4013      	ands	r3, r2
 8004098:	d003      	beq.n	80040a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80040a2:	4b19      	ldr	r3, [pc, #100]	; (8004108 <HAL_GPIO_Init+0x2ec>)
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80040a8:	4b17      	ldr	r3, [pc, #92]	; (8004108 <HAL_GPIO_Init+0x2ec>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	43da      	mvns	r2, r3
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4013      	ands	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	039b      	lsls	r3, r3, #14
 80040c0:	4013      	ands	r3, r2
 80040c2:	d003      	beq.n	80040cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80040cc:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <HAL_GPIO_Init+0x2ec>)
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	3301      	adds	r3, #1
 80040d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	40da      	lsrs	r2, r3
 80040e0:	1e13      	subs	r3, r2, #0
 80040e2:	d000      	beq.n	80040e6 <HAL_GPIO_Init+0x2ca>
 80040e4:	e6a2      	b.n	8003e2c <HAL_GPIO_Init+0x10>
  } 
}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b006      	add	sp, #24
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40021000 	.word	0x40021000
 80040f4:	40010000 	.word	0x40010000
 80040f8:	48000400 	.word	0x48000400
 80040fc:	48000800 	.word	0x48000800
 8004100:	48000c00 	.word	0x48000c00
 8004104:	48001000 	.word	0x48001000
 8004108:	40010400 	.word	0x40010400

0800410c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	0008      	movs	r0, r1
 8004116:	0011      	movs	r1, r2
 8004118:	1cbb      	adds	r3, r7, #2
 800411a:	1c02      	adds	r2, r0, #0
 800411c:	801a      	strh	r2, [r3, #0]
 800411e:	1c7b      	adds	r3, r7, #1
 8004120:	1c0a      	adds	r2, r1, #0
 8004122:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004124:	1c7b      	adds	r3, r7, #1
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800412c:	1cbb      	adds	r3, r7, #2
 800412e:	881a      	ldrh	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004134:	e003      	b.n	800413e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004136:	1cbb      	adds	r3, r7, #2
 8004138:	881a      	ldrh	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	b002      	add	sp, #8
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	0002      	movs	r2, r0
 8004150:	1dbb      	adds	r3, r7, #6
 8004152:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	1dba      	adds	r2, r7, #6
 800415a:	8812      	ldrh	r2, [r2, #0]
 800415c:	4013      	ands	r3, r2
 800415e:	d008      	beq.n	8004172 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004162:	1dba      	adds	r2, r7, #6
 8004164:	8812      	ldrh	r2, [r2, #0]
 8004166:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004168:	1dbb      	adds	r3, r7, #6
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	0018      	movs	r0, r3
 800416e:	f7fe f86d 	bl	800224c <HAL_GPIO_EXTI_Callback>
  }
}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b002      	add	sp, #8
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	40010400 	.word	0x40010400

08004180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d102      	bne.n	8004194 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	f000 fb76 	bl	8004880 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2201      	movs	r2, #1
 800419a:	4013      	ands	r3, r2
 800419c:	d100      	bne.n	80041a0 <HAL_RCC_OscConfig+0x20>
 800419e:	e08e      	b.n	80042be <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80041a0:	4bc5      	ldr	r3, [pc, #788]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	220c      	movs	r2, #12
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d00e      	beq.n	80041ca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041ac:	4bc2      	ldr	r3, [pc, #776]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	220c      	movs	r2, #12
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d117      	bne.n	80041e8 <HAL_RCC_OscConfig+0x68>
 80041b8:	4bbf      	ldr	r3, [pc, #764]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	23c0      	movs	r3, #192	; 0xc0
 80041be:	025b      	lsls	r3, r3, #9
 80041c0:	401a      	ands	r2, r3
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	025b      	lsls	r3, r3, #9
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d10e      	bne.n	80041e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ca:	4bbb      	ldr	r3, [pc, #748]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	029b      	lsls	r3, r3, #10
 80041d2:	4013      	ands	r3, r2
 80041d4:	d100      	bne.n	80041d8 <HAL_RCC_OscConfig+0x58>
 80041d6:	e071      	b.n	80042bc <HAL_RCC_OscConfig+0x13c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d000      	beq.n	80041e2 <HAL_RCC_OscConfig+0x62>
 80041e0:	e06c      	b.n	80042bc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f000 fb4c 	bl	8004880 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_OscConfig+0x80>
 80041f0:	4bb1      	ldr	r3, [pc, #708]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4bb0      	ldr	r3, [pc, #704]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80041f6:	2180      	movs	r1, #128	; 0x80
 80041f8:	0249      	lsls	r1, r1, #9
 80041fa:	430a      	orrs	r2, r1
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e02f      	b.n	8004260 <HAL_RCC_OscConfig+0xe0>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10c      	bne.n	8004222 <HAL_RCC_OscConfig+0xa2>
 8004208:	4bab      	ldr	r3, [pc, #684]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4baa      	ldr	r3, [pc, #680]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800420e:	49ab      	ldr	r1, [pc, #684]	; (80044bc <HAL_RCC_OscConfig+0x33c>)
 8004210:	400a      	ands	r2, r1
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	4ba8      	ldr	r3, [pc, #672]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4ba7      	ldr	r3, [pc, #668]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800421a:	49a9      	ldr	r1, [pc, #676]	; (80044c0 <HAL_RCC_OscConfig+0x340>)
 800421c:	400a      	ands	r2, r1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e01e      	b.n	8004260 <HAL_RCC_OscConfig+0xe0>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b05      	cmp	r3, #5
 8004228:	d10e      	bne.n	8004248 <HAL_RCC_OscConfig+0xc8>
 800422a:	4ba3      	ldr	r3, [pc, #652]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4ba2      	ldr	r3, [pc, #648]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 8004230:	2180      	movs	r1, #128	; 0x80
 8004232:	02c9      	lsls	r1, r1, #11
 8004234:	430a      	orrs	r2, r1
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	4b9f      	ldr	r3, [pc, #636]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4b9e      	ldr	r3, [pc, #632]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800423e:	2180      	movs	r1, #128	; 0x80
 8004240:	0249      	lsls	r1, r1, #9
 8004242:	430a      	orrs	r2, r1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e00b      	b.n	8004260 <HAL_RCC_OscConfig+0xe0>
 8004248:	4b9b      	ldr	r3, [pc, #620]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b9a      	ldr	r3, [pc, #616]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800424e:	499b      	ldr	r1, [pc, #620]	; (80044bc <HAL_RCC_OscConfig+0x33c>)
 8004250:	400a      	ands	r2, r1
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	4b98      	ldr	r3, [pc, #608]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b97      	ldr	r3, [pc, #604]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800425a:	4999      	ldr	r1, [pc, #612]	; (80044c0 <HAL_RCC_OscConfig+0x340>)
 800425c:	400a      	ands	r2, r1
 800425e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d014      	beq.n	8004292 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004268:	f7fe fcee 	bl	8002c48 <HAL_GetTick>
 800426c:	0003      	movs	r3, r0
 800426e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004272:	f7fe fce9 	bl	8002c48 <HAL_GetTick>
 8004276:	0002      	movs	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b64      	cmp	r3, #100	; 0x64
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e2fd      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004284:	4b8c      	ldr	r3, [pc, #560]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	029b      	lsls	r3, r3, #10
 800428c:	4013      	ands	r3, r2
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0xf2>
 8004290:	e015      	b.n	80042be <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004292:	f7fe fcd9 	bl	8002c48 <HAL_GetTick>
 8004296:	0003      	movs	r3, r0
 8004298:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800429c:	f7fe fcd4 	bl	8002c48 <HAL_GetTick>
 80042a0:	0002      	movs	r2, r0
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e2e8      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ae:	4b82      	ldr	r3, [pc, #520]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	029b      	lsls	r3, r3, #10
 80042b6:	4013      	ands	r3, r2
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x11c>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2202      	movs	r2, #2
 80042c4:	4013      	ands	r3, r2
 80042c6:	d100      	bne.n	80042ca <HAL_RCC_OscConfig+0x14a>
 80042c8:	e06c      	b.n	80043a4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042ca:	4b7b      	ldr	r3, [pc, #492]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	220c      	movs	r2, #12
 80042d0:	4013      	ands	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042d4:	4b78      	ldr	r3, [pc, #480]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	220c      	movs	r2, #12
 80042da:	4013      	ands	r3, r2
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d11f      	bne.n	8004320 <HAL_RCC_OscConfig+0x1a0>
 80042e0:	4b75      	ldr	r3, [pc, #468]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	23c0      	movs	r3, #192	; 0xc0
 80042e6:	025b      	lsls	r3, r3, #9
 80042e8:	401a      	ands	r2, r3
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d116      	bne.n	8004320 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f2:	4b71      	ldr	r3, [pc, #452]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2202      	movs	r2, #2
 80042f8:	4013      	ands	r3, r2
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_OscConfig+0x188>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d001      	beq.n	8004308 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e2bb      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	4b6b      	ldr	r3, [pc, #428]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	22f8      	movs	r2, #248	; 0xf8
 800430e:	4393      	bics	r3, r2
 8004310:	0019      	movs	r1, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00da      	lsls	r2, r3, #3
 8004318:	4b67      	ldr	r3, [pc, #412]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800431a:	430a      	orrs	r2, r1
 800431c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431e:	e041      	b.n	80043a4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d024      	beq.n	8004372 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004328:	4b63      	ldr	r3, [pc, #396]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b62      	ldr	r3, [pc, #392]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800432e:	2101      	movs	r1, #1
 8004330:	430a      	orrs	r2, r1
 8004332:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fe fc88 	bl	8002c48 <HAL_GetTick>
 8004338:	0003      	movs	r3, r0
 800433a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800433e:	f7fe fc83 	bl	8002c48 <HAL_GetTick>
 8004342:	0002      	movs	r2, r0
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e297      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2202      	movs	r2, #2
 8004356:	4013      	ands	r3, r2
 8004358:	d0f1      	beq.n	800433e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435a:	4b57      	ldr	r3, [pc, #348]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	22f8      	movs	r2, #248	; 0xf8
 8004360:	4393      	bics	r3, r2
 8004362:	0019      	movs	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	00da      	lsls	r2, r3, #3
 800436a:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800436c:	430a      	orrs	r2, r1
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e018      	b.n	80043a4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004372:	4b51      	ldr	r3, [pc, #324]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 8004378:	2101      	movs	r1, #1
 800437a:	438a      	bics	r2, r1
 800437c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fe fc63 	bl	8002c48 <HAL_GetTick>
 8004382:	0003      	movs	r3, r0
 8004384:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004388:	f7fe fc5e 	bl	8002c48 <HAL_GetTick>
 800438c:	0002      	movs	r2, r0
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e272      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2202      	movs	r2, #2
 80043a0:	4013      	ands	r3, r2
 80043a2:	d1f1      	bne.n	8004388 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2208      	movs	r2, #8
 80043aa:	4013      	ands	r3, r2
 80043ac:	d036      	beq.n	800441c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d019      	beq.n	80043ea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b6:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80043b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ba:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80043bc:	2101      	movs	r1, #1
 80043be:	430a      	orrs	r2, r1
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c2:	f7fe fc41 	bl	8002c48 <HAL_GetTick>
 80043c6:	0003      	movs	r3, r0
 80043c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043cc:	f7fe fc3c 	bl	8002c48 <HAL_GetTick>
 80043d0:	0002      	movs	r2, r0
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e250      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	4b36      	ldr	r3, [pc, #216]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	2202      	movs	r2, #2
 80043e4:	4013      	ands	r3, r2
 80043e6:	d0f1      	beq.n	80043cc <HAL_RCC_OscConfig+0x24c>
 80043e8:	e018      	b.n	800441c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ea:	4b33      	ldr	r3, [pc, #204]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80043ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ee:	4b32      	ldr	r3, [pc, #200]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80043f0:	2101      	movs	r1, #1
 80043f2:	438a      	bics	r2, r1
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f6:	f7fe fc27 	bl	8002c48 <HAL_GetTick>
 80043fa:	0003      	movs	r3, r0
 80043fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004400:	f7fe fc22 	bl	8002c48 <HAL_GetTick>
 8004404:	0002      	movs	r2, r0
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e236      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004412:	4b29      	ldr	r3, [pc, #164]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	2202      	movs	r2, #2
 8004418:	4013      	ands	r3, r2
 800441a:	d1f1      	bne.n	8004400 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2204      	movs	r2, #4
 8004422:	4013      	ands	r3, r2
 8004424:	d100      	bne.n	8004428 <HAL_RCC_OscConfig+0x2a8>
 8004426:	e0b5      	b.n	8004594 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004428:	201f      	movs	r0, #31
 800442a:	183b      	adds	r3, r7, r0
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004430:	4b21      	ldr	r3, [pc, #132]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	055b      	lsls	r3, r3, #21
 8004438:	4013      	ands	r3, r2
 800443a:	d110      	bne.n	800445e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443c:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 8004442:	2180      	movs	r1, #128	; 0x80
 8004444:	0549      	lsls	r1, r1, #21
 8004446:	430a      	orrs	r2, r1
 8004448:	61da      	str	r2, [r3, #28]
 800444a:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	055b      	lsls	r3, r3, #21
 8004452:	4013      	ands	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004458:	183b      	adds	r3, r7, r0
 800445a:	2201      	movs	r2, #1
 800445c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445e:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <HAL_RCC_OscConfig+0x344>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4013      	ands	r3, r2
 8004468:	d11a      	bne.n	80044a0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <HAL_RCC_OscConfig+0x344>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <HAL_RCC_OscConfig+0x344>)
 8004470:	2180      	movs	r1, #128	; 0x80
 8004472:	0049      	lsls	r1, r1, #1
 8004474:	430a      	orrs	r2, r1
 8004476:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004478:	f7fe fbe6 	bl	8002c48 <HAL_GetTick>
 800447c:	0003      	movs	r3, r0
 800447e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7fe fbe1 	bl	8002c48 <HAL_GetTick>
 8004486:	0002      	movs	r2, r0
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b64      	cmp	r3, #100	; 0x64
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e1f5      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_RCC_OscConfig+0x344>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	2380      	movs	r3, #128	; 0x80
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	4013      	ands	r3, r2
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d10f      	bne.n	80044c8 <HAL_RCC_OscConfig+0x348>
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80044aa:	6a1a      	ldr	r2, [r3, #32]
 80044ac:	4b02      	ldr	r3, [pc, #8]	; (80044b8 <HAL_RCC_OscConfig+0x338>)
 80044ae:	2101      	movs	r1, #1
 80044b0:	430a      	orrs	r2, r1
 80044b2:	621a      	str	r2, [r3, #32]
 80044b4:	e036      	b.n	8004524 <HAL_RCC_OscConfig+0x3a4>
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	40021000 	.word	0x40021000
 80044bc:	fffeffff 	.word	0xfffeffff
 80044c0:	fffbffff 	.word	0xfffbffff
 80044c4:	40007000 	.word	0x40007000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x36a>
 80044d0:	4bca      	ldr	r3, [pc, #808]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80044d2:	6a1a      	ldr	r2, [r3, #32]
 80044d4:	4bc9      	ldr	r3, [pc, #804]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80044d6:	2101      	movs	r1, #1
 80044d8:	438a      	bics	r2, r1
 80044da:	621a      	str	r2, [r3, #32]
 80044dc:	4bc7      	ldr	r3, [pc, #796]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80044de:	6a1a      	ldr	r2, [r3, #32]
 80044e0:	4bc6      	ldr	r3, [pc, #792]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80044e2:	2104      	movs	r1, #4
 80044e4:	438a      	bics	r2, r1
 80044e6:	621a      	str	r2, [r3, #32]
 80044e8:	e01c      	b.n	8004524 <HAL_RCC_OscConfig+0x3a4>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x38c>
 80044f2:	4bc2      	ldr	r3, [pc, #776]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	4bc1      	ldr	r3, [pc, #772]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80044f8:	2104      	movs	r1, #4
 80044fa:	430a      	orrs	r2, r1
 80044fc:	621a      	str	r2, [r3, #32]
 80044fe:	4bbf      	ldr	r3, [pc, #764]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004500:	6a1a      	ldr	r2, [r3, #32]
 8004502:	4bbe      	ldr	r3, [pc, #760]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004504:	2101      	movs	r1, #1
 8004506:	430a      	orrs	r2, r1
 8004508:	621a      	str	r2, [r3, #32]
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0x3a4>
 800450c:	4bbb      	ldr	r3, [pc, #748]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800450e:	6a1a      	ldr	r2, [r3, #32]
 8004510:	4bba      	ldr	r3, [pc, #744]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004512:	2101      	movs	r1, #1
 8004514:	438a      	bics	r2, r1
 8004516:	621a      	str	r2, [r3, #32]
 8004518:	4bb8      	ldr	r3, [pc, #736]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800451a:	6a1a      	ldr	r2, [r3, #32]
 800451c:	4bb7      	ldr	r3, [pc, #732]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800451e:	2104      	movs	r1, #4
 8004520:	438a      	bics	r2, r1
 8004522:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d014      	beq.n	8004556 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452c:	f7fe fb8c 	bl	8002c48 <HAL_GetTick>
 8004530:	0003      	movs	r3, r0
 8004532:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	e009      	b.n	800454a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fe fb87 	bl	8002c48 <HAL_GetTick>
 800453a:	0002      	movs	r2, r0
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	4aaf      	ldr	r2, [pc, #700]	; (8004800 <HAL_RCC_OscConfig+0x680>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e19a      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454a:	4bac      	ldr	r3, [pc, #688]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	2202      	movs	r2, #2
 8004550:	4013      	ands	r3, r2
 8004552:	d0f0      	beq.n	8004536 <HAL_RCC_OscConfig+0x3b6>
 8004554:	e013      	b.n	800457e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004556:	f7fe fb77 	bl	8002c48 <HAL_GetTick>
 800455a:	0003      	movs	r3, r0
 800455c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455e:	e009      	b.n	8004574 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004560:	f7fe fb72 	bl	8002c48 <HAL_GetTick>
 8004564:	0002      	movs	r2, r0
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	4aa5      	ldr	r2, [pc, #660]	; (8004800 <HAL_RCC_OscConfig+0x680>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e185      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004574:	4ba1      	ldr	r3, [pc, #644]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	2202      	movs	r2, #2
 800457a:	4013      	ands	r3, r2
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800457e:	231f      	movs	r3, #31
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004588:	4b9c      	ldr	r3, [pc, #624]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	4b9b      	ldr	r3, [pc, #620]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800458e:	499d      	ldr	r1, [pc, #628]	; (8004804 <HAL_RCC_OscConfig+0x684>)
 8004590:	400a      	ands	r2, r1
 8004592:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2210      	movs	r2, #16
 800459a:	4013      	ands	r3, r2
 800459c:	d063      	beq.n	8004666 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d12a      	bne.n	80045fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80045a6:	4b95      	ldr	r3, [pc, #596]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80045a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045aa:	4b94      	ldr	r3, [pc, #592]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80045ac:	2104      	movs	r1, #4
 80045ae:	430a      	orrs	r2, r1
 80045b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80045b2:	4b92      	ldr	r3, [pc, #584]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80045b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b6:	4b91      	ldr	r3, [pc, #580]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80045b8:	2101      	movs	r1, #1
 80045ba:	430a      	orrs	r2, r1
 80045bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045be:	f7fe fb43 	bl	8002c48 <HAL_GetTick>
 80045c2:	0003      	movs	r3, r0
 80045c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80045c8:	f7fe fb3e 	bl	8002c48 <HAL_GetTick>
 80045cc:	0002      	movs	r2, r0
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e152      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80045da:	4b88      	ldr	r3, [pc, #544]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80045dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045de:	2202      	movs	r2, #2
 80045e0:	4013      	ands	r3, r2
 80045e2:	d0f1      	beq.n	80045c8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80045e4:	4b85      	ldr	r3, [pc, #532]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80045e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e8:	22f8      	movs	r2, #248	; 0xf8
 80045ea:	4393      	bics	r3, r2
 80045ec:	0019      	movs	r1, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	00da      	lsls	r2, r3, #3
 80045f4:	4b81      	ldr	r3, [pc, #516]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80045f6:	430a      	orrs	r2, r1
 80045f8:	635a      	str	r2, [r3, #52]	; 0x34
 80045fa:	e034      	b.n	8004666 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	3305      	adds	r3, #5
 8004602:	d111      	bne.n	8004628 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004604:	4b7d      	ldr	r3, [pc, #500]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004608:	4b7c      	ldr	r3, [pc, #496]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800460a:	2104      	movs	r1, #4
 800460c:	438a      	bics	r2, r1
 800460e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004610:	4b7a      	ldr	r3, [pc, #488]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004614:	22f8      	movs	r2, #248	; 0xf8
 8004616:	4393      	bics	r3, r2
 8004618:	0019      	movs	r1, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	00da      	lsls	r2, r3, #3
 8004620:	4b76      	ldr	r3, [pc, #472]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004622:	430a      	orrs	r2, r1
 8004624:	635a      	str	r2, [r3, #52]	; 0x34
 8004626:	e01e      	b.n	8004666 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004628:	4b74      	ldr	r3, [pc, #464]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800462a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462c:	4b73      	ldr	r3, [pc, #460]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800462e:	2104      	movs	r1, #4
 8004630:	430a      	orrs	r2, r1
 8004632:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004634:	4b71      	ldr	r3, [pc, #452]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004638:	4b70      	ldr	r3, [pc, #448]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800463a:	2101      	movs	r1, #1
 800463c:	438a      	bics	r2, r1
 800463e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004640:	f7fe fb02 	bl	8002c48 <HAL_GetTick>
 8004644:	0003      	movs	r3, r0
 8004646:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800464a:	f7fe fafd 	bl	8002c48 <HAL_GetTick>
 800464e:	0002      	movs	r2, r0
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e111      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800465c:	4b67      	ldr	r3, [pc, #412]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	2202      	movs	r2, #2
 8004662:	4013      	ands	r3, r2
 8004664:	d1f1      	bne.n	800464a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2220      	movs	r2, #32
 800466c:	4013      	ands	r3, r2
 800466e:	d05c      	beq.n	800472a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004670:	4b62      	ldr	r3, [pc, #392]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	220c      	movs	r2, #12
 8004676:	4013      	ands	r3, r2
 8004678:	2b0c      	cmp	r3, #12
 800467a:	d00e      	beq.n	800469a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800467c:	4b5f      	ldr	r3, [pc, #380]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	220c      	movs	r2, #12
 8004682:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004684:	2b08      	cmp	r3, #8
 8004686:	d114      	bne.n	80046b2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004688:	4b5c      	ldr	r3, [pc, #368]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	23c0      	movs	r3, #192	; 0xc0
 800468e:	025b      	lsls	r3, r3, #9
 8004690:	401a      	ands	r2, r3
 8004692:	23c0      	movs	r3, #192	; 0xc0
 8004694:	025b      	lsls	r3, r3, #9
 8004696:	429a      	cmp	r2, r3
 8004698:	d10b      	bne.n	80046b2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800469a:	4b58      	ldr	r3, [pc, #352]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800469c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	025b      	lsls	r3, r3, #9
 80046a2:	4013      	ands	r3, r2
 80046a4:	d040      	beq.n	8004728 <HAL_RCC_OscConfig+0x5a8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d03c      	beq.n	8004728 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e0e6      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01b      	beq.n	80046f2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80046ba:	4b50      	ldr	r3, [pc, #320]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80046bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046be:	4b4f      	ldr	r3, [pc, #316]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80046c0:	2180      	movs	r1, #128	; 0x80
 80046c2:	0249      	lsls	r1, r1, #9
 80046c4:	430a      	orrs	r2, r1
 80046c6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fe fabe 	bl	8002c48 <HAL_GetTick>
 80046cc:	0003      	movs	r3, r0
 80046ce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046d2:	f7fe fab9 	bl	8002c48 <HAL_GetTick>
 80046d6:	0002      	movs	r2, r0
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e0cd      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80046e4:	4b45      	ldr	r3, [pc, #276]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80046e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	025b      	lsls	r3, r3, #9
 80046ec:	4013      	ands	r3, r2
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x552>
 80046f0:	e01b      	b.n	800472a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80046f2:	4b42      	ldr	r3, [pc, #264]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80046f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f6:	4b41      	ldr	r3, [pc, #260]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80046f8:	4943      	ldr	r1, [pc, #268]	; (8004808 <HAL_RCC_OscConfig+0x688>)
 80046fa:	400a      	ands	r2, r1
 80046fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fe:	f7fe faa3 	bl	8002c48 <HAL_GetTick>
 8004702:	0003      	movs	r3, r0
 8004704:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004708:	f7fe fa9e 	bl	8002c48 <HAL_GetTick>
 800470c:	0002      	movs	r2, r0
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e0b2      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800471a:	4b38      	ldr	r3, [pc, #224]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800471c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800471e:	2380      	movs	r3, #128	; 0x80
 8004720:	025b      	lsls	r3, r3, #9
 8004722:	4013      	ands	r3, r2
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x588>
 8004726:	e000      	b.n	800472a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004728:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	d100      	bne.n	8004734 <HAL_RCC_OscConfig+0x5b4>
 8004732:	e0a4      	b.n	800487e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004734:	4b31      	ldr	r3, [pc, #196]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	220c      	movs	r2, #12
 800473a:	4013      	ands	r3, r2
 800473c:	2b08      	cmp	r3, #8
 800473e:	d100      	bne.n	8004742 <HAL_RCC_OscConfig+0x5c2>
 8004740:	e078      	b.n	8004834 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	2b02      	cmp	r3, #2
 8004748:	d14c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b2b      	ldr	r3, [pc, #172]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004750:	492e      	ldr	r1, [pc, #184]	; (800480c <HAL_RCC_OscConfig+0x68c>)
 8004752:	400a      	ands	r2, r1
 8004754:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004756:	f7fe fa77 	bl	8002c48 <HAL_GetTick>
 800475a:	0003      	movs	r3, r0
 800475c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004760:	f7fe fa72 	bl	8002c48 <HAL_GetTick>
 8004764:	0002      	movs	r2, r0
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e086      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004772:	4b22      	ldr	r3, [pc, #136]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	049b      	lsls	r3, r3, #18
 800477a:	4013      	ands	r3, r2
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800477e:	4b1f      	ldr	r3, [pc, #124]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	220f      	movs	r2, #15
 8004784:	4393      	bics	r3, r2
 8004786:	0019      	movs	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478c:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 800478e:	430a      	orrs	r2, r1
 8004790:	62da      	str	r2, [r3, #44]	; 0x2c
 8004792:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <HAL_RCC_OscConfig+0x690>)
 8004798:	4013      	ands	r3, r2
 800479a:	0019      	movs	r1, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	431a      	orrs	r2, r3
 80047a6:	4b15      	ldr	r3, [pc, #84]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ac:	4b13      	ldr	r3, [pc, #76]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	4b12      	ldr	r3, [pc, #72]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80047b2:	2180      	movs	r1, #128	; 0x80
 80047b4:	0449      	lsls	r1, r1, #17
 80047b6:	430a      	orrs	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ba:	f7fe fa45 	bl	8002c48 <HAL_GetTick>
 80047be:	0003      	movs	r3, r0
 80047c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fe fa40 	bl	8002c48 <HAL_GetTick>
 80047c8:	0002      	movs	r2, r0
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e054      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	049b      	lsls	r3, r3, #18
 80047de:	4013      	ands	r3, r2
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x644>
 80047e2:	e04c      	b.n	800487e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4b04      	ldr	r3, [pc, #16]	; (80047fc <HAL_RCC_OscConfig+0x67c>)
 80047ea:	4908      	ldr	r1, [pc, #32]	; (800480c <HAL_RCC_OscConfig+0x68c>)
 80047ec:	400a      	ands	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f0:	f7fe fa2a 	bl	8002c48 <HAL_GetTick>
 80047f4:	0003      	movs	r3, r0
 80047f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f8:	e015      	b.n	8004826 <HAL_RCC_OscConfig+0x6a6>
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	40021000 	.word	0x40021000
 8004800:	00001388 	.word	0x00001388
 8004804:	efffffff 	.word	0xefffffff
 8004808:	fffeffff 	.word	0xfffeffff
 800480c:	feffffff 	.word	0xfeffffff
 8004810:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004814:	f7fe fa18 	bl	8002c48 <HAL_GetTick>
 8004818:	0002      	movs	r2, r0
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e02c      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004826:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_RCC_OscConfig+0x708>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	049b      	lsls	r3, r3, #18
 800482e:	4013      	ands	r3, r2
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0x694>
 8004832:	e024      	b.n	800487e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e01f      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <HAL_RCC_OscConfig+0x708>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_RCC_OscConfig+0x708>)
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	23c0      	movs	r3, #192	; 0xc0
 8004850:	025b      	lsls	r3, r3, #9
 8004852:	401a      	ands	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	429a      	cmp	r2, r3
 800485a:	d10e      	bne.n	800487a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	220f      	movs	r2, #15
 8004860:	401a      	ands	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d107      	bne.n	800487a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	23f0      	movs	r3, #240	; 0xf0
 800486e:	039b      	lsls	r3, r3, #14
 8004870:	401a      	ands	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d001      	beq.n	800487e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	0018      	movs	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	b008      	add	sp, #32
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40021000 	.word	0x40021000

0800488c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0bf      	b.n	8004a20 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a0:	4b61      	ldr	r3, [pc, #388]	; (8004a28 <HAL_RCC_ClockConfig+0x19c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2201      	movs	r2, #1
 80048a6:	4013      	ands	r3, r2
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d911      	bls.n	80048d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b5e      	ldr	r3, [pc, #376]	; (8004a28 <HAL_RCC_ClockConfig+0x19c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2201      	movs	r2, #1
 80048b4:	4393      	bics	r3, r2
 80048b6:	0019      	movs	r1, r3
 80048b8:	4b5b      	ldr	r3, [pc, #364]	; (8004a28 <HAL_RCC_ClockConfig+0x19c>)
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c0:	4b59      	ldr	r3, [pc, #356]	; (8004a28 <HAL_RCC_ClockConfig+0x19c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2201      	movs	r2, #1
 80048c6:	4013      	ands	r3, r2
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e0a6      	b.n	8004a20 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2202      	movs	r2, #2
 80048d8:	4013      	ands	r3, r2
 80048da:	d015      	beq.n	8004908 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2204      	movs	r2, #4
 80048e2:	4013      	ands	r3, r2
 80048e4:	d006      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048e6:	4b51      	ldr	r3, [pc, #324]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	4b50      	ldr	r3, [pc, #320]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 80048ec:	21e0      	movs	r1, #224	; 0xe0
 80048ee:	00c9      	lsls	r1, r1, #3
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f4:	4b4d      	ldr	r3, [pc, #308]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	22f0      	movs	r2, #240	; 0xf0
 80048fa:	4393      	bics	r3, r2
 80048fc:	0019      	movs	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	4b4a      	ldr	r3, [pc, #296]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 8004904:	430a      	orrs	r2, r1
 8004906:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2201      	movs	r2, #1
 800490e:	4013      	ands	r3, r2
 8004910:	d04c      	beq.n	80049ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491a:	4b44      	ldr	r3, [pc, #272]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	029b      	lsls	r3, r3, #10
 8004922:	4013      	ands	r3, r2
 8004924:	d120      	bne.n	8004968 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e07a      	b.n	8004a20 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	4b3e      	ldr	r3, [pc, #248]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	2380      	movs	r3, #128	; 0x80
 8004938:	049b      	lsls	r3, r3, #18
 800493a:	4013      	ands	r3, r2
 800493c:	d114      	bne.n	8004968 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e06e      	b.n	8004a20 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d107      	bne.n	800495a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800494a:	4b38      	ldr	r3, [pc, #224]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 800494c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	025b      	lsls	r3, r3, #9
 8004952:	4013      	ands	r3, r2
 8004954:	d108      	bne.n	8004968 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e062      	b.n	8004a20 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495a:	4b34      	ldr	r3, [pc, #208]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2202      	movs	r2, #2
 8004960:	4013      	ands	r3, r2
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e05b      	b.n	8004a20 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004968:	4b30      	ldr	r3, [pc, #192]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2203      	movs	r2, #3
 800496e:	4393      	bics	r3, r2
 8004970:	0019      	movs	r1, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	4b2d      	ldr	r3, [pc, #180]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800497c:	f7fe f964 	bl	8002c48 <HAL_GetTick>
 8004980:	0003      	movs	r3, r0
 8004982:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004984:	e009      	b.n	800499a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004986:	f7fe f95f 	bl	8002c48 <HAL_GetTick>
 800498a:	0002      	movs	r2, r0
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	4a27      	ldr	r2, [pc, #156]	; (8004a30 <HAL_RCC_ClockConfig+0x1a4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e042      	b.n	8004a20 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499a:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	220c      	movs	r2, #12
 80049a0:	401a      	ands	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d1ec      	bne.n	8004986 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ac:	4b1e      	ldr	r3, [pc, #120]	; (8004a28 <HAL_RCC_ClockConfig+0x19c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2201      	movs	r2, #1
 80049b2:	4013      	ands	r3, r2
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d211      	bcs.n	80049de <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <HAL_RCC_ClockConfig+0x19c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2201      	movs	r2, #1
 80049c0:	4393      	bics	r3, r2
 80049c2:	0019      	movs	r1, r3
 80049c4:	4b18      	ldr	r3, [pc, #96]	; (8004a28 <HAL_RCC_ClockConfig+0x19c>)
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049cc:	4b16      	ldr	r3, [pc, #88]	; (8004a28 <HAL_RCC_ClockConfig+0x19c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2201      	movs	r2, #1
 80049d2:	4013      	ands	r3, r2
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d001      	beq.n	80049de <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e020      	b.n	8004a20 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2204      	movs	r2, #4
 80049e4:	4013      	ands	r3, r2
 80049e6:	d009      	beq.n	80049fc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a11      	ldr	r2, [pc, #68]	; (8004a34 <HAL_RCC_ClockConfig+0x1a8>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	0019      	movs	r1, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 80049f8:	430a      	orrs	r2, r1
 80049fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80049fc:	f000 f820 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 8004a00:	0001      	movs	r1, r0
 8004a02:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <HAL_RCC_ClockConfig+0x1a0>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	220f      	movs	r2, #15
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	4a0a      	ldr	r2, [pc, #40]	; (8004a38 <HAL_RCC_ClockConfig+0x1ac>)
 8004a0e:	5cd3      	ldrb	r3, [r2, r3]
 8004a10:	000a      	movs	r2, r1
 8004a12:	40da      	lsrs	r2, r3
 8004a14:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_RCC_ClockConfig+0x1b0>)
 8004a16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a18:	2003      	movs	r0, #3
 8004a1a:	f7fe f8cf 	bl	8002bbc <HAL_InitTick>
  
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	0018      	movs	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b004      	add	sp, #16
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40022000 	.word	0x40022000
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	00001388 	.word	0x00001388
 8004a34:	fffff8ff 	.word	0xfffff8ff
 8004a38:	08005414 	.word	0x08005414
 8004a3c:	20000004 	.word	0x20000004

08004a40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b08f      	sub	sp, #60	; 0x3c
 8004a44:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004a46:	2314      	movs	r3, #20
 8004a48:	18fb      	adds	r3, r7, r3
 8004a4a:	4a38      	ldr	r2, [pc, #224]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xec>)
 8004a4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a4e:	c313      	stmia	r3!, {r0, r1, r4}
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004a54:	1d3b      	adds	r3, r7, #4
 8004a56:	4a36      	ldr	r2, [pc, #216]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004a58:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a5a:	c313      	stmia	r3!, {r0, r1, r4}
 8004a5c:	6812      	ldr	r2, [r2, #0]
 8004a5e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a64:	2300      	movs	r3, #0
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a68:	2300      	movs	r3, #0
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004a74:	4b2f      	ldr	r3, [pc, #188]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	220c      	movs	r2, #12
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d047      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0xd4>
 8004a84:	d849      	bhi.n	8004b1a <HAL_RCC_GetSysClockFreq+0xda>
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d002      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0x50>
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d003      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0x56>
 8004a8e:	e044      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a90:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a94:	e044      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a98:	0c9b      	lsrs	r3, r3, #18
 8004a9a:	220f      	movs	r2, #15
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2214      	movs	r2, #20
 8004aa0:	18ba      	adds	r2, r7, r2
 8004aa2:	5cd3      	ldrb	r3, [r2, r3]
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004aa6:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	220f      	movs	r2, #15
 8004aac:	4013      	ands	r3, r2
 8004aae:	1d3a      	adds	r2, r7, #4
 8004ab0:	5cd3      	ldrb	r3, [r2, r3]
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab6:	23c0      	movs	r3, #192	; 0xc0
 8004ab8:	025b      	lsls	r3, r3, #9
 8004aba:	401a      	ands	r2, r3
 8004abc:	2380      	movs	r3, #128	; 0x80
 8004abe:	025b      	lsls	r3, r3, #9
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d109      	bne.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ac6:	481c      	ldr	r0, [pc, #112]	; (8004b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ac8:	f7fb fb1c 	bl	8000104 <__udivsi3>
 8004acc:	0003      	movs	r3, r0
 8004ace:	001a      	movs	r2, r3
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	4353      	muls	r3, r2
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad6:	e01a      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ada:	23c0      	movs	r3, #192	; 0xc0
 8004adc:	025b      	lsls	r3, r3, #9
 8004ade:	401a      	ands	r2, r3
 8004ae0:	23c0      	movs	r3, #192	; 0xc0
 8004ae2:	025b      	lsls	r3, r3, #9
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d109      	bne.n	8004afc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aea:	4814      	ldr	r0, [pc, #80]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004aec:	f7fb fb0a 	bl	8000104 <__udivsi3>
 8004af0:	0003      	movs	r3, r0
 8004af2:	001a      	movs	r2, r3
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	4353      	muls	r3, r2
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004afe:	4810      	ldr	r0, [pc, #64]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b00:	f7fb fb00 	bl	8000104 <__udivsi3>
 8004b04:	0003      	movs	r3, r0
 8004b06:	001a      	movs	r2, r3
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	4353      	muls	r3, r2
 8004b0c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b10:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b12:	e005      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b18:	e002      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b1a:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b1e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b00f      	add	sp, #60	; 0x3c
 8004b28:	bd90      	pop	{r4, r7, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	080053b4 	.word	0x080053b4
 8004b30:	080053c4 	.word	0x080053c4
 8004b34:	40021000 	.word	0x40021000
 8004b38:	00b71b00 	.word	0x00b71b00
 8004b3c:	02dc6c00 	.word	0x02dc6c00
 8004b40:	007a1200 	.word	0x007a1200

08004b44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e0a8      	b.n	8004ca8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	2382      	movs	r3, #130	; 0x82
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d009      	beq.n	8004b7e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	61da      	str	r2, [r3, #28]
 8004b70:	e005      	b.n	8004b7e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	225d      	movs	r2, #93	; 0x5d
 8004b88:	5c9b      	ldrb	r3, [r3, r2]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	225c      	movs	r2, #92	; 0x5c
 8004b94:	2100      	movs	r1, #0
 8004b96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f7fd ff14 	bl	80029c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	225d      	movs	r2, #93	; 0x5d
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2140      	movs	r1, #64	; 0x40
 8004bb4:	438a      	bics	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	23e0      	movs	r3, #224	; 0xe0
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d902      	bls.n	8004bca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e002      	b.n	8004bd0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	015b      	lsls	r3, r3, #5
 8004bce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	23f0      	movs	r3, #240	; 0xf0
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d008      	beq.n	8004bee <HAL_SPI_Init+0xaa>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	23e0      	movs	r3, #224	; 0xe0
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d002      	beq.n	8004bee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	2382      	movs	r3, #130	; 0x82
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6899      	ldr	r1, [r3, #8]
 8004bfc:	2384      	movs	r3, #132	; 0x84
 8004bfe:	021b      	lsls	r3, r3, #8
 8004c00:	400b      	ands	r3, r1
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2102      	movs	r1, #2
 8004c0a:	400b      	ands	r3, r1
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	2101      	movs	r1, #1
 8004c14:	400b      	ands	r3, r1
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6999      	ldr	r1, [r3, #24]
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	400b      	ands	r3, r1
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	2138      	movs	r1, #56	; 0x38
 8004c2a:	400b      	ands	r3, r1
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	2180      	movs	r1, #128	; 0x80
 8004c34:	400b      	ands	r3, r1
 8004c36:	431a      	orrs	r2, r3
 8004c38:	0011      	movs	r1, r2
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	019b      	lsls	r3, r3, #6
 8004c42:	401a      	ands	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	2204      	movs	r2, #4
 8004c54:	401a      	ands	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	2110      	movs	r1, #16
 8004c5c:	400b      	ands	r3, r1
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c64:	2108      	movs	r1, #8
 8004c66:	400b      	ands	r3, r1
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68d9      	ldr	r1, [r3, #12]
 8004c6e:	23f0      	movs	r3, #240	; 0xf0
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	400b      	ands	r3, r1
 8004c74:	431a      	orrs	r2, r3
 8004c76:	0011      	movs	r1, r2
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	2380      	movs	r3, #128	; 0x80
 8004c7c:	015b      	lsls	r3, r3, #5
 8004c7e:	401a      	ands	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4907      	ldr	r1, [pc, #28]	; (8004cb0 <HAL_SPI_Init+0x16c>)
 8004c94:	400a      	ands	r2, r1
 8004c96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	225d      	movs	r2, #93	; 0x5d
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	0018      	movs	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b004      	add	sp, #16
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	fffff7ff 	.word	0xfffff7ff

08004cb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	; 0x28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	001a      	movs	r2, r3
 8004cc2:	1cbb      	adds	r3, r7, #2
 8004cc4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cca:	2323      	movs	r3, #35	; 0x23
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	225c      	movs	r2, #92	; 0x5c
 8004cd6:	5c9b      	ldrb	r3, [r3, r2]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x2c>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e1b5      	b.n	800504c <HAL_SPI_TransmitReceive+0x398>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	225c      	movs	r2, #92	; 0x5c
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ce8:	f7fd ffae 	bl	8002c48 <HAL_GetTick>
 8004cec:	0003      	movs	r3, r0
 8004cee:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cf0:	201b      	movs	r0, #27
 8004cf2:	183b      	adds	r3, r7, r0
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	215d      	movs	r1, #93	; 0x5d
 8004cf8:	5c52      	ldrb	r2, [r2, r1]
 8004cfa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d02:	2312      	movs	r3, #18
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	1cba      	adds	r2, r7, #2
 8004d08:	8812      	ldrh	r2, [r2, #0]
 8004d0a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d0c:	183b      	adds	r3, r7, r0
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d011      	beq.n	8004d38 <HAL_SPI_TransmitReceive+0x84>
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	2382      	movs	r3, #130	; 0x82
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d107      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x7a>
 8004d26:	183b      	adds	r3, r7, r0
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d004      	beq.n	8004d38 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004d2e:	2323      	movs	r3, #35	; 0x23
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	2202      	movs	r2, #2
 8004d34:	701a      	strb	r2, [r3, #0]
    goto error;
 8004d36:	e17e      	b.n	8005036 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d006      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0x98>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0x98>
 8004d44:	1cbb      	adds	r3, r7, #2
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d104      	bne.n	8004d56 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004d4c:	2323      	movs	r3, #35	; 0x23
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
    goto error;
 8004d54:	e16f      	b.n	8005036 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	225d      	movs	r2, #93	; 0x5d
 8004d5a:	5c9b      	ldrb	r3, [r3, r2]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d003      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	225d      	movs	r2, #93	; 0x5d
 8004d66:	2105      	movs	r1, #5
 8004d68:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1cba      	adds	r2, r7, #2
 8004d7a:	2146      	movs	r1, #70	; 0x46
 8004d7c:	8812      	ldrh	r2, [r2, #0]
 8004d7e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	1cba      	adds	r2, r7, #2
 8004d84:	2144      	movs	r1, #68	; 0x44
 8004d86:	8812      	ldrh	r2, [r2, #0]
 8004d88:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	1cba      	adds	r2, r7, #2
 8004d94:	8812      	ldrh	r2, [r2, #0]
 8004d96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1cba      	adds	r2, r7, #2
 8004d9c:	8812      	ldrh	r2, [r2, #0]
 8004d9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	23e0      	movs	r3, #224	; 0xe0
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d908      	bls.n	8004dca <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	49a4      	ldr	r1, [pc, #656]	; (8005054 <HAL_SPI_TransmitReceive+0x3a0>)
 8004dc4:	400a      	ands	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
 8004dc8:	e008      	b.n	8004ddc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2180      	movs	r1, #128	; 0x80
 8004dd6:	0149      	lsls	r1, r1, #5
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d007      	beq.n	8004dfa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2140      	movs	r1, #64	; 0x40
 8004df6:	430a      	orrs	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	23e0      	movs	r3, #224	; 0xe0
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d800      	bhi.n	8004e08 <HAL_SPI_TransmitReceive+0x154>
 8004e06:	e07f      	b.n	8004f08 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x168>
 8004e10:	2312      	movs	r3, #18
 8004e12:	18fb      	adds	r3, r7, r3
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d000      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x168>
 8004e1a:	e069      	b.n	8004ef0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	881a      	ldrh	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	1c9a      	adds	r2, r3, #2
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e40:	e056      	b.n	8004ef0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d11b      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x1d4>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d016      	beq.n	8004e88 <HAL_SPI_TransmitReceive+0x1d4>
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d113      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	881a      	ldrh	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	1c9a      	adds	r2, r3, #2
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d11c      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x21c>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2246      	movs	r2, #70	; 0x46
 8004e9a:	5a9b      	ldrh	r3, [r3, r2]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d016      	beq.n	8004ed0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	b292      	uxth	r2, r2
 8004eae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	1c9a      	adds	r2, r3, #2
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2246      	movs	r2, #70	; 0x46
 8004ebe:	5a9b      	ldrh	r3, [r3, r2]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b299      	uxth	r1, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2246      	movs	r2, #70	; 0x46
 8004eca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ed0:	f7fd feba 	bl	8002c48 <HAL_GetTick>
 8004ed4:	0002      	movs	r2, r0
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d807      	bhi.n	8004ef0 <HAL_SPI_TransmitReceive+0x23c>
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	d004      	beq.n	8004ef0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8004ee6:	2323      	movs	r3, #35	; 0x23
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	2203      	movs	r2, #3
 8004eec:	701a      	strb	r2, [r3, #0]
        goto error;
 8004eee:	e0a2      	b.n	8005036 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1a3      	bne.n	8004e42 <HAL_SPI_TransmitReceive+0x18e>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2246      	movs	r2, #70	; 0x46
 8004efe:	5a9b      	ldrh	r3, [r3, r2]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d19d      	bne.n	8004e42 <HAL_SPI_TransmitReceive+0x18e>
 8004f06:	e085      	b.n	8005014 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x268>
 8004f10:	2312      	movs	r3, #18
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d000      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x268>
 8004f1a:	e070      	b.n	8004ffe <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	7812      	ldrb	r2, [r2, #0]
 8004f28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f42:	e05c      	b.n	8004ffe <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d11c      	bne.n	8004f8c <HAL_SPI_TransmitReceive+0x2d8>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d017      	beq.n	8004f8c <HAL_SPI_TransmitReceive+0x2d8>
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d114      	bne.n	8004f8c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2201      	movs	r2, #1
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d11e      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x324>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2246      	movs	r2, #70	; 0x46
 8004f9e:	5a9b      	ldrh	r3, [r3, r2]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d018      	beq.n	8004fd8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	330c      	adds	r3, #12
 8004fac:	001a      	movs	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	7812      	ldrb	r2, [r2, #0]
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2246      	movs	r2, #70	; 0x46
 8004fc6:	5a9b      	ldrh	r3, [r3, r2]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b299      	uxth	r1, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2246      	movs	r2, #70	; 0x46
 8004fd2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fd8:	f7fd fe36 	bl	8002c48 <HAL_GetTick>
 8004fdc:	0002      	movs	r2, r0
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d802      	bhi.n	8004fee <HAL_SPI_TransmitReceive+0x33a>
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	3301      	adds	r3, #1
 8004fec:	d102      	bne.n	8004ff4 <HAL_SPI_TransmitReceive+0x340>
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d104      	bne.n	8004ffe <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004ff4:	2323      	movs	r3, #35	; 0x23
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	701a      	strb	r2, [r3, #0]
        goto error;
 8004ffc:	e01b      	b.n	8005036 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d19d      	bne.n	8004f44 <HAL_SPI_TransmitReceive+0x290>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2246      	movs	r2, #70	; 0x46
 800500c:	5a9b      	ldrh	r3, [r3, r2]
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d197      	bne.n	8004f44 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	0018      	movs	r0, r3
 800501c:	f000 f94c 	bl	80052b8 <SPI_EndRxTxTransaction>
 8005020:	1e03      	subs	r3, r0, #0
 8005022:	d007      	beq.n	8005034 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005024:	2323      	movs	r3, #35	; 0x23
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	661a      	str	r2, [r3, #96]	; 0x60
 8005032:	e000      	b.n	8005036 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005034:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	225d      	movs	r2, #93	; 0x5d
 800503a:	2101      	movs	r1, #1
 800503c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	225c      	movs	r2, #92	; 0x5c
 8005042:	2100      	movs	r1, #0
 8005044:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005046:	2323      	movs	r3, #35	; 0x23
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	781b      	ldrb	r3, [r3, #0]
}
 800504c:	0018      	movs	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	b00a      	add	sp, #40	; 0x28
 8005052:	bd80      	pop	{r7, pc}
 8005054:	ffffefff 	.word	0xffffefff

08005058 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	1dfb      	adds	r3, r7, #7
 8005066:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005068:	f7fd fdee 	bl	8002c48 <HAL_GetTick>
 800506c:	0002      	movs	r2, r0
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	18d3      	adds	r3, r2, r3
 8005076:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005078:	f7fd fde6 	bl	8002c48 <HAL_GetTick>
 800507c:	0003      	movs	r3, r0
 800507e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005080:	4b3a      	ldr	r3, [pc, #232]	; (800516c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	015b      	lsls	r3, r3, #5
 8005086:	0d1b      	lsrs	r3, r3, #20
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	4353      	muls	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800508e:	e058      	b.n	8005142 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	3301      	adds	r3, #1
 8005094:	d055      	beq.n	8005142 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005096:	f7fd fdd7 	bl	8002c48 <HAL_GetTick>
 800509a:	0002      	movs	r2, r0
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d902      	bls.n	80050ac <SPI_WaitFlagStateUntilTimeout+0x54>
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d142      	bne.n	8005132 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	21e0      	movs	r1, #224	; 0xe0
 80050b8:	438a      	bics	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	2382      	movs	r3, #130	; 0x82
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d113      	bne.n	80050f0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	2380      	movs	r3, #128	; 0x80
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d005      	beq.n	80050e0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	2380      	movs	r3, #128	; 0x80
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	429a      	cmp	r2, r3
 80050de:	d107      	bne.n	80050f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2140      	movs	r1, #64	; 0x40
 80050ec:	438a      	bics	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050f4:	2380      	movs	r3, #128	; 0x80
 80050f6:	019b      	lsls	r3, r3, #6
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d110      	bne.n	800511e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	491a      	ldr	r1, [pc, #104]	; (8005170 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005108:	400a      	ands	r2, r1
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2180      	movs	r1, #128	; 0x80
 8005118:	0189      	lsls	r1, r1, #6
 800511a:	430a      	orrs	r2, r1
 800511c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	225d      	movs	r2, #93	; 0x5d
 8005122:	2101      	movs	r1, #1
 8005124:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	225c      	movs	r2, #92	; 0x5c
 800512a:	2100      	movs	r1, #0
 800512c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e017      	b.n	8005162 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3b01      	subs	r3, #1
 8005140:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	4013      	ands	r3, r2
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	425a      	negs	r2, r3
 8005152:	4153      	adcs	r3, r2
 8005154:	b2db      	uxtb	r3, r3
 8005156:	001a      	movs	r2, r3
 8005158:	1dfb      	adds	r3, r7, #7
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d197      	bne.n	8005090 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	0018      	movs	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	b008      	add	sp, #32
 8005168:	bd80      	pop	{r7, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	20000004 	.word	0x20000004
 8005170:	ffffdfff 	.word	0xffffdfff

08005174 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	; 0x28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005182:	2317      	movs	r3, #23
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800518a:	f7fd fd5d 	bl	8002c48 <HAL_GetTick>
 800518e:	0002      	movs	r2, r0
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	1a9b      	subs	r3, r3, r2
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	18d3      	adds	r3, r2, r3
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800519a:	f7fd fd55 	bl	8002c48 <HAL_GetTick>
 800519e:	0003      	movs	r3, r0
 80051a0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	330c      	adds	r3, #12
 80051a8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051aa:	4b41      	ldr	r3, [pc, #260]	; (80052b0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	0013      	movs	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	00da      	lsls	r2, r3, #3
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	0d1b      	lsrs	r3, r3, #20
 80051ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051bc:	4353      	muls	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051c0:	e068      	b.n	8005294 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	23c0      	movs	r3, #192	; 0xc0
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d10a      	bne.n	80051e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d107      	bne.n	80051e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	2117      	movs	r1, #23
 80051da:	187b      	adds	r3, r7, r1
 80051dc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	3301      	adds	r3, #1
 80051e6:	d055      	beq.n	8005294 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051e8:	f7fd fd2e 	bl	8002c48 <HAL_GetTick>
 80051ec:	0002      	movs	r2, r0
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d902      	bls.n	80051fe <SPI_WaitFifoStateUntilTimeout+0x8a>
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d142      	bne.n	8005284 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	21e0      	movs	r1, #224	; 0xe0
 800520a:	438a      	bics	r2, r1
 800520c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	2382      	movs	r3, #130	; 0x82
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	429a      	cmp	r2, r3
 8005218:	d113      	bne.n	8005242 <SPI_WaitFifoStateUntilTimeout+0xce>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	2380      	movs	r3, #128	; 0x80
 8005220:	021b      	lsls	r3, r3, #8
 8005222:	429a      	cmp	r2, r3
 8005224:	d005      	beq.n	8005232 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	2380      	movs	r3, #128	; 0x80
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	429a      	cmp	r2, r3
 8005230:	d107      	bne.n	8005242 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2140      	movs	r1, #64	; 0x40
 800523e:	438a      	bics	r2, r1
 8005240:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005246:	2380      	movs	r3, #128	; 0x80
 8005248:	019b      	lsls	r3, r3, #6
 800524a:	429a      	cmp	r2, r3
 800524c:	d110      	bne.n	8005270 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4916      	ldr	r1, [pc, #88]	; (80052b4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800525a:	400a      	ands	r2, r1
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2180      	movs	r1, #128	; 0x80
 800526a:	0189      	lsls	r1, r1, #6
 800526c:	430a      	orrs	r2, r1
 800526e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	225d      	movs	r2, #93	; 0x5d
 8005274:	2101      	movs	r1, #1
 8005276:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	225c      	movs	r2, #92	; 0x5c
 800527c:	2100      	movs	r1, #0
 800527e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e010      	b.n	80052a6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	3b01      	subs	r3, #1
 8005292:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	4013      	ands	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d18e      	bne.n	80051c2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	0018      	movs	r0, r3
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b00a      	add	sp, #40	; 0x28
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	20000004 	.word	0x20000004
 80052b4:	ffffdfff 	.word	0xffffdfff

080052b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af02      	add	r7, sp, #8
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	23c0      	movs	r3, #192	; 0xc0
 80052c8:	0159      	lsls	r1, r3, #5
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	0013      	movs	r3, r2
 80052d2:	2200      	movs	r2, #0
 80052d4:	f7ff ff4e 	bl	8005174 <SPI_WaitFifoStateUntilTimeout>
 80052d8:	1e03      	subs	r3, r0, #0
 80052da:	d007      	beq.n	80052ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e0:	2220      	movs	r2, #32
 80052e2:	431a      	orrs	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e027      	b.n	800533c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	0013      	movs	r3, r2
 80052f6:	2200      	movs	r2, #0
 80052f8:	2180      	movs	r1, #128	; 0x80
 80052fa:	f7ff fead 	bl	8005058 <SPI_WaitFlagStateUntilTimeout>
 80052fe:	1e03      	subs	r3, r0, #0
 8005300:	d007      	beq.n	8005312 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005306:	2220      	movs	r2, #32
 8005308:	431a      	orrs	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e014      	b.n	800533c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	23c0      	movs	r3, #192	; 0xc0
 8005316:	00d9      	lsls	r1, r3, #3
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	0013      	movs	r3, r2
 8005320:	2200      	movs	r2, #0
 8005322:	f7ff ff27 	bl	8005174 <SPI_WaitFifoStateUntilTimeout>
 8005326:	1e03      	subs	r3, r0, #0
 8005328:	d007      	beq.n	800533a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532e:	2220      	movs	r2, #32
 8005330:	431a      	orrs	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e000      	b.n	800533c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	0018      	movs	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	b004      	add	sp, #16
 8005342:	bd80      	pop	{r7, pc}

08005344 <memset>:
 8005344:	0003      	movs	r3, r0
 8005346:	1882      	adds	r2, r0, r2
 8005348:	4293      	cmp	r3, r2
 800534a:	d100      	bne.n	800534e <memset+0xa>
 800534c:	4770      	bx	lr
 800534e:	7019      	strb	r1, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	e7f9      	b.n	8005348 <memset+0x4>

08005354 <__libc_init_array>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	2600      	movs	r6, #0
 8005358:	4c0c      	ldr	r4, [pc, #48]	; (800538c <__libc_init_array+0x38>)
 800535a:	4d0d      	ldr	r5, [pc, #52]	; (8005390 <__libc_init_array+0x3c>)
 800535c:	1b64      	subs	r4, r4, r5
 800535e:	10a4      	asrs	r4, r4, #2
 8005360:	42a6      	cmp	r6, r4
 8005362:	d109      	bne.n	8005378 <__libc_init_array+0x24>
 8005364:	2600      	movs	r6, #0
 8005366:	f000 f819 	bl	800539c <_init>
 800536a:	4c0a      	ldr	r4, [pc, #40]	; (8005394 <__libc_init_array+0x40>)
 800536c:	4d0a      	ldr	r5, [pc, #40]	; (8005398 <__libc_init_array+0x44>)
 800536e:	1b64      	subs	r4, r4, r5
 8005370:	10a4      	asrs	r4, r4, #2
 8005372:	42a6      	cmp	r6, r4
 8005374:	d105      	bne.n	8005382 <__libc_init_array+0x2e>
 8005376:	bd70      	pop	{r4, r5, r6, pc}
 8005378:	00b3      	lsls	r3, r6, #2
 800537a:	58eb      	ldr	r3, [r5, r3]
 800537c:	4798      	blx	r3
 800537e:	3601      	adds	r6, #1
 8005380:	e7ee      	b.n	8005360 <__libc_init_array+0xc>
 8005382:	00b3      	lsls	r3, r6, #2
 8005384:	58eb      	ldr	r3, [r5, r3]
 8005386:	4798      	blx	r3
 8005388:	3601      	adds	r6, #1
 800538a:	e7f2      	b.n	8005372 <__libc_init_array+0x1e>
 800538c:	08005424 	.word	0x08005424
 8005390:	08005424 	.word	0x08005424
 8005394:	08005428 	.word	0x08005428
 8005398:	08005424 	.word	0x08005424

0800539c <_init>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a2:	bc08      	pop	{r3}
 80053a4:	469e      	mov	lr, r3
 80053a6:	4770      	bx	lr

080053a8 <_fini>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ae:	bc08      	pop	{r3}
 80053b0:	469e      	mov	lr, r3
 80053b2:	4770      	bx	lr
