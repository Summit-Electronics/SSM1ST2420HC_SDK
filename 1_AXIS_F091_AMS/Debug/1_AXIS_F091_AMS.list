
1_AXIS_F091_AMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f50  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800503c  0800503c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800503c  0800503c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800503c  0800503c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001150  20000010  08005054  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  08005054  00021160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ba6  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ac4  00000000  00000000  00028c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000663  00000000  00000000  0002af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a53a  00000000  00000000  0002b5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a1c9  00000000  00000000  00045af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f6e5  00000000  00000000  0004fcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f48  00000000  00000000  000ef3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f12ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004ff4 	.word	0x08004ff4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004ff4 	.word	0x08004ff4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f001 f8fd 	bl	8001424 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f001 f867 	bl	8001304 <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 fcde 	bl	8000c00 <__aeabi_dsub>
 8000244:	f001 f85e 	bl	8001304 <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_fsub>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	46c6      	mov	lr, r8
 800025c:	0243      	lsls	r3, r0, #9
 800025e:	0a5b      	lsrs	r3, r3, #9
 8000260:	0045      	lsls	r5, r0, #1
 8000262:	00da      	lsls	r2, r3, #3
 8000264:	0fc4      	lsrs	r4, r0, #31
 8000266:	0248      	lsls	r0, r1, #9
 8000268:	004f      	lsls	r7, r1, #1
 800026a:	4694      	mov	ip, r2
 800026c:	0a42      	lsrs	r2, r0, #9
 800026e:	001e      	movs	r6, r3
 8000270:	4690      	mov	r8, r2
 8000272:	b500      	push	{lr}
 8000274:	0e2d      	lsrs	r5, r5, #24
 8000276:	0e3f      	lsrs	r7, r7, #24
 8000278:	0fc9      	lsrs	r1, r1, #31
 800027a:	0980      	lsrs	r0, r0, #6
 800027c:	2fff      	cmp	r7, #255	; 0xff
 800027e:	d059      	beq.n	8000334 <__aeabi_fsub+0xdc>
 8000280:	2201      	movs	r2, #1
 8000282:	4051      	eors	r1, r2
 8000284:	428c      	cmp	r4, r1
 8000286:	d039      	beq.n	80002fc <__aeabi_fsub+0xa4>
 8000288:	1bea      	subs	r2, r5, r7
 800028a:	2a00      	cmp	r2, #0
 800028c:	dd58      	ble.n	8000340 <__aeabi_fsub+0xe8>
 800028e:	2f00      	cmp	r7, #0
 8000290:	d068      	beq.n	8000364 <__aeabi_fsub+0x10c>
 8000292:	2dff      	cmp	r5, #255	; 0xff
 8000294:	d100      	bne.n	8000298 <__aeabi_fsub+0x40>
 8000296:	e0d1      	b.n	800043c <__aeabi_fsub+0x1e4>
 8000298:	2380      	movs	r3, #128	; 0x80
 800029a:	04db      	lsls	r3, r3, #19
 800029c:	4318      	orrs	r0, r3
 800029e:	2a1b      	cmp	r2, #27
 80002a0:	dc00      	bgt.n	80002a4 <__aeabi_fsub+0x4c>
 80002a2:	e0e3      	b.n	800046c <__aeabi_fsub+0x214>
 80002a4:	2301      	movs	r3, #1
 80002a6:	4662      	mov	r2, ip
 80002a8:	1ad3      	subs	r3, r2, r3
 80002aa:	015a      	lsls	r2, r3, #5
 80002ac:	d400      	bmi.n	80002b0 <__aeabi_fsub+0x58>
 80002ae:	e0ac      	b.n	800040a <__aeabi_fsub+0x1b2>
 80002b0:	019b      	lsls	r3, r3, #6
 80002b2:	099e      	lsrs	r6, r3, #6
 80002b4:	0030      	movs	r0, r6
 80002b6:	f001 f8bf 	bl	8001438 <__clzsi2>
 80002ba:	0033      	movs	r3, r6
 80002bc:	3805      	subs	r0, #5
 80002be:	4083      	lsls	r3, r0
 80002c0:	4285      	cmp	r5, r0
 80002c2:	dc00      	bgt.n	80002c6 <__aeabi_fsub+0x6e>
 80002c4:	e0c6      	b.n	8000454 <__aeabi_fsub+0x1fc>
 80002c6:	4ab2      	ldr	r2, [pc, #712]	; (8000590 <__aeabi_fsub+0x338>)
 80002c8:	1a2d      	subs	r5, r5, r0
 80002ca:	4013      	ands	r3, r2
 80002cc:	075a      	lsls	r2, r3, #29
 80002ce:	d004      	beq.n	80002da <__aeabi_fsub+0x82>
 80002d0:	220f      	movs	r2, #15
 80002d2:	401a      	ands	r2, r3
 80002d4:	2a04      	cmp	r2, #4
 80002d6:	d000      	beq.n	80002da <__aeabi_fsub+0x82>
 80002d8:	3304      	adds	r3, #4
 80002da:	015a      	lsls	r2, r3, #5
 80002dc:	d400      	bmi.n	80002e0 <__aeabi_fsub+0x88>
 80002de:	e097      	b.n	8000410 <__aeabi_fsub+0x1b8>
 80002e0:	1c6a      	adds	r2, r5, #1
 80002e2:	2dfe      	cmp	r5, #254	; 0xfe
 80002e4:	d100      	bne.n	80002e8 <__aeabi_fsub+0x90>
 80002e6:	e084      	b.n	80003f2 <__aeabi_fsub+0x19a>
 80002e8:	019b      	lsls	r3, r3, #6
 80002ea:	0a5e      	lsrs	r6, r3, #9
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	05d0      	lsls	r0, r2, #23
 80002f0:	4330      	orrs	r0, r6
 80002f2:	07e4      	lsls	r4, r4, #31
 80002f4:	4320      	orrs	r0, r4
 80002f6:	bc80      	pop	{r7}
 80002f8:	46b8      	mov	r8, r7
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	1bea      	subs	r2, r5, r7
 80002fe:	2a00      	cmp	r2, #0
 8000300:	dd41      	ble.n	8000386 <__aeabi_fsub+0x12e>
 8000302:	2f00      	cmp	r7, #0
 8000304:	d06b      	beq.n	80003de <__aeabi_fsub+0x186>
 8000306:	2dff      	cmp	r5, #255	; 0xff
 8000308:	d100      	bne.n	800030c <__aeabi_fsub+0xb4>
 800030a:	e097      	b.n	800043c <__aeabi_fsub+0x1e4>
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	04db      	lsls	r3, r3, #19
 8000310:	4318      	orrs	r0, r3
 8000312:	2a1b      	cmp	r2, #27
 8000314:	dc00      	bgt.n	8000318 <__aeabi_fsub+0xc0>
 8000316:	e0cc      	b.n	80004b2 <__aeabi_fsub+0x25a>
 8000318:	2301      	movs	r3, #1
 800031a:	4463      	add	r3, ip
 800031c:	015a      	lsls	r2, r3, #5
 800031e:	d574      	bpl.n	800040a <__aeabi_fsub+0x1b2>
 8000320:	3501      	adds	r5, #1
 8000322:	2dff      	cmp	r5, #255	; 0xff
 8000324:	d065      	beq.n	80003f2 <__aeabi_fsub+0x19a>
 8000326:	2201      	movs	r2, #1
 8000328:	499a      	ldr	r1, [pc, #616]	; (8000594 <__aeabi_fsub+0x33c>)
 800032a:	401a      	ands	r2, r3
 800032c:	085b      	lsrs	r3, r3, #1
 800032e:	400b      	ands	r3, r1
 8000330:	4313      	orrs	r3, r2
 8000332:	e7cb      	b.n	80002cc <__aeabi_fsub+0x74>
 8000334:	2800      	cmp	r0, #0
 8000336:	d01f      	beq.n	8000378 <__aeabi_fsub+0x120>
 8000338:	428c      	cmp	r4, r1
 800033a:	d022      	beq.n	8000382 <__aeabi_fsub+0x12a>
 800033c:	002a      	movs	r2, r5
 800033e:	3aff      	subs	r2, #255	; 0xff
 8000340:	2a00      	cmp	r2, #0
 8000342:	d035      	beq.n	80003b0 <__aeabi_fsub+0x158>
 8000344:	1b7a      	subs	r2, r7, r5
 8000346:	2d00      	cmp	r5, #0
 8000348:	d000      	beq.n	800034c <__aeabi_fsub+0xf4>
 800034a:	e099      	b.n	8000480 <__aeabi_fsub+0x228>
 800034c:	4663      	mov	r3, ip
 800034e:	2b00      	cmp	r3, #0
 8000350:	d100      	bne.n	8000354 <__aeabi_fsub+0xfc>
 8000352:	e0dd      	b.n	8000510 <__aeabi_fsub+0x2b8>
 8000354:	1e53      	subs	r3, r2, #1
 8000356:	2a01      	cmp	r2, #1
 8000358:	d100      	bne.n	800035c <__aeabi_fsub+0x104>
 800035a:	e105      	b.n	8000568 <__aeabi_fsub+0x310>
 800035c:	2aff      	cmp	r2, #255	; 0xff
 800035e:	d06b      	beq.n	8000438 <__aeabi_fsub+0x1e0>
 8000360:	001a      	movs	r2, r3
 8000362:	e094      	b.n	800048e <__aeabi_fsub+0x236>
 8000364:	2800      	cmp	r0, #0
 8000366:	d073      	beq.n	8000450 <__aeabi_fsub+0x1f8>
 8000368:	1e51      	subs	r1, r2, #1
 800036a:	2a01      	cmp	r2, #1
 800036c:	d100      	bne.n	8000370 <__aeabi_fsub+0x118>
 800036e:	e0df      	b.n	8000530 <__aeabi_fsub+0x2d8>
 8000370:	2aff      	cmp	r2, #255	; 0xff
 8000372:	d063      	beq.n	800043c <__aeabi_fsub+0x1e4>
 8000374:	000a      	movs	r2, r1
 8000376:	e792      	b.n	800029e <__aeabi_fsub+0x46>
 8000378:	2201      	movs	r2, #1
 800037a:	4051      	eors	r1, r2
 800037c:	42a1      	cmp	r1, r4
 800037e:	d000      	beq.n	8000382 <__aeabi_fsub+0x12a>
 8000380:	e782      	b.n	8000288 <__aeabi_fsub+0x30>
 8000382:	002a      	movs	r2, r5
 8000384:	3aff      	subs	r2, #255	; 0xff
 8000386:	2a00      	cmp	r2, #0
 8000388:	d036      	beq.n	80003f8 <__aeabi_fsub+0x1a0>
 800038a:	1b7a      	subs	r2, r7, r5
 800038c:	2d00      	cmp	r5, #0
 800038e:	d100      	bne.n	8000392 <__aeabi_fsub+0x13a>
 8000390:	e0aa      	b.n	80004e8 <__aeabi_fsub+0x290>
 8000392:	2fff      	cmp	r7, #255	; 0xff
 8000394:	d100      	bne.n	8000398 <__aeabi_fsub+0x140>
 8000396:	e0da      	b.n	800054e <__aeabi_fsub+0x2f6>
 8000398:	2380      	movs	r3, #128	; 0x80
 800039a:	4661      	mov	r1, ip
 800039c:	04db      	lsls	r3, r3, #19
 800039e:	4319      	orrs	r1, r3
 80003a0:	468c      	mov	ip, r1
 80003a2:	2a1b      	cmp	r2, #27
 80003a4:	dc00      	bgt.n	80003a8 <__aeabi_fsub+0x150>
 80003a6:	e0d4      	b.n	8000552 <__aeabi_fsub+0x2fa>
 80003a8:	2301      	movs	r3, #1
 80003aa:	003d      	movs	r5, r7
 80003ac:	181b      	adds	r3, r3, r0
 80003ae:	e7b5      	b.n	800031c <__aeabi_fsub+0xc4>
 80003b0:	27fe      	movs	r7, #254	; 0xfe
 80003b2:	1c6a      	adds	r2, r5, #1
 80003b4:	4217      	tst	r7, r2
 80003b6:	d171      	bne.n	800049c <__aeabi_fsub+0x244>
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d000      	beq.n	80003be <__aeabi_fsub+0x166>
 80003bc:	e09e      	b.n	80004fc <__aeabi_fsub+0x2a4>
 80003be:	4663      	mov	r3, ip
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d100      	bne.n	80003c6 <__aeabi_fsub+0x16e>
 80003c4:	e0d5      	b.n	8000572 <__aeabi_fsub+0x31a>
 80003c6:	2200      	movs	r2, #0
 80003c8:	2800      	cmp	r0, #0
 80003ca:	d100      	bne.n	80003ce <__aeabi_fsub+0x176>
 80003cc:	e78f      	b.n	80002ee <__aeabi_fsub+0x96>
 80003ce:	1a1b      	subs	r3, r3, r0
 80003d0:	015e      	lsls	r6, r3, #5
 80003d2:	d400      	bmi.n	80003d6 <__aeabi_fsub+0x17e>
 80003d4:	e0d6      	b.n	8000584 <__aeabi_fsub+0x32c>
 80003d6:	4663      	mov	r3, ip
 80003d8:	000c      	movs	r4, r1
 80003da:	1ac3      	subs	r3, r0, r3
 80003dc:	e776      	b.n	80002cc <__aeabi_fsub+0x74>
 80003de:	2800      	cmp	r0, #0
 80003e0:	d036      	beq.n	8000450 <__aeabi_fsub+0x1f8>
 80003e2:	1e51      	subs	r1, r2, #1
 80003e4:	2a01      	cmp	r2, #1
 80003e6:	d100      	bne.n	80003ea <__aeabi_fsub+0x192>
 80003e8:	e09a      	b.n	8000520 <__aeabi_fsub+0x2c8>
 80003ea:	2aff      	cmp	r2, #255	; 0xff
 80003ec:	d026      	beq.n	800043c <__aeabi_fsub+0x1e4>
 80003ee:	000a      	movs	r2, r1
 80003f0:	e78f      	b.n	8000312 <__aeabi_fsub+0xba>
 80003f2:	22ff      	movs	r2, #255	; 0xff
 80003f4:	2600      	movs	r6, #0
 80003f6:	e77a      	b.n	80002ee <__aeabi_fsub+0x96>
 80003f8:	27fe      	movs	r7, #254	; 0xfe
 80003fa:	1c6a      	adds	r2, r5, #1
 80003fc:	4217      	tst	r7, r2
 80003fe:	d062      	beq.n	80004c6 <__aeabi_fsub+0x26e>
 8000400:	2aff      	cmp	r2, #255	; 0xff
 8000402:	d0f6      	beq.n	80003f2 <__aeabi_fsub+0x19a>
 8000404:	0015      	movs	r5, r2
 8000406:	4460      	add	r0, ip
 8000408:	0843      	lsrs	r3, r0, #1
 800040a:	075a      	lsls	r2, r3, #29
 800040c:	d000      	beq.n	8000410 <__aeabi_fsub+0x1b8>
 800040e:	e75f      	b.n	80002d0 <__aeabi_fsub+0x78>
 8000410:	08db      	lsrs	r3, r3, #3
 8000412:	2dff      	cmp	r5, #255	; 0xff
 8000414:	d012      	beq.n	800043c <__aeabi_fsub+0x1e4>
 8000416:	025b      	lsls	r3, r3, #9
 8000418:	0a5e      	lsrs	r6, r3, #9
 800041a:	b2ea      	uxtb	r2, r5
 800041c:	e767      	b.n	80002ee <__aeabi_fsub+0x96>
 800041e:	4662      	mov	r2, ip
 8000420:	2a00      	cmp	r2, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_fsub+0x1ce>
 8000424:	e093      	b.n	800054e <__aeabi_fsub+0x2f6>
 8000426:	2800      	cmp	r0, #0
 8000428:	d008      	beq.n	800043c <__aeabi_fsub+0x1e4>
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	03d2      	lsls	r2, r2, #15
 800042e:	4213      	tst	r3, r2
 8000430:	d004      	beq.n	800043c <__aeabi_fsub+0x1e4>
 8000432:	4640      	mov	r0, r8
 8000434:	4210      	tst	r0, r2
 8000436:	d101      	bne.n	800043c <__aeabi_fsub+0x1e4>
 8000438:	000c      	movs	r4, r1
 800043a:	4643      	mov	r3, r8
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0d8      	beq.n	80003f2 <__aeabi_fsub+0x19a>
 8000440:	2680      	movs	r6, #128	; 0x80
 8000442:	03f6      	lsls	r6, r6, #15
 8000444:	431e      	orrs	r6, r3
 8000446:	0276      	lsls	r6, r6, #9
 8000448:	22ff      	movs	r2, #255	; 0xff
 800044a:	0a76      	lsrs	r6, r6, #9
 800044c:	e74f      	b.n	80002ee <__aeabi_fsub+0x96>
 800044e:	4643      	mov	r3, r8
 8000450:	0015      	movs	r5, r2
 8000452:	e7de      	b.n	8000412 <__aeabi_fsub+0x1ba>
 8000454:	2220      	movs	r2, #32
 8000456:	1b40      	subs	r0, r0, r5
 8000458:	3001      	adds	r0, #1
 800045a:	1a12      	subs	r2, r2, r0
 800045c:	0019      	movs	r1, r3
 800045e:	4093      	lsls	r3, r2
 8000460:	40c1      	lsrs	r1, r0
 8000462:	1e5a      	subs	r2, r3, #1
 8000464:	4193      	sbcs	r3, r2
 8000466:	2500      	movs	r5, #0
 8000468:	430b      	orrs	r3, r1
 800046a:	e72f      	b.n	80002cc <__aeabi_fsub+0x74>
 800046c:	2320      	movs	r3, #32
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	0001      	movs	r1, r0
 8000472:	4098      	lsls	r0, r3
 8000474:	0003      	movs	r3, r0
 8000476:	40d1      	lsrs	r1, r2
 8000478:	1e5a      	subs	r2, r3, #1
 800047a:	4193      	sbcs	r3, r2
 800047c:	430b      	orrs	r3, r1
 800047e:	e712      	b.n	80002a6 <__aeabi_fsub+0x4e>
 8000480:	2fff      	cmp	r7, #255	; 0xff
 8000482:	d0d9      	beq.n	8000438 <__aeabi_fsub+0x1e0>
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	4664      	mov	r4, ip
 8000488:	04db      	lsls	r3, r3, #19
 800048a:	431c      	orrs	r4, r3
 800048c:	46a4      	mov	ip, r4
 800048e:	2a1b      	cmp	r2, #27
 8000490:	dd52      	ble.n	8000538 <__aeabi_fsub+0x2e0>
 8000492:	2301      	movs	r3, #1
 8000494:	000c      	movs	r4, r1
 8000496:	003d      	movs	r5, r7
 8000498:	1ac3      	subs	r3, r0, r3
 800049a:	e706      	b.n	80002aa <__aeabi_fsub+0x52>
 800049c:	4663      	mov	r3, ip
 800049e:	1a1e      	subs	r6, r3, r0
 80004a0:	0173      	lsls	r3, r6, #5
 80004a2:	d439      	bmi.n	8000518 <__aeabi_fsub+0x2c0>
 80004a4:	2e00      	cmp	r6, #0
 80004a6:	d000      	beq.n	80004aa <__aeabi_fsub+0x252>
 80004a8:	e704      	b.n	80002b4 <__aeabi_fsub+0x5c>
 80004aa:	2400      	movs	r4, #0
 80004ac:	2200      	movs	r2, #0
 80004ae:	2600      	movs	r6, #0
 80004b0:	e71d      	b.n	80002ee <__aeabi_fsub+0x96>
 80004b2:	2320      	movs	r3, #32
 80004b4:	1a9b      	subs	r3, r3, r2
 80004b6:	0001      	movs	r1, r0
 80004b8:	4098      	lsls	r0, r3
 80004ba:	0003      	movs	r3, r0
 80004bc:	40d1      	lsrs	r1, r2
 80004be:	1e5a      	subs	r2, r3, #1
 80004c0:	4193      	sbcs	r3, r2
 80004c2:	430b      	orrs	r3, r1
 80004c4:	e729      	b.n	800031a <__aeabi_fsub+0xc2>
 80004c6:	2d00      	cmp	r5, #0
 80004c8:	d1a9      	bne.n	800041e <__aeabi_fsub+0x1c6>
 80004ca:	4663      	mov	r3, ip
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d056      	beq.n	800057e <__aeabi_fsub+0x326>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2800      	cmp	r0, #0
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fsub+0x280>
 80004d6:	e70a      	b.n	80002ee <__aeabi_fsub+0x96>
 80004d8:	0003      	movs	r3, r0
 80004da:	4463      	add	r3, ip
 80004dc:	015a      	lsls	r2, r3, #5
 80004de:	d594      	bpl.n	800040a <__aeabi_fsub+0x1b2>
 80004e0:	4a2b      	ldr	r2, [pc, #172]	; (8000590 <__aeabi_fsub+0x338>)
 80004e2:	3501      	adds	r5, #1
 80004e4:	4013      	ands	r3, r2
 80004e6:	e790      	b.n	800040a <__aeabi_fsub+0x1b2>
 80004e8:	4663      	mov	r3, ip
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0af      	beq.n	800044e <__aeabi_fsub+0x1f6>
 80004ee:	1e53      	subs	r3, r2, #1
 80004f0:	2a01      	cmp	r2, #1
 80004f2:	d015      	beq.n	8000520 <__aeabi_fsub+0x2c8>
 80004f4:	2aff      	cmp	r2, #255	; 0xff
 80004f6:	d02a      	beq.n	800054e <__aeabi_fsub+0x2f6>
 80004f8:	001a      	movs	r2, r3
 80004fa:	e752      	b.n	80003a2 <__aeabi_fsub+0x14a>
 80004fc:	4662      	mov	r2, ip
 80004fe:	2a00      	cmp	r2, #0
 8000500:	d191      	bne.n	8000426 <__aeabi_fsub+0x1ce>
 8000502:	2800      	cmp	r0, #0
 8000504:	d198      	bne.n	8000438 <__aeabi_fsub+0x1e0>
 8000506:	2680      	movs	r6, #128	; 0x80
 8000508:	2400      	movs	r4, #0
 800050a:	22ff      	movs	r2, #255	; 0xff
 800050c:	03f6      	lsls	r6, r6, #15
 800050e:	e6ee      	b.n	80002ee <__aeabi_fsub+0x96>
 8000510:	000c      	movs	r4, r1
 8000512:	4643      	mov	r3, r8
 8000514:	0015      	movs	r5, r2
 8000516:	e77c      	b.n	8000412 <__aeabi_fsub+0x1ba>
 8000518:	4663      	mov	r3, ip
 800051a:	000c      	movs	r4, r1
 800051c:	1ac6      	subs	r6, r0, r3
 800051e:	e6c9      	b.n	80002b4 <__aeabi_fsub+0x5c>
 8000520:	0003      	movs	r3, r0
 8000522:	4463      	add	r3, ip
 8000524:	2501      	movs	r5, #1
 8000526:	015a      	lsls	r2, r3, #5
 8000528:	d400      	bmi.n	800052c <__aeabi_fsub+0x2d4>
 800052a:	e76e      	b.n	800040a <__aeabi_fsub+0x1b2>
 800052c:	2502      	movs	r5, #2
 800052e:	e6fa      	b.n	8000326 <__aeabi_fsub+0xce>
 8000530:	4663      	mov	r3, ip
 8000532:	2501      	movs	r5, #1
 8000534:	1a1b      	subs	r3, r3, r0
 8000536:	e6b8      	b.n	80002aa <__aeabi_fsub+0x52>
 8000538:	4664      	mov	r4, ip
 800053a:	2320      	movs	r3, #32
 800053c:	40d4      	lsrs	r4, r2
 800053e:	1a9b      	subs	r3, r3, r2
 8000540:	4662      	mov	r2, ip
 8000542:	409a      	lsls	r2, r3
 8000544:	0013      	movs	r3, r2
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	4193      	sbcs	r3, r2
 800054a:	4323      	orrs	r3, r4
 800054c:	e7a2      	b.n	8000494 <__aeabi_fsub+0x23c>
 800054e:	4643      	mov	r3, r8
 8000550:	e774      	b.n	800043c <__aeabi_fsub+0x1e4>
 8000552:	4661      	mov	r1, ip
 8000554:	2320      	movs	r3, #32
 8000556:	40d1      	lsrs	r1, r2
 8000558:	1a9b      	subs	r3, r3, r2
 800055a:	4662      	mov	r2, ip
 800055c:	409a      	lsls	r2, r3
 800055e:	0013      	movs	r3, r2
 8000560:	1e5a      	subs	r2, r3, #1
 8000562:	4193      	sbcs	r3, r2
 8000564:	430b      	orrs	r3, r1
 8000566:	e720      	b.n	80003aa <__aeabi_fsub+0x152>
 8000568:	4663      	mov	r3, ip
 800056a:	000c      	movs	r4, r1
 800056c:	2501      	movs	r5, #1
 800056e:	1ac3      	subs	r3, r0, r3
 8000570:	e69b      	b.n	80002aa <__aeabi_fsub+0x52>
 8000572:	2800      	cmp	r0, #0
 8000574:	d099      	beq.n	80004aa <__aeabi_fsub+0x252>
 8000576:	000c      	movs	r4, r1
 8000578:	4646      	mov	r6, r8
 800057a:	2200      	movs	r2, #0
 800057c:	e6b7      	b.n	80002ee <__aeabi_fsub+0x96>
 800057e:	4646      	mov	r6, r8
 8000580:	2200      	movs	r2, #0
 8000582:	e6b4      	b.n	80002ee <__aeabi_fsub+0x96>
 8000584:	2b00      	cmp	r3, #0
 8000586:	d000      	beq.n	800058a <__aeabi_fsub+0x332>
 8000588:	e73f      	b.n	800040a <__aeabi_fsub+0x1b2>
 800058a:	2400      	movs	r4, #0
 800058c:	2600      	movs	r6, #0
 800058e:	e6ae      	b.n	80002ee <__aeabi_fsub+0x96>
 8000590:	fbffffff 	.word	0xfbffffff
 8000594:	7dffffff 	.word	0x7dffffff

08000598 <__aeabi_f2iz>:
 8000598:	0241      	lsls	r1, r0, #9
 800059a:	0042      	lsls	r2, r0, #1
 800059c:	0fc3      	lsrs	r3, r0, #31
 800059e:	0a49      	lsrs	r1, r1, #9
 80005a0:	2000      	movs	r0, #0
 80005a2:	0e12      	lsrs	r2, r2, #24
 80005a4:	2a7e      	cmp	r2, #126	; 0x7e
 80005a6:	dd03      	ble.n	80005b0 <__aeabi_f2iz+0x18>
 80005a8:	2a9d      	cmp	r2, #157	; 0x9d
 80005aa:	dd02      	ble.n	80005b2 <__aeabi_f2iz+0x1a>
 80005ac:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <__aeabi_f2iz+0x3c>)
 80005ae:	1898      	adds	r0, r3, r2
 80005b0:	4770      	bx	lr
 80005b2:	2080      	movs	r0, #128	; 0x80
 80005b4:	0400      	lsls	r0, r0, #16
 80005b6:	4301      	orrs	r1, r0
 80005b8:	2a95      	cmp	r2, #149	; 0x95
 80005ba:	dc07      	bgt.n	80005cc <__aeabi_f2iz+0x34>
 80005bc:	2096      	movs	r0, #150	; 0x96
 80005be:	1a82      	subs	r2, r0, r2
 80005c0:	40d1      	lsrs	r1, r2
 80005c2:	4248      	negs	r0, r1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f3      	bne.n	80005b0 <__aeabi_f2iz+0x18>
 80005c8:	0008      	movs	r0, r1
 80005ca:	e7f1      	b.n	80005b0 <__aeabi_f2iz+0x18>
 80005cc:	3a96      	subs	r2, #150	; 0x96
 80005ce:	4091      	lsls	r1, r2
 80005d0:	e7f7      	b.n	80005c2 <__aeabi_f2iz+0x2a>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	7fffffff 	.word	0x7fffffff

080005d8 <__aeabi_i2f>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	2800      	cmp	r0, #0
 80005dc:	d013      	beq.n	8000606 <__aeabi_i2f+0x2e>
 80005de:	17c3      	asrs	r3, r0, #31
 80005e0:	18c5      	adds	r5, r0, r3
 80005e2:	405d      	eors	r5, r3
 80005e4:	0fc4      	lsrs	r4, r0, #31
 80005e6:	0028      	movs	r0, r5
 80005e8:	f000 ff26 	bl	8001438 <__clzsi2>
 80005ec:	239e      	movs	r3, #158	; 0x9e
 80005ee:	0001      	movs	r1, r0
 80005f0:	1a1b      	subs	r3, r3, r0
 80005f2:	2b96      	cmp	r3, #150	; 0x96
 80005f4:	dc0f      	bgt.n	8000616 <__aeabi_i2f+0x3e>
 80005f6:	2808      	cmp	r0, #8
 80005f8:	d031      	beq.n	800065e <__aeabi_i2f+0x86>
 80005fa:	3908      	subs	r1, #8
 80005fc:	408d      	lsls	r5, r1
 80005fe:	026d      	lsls	r5, r5, #9
 8000600:	0a6d      	lsrs	r5, r5, #9
 8000602:	b2d8      	uxtb	r0, r3
 8000604:	e002      	b.n	800060c <__aeabi_i2f+0x34>
 8000606:	2400      	movs	r4, #0
 8000608:	2000      	movs	r0, #0
 800060a:	2500      	movs	r5, #0
 800060c:	05c0      	lsls	r0, r0, #23
 800060e:	4328      	orrs	r0, r5
 8000610:	07e4      	lsls	r4, r4, #31
 8000612:	4320      	orrs	r0, r4
 8000614:	bd70      	pop	{r4, r5, r6, pc}
 8000616:	2b99      	cmp	r3, #153	; 0x99
 8000618:	dd0c      	ble.n	8000634 <__aeabi_i2f+0x5c>
 800061a:	2205      	movs	r2, #5
 800061c:	1a12      	subs	r2, r2, r0
 800061e:	0028      	movs	r0, r5
 8000620:	40d0      	lsrs	r0, r2
 8000622:	0002      	movs	r2, r0
 8000624:	0008      	movs	r0, r1
 8000626:	301b      	adds	r0, #27
 8000628:	4085      	lsls	r5, r0
 800062a:	0028      	movs	r0, r5
 800062c:	1e45      	subs	r5, r0, #1
 800062e:	41a8      	sbcs	r0, r5
 8000630:	4302      	orrs	r2, r0
 8000632:	0015      	movs	r5, r2
 8000634:	2905      	cmp	r1, #5
 8000636:	dc16      	bgt.n	8000666 <__aeabi_i2f+0x8e>
 8000638:	002a      	movs	r2, r5
 800063a:	480f      	ldr	r0, [pc, #60]	; (8000678 <__aeabi_i2f+0xa0>)
 800063c:	4002      	ands	r2, r0
 800063e:	076e      	lsls	r6, r5, #29
 8000640:	d009      	beq.n	8000656 <__aeabi_i2f+0x7e>
 8000642:	260f      	movs	r6, #15
 8000644:	4035      	ands	r5, r6
 8000646:	2d04      	cmp	r5, #4
 8000648:	d005      	beq.n	8000656 <__aeabi_i2f+0x7e>
 800064a:	3204      	adds	r2, #4
 800064c:	0155      	lsls	r5, r2, #5
 800064e:	d502      	bpl.n	8000656 <__aeabi_i2f+0x7e>
 8000650:	239f      	movs	r3, #159	; 0x9f
 8000652:	4002      	ands	r2, r0
 8000654:	1a5b      	subs	r3, r3, r1
 8000656:	0192      	lsls	r2, r2, #6
 8000658:	0a55      	lsrs	r5, r2, #9
 800065a:	b2d8      	uxtb	r0, r3
 800065c:	e7d6      	b.n	800060c <__aeabi_i2f+0x34>
 800065e:	026d      	lsls	r5, r5, #9
 8000660:	2096      	movs	r0, #150	; 0x96
 8000662:	0a6d      	lsrs	r5, r5, #9
 8000664:	e7d2      	b.n	800060c <__aeabi_i2f+0x34>
 8000666:	1f4a      	subs	r2, r1, #5
 8000668:	4095      	lsls	r5, r2
 800066a:	002a      	movs	r2, r5
 800066c:	4802      	ldr	r0, [pc, #8]	; (8000678 <__aeabi_i2f+0xa0>)
 800066e:	4002      	ands	r2, r0
 8000670:	076e      	lsls	r6, r5, #29
 8000672:	d0f0      	beq.n	8000656 <__aeabi_i2f+0x7e>
 8000674:	e7e5      	b.n	8000642 <__aeabi_i2f+0x6a>
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	fbffffff 	.word	0xfbffffff

0800067c <__aeabi_dmul>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	4645      	mov	r5, r8
 8000680:	46de      	mov	lr, fp
 8000682:	4657      	mov	r7, sl
 8000684:	464e      	mov	r6, r9
 8000686:	b5e0      	push	{r5, r6, r7, lr}
 8000688:	001f      	movs	r7, r3
 800068a:	030b      	lsls	r3, r1, #12
 800068c:	0b1b      	lsrs	r3, r3, #12
 800068e:	469b      	mov	fp, r3
 8000690:	004d      	lsls	r5, r1, #1
 8000692:	0fcb      	lsrs	r3, r1, #31
 8000694:	0004      	movs	r4, r0
 8000696:	4691      	mov	r9, r2
 8000698:	4698      	mov	r8, r3
 800069a:	b087      	sub	sp, #28
 800069c:	0d6d      	lsrs	r5, r5, #21
 800069e:	d100      	bne.n	80006a2 <__aeabi_dmul+0x26>
 80006a0:	e1cd      	b.n	8000a3e <__aeabi_dmul+0x3c2>
 80006a2:	4bce      	ldr	r3, [pc, #824]	; (80009dc <__aeabi_dmul+0x360>)
 80006a4:	429d      	cmp	r5, r3
 80006a6:	d100      	bne.n	80006aa <__aeabi_dmul+0x2e>
 80006a8:	e1e9      	b.n	8000a7e <__aeabi_dmul+0x402>
 80006aa:	465a      	mov	r2, fp
 80006ac:	0f43      	lsrs	r3, r0, #29
 80006ae:	00d2      	lsls	r2, r2, #3
 80006b0:	4313      	orrs	r3, r2
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	0412      	lsls	r2, r2, #16
 80006b6:	431a      	orrs	r2, r3
 80006b8:	00c3      	lsls	r3, r0, #3
 80006ba:	469a      	mov	sl, r3
 80006bc:	4bc8      	ldr	r3, [pc, #800]	; (80009e0 <__aeabi_dmul+0x364>)
 80006be:	4693      	mov	fp, r2
 80006c0:	469c      	mov	ip, r3
 80006c2:	2300      	movs	r3, #0
 80006c4:	2600      	movs	r6, #0
 80006c6:	4465      	add	r5, ip
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	033c      	lsls	r4, r7, #12
 80006cc:	007b      	lsls	r3, r7, #1
 80006ce:	4648      	mov	r0, r9
 80006d0:	0b24      	lsrs	r4, r4, #12
 80006d2:	0d5b      	lsrs	r3, r3, #21
 80006d4:	0fff      	lsrs	r7, r7, #31
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d100      	bne.n	80006dc <__aeabi_dmul+0x60>
 80006da:	e189      	b.n	80009f0 <__aeabi_dmul+0x374>
 80006dc:	4abf      	ldr	r2, [pc, #764]	; (80009dc <__aeabi_dmul+0x360>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d019      	beq.n	8000716 <__aeabi_dmul+0x9a>
 80006e2:	0f42      	lsrs	r2, r0, #29
 80006e4:	00e4      	lsls	r4, r4, #3
 80006e6:	4322      	orrs	r2, r4
 80006e8:	2480      	movs	r4, #128	; 0x80
 80006ea:	0424      	lsls	r4, r4, #16
 80006ec:	4314      	orrs	r4, r2
 80006ee:	4abc      	ldr	r2, [pc, #752]	; (80009e0 <__aeabi_dmul+0x364>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4694      	mov	ip, r2
 80006f4:	4642      	mov	r2, r8
 80006f6:	4463      	add	r3, ip
 80006f8:	195b      	adds	r3, r3, r5
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	9b01      	ldr	r3, [sp, #4]
 80006fe:	407a      	eors	r2, r7
 8000700:	3301      	adds	r3, #1
 8000702:	00c0      	lsls	r0, r0, #3
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	9302      	str	r3, [sp, #8]
 8000708:	2e0a      	cmp	r6, #10
 800070a:	dd1c      	ble.n	8000746 <__aeabi_dmul+0xca>
 800070c:	003a      	movs	r2, r7
 800070e:	2e0b      	cmp	r6, #11
 8000710:	d05e      	beq.n	80007d0 <__aeabi_dmul+0x154>
 8000712:	4647      	mov	r7, r8
 8000714:	e056      	b.n	80007c4 <__aeabi_dmul+0x148>
 8000716:	4649      	mov	r1, r9
 8000718:	4bb0      	ldr	r3, [pc, #704]	; (80009dc <__aeabi_dmul+0x360>)
 800071a:	4321      	orrs	r1, r4
 800071c:	18eb      	adds	r3, r5, r3
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	2900      	cmp	r1, #0
 8000722:	d12a      	bne.n	800077a <__aeabi_dmul+0xfe>
 8000724:	2080      	movs	r0, #128	; 0x80
 8000726:	2202      	movs	r2, #2
 8000728:	0100      	lsls	r0, r0, #4
 800072a:	002b      	movs	r3, r5
 800072c:	4684      	mov	ip, r0
 800072e:	4316      	orrs	r6, r2
 8000730:	4642      	mov	r2, r8
 8000732:	4463      	add	r3, ip
 8000734:	407a      	eors	r2, r7
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	9302      	str	r3, [sp, #8]
 800073a:	2e0a      	cmp	r6, #10
 800073c:	dd00      	ble.n	8000740 <__aeabi_dmul+0xc4>
 800073e:	e231      	b.n	8000ba4 <__aeabi_dmul+0x528>
 8000740:	2000      	movs	r0, #0
 8000742:	2400      	movs	r4, #0
 8000744:	2102      	movs	r1, #2
 8000746:	2e02      	cmp	r6, #2
 8000748:	dc26      	bgt.n	8000798 <__aeabi_dmul+0x11c>
 800074a:	3e01      	subs	r6, #1
 800074c:	2e01      	cmp	r6, #1
 800074e:	d852      	bhi.n	80007f6 <__aeabi_dmul+0x17a>
 8000750:	2902      	cmp	r1, #2
 8000752:	d04c      	beq.n	80007ee <__aeabi_dmul+0x172>
 8000754:	2901      	cmp	r1, #1
 8000756:	d000      	beq.n	800075a <__aeabi_dmul+0xde>
 8000758:	e118      	b.n	800098c <__aeabi_dmul+0x310>
 800075a:	2300      	movs	r3, #0
 800075c:	2400      	movs	r4, #0
 800075e:	2500      	movs	r5, #0
 8000760:	051b      	lsls	r3, r3, #20
 8000762:	4323      	orrs	r3, r4
 8000764:	07d2      	lsls	r2, r2, #31
 8000766:	4313      	orrs	r3, r2
 8000768:	0028      	movs	r0, r5
 800076a:	0019      	movs	r1, r3
 800076c:	b007      	add	sp, #28
 800076e:	bcf0      	pop	{r4, r5, r6, r7}
 8000770:	46bb      	mov	fp, r7
 8000772:	46b2      	mov	sl, r6
 8000774:	46a9      	mov	r9, r5
 8000776:	46a0      	mov	r8, r4
 8000778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	2203      	movs	r2, #3
 800077e:	0109      	lsls	r1, r1, #4
 8000780:	002b      	movs	r3, r5
 8000782:	468c      	mov	ip, r1
 8000784:	4316      	orrs	r6, r2
 8000786:	4642      	mov	r2, r8
 8000788:	4463      	add	r3, ip
 800078a:	407a      	eors	r2, r7
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	2e0a      	cmp	r6, #10
 8000792:	dd00      	ble.n	8000796 <__aeabi_dmul+0x11a>
 8000794:	e228      	b.n	8000be8 <__aeabi_dmul+0x56c>
 8000796:	2103      	movs	r1, #3
 8000798:	2501      	movs	r5, #1
 800079a:	40b5      	lsls	r5, r6
 800079c:	46ac      	mov	ip, r5
 800079e:	26a6      	movs	r6, #166	; 0xa6
 80007a0:	4663      	mov	r3, ip
 80007a2:	00f6      	lsls	r6, r6, #3
 80007a4:	4035      	ands	r5, r6
 80007a6:	4233      	tst	r3, r6
 80007a8:	d10b      	bne.n	80007c2 <__aeabi_dmul+0x146>
 80007aa:	2690      	movs	r6, #144	; 0x90
 80007ac:	00b6      	lsls	r6, r6, #2
 80007ae:	4233      	tst	r3, r6
 80007b0:	d118      	bne.n	80007e4 <__aeabi_dmul+0x168>
 80007b2:	3eb9      	subs	r6, #185	; 0xb9
 80007b4:	3eff      	subs	r6, #255	; 0xff
 80007b6:	421e      	tst	r6, r3
 80007b8:	d01d      	beq.n	80007f6 <__aeabi_dmul+0x17a>
 80007ba:	46a3      	mov	fp, r4
 80007bc:	4682      	mov	sl, r0
 80007be:	9100      	str	r1, [sp, #0]
 80007c0:	e000      	b.n	80007c4 <__aeabi_dmul+0x148>
 80007c2:	0017      	movs	r7, r2
 80007c4:	9900      	ldr	r1, [sp, #0]
 80007c6:	003a      	movs	r2, r7
 80007c8:	2902      	cmp	r1, #2
 80007ca:	d010      	beq.n	80007ee <__aeabi_dmul+0x172>
 80007cc:	465c      	mov	r4, fp
 80007ce:	4650      	mov	r0, sl
 80007d0:	2903      	cmp	r1, #3
 80007d2:	d1bf      	bne.n	8000754 <__aeabi_dmul+0xd8>
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	031b      	lsls	r3, r3, #12
 80007d8:	431c      	orrs	r4, r3
 80007da:	0324      	lsls	r4, r4, #12
 80007dc:	0005      	movs	r5, r0
 80007de:	4b7f      	ldr	r3, [pc, #508]	; (80009dc <__aeabi_dmul+0x360>)
 80007e0:	0b24      	lsrs	r4, r4, #12
 80007e2:	e7bd      	b.n	8000760 <__aeabi_dmul+0xe4>
 80007e4:	2480      	movs	r4, #128	; 0x80
 80007e6:	2200      	movs	r2, #0
 80007e8:	4b7c      	ldr	r3, [pc, #496]	; (80009dc <__aeabi_dmul+0x360>)
 80007ea:	0324      	lsls	r4, r4, #12
 80007ec:	e7b8      	b.n	8000760 <__aeabi_dmul+0xe4>
 80007ee:	2400      	movs	r4, #0
 80007f0:	2500      	movs	r5, #0
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <__aeabi_dmul+0x360>)
 80007f4:	e7b4      	b.n	8000760 <__aeabi_dmul+0xe4>
 80007f6:	4653      	mov	r3, sl
 80007f8:	041e      	lsls	r6, r3, #16
 80007fa:	0c36      	lsrs	r6, r6, #16
 80007fc:	0c1f      	lsrs	r7, r3, #16
 80007fe:	0033      	movs	r3, r6
 8000800:	0c01      	lsrs	r1, r0, #16
 8000802:	0400      	lsls	r0, r0, #16
 8000804:	0c00      	lsrs	r0, r0, #16
 8000806:	4343      	muls	r3, r0
 8000808:	4698      	mov	r8, r3
 800080a:	0003      	movs	r3, r0
 800080c:	437b      	muls	r3, r7
 800080e:	4699      	mov	r9, r3
 8000810:	0033      	movs	r3, r6
 8000812:	434b      	muls	r3, r1
 8000814:	469c      	mov	ip, r3
 8000816:	4643      	mov	r3, r8
 8000818:	000d      	movs	r5, r1
 800081a:	0c1b      	lsrs	r3, r3, #16
 800081c:	469a      	mov	sl, r3
 800081e:	437d      	muls	r5, r7
 8000820:	44cc      	add	ip, r9
 8000822:	44d4      	add	ip, sl
 8000824:	9500      	str	r5, [sp, #0]
 8000826:	45e1      	cmp	r9, ip
 8000828:	d904      	bls.n	8000834 <__aeabi_dmul+0x1b8>
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	025b      	lsls	r3, r3, #9
 800082e:	4699      	mov	r9, r3
 8000830:	444d      	add	r5, r9
 8000832:	9500      	str	r5, [sp, #0]
 8000834:	4663      	mov	r3, ip
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	001d      	movs	r5, r3
 800083a:	4663      	mov	r3, ip
 800083c:	041b      	lsls	r3, r3, #16
 800083e:	469c      	mov	ip, r3
 8000840:	4643      	mov	r3, r8
 8000842:	041b      	lsls	r3, r3, #16
 8000844:	0c1b      	lsrs	r3, r3, #16
 8000846:	4698      	mov	r8, r3
 8000848:	4663      	mov	r3, ip
 800084a:	4443      	add	r3, r8
 800084c:	9303      	str	r3, [sp, #12]
 800084e:	0c23      	lsrs	r3, r4, #16
 8000850:	4698      	mov	r8, r3
 8000852:	0033      	movs	r3, r6
 8000854:	0424      	lsls	r4, r4, #16
 8000856:	0c24      	lsrs	r4, r4, #16
 8000858:	4363      	muls	r3, r4
 800085a:	469c      	mov	ip, r3
 800085c:	0023      	movs	r3, r4
 800085e:	437b      	muls	r3, r7
 8000860:	4699      	mov	r9, r3
 8000862:	4643      	mov	r3, r8
 8000864:	435e      	muls	r6, r3
 8000866:	435f      	muls	r7, r3
 8000868:	444e      	add	r6, r9
 800086a:	4663      	mov	r3, ip
 800086c:	46b2      	mov	sl, r6
 800086e:	0c1e      	lsrs	r6, r3, #16
 8000870:	4456      	add	r6, sl
 8000872:	45b1      	cmp	r9, r6
 8000874:	d903      	bls.n	800087e <__aeabi_dmul+0x202>
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	025b      	lsls	r3, r3, #9
 800087a:	4699      	mov	r9, r3
 800087c:	444f      	add	r7, r9
 800087e:	0c33      	lsrs	r3, r6, #16
 8000880:	4699      	mov	r9, r3
 8000882:	003b      	movs	r3, r7
 8000884:	444b      	add	r3, r9
 8000886:	9305      	str	r3, [sp, #20]
 8000888:	4663      	mov	r3, ip
 800088a:	46ac      	mov	ip, r5
 800088c:	041f      	lsls	r7, r3, #16
 800088e:	0c3f      	lsrs	r7, r7, #16
 8000890:	0436      	lsls	r6, r6, #16
 8000892:	19f6      	adds	r6, r6, r7
 8000894:	44b4      	add	ip, r6
 8000896:	4663      	mov	r3, ip
 8000898:	9304      	str	r3, [sp, #16]
 800089a:	465b      	mov	r3, fp
 800089c:	0c1b      	lsrs	r3, r3, #16
 800089e:	469c      	mov	ip, r3
 80008a0:	465b      	mov	r3, fp
 80008a2:	041f      	lsls	r7, r3, #16
 80008a4:	0c3f      	lsrs	r7, r7, #16
 80008a6:	003b      	movs	r3, r7
 80008a8:	4343      	muls	r3, r0
 80008aa:	4699      	mov	r9, r3
 80008ac:	4663      	mov	r3, ip
 80008ae:	4343      	muls	r3, r0
 80008b0:	469a      	mov	sl, r3
 80008b2:	464b      	mov	r3, r9
 80008b4:	4660      	mov	r0, ip
 80008b6:	0c1b      	lsrs	r3, r3, #16
 80008b8:	469b      	mov	fp, r3
 80008ba:	4348      	muls	r0, r1
 80008bc:	4379      	muls	r1, r7
 80008be:	4451      	add	r1, sl
 80008c0:	4459      	add	r1, fp
 80008c2:	458a      	cmp	sl, r1
 80008c4:	d903      	bls.n	80008ce <__aeabi_dmul+0x252>
 80008c6:	2380      	movs	r3, #128	; 0x80
 80008c8:	025b      	lsls	r3, r3, #9
 80008ca:	469a      	mov	sl, r3
 80008cc:	4450      	add	r0, sl
 80008ce:	0c0b      	lsrs	r3, r1, #16
 80008d0:	469a      	mov	sl, r3
 80008d2:	464b      	mov	r3, r9
 80008d4:	041b      	lsls	r3, r3, #16
 80008d6:	0c1b      	lsrs	r3, r3, #16
 80008d8:	4699      	mov	r9, r3
 80008da:	003b      	movs	r3, r7
 80008dc:	4363      	muls	r3, r4
 80008de:	0409      	lsls	r1, r1, #16
 80008e0:	4645      	mov	r5, r8
 80008e2:	4449      	add	r1, r9
 80008e4:	4699      	mov	r9, r3
 80008e6:	4663      	mov	r3, ip
 80008e8:	435c      	muls	r4, r3
 80008ea:	436b      	muls	r3, r5
 80008ec:	469c      	mov	ip, r3
 80008ee:	464b      	mov	r3, r9
 80008f0:	0c1b      	lsrs	r3, r3, #16
 80008f2:	4698      	mov	r8, r3
 80008f4:	436f      	muls	r7, r5
 80008f6:	193f      	adds	r7, r7, r4
 80008f8:	4447      	add	r7, r8
 80008fa:	4450      	add	r0, sl
 80008fc:	42bc      	cmp	r4, r7
 80008fe:	d903      	bls.n	8000908 <__aeabi_dmul+0x28c>
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	025b      	lsls	r3, r3, #9
 8000904:	4698      	mov	r8, r3
 8000906:	44c4      	add	ip, r8
 8000908:	9b04      	ldr	r3, [sp, #16]
 800090a:	9d00      	ldr	r5, [sp, #0]
 800090c:	4698      	mov	r8, r3
 800090e:	4445      	add	r5, r8
 8000910:	42b5      	cmp	r5, r6
 8000912:	41b6      	sbcs	r6, r6
 8000914:	4273      	negs	r3, r6
 8000916:	4698      	mov	r8, r3
 8000918:	464b      	mov	r3, r9
 800091a:	041e      	lsls	r6, r3, #16
 800091c:	9b05      	ldr	r3, [sp, #20]
 800091e:	043c      	lsls	r4, r7, #16
 8000920:	4699      	mov	r9, r3
 8000922:	0c36      	lsrs	r6, r6, #16
 8000924:	19a4      	adds	r4, r4, r6
 8000926:	444c      	add	r4, r9
 8000928:	46a1      	mov	r9, r4
 800092a:	4683      	mov	fp, r0
 800092c:	186e      	adds	r6, r5, r1
 800092e:	44c1      	add	r9, r8
 8000930:	428e      	cmp	r6, r1
 8000932:	4189      	sbcs	r1, r1
 8000934:	44cb      	add	fp, r9
 8000936:	465d      	mov	r5, fp
 8000938:	4249      	negs	r1, r1
 800093a:	186d      	adds	r5, r5, r1
 800093c:	429c      	cmp	r4, r3
 800093e:	41a4      	sbcs	r4, r4
 8000940:	45c1      	cmp	r9, r8
 8000942:	419b      	sbcs	r3, r3
 8000944:	4583      	cmp	fp, r0
 8000946:	4180      	sbcs	r0, r0
 8000948:	428d      	cmp	r5, r1
 800094a:	4189      	sbcs	r1, r1
 800094c:	425b      	negs	r3, r3
 800094e:	4264      	negs	r4, r4
 8000950:	431c      	orrs	r4, r3
 8000952:	4240      	negs	r0, r0
 8000954:	9b03      	ldr	r3, [sp, #12]
 8000956:	4249      	negs	r1, r1
 8000958:	4301      	orrs	r1, r0
 800095a:	0270      	lsls	r0, r6, #9
 800095c:	0c3f      	lsrs	r7, r7, #16
 800095e:	4318      	orrs	r0, r3
 8000960:	19e4      	adds	r4, r4, r7
 8000962:	1e47      	subs	r7, r0, #1
 8000964:	41b8      	sbcs	r0, r7
 8000966:	1864      	adds	r4, r4, r1
 8000968:	4464      	add	r4, ip
 800096a:	0df6      	lsrs	r6, r6, #23
 800096c:	0261      	lsls	r1, r4, #9
 800096e:	4330      	orrs	r0, r6
 8000970:	0dec      	lsrs	r4, r5, #23
 8000972:	026e      	lsls	r6, r5, #9
 8000974:	430c      	orrs	r4, r1
 8000976:	4330      	orrs	r0, r6
 8000978:	01c9      	lsls	r1, r1, #7
 800097a:	d400      	bmi.n	800097e <__aeabi_dmul+0x302>
 800097c:	e0f1      	b.n	8000b62 <__aeabi_dmul+0x4e6>
 800097e:	2101      	movs	r1, #1
 8000980:	0843      	lsrs	r3, r0, #1
 8000982:	4001      	ands	r1, r0
 8000984:	430b      	orrs	r3, r1
 8000986:	07e0      	lsls	r0, r4, #31
 8000988:	4318      	orrs	r0, r3
 800098a:	0864      	lsrs	r4, r4, #1
 800098c:	4915      	ldr	r1, [pc, #84]	; (80009e4 <__aeabi_dmul+0x368>)
 800098e:	9b02      	ldr	r3, [sp, #8]
 8000990:	468c      	mov	ip, r1
 8000992:	4463      	add	r3, ip
 8000994:	2b00      	cmp	r3, #0
 8000996:	dc00      	bgt.n	800099a <__aeabi_dmul+0x31e>
 8000998:	e097      	b.n	8000aca <__aeabi_dmul+0x44e>
 800099a:	0741      	lsls	r1, r0, #29
 800099c:	d009      	beq.n	80009b2 <__aeabi_dmul+0x336>
 800099e:	210f      	movs	r1, #15
 80009a0:	4001      	ands	r1, r0
 80009a2:	2904      	cmp	r1, #4
 80009a4:	d005      	beq.n	80009b2 <__aeabi_dmul+0x336>
 80009a6:	1d01      	adds	r1, r0, #4
 80009a8:	4281      	cmp	r1, r0
 80009aa:	4180      	sbcs	r0, r0
 80009ac:	4240      	negs	r0, r0
 80009ae:	1824      	adds	r4, r4, r0
 80009b0:	0008      	movs	r0, r1
 80009b2:	01e1      	lsls	r1, r4, #7
 80009b4:	d506      	bpl.n	80009c4 <__aeabi_dmul+0x348>
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	00c9      	lsls	r1, r1, #3
 80009ba:	468c      	mov	ip, r1
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <__aeabi_dmul+0x36c>)
 80009be:	401c      	ands	r4, r3
 80009c0:	9b02      	ldr	r3, [sp, #8]
 80009c2:	4463      	add	r3, ip
 80009c4:	4909      	ldr	r1, [pc, #36]	; (80009ec <__aeabi_dmul+0x370>)
 80009c6:	428b      	cmp	r3, r1
 80009c8:	dd00      	ble.n	80009cc <__aeabi_dmul+0x350>
 80009ca:	e710      	b.n	80007ee <__aeabi_dmul+0x172>
 80009cc:	0761      	lsls	r1, r4, #29
 80009ce:	08c5      	lsrs	r5, r0, #3
 80009d0:	0264      	lsls	r4, r4, #9
 80009d2:	055b      	lsls	r3, r3, #21
 80009d4:	430d      	orrs	r5, r1
 80009d6:	0b24      	lsrs	r4, r4, #12
 80009d8:	0d5b      	lsrs	r3, r3, #21
 80009da:	e6c1      	b.n	8000760 <__aeabi_dmul+0xe4>
 80009dc:	000007ff 	.word	0x000007ff
 80009e0:	fffffc01 	.word	0xfffffc01
 80009e4:	000003ff 	.word	0x000003ff
 80009e8:	feffffff 	.word	0xfeffffff
 80009ec:	000007fe 	.word	0x000007fe
 80009f0:	464b      	mov	r3, r9
 80009f2:	4323      	orrs	r3, r4
 80009f4:	d059      	beq.n	8000aaa <__aeabi_dmul+0x42e>
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d100      	bne.n	80009fc <__aeabi_dmul+0x380>
 80009fa:	e0a3      	b.n	8000b44 <__aeabi_dmul+0x4c8>
 80009fc:	0020      	movs	r0, r4
 80009fe:	f000 fd1b 	bl	8001438 <__clzsi2>
 8000a02:	0001      	movs	r1, r0
 8000a04:	0003      	movs	r3, r0
 8000a06:	390b      	subs	r1, #11
 8000a08:	221d      	movs	r2, #29
 8000a0a:	1a52      	subs	r2, r2, r1
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	0018      	movs	r0, r3
 8000a10:	40d1      	lsrs	r1, r2
 8000a12:	464a      	mov	r2, r9
 8000a14:	3808      	subs	r0, #8
 8000a16:	4082      	lsls	r2, r0
 8000a18:	4084      	lsls	r4, r0
 8000a1a:	0010      	movs	r0, r2
 8000a1c:	430c      	orrs	r4, r1
 8000a1e:	4a74      	ldr	r2, [pc, #464]	; (8000bf0 <__aeabi_dmul+0x574>)
 8000a20:	1aeb      	subs	r3, r5, r3
 8000a22:	4694      	mov	ip, r2
 8000a24:	4642      	mov	r2, r8
 8000a26:	4463      	add	r3, ip
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	9b01      	ldr	r3, [sp, #4]
 8000a2c:	407a      	eors	r2, r7
 8000a2e:	3301      	adds	r3, #1
 8000a30:	2100      	movs	r1, #0
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	9302      	str	r3, [sp, #8]
 8000a36:	2e0a      	cmp	r6, #10
 8000a38:	dd00      	ble.n	8000a3c <__aeabi_dmul+0x3c0>
 8000a3a:	e667      	b.n	800070c <__aeabi_dmul+0x90>
 8000a3c:	e683      	b.n	8000746 <__aeabi_dmul+0xca>
 8000a3e:	465b      	mov	r3, fp
 8000a40:	4303      	orrs	r3, r0
 8000a42:	469a      	mov	sl, r3
 8000a44:	d02a      	beq.n	8000a9c <__aeabi_dmul+0x420>
 8000a46:	465b      	mov	r3, fp
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d06d      	beq.n	8000b28 <__aeabi_dmul+0x4ac>
 8000a4c:	4658      	mov	r0, fp
 8000a4e:	f000 fcf3 	bl	8001438 <__clzsi2>
 8000a52:	0001      	movs	r1, r0
 8000a54:	0003      	movs	r3, r0
 8000a56:	390b      	subs	r1, #11
 8000a58:	221d      	movs	r2, #29
 8000a5a:	1a52      	subs	r2, r2, r1
 8000a5c:	0021      	movs	r1, r4
 8000a5e:	0018      	movs	r0, r3
 8000a60:	465d      	mov	r5, fp
 8000a62:	40d1      	lsrs	r1, r2
 8000a64:	3808      	subs	r0, #8
 8000a66:	4085      	lsls	r5, r0
 8000a68:	000a      	movs	r2, r1
 8000a6a:	4084      	lsls	r4, r0
 8000a6c:	432a      	orrs	r2, r5
 8000a6e:	4693      	mov	fp, r2
 8000a70:	46a2      	mov	sl, r4
 8000a72:	4d5f      	ldr	r5, [pc, #380]	; (8000bf0 <__aeabi_dmul+0x574>)
 8000a74:	2600      	movs	r6, #0
 8000a76:	1aed      	subs	r5, r5, r3
 8000a78:	2300      	movs	r3, #0
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	e625      	b.n	80006ca <__aeabi_dmul+0x4e>
 8000a7e:	465b      	mov	r3, fp
 8000a80:	4303      	orrs	r3, r0
 8000a82:	469a      	mov	sl, r3
 8000a84:	d105      	bne.n	8000a92 <__aeabi_dmul+0x416>
 8000a86:	2300      	movs	r3, #0
 8000a88:	469b      	mov	fp, r3
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	2608      	movs	r6, #8
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	e61b      	b.n	80006ca <__aeabi_dmul+0x4e>
 8000a92:	2303      	movs	r3, #3
 8000a94:	4682      	mov	sl, r0
 8000a96:	260c      	movs	r6, #12
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	e616      	b.n	80006ca <__aeabi_dmul+0x4e>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	469b      	mov	fp, r3
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	2604      	movs	r6, #4
 8000aa4:	2500      	movs	r5, #0
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	e60f      	b.n	80006ca <__aeabi_dmul+0x4e>
 8000aaa:	4642      	mov	r2, r8
 8000aac:	3301      	adds	r3, #1
 8000aae:	9501      	str	r5, [sp, #4]
 8000ab0:	431e      	orrs	r6, r3
 8000ab2:	9b01      	ldr	r3, [sp, #4]
 8000ab4:	407a      	eors	r2, r7
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	2400      	movs	r4, #0
 8000aba:	2000      	movs	r0, #0
 8000abc:	2101      	movs	r1, #1
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2e0a      	cmp	r6, #10
 8000ac4:	dd00      	ble.n	8000ac8 <__aeabi_dmul+0x44c>
 8000ac6:	e621      	b.n	800070c <__aeabi_dmul+0x90>
 8000ac8:	e63d      	b.n	8000746 <__aeabi_dmul+0xca>
 8000aca:	2101      	movs	r1, #1
 8000acc:	1ac9      	subs	r1, r1, r3
 8000ace:	2938      	cmp	r1, #56	; 0x38
 8000ad0:	dd00      	ble.n	8000ad4 <__aeabi_dmul+0x458>
 8000ad2:	e642      	b.n	800075a <__aeabi_dmul+0xde>
 8000ad4:	291f      	cmp	r1, #31
 8000ad6:	dd47      	ble.n	8000b68 <__aeabi_dmul+0x4ec>
 8000ad8:	261f      	movs	r6, #31
 8000ada:	0025      	movs	r5, r4
 8000adc:	4276      	negs	r6, r6
 8000ade:	1af3      	subs	r3, r6, r3
 8000ae0:	40dd      	lsrs	r5, r3
 8000ae2:	002b      	movs	r3, r5
 8000ae4:	2920      	cmp	r1, #32
 8000ae6:	d005      	beq.n	8000af4 <__aeabi_dmul+0x478>
 8000ae8:	4942      	ldr	r1, [pc, #264]	; (8000bf4 <__aeabi_dmul+0x578>)
 8000aea:	9d02      	ldr	r5, [sp, #8]
 8000aec:	468c      	mov	ip, r1
 8000aee:	4465      	add	r5, ip
 8000af0:	40ac      	lsls	r4, r5
 8000af2:	4320      	orrs	r0, r4
 8000af4:	1e41      	subs	r1, r0, #1
 8000af6:	4188      	sbcs	r0, r1
 8000af8:	4318      	orrs	r0, r3
 8000afa:	2307      	movs	r3, #7
 8000afc:	001d      	movs	r5, r3
 8000afe:	2400      	movs	r4, #0
 8000b00:	4005      	ands	r5, r0
 8000b02:	4203      	tst	r3, r0
 8000b04:	d04a      	beq.n	8000b9c <__aeabi_dmul+0x520>
 8000b06:	230f      	movs	r3, #15
 8000b08:	2400      	movs	r4, #0
 8000b0a:	4003      	ands	r3, r0
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d042      	beq.n	8000b96 <__aeabi_dmul+0x51a>
 8000b10:	1d03      	adds	r3, r0, #4
 8000b12:	4283      	cmp	r3, r0
 8000b14:	4180      	sbcs	r0, r0
 8000b16:	4240      	negs	r0, r0
 8000b18:	1824      	adds	r4, r4, r0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	0223      	lsls	r3, r4, #8
 8000b1e:	d53a      	bpl.n	8000b96 <__aeabi_dmul+0x51a>
 8000b20:	2301      	movs	r3, #1
 8000b22:	2400      	movs	r4, #0
 8000b24:	2500      	movs	r5, #0
 8000b26:	e61b      	b.n	8000760 <__aeabi_dmul+0xe4>
 8000b28:	f000 fc86 	bl	8001438 <__clzsi2>
 8000b2c:	0001      	movs	r1, r0
 8000b2e:	0003      	movs	r3, r0
 8000b30:	3115      	adds	r1, #21
 8000b32:	3320      	adds	r3, #32
 8000b34:	291c      	cmp	r1, #28
 8000b36:	dd8f      	ble.n	8000a58 <__aeabi_dmul+0x3dc>
 8000b38:	3808      	subs	r0, #8
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	4084      	lsls	r4, r0
 8000b3e:	4692      	mov	sl, r2
 8000b40:	46a3      	mov	fp, r4
 8000b42:	e796      	b.n	8000a72 <__aeabi_dmul+0x3f6>
 8000b44:	f000 fc78 	bl	8001438 <__clzsi2>
 8000b48:	0001      	movs	r1, r0
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	3115      	adds	r1, #21
 8000b4e:	3320      	adds	r3, #32
 8000b50:	291c      	cmp	r1, #28
 8000b52:	dc00      	bgt.n	8000b56 <__aeabi_dmul+0x4da>
 8000b54:	e758      	b.n	8000a08 <__aeabi_dmul+0x38c>
 8000b56:	0002      	movs	r2, r0
 8000b58:	464c      	mov	r4, r9
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	4094      	lsls	r4, r2
 8000b60:	e75d      	b.n	8000a1e <__aeabi_dmul+0x3a2>
 8000b62:	9b01      	ldr	r3, [sp, #4]
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	e711      	b.n	800098c <__aeabi_dmul+0x310>
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <__aeabi_dmul+0x57c>)
 8000b6a:	0026      	movs	r6, r4
 8000b6c:	469c      	mov	ip, r3
 8000b6e:	0003      	movs	r3, r0
 8000b70:	9d02      	ldr	r5, [sp, #8]
 8000b72:	40cb      	lsrs	r3, r1
 8000b74:	4465      	add	r5, ip
 8000b76:	40ae      	lsls	r6, r5
 8000b78:	431e      	orrs	r6, r3
 8000b7a:	0003      	movs	r3, r0
 8000b7c:	40ab      	lsls	r3, r5
 8000b7e:	1e58      	subs	r0, r3, #1
 8000b80:	4183      	sbcs	r3, r0
 8000b82:	0030      	movs	r0, r6
 8000b84:	4318      	orrs	r0, r3
 8000b86:	40cc      	lsrs	r4, r1
 8000b88:	0743      	lsls	r3, r0, #29
 8000b8a:	d0c7      	beq.n	8000b1c <__aeabi_dmul+0x4a0>
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	4003      	ands	r3, r0
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d1bd      	bne.n	8000b10 <__aeabi_dmul+0x494>
 8000b94:	e7c2      	b.n	8000b1c <__aeabi_dmul+0x4a0>
 8000b96:	0765      	lsls	r5, r4, #29
 8000b98:	0264      	lsls	r4, r4, #9
 8000b9a:	0b24      	lsrs	r4, r4, #12
 8000b9c:	08c0      	lsrs	r0, r0, #3
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	4305      	orrs	r5, r0
 8000ba2:	e5dd      	b.n	8000760 <__aeabi_dmul+0xe4>
 8000ba4:	2500      	movs	r5, #0
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	2e0f      	cmp	r6, #15
 8000baa:	d10c      	bne.n	8000bc6 <__aeabi_dmul+0x54a>
 8000bac:	2480      	movs	r4, #128	; 0x80
 8000bae:	465b      	mov	r3, fp
 8000bb0:	0324      	lsls	r4, r4, #12
 8000bb2:	4223      	tst	r3, r4
 8000bb4:	d00e      	beq.n	8000bd4 <__aeabi_dmul+0x558>
 8000bb6:	4221      	tst	r1, r4
 8000bb8:	d10c      	bne.n	8000bd4 <__aeabi_dmul+0x558>
 8000bba:	430c      	orrs	r4, r1
 8000bbc:	0324      	lsls	r4, r4, #12
 8000bbe:	003a      	movs	r2, r7
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <__aeabi_dmul+0x580>)
 8000bc2:	0b24      	lsrs	r4, r4, #12
 8000bc4:	e5cc      	b.n	8000760 <__aeabi_dmul+0xe4>
 8000bc6:	2e0b      	cmp	r6, #11
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_dmul+0x550>
 8000bca:	e5a2      	b.n	8000712 <__aeabi_dmul+0x96>
 8000bcc:	468b      	mov	fp, r1
 8000bce:	46aa      	mov	sl, r5
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	e5f7      	b.n	80007c4 <__aeabi_dmul+0x148>
 8000bd4:	2480      	movs	r4, #128	; 0x80
 8000bd6:	465b      	mov	r3, fp
 8000bd8:	0324      	lsls	r4, r4, #12
 8000bda:	431c      	orrs	r4, r3
 8000bdc:	0324      	lsls	r4, r4, #12
 8000bde:	4642      	mov	r2, r8
 8000be0:	4655      	mov	r5, sl
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <__aeabi_dmul+0x580>)
 8000be4:	0b24      	lsrs	r4, r4, #12
 8000be6:	e5bb      	b.n	8000760 <__aeabi_dmul+0xe4>
 8000be8:	464d      	mov	r5, r9
 8000bea:	0021      	movs	r1, r4
 8000bec:	2303      	movs	r3, #3
 8000bee:	e7db      	b.n	8000ba8 <__aeabi_dmul+0x52c>
 8000bf0:	fffffc0d 	.word	0xfffffc0d
 8000bf4:	0000043e 	.word	0x0000043e
 8000bf8:	0000041e 	.word	0x0000041e
 8000bfc:	000007ff 	.word	0x000007ff

08000c00 <__aeabi_dsub>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	000d      	movs	r5, r1
 8000c0e:	0004      	movs	r4, r0
 8000c10:	0019      	movs	r1, r3
 8000c12:	0010      	movs	r0, r2
 8000c14:	032b      	lsls	r3, r5, #12
 8000c16:	0a5b      	lsrs	r3, r3, #9
 8000c18:	0f62      	lsrs	r2, r4, #29
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	00e3      	lsls	r3, r4, #3
 8000c1e:	030c      	lsls	r4, r1, #12
 8000c20:	0a64      	lsrs	r4, r4, #9
 8000c22:	0f47      	lsrs	r7, r0, #29
 8000c24:	4327      	orrs	r7, r4
 8000c26:	4cd0      	ldr	r4, [pc, #832]	; (8000f68 <__aeabi_dsub+0x368>)
 8000c28:	006e      	lsls	r6, r5, #1
 8000c2a:	4691      	mov	r9, r2
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	004a      	lsls	r2, r1, #1
 8000c30:	00c0      	lsls	r0, r0, #3
 8000c32:	4698      	mov	r8, r3
 8000c34:	46a2      	mov	sl, r4
 8000c36:	0d76      	lsrs	r6, r6, #21
 8000c38:	0fed      	lsrs	r5, r5, #31
 8000c3a:	0d52      	lsrs	r2, r2, #21
 8000c3c:	0fc9      	lsrs	r1, r1, #31
 8000c3e:	9001      	str	r0, [sp, #4]
 8000c40:	42a2      	cmp	r2, r4
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dsub+0x46>
 8000c44:	e0b9      	b.n	8000dba <__aeabi_dsub+0x1ba>
 8000c46:	2401      	movs	r4, #1
 8000c48:	4061      	eors	r1, r4
 8000c4a:	468b      	mov	fp, r1
 8000c4c:	428d      	cmp	r5, r1
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dsub+0x52>
 8000c50:	e08d      	b.n	8000d6e <__aeabi_dsub+0x16e>
 8000c52:	1ab4      	subs	r4, r6, r2
 8000c54:	46a4      	mov	ip, r4
 8000c56:	2c00      	cmp	r4, #0
 8000c58:	dc00      	bgt.n	8000c5c <__aeabi_dsub+0x5c>
 8000c5a:	e0b7      	b.n	8000dcc <__aeabi_dsub+0x1cc>
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dsub+0x62>
 8000c60:	e0cb      	b.n	8000dfa <__aeabi_dsub+0x1fa>
 8000c62:	4ac1      	ldr	r2, [pc, #772]	; (8000f68 <__aeabi_dsub+0x368>)
 8000c64:	4296      	cmp	r6, r2
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dsub+0x6a>
 8000c68:	e186      	b.n	8000f78 <__aeabi_dsub+0x378>
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	0412      	lsls	r2, r2, #16
 8000c6e:	4317      	orrs	r7, r2
 8000c70:	4662      	mov	r2, ip
 8000c72:	2a38      	cmp	r2, #56	; 0x38
 8000c74:	dd00      	ble.n	8000c78 <__aeabi_dsub+0x78>
 8000c76:	e1a4      	b.n	8000fc2 <__aeabi_dsub+0x3c2>
 8000c78:	2a1f      	cmp	r2, #31
 8000c7a:	dd00      	ble.n	8000c7e <__aeabi_dsub+0x7e>
 8000c7c:	e21d      	b.n	80010ba <__aeabi_dsub+0x4ba>
 8000c7e:	4661      	mov	r1, ip
 8000c80:	2220      	movs	r2, #32
 8000c82:	003c      	movs	r4, r7
 8000c84:	1a52      	subs	r2, r2, r1
 8000c86:	0001      	movs	r1, r0
 8000c88:	4090      	lsls	r0, r2
 8000c8a:	4094      	lsls	r4, r2
 8000c8c:	1e42      	subs	r2, r0, #1
 8000c8e:	4190      	sbcs	r0, r2
 8000c90:	4662      	mov	r2, ip
 8000c92:	46a0      	mov	r8, r4
 8000c94:	4664      	mov	r4, ip
 8000c96:	40d7      	lsrs	r7, r2
 8000c98:	464a      	mov	r2, r9
 8000c9a:	40e1      	lsrs	r1, r4
 8000c9c:	4644      	mov	r4, r8
 8000c9e:	1bd2      	subs	r2, r2, r7
 8000ca0:	4691      	mov	r9, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	4304      	orrs	r4, r0
 8000ca6:	1b1c      	subs	r4, r3, r4
 8000ca8:	42a3      	cmp	r3, r4
 8000caa:	4192      	sbcs	r2, r2
 8000cac:	464b      	mov	r3, r9
 8000cae:	4252      	negs	r2, r2
 8000cb0:	1a9b      	subs	r3, r3, r2
 8000cb2:	469a      	mov	sl, r3
 8000cb4:	4653      	mov	r3, sl
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	d400      	bmi.n	8000cbc <__aeabi_dsub+0xbc>
 8000cba:	e12b      	b.n	8000f14 <__aeabi_dsub+0x314>
 8000cbc:	4653      	mov	r3, sl
 8000cbe:	025a      	lsls	r2, r3, #9
 8000cc0:	0a53      	lsrs	r3, r2, #9
 8000cc2:	469a      	mov	sl, r3
 8000cc4:	4653      	mov	r3, sl
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dsub+0xcc>
 8000cca:	e166      	b.n	8000f9a <__aeabi_dsub+0x39a>
 8000ccc:	4650      	mov	r0, sl
 8000cce:	f000 fbb3 	bl	8001438 <__clzsi2>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	3b08      	subs	r3, #8
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	0020      	movs	r0, r4
 8000cda:	1ad2      	subs	r2, r2, r3
 8000cdc:	4651      	mov	r1, sl
 8000cde:	40d0      	lsrs	r0, r2
 8000ce0:	4099      	lsls	r1, r3
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	429e      	cmp	r6, r3
 8000cea:	dd00      	ble.n	8000cee <__aeabi_dsub+0xee>
 8000cec:	e164      	b.n	8000fb8 <__aeabi_dsub+0x3b8>
 8000cee:	1b9b      	subs	r3, r3, r6
 8000cf0:	1c59      	adds	r1, r3, #1
 8000cf2:	291f      	cmp	r1, #31
 8000cf4:	dd00      	ble.n	8000cf8 <__aeabi_dsub+0xf8>
 8000cf6:	e0fe      	b.n	8000ef6 <__aeabi_dsub+0x2f6>
 8000cf8:	2320      	movs	r3, #32
 8000cfa:	0010      	movs	r0, r2
 8000cfc:	0026      	movs	r6, r4
 8000cfe:	1a5b      	subs	r3, r3, r1
 8000d00:	409c      	lsls	r4, r3
 8000d02:	4098      	lsls	r0, r3
 8000d04:	40ce      	lsrs	r6, r1
 8000d06:	40ca      	lsrs	r2, r1
 8000d08:	1e63      	subs	r3, r4, #1
 8000d0a:	419c      	sbcs	r4, r3
 8000d0c:	4330      	orrs	r0, r6
 8000d0e:	4692      	mov	sl, r2
 8000d10:	2600      	movs	r6, #0
 8000d12:	4304      	orrs	r4, r0
 8000d14:	0763      	lsls	r3, r4, #29
 8000d16:	d009      	beq.n	8000d2c <__aeabi_dsub+0x12c>
 8000d18:	230f      	movs	r3, #15
 8000d1a:	4023      	ands	r3, r4
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d005      	beq.n	8000d2c <__aeabi_dsub+0x12c>
 8000d20:	1d23      	adds	r3, r4, #4
 8000d22:	42a3      	cmp	r3, r4
 8000d24:	41a4      	sbcs	r4, r4
 8000d26:	4264      	negs	r4, r4
 8000d28:	44a2      	add	sl, r4
 8000d2a:	001c      	movs	r4, r3
 8000d2c:	4653      	mov	r3, sl
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	d400      	bmi.n	8000d34 <__aeabi_dsub+0x134>
 8000d32:	e0f2      	b.n	8000f1a <__aeabi_dsub+0x31a>
 8000d34:	4b8c      	ldr	r3, [pc, #560]	; (8000f68 <__aeabi_dsub+0x368>)
 8000d36:	3601      	adds	r6, #1
 8000d38:	429e      	cmp	r6, r3
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_dsub+0x13e>
 8000d3c:	e10f      	b.n	8000f5e <__aeabi_dsub+0x35e>
 8000d3e:	4653      	mov	r3, sl
 8000d40:	498a      	ldr	r1, [pc, #552]	; (8000f6c <__aeabi_dsub+0x36c>)
 8000d42:	08e4      	lsrs	r4, r4, #3
 8000d44:	400b      	ands	r3, r1
 8000d46:	0019      	movs	r1, r3
 8000d48:	075b      	lsls	r3, r3, #29
 8000d4a:	4323      	orrs	r3, r4
 8000d4c:	0572      	lsls	r2, r6, #21
 8000d4e:	024c      	lsls	r4, r1, #9
 8000d50:	0b24      	lsrs	r4, r4, #12
 8000d52:	0d52      	lsrs	r2, r2, #21
 8000d54:	0512      	lsls	r2, r2, #20
 8000d56:	4322      	orrs	r2, r4
 8000d58:	07ed      	lsls	r5, r5, #31
 8000d5a:	432a      	orrs	r2, r5
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	0011      	movs	r1, r2
 8000d60:	b003      	add	sp, #12
 8000d62:	bcf0      	pop	{r4, r5, r6, r7}
 8000d64:	46bb      	mov	fp, r7
 8000d66:	46b2      	mov	sl, r6
 8000d68:	46a9      	mov	r9, r5
 8000d6a:	46a0      	mov	r8, r4
 8000d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d6e:	1ab4      	subs	r4, r6, r2
 8000d70:	46a4      	mov	ip, r4
 8000d72:	2c00      	cmp	r4, #0
 8000d74:	dd59      	ble.n	8000e2a <__aeabi_dsub+0x22a>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_dsub+0x17c>
 8000d7a:	e0b0      	b.n	8000ede <__aeabi_dsub+0x2de>
 8000d7c:	4556      	cmp	r6, sl
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dsub+0x182>
 8000d80:	e0fa      	b.n	8000f78 <__aeabi_dsub+0x378>
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	0412      	lsls	r2, r2, #16
 8000d86:	4317      	orrs	r7, r2
 8000d88:	4662      	mov	r2, ip
 8000d8a:	2a38      	cmp	r2, #56	; 0x38
 8000d8c:	dd00      	ble.n	8000d90 <__aeabi_dsub+0x190>
 8000d8e:	e0d4      	b.n	8000f3a <__aeabi_dsub+0x33a>
 8000d90:	2a1f      	cmp	r2, #31
 8000d92:	dc00      	bgt.n	8000d96 <__aeabi_dsub+0x196>
 8000d94:	e1c0      	b.n	8001118 <__aeabi_dsub+0x518>
 8000d96:	0039      	movs	r1, r7
 8000d98:	3a20      	subs	r2, #32
 8000d9a:	40d1      	lsrs	r1, r2
 8000d9c:	4662      	mov	r2, ip
 8000d9e:	2a20      	cmp	r2, #32
 8000da0:	d006      	beq.n	8000db0 <__aeabi_dsub+0x1b0>
 8000da2:	4664      	mov	r4, ip
 8000da4:	2240      	movs	r2, #64	; 0x40
 8000da6:	1b12      	subs	r2, r2, r4
 8000da8:	003c      	movs	r4, r7
 8000daa:	4094      	lsls	r4, r2
 8000dac:	4304      	orrs	r4, r0
 8000dae:	9401      	str	r4, [sp, #4]
 8000db0:	9c01      	ldr	r4, [sp, #4]
 8000db2:	1e62      	subs	r2, r4, #1
 8000db4:	4194      	sbcs	r4, r2
 8000db6:	430c      	orrs	r4, r1
 8000db8:	e0c3      	b.n	8000f42 <__aeabi_dsub+0x342>
 8000dba:	003c      	movs	r4, r7
 8000dbc:	4304      	orrs	r4, r0
 8000dbe:	d02b      	beq.n	8000e18 <__aeabi_dsub+0x218>
 8000dc0:	468b      	mov	fp, r1
 8000dc2:	428d      	cmp	r5, r1
 8000dc4:	d02e      	beq.n	8000e24 <__aeabi_dsub+0x224>
 8000dc6:	4c6a      	ldr	r4, [pc, #424]	; (8000f70 <__aeabi_dsub+0x370>)
 8000dc8:	46a4      	mov	ip, r4
 8000dca:	44b4      	add	ip, r6
 8000dcc:	4664      	mov	r4, ip
 8000dce:	2c00      	cmp	r4, #0
 8000dd0:	d05f      	beq.n	8000e92 <__aeabi_dsub+0x292>
 8000dd2:	1b94      	subs	r4, r2, r6
 8000dd4:	46a4      	mov	ip, r4
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_dsub+0x1dc>
 8000dda:	e120      	b.n	800101e <__aeabi_dsub+0x41e>
 8000ddc:	464c      	mov	r4, r9
 8000dde:	431c      	orrs	r4, r3
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dsub+0x1e4>
 8000de2:	e1c7      	b.n	8001174 <__aeabi_dsub+0x574>
 8000de4:	4661      	mov	r1, ip
 8000de6:	1e4c      	subs	r4, r1, #1
 8000de8:	2901      	cmp	r1, #1
 8000dea:	d100      	bne.n	8000dee <__aeabi_dsub+0x1ee>
 8000dec:	e223      	b.n	8001236 <__aeabi_dsub+0x636>
 8000dee:	4d5e      	ldr	r5, [pc, #376]	; (8000f68 <__aeabi_dsub+0x368>)
 8000df0:	45ac      	cmp	ip, r5
 8000df2:	d100      	bne.n	8000df6 <__aeabi_dsub+0x1f6>
 8000df4:	e1d8      	b.n	80011a8 <__aeabi_dsub+0x5a8>
 8000df6:	46a4      	mov	ip, r4
 8000df8:	e11a      	b.n	8001030 <__aeabi_dsub+0x430>
 8000dfa:	003a      	movs	r2, r7
 8000dfc:	4302      	orrs	r2, r0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_dsub+0x202>
 8000e00:	e0e4      	b.n	8000fcc <__aeabi_dsub+0x3cc>
 8000e02:	0022      	movs	r2, r4
 8000e04:	3a01      	subs	r2, #1
 8000e06:	2c01      	cmp	r4, #1
 8000e08:	d100      	bne.n	8000e0c <__aeabi_dsub+0x20c>
 8000e0a:	e1c3      	b.n	8001194 <__aeabi_dsub+0x594>
 8000e0c:	4956      	ldr	r1, [pc, #344]	; (8000f68 <__aeabi_dsub+0x368>)
 8000e0e:	428c      	cmp	r4, r1
 8000e10:	d100      	bne.n	8000e14 <__aeabi_dsub+0x214>
 8000e12:	e0b1      	b.n	8000f78 <__aeabi_dsub+0x378>
 8000e14:	4694      	mov	ip, r2
 8000e16:	e72b      	b.n	8000c70 <__aeabi_dsub+0x70>
 8000e18:	2401      	movs	r4, #1
 8000e1a:	4061      	eors	r1, r4
 8000e1c:	468b      	mov	fp, r1
 8000e1e:	428d      	cmp	r5, r1
 8000e20:	d000      	beq.n	8000e24 <__aeabi_dsub+0x224>
 8000e22:	e716      	b.n	8000c52 <__aeabi_dsub+0x52>
 8000e24:	4952      	ldr	r1, [pc, #328]	; (8000f70 <__aeabi_dsub+0x370>)
 8000e26:	468c      	mov	ip, r1
 8000e28:	44b4      	add	ip, r6
 8000e2a:	4664      	mov	r4, ip
 8000e2c:	2c00      	cmp	r4, #0
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_dsub+0x232>
 8000e30:	e0d3      	b.n	8000fda <__aeabi_dsub+0x3da>
 8000e32:	1b91      	subs	r1, r2, r6
 8000e34:	468c      	mov	ip, r1
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dsub+0x23c>
 8000e3a:	e15e      	b.n	80010fa <__aeabi_dsub+0x4fa>
 8000e3c:	494a      	ldr	r1, [pc, #296]	; (8000f68 <__aeabi_dsub+0x368>)
 8000e3e:	428a      	cmp	r2, r1
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dsub+0x244>
 8000e42:	e1be      	b.n	80011c2 <__aeabi_dsub+0x5c2>
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	464c      	mov	r4, r9
 8000e48:	0409      	lsls	r1, r1, #16
 8000e4a:	430c      	orrs	r4, r1
 8000e4c:	46a1      	mov	r9, r4
 8000e4e:	4661      	mov	r1, ip
 8000e50:	2938      	cmp	r1, #56	; 0x38
 8000e52:	dd00      	ble.n	8000e56 <__aeabi_dsub+0x256>
 8000e54:	e1ba      	b.n	80011cc <__aeabi_dsub+0x5cc>
 8000e56:	291f      	cmp	r1, #31
 8000e58:	dd00      	ble.n	8000e5c <__aeabi_dsub+0x25c>
 8000e5a:	e227      	b.n	80012ac <__aeabi_dsub+0x6ac>
 8000e5c:	2420      	movs	r4, #32
 8000e5e:	1a64      	subs	r4, r4, r1
 8000e60:	4649      	mov	r1, r9
 8000e62:	40a1      	lsls	r1, r4
 8000e64:	001e      	movs	r6, r3
 8000e66:	4688      	mov	r8, r1
 8000e68:	4661      	mov	r1, ip
 8000e6a:	40a3      	lsls	r3, r4
 8000e6c:	40ce      	lsrs	r6, r1
 8000e6e:	4641      	mov	r1, r8
 8000e70:	1e5c      	subs	r4, r3, #1
 8000e72:	41a3      	sbcs	r3, r4
 8000e74:	4331      	orrs	r1, r6
 8000e76:	4319      	orrs	r1, r3
 8000e78:	000c      	movs	r4, r1
 8000e7a:	4663      	mov	r3, ip
 8000e7c:	4649      	mov	r1, r9
 8000e7e:	40d9      	lsrs	r1, r3
 8000e80:	187f      	adds	r7, r7, r1
 8000e82:	1824      	adds	r4, r4, r0
 8000e84:	4284      	cmp	r4, r0
 8000e86:	419b      	sbcs	r3, r3
 8000e88:	425b      	negs	r3, r3
 8000e8a:	469a      	mov	sl, r3
 8000e8c:	0016      	movs	r6, r2
 8000e8e:	44ba      	add	sl, r7
 8000e90:	e05d      	b.n	8000f4e <__aeabi_dsub+0x34e>
 8000e92:	4c38      	ldr	r4, [pc, #224]	; (8000f74 <__aeabi_dsub+0x374>)
 8000e94:	1c72      	adds	r2, r6, #1
 8000e96:	4222      	tst	r2, r4
 8000e98:	d000      	beq.n	8000e9c <__aeabi_dsub+0x29c>
 8000e9a:	e0df      	b.n	800105c <__aeabi_dsub+0x45c>
 8000e9c:	464a      	mov	r2, r9
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	2e00      	cmp	r6, #0
 8000ea2:	d000      	beq.n	8000ea6 <__aeabi_dsub+0x2a6>
 8000ea4:	e15c      	b.n	8001160 <__aeabi_dsub+0x560>
 8000ea6:	2a00      	cmp	r2, #0
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dsub+0x2ac>
 8000eaa:	e1cf      	b.n	800124c <__aeabi_dsub+0x64c>
 8000eac:	003a      	movs	r2, r7
 8000eae:	4302      	orrs	r2, r0
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_dsub+0x2b4>
 8000eb2:	e17f      	b.n	80011b4 <__aeabi_dsub+0x5b4>
 8000eb4:	1a1c      	subs	r4, r3, r0
 8000eb6:	464a      	mov	r2, r9
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	4189      	sbcs	r1, r1
 8000ebc:	1bd2      	subs	r2, r2, r7
 8000ebe:	4249      	negs	r1, r1
 8000ec0:	1a52      	subs	r2, r2, r1
 8000ec2:	4692      	mov	sl, r2
 8000ec4:	0212      	lsls	r2, r2, #8
 8000ec6:	d400      	bmi.n	8000eca <__aeabi_dsub+0x2ca>
 8000ec8:	e20a      	b.n	80012e0 <__aeabi_dsub+0x6e0>
 8000eca:	1ac4      	subs	r4, r0, r3
 8000ecc:	42a0      	cmp	r0, r4
 8000ece:	4180      	sbcs	r0, r0
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	4240      	negs	r0, r0
 8000ed4:	1aff      	subs	r7, r7, r3
 8000ed6:	1a3b      	subs	r3, r7, r0
 8000ed8:	469a      	mov	sl, r3
 8000eda:	465d      	mov	r5, fp
 8000edc:	e71a      	b.n	8000d14 <__aeabi_dsub+0x114>
 8000ede:	003a      	movs	r2, r7
 8000ee0:	4302      	orrs	r2, r0
 8000ee2:	d073      	beq.n	8000fcc <__aeabi_dsub+0x3cc>
 8000ee4:	0022      	movs	r2, r4
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	2c01      	cmp	r4, #1
 8000eea:	d100      	bne.n	8000eee <__aeabi_dsub+0x2ee>
 8000eec:	e0cb      	b.n	8001086 <__aeabi_dsub+0x486>
 8000eee:	4554      	cmp	r4, sl
 8000ef0:	d042      	beq.n	8000f78 <__aeabi_dsub+0x378>
 8000ef2:	4694      	mov	ip, r2
 8000ef4:	e748      	b.n	8000d88 <__aeabi_dsub+0x188>
 8000ef6:	0010      	movs	r0, r2
 8000ef8:	3b1f      	subs	r3, #31
 8000efa:	40d8      	lsrs	r0, r3
 8000efc:	2920      	cmp	r1, #32
 8000efe:	d003      	beq.n	8000f08 <__aeabi_dsub+0x308>
 8000f00:	2340      	movs	r3, #64	; 0x40
 8000f02:	1a5b      	subs	r3, r3, r1
 8000f04:	409a      	lsls	r2, r3
 8000f06:	4314      	orrs	r4, r2
 8000f08:	1e63      	subs	r3, r4, #1
 8000f0a:	419c      	sbcs	r4, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	2600      	movs	r6, #0
 8000f10:	469a      	mov	sl, r3
 8000f12:	4304      	orrs	r4, r0
 8000f14:	0763      	lsls	r3, r4, #29
 8000f16:	d000      	beq.n	8000f1a <__aeabi_dsub+0x31a>
 8000f18:	e6fe      	b.n	8000d18 <__aeabi_dsub+0x118>
 8000f1a:	4652      	mov	r2, sl
 8000f1c:	08e3      	lsrs	r3, r4, #3
 8000f1e:	0752      	lsls	r2, r2, #29
 8000f20:	4313      	orrs	r3, r2
 8000f22:	4652      	mov	r2, sl
 8000f24:	46b4      	mov	ip, r6
 8000f26:	08d2      	lsrs	r2, r2, #3
 8000f28:	490f      	ldr	r1, [pc, #60]	; (8000f68 <__aeabi_dsub+0x368>)
 8000f2a:	458c      	cmp	ip, r1
 8000f2c:	d02a      	beq.n	8000f84 <__aeabi_dsub+0x384>
 8000f2e:	0312      	lsls	r2, r2, #12
 8000f30:	0b14      	lsrs	r4, r2, #12
 8000f32:	4662      	mov	r2, ip
 8000f34:	0552      	lsls	r2, r2, #21
 8000f36:	0d52      	lsrs	r2, r2, #21
 8000f38:	e70c      	b.n	8000d54 <__aeabi_dsub+0x154>
 8000f3a:	003c      	movs	r4, r7
 8000f3c:	4304      	orrs	r4, r0
 8000f3e:	1e62      	subs	r2, r4, #1
 8000f40:	4194      	sbcs	r4, r2
 8000f42:	18e4      	adds	r4, r4, r3
 8000f44:	429c      	cmp	r4, r3
 8000f46:	4192      	sbcs	r2, r2
 8000f48:	4252      	negs	r2, r2
 8000f4a:	444a      	add	r2, r9
 8000f4c:	4692      	mov	sl, r2
 8000f4e:	4653      	mov	r3, sl
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	d5df      	bpl.n	8000f14 <__aeabi_dsub+0x314>
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__aeabi_dsub+0x368>)
 8000f56:	3601      	adds	r6, #1
 8000f58:	429e      	cmp	r6, r3
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_dsub+0x35e>
 8000f5c:	e0a0      	b.n	80010a0 <__aeabi_dsub+0x4a0>
 8000f5e:	0032      	movs	r2, r6
 8000f60:	2400      	movs	r4, #0
 8000f62:	2300      	movs	r3, #0
 8000f64:	e6f6      	b.n	8000d54 <__aeabi_dsub+0x154>
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	000007ff 	.word	0x000007ff
 8000f6c:	ff7fffff 	.word	0xff7fffff
 8000f70:	fffff801 	.word	0xfffff801
 8000f74:	000007fe 	.word	0x000007fe
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	464a      	mov	r2, r9
 8000f7c:	0752      	lsls	r2, r2, #29
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	464a      	mov	r2, r9
 8000f82:	08d2      	lsrs	r2, r2, #3
 8000f84:	0019      	movs	r1, r3
 8000f86:	4311      	orrs	r1, r2
 8000f88:	d100      	bne.n	8000f8c <__aeabi_dsub+0x38c>
 8000f8a:	e1b5      	b.n	80012f8 <__aeabi_dsub+0x6f8>
 8000f8c:	2480      	movs	r4, #128	; 0x80
 8000f8e:	0324      	lsls	r4, r4, #12
 8000f90:	4314      	orrs	r4, r2
 8000f92:	0324      	lsls	r4, r4, #12
 8000f94:	4ad5      	ldr	r2, [pc, #852]	; (80012ec <__aeabi_dsub+0x6ec>)
 8000f96:	0b24      	lsrs	r4, r4, #12
 8000f98:	e6dc      	b.n	8000d54 <__aeabi_dsub+0x154>
 8000f9a:	0020      	movs	r0, r4
 8000f9c:	f000 fa4c 	bl	8001438 <__clzsi2>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	3318      	adds	r3, #24
 8000fa4:	2b1f      	cmp	r3, #31
 8000fa6:	dc00      	bgt.n	8000faa <__aeabi_dsub+0x3aa>
 8000fa8:	e695      	b.n	8000cd6 <__aeabi_dsub+0xd6>
 8000faa:	0022      	movs	r2, r4
 8000fac:	3808      	subs	r0, #8
 8000fae:	4082      	lsls	r2, r0
 8000fb0:	2400      	movs	r4, #0
 8000fb2:	429e      	cmp	r6, r3
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_dsub+0x3b8>
 8000fb6:	e69a      	b.n	8000cee <__aeabi_dsub+0xee>
 8000fb8:	1af6      	subs	r6, r6, r3
 8000fba:	4bcd      	ldr	r3, [pc, #820]	; (80012f0 <__aeabi_dsub+0x6f0>)
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	4692      	mov	sl, r2
 8000fc0:	e6a8      	b.n	8000d14 <__aeabi_dsub+0x114>
 8000fc2:	003c      	movs	r4, r7
 8000fc4:	4304      	orrs	r4, r0
 8000fc6:	1e62      	subs	r2, r4, #1
 8000fc8:	4194      	sbcs	r4, r2
 8000fca:	e66c      	b.n	8000ca6 <__aeabi_dsub+0xa6>
 8000fcc:	464a      	mov	r2, r9
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	0752      	lsls	r2, r2, #29
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	464a      	mov	r2, r9
 8000fd6:	08d2      	lsrs	r2, r2, #3
 8000fd8:	e7a6      	b.n	8000f28 <__aeabi_dsub+0x328>
 8000fda:	4cc6      	ldr	r4, [pc, #792]	; (80012f4 <__aeabi_dsub+0x6f4>)
 8000fdc:	1c72      	adds	r2, r6, #1
 8000fde:	4222      	tst	r2, r4
 8000fe0:	d000      	beq.n	8000fe4 <__aeabi_dsub+0x3e4>
 8000fe2:	e0ac      	b.n	800113e <__aeabi_dsub+0x53e>
 8000fe4:	464a      	mov	r2, r9
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	2e00      	cmp	r6, #0
 8000fea:	d000      	beq.n	8000fee <__aeabi_dsub+0x3ee>
 8000fec:	e105      	b.n	80011fa <__aeabi_dsub+0x5fa>
 8000fee:	2a00      	cmp	r2, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_dsub+0x3f4>
 8000ff2:	e156      	b.n	80012a2 <__aeabi_dsub+0x6a2>
 8000ff4:	003a      	movs	r2, r7
 8000ff6:	4302      	orrs	r2, r0
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_dsub+0x3fc>
 8000ffa:	e0db      	b.n	80011b4 <__aeabi_dsub+0x5b4>
 8000ffc:	181c      	adds	r4, r3, r0
 8000ffe:	429c      	cmp	r4, r3
 8001000:	419b      	sbcs	r3, r3
 8001002:	444f      	add	r7, r9
 8001004:	46ba      	mov	sl, r7
 8001006:	425b      	negs	r3, r3
 8001008:	449a      	add	sl, r3
 800100a:	4653      	mov	r3, sl
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	d400      	bmi.n	8001012 <__aeabi_dsub+0x412>
 8001010:	e780      	b.n	8000f14 <__aeabi_dsub+0x314>
 8001012:	4652      	mov	r2, sl
 8001014:	4bb6      	ldr	r3, [pc, #728]	; (80012f0 <__aeabi_dsub+0x6f0>)
 8001016:	2601      	movs	r6, #1
 8001018:	401a      	ands	r2, r3
 800101a:	4692      	mov	sl, r2
 800101c:	e77a      	b.n	8000f14 <__aeabi_dsub+0x314>
 800101e:	4cb3      	ldr	r4, [pc, #716]	; (80012ec <__aeabi_dsub+0x6ec>)
 8001020:	42a2      	cmp	r2, r4
 8001022:	d100      	bne.n	8001026 <__aeabi_dsub+0x426>
 8001024:	e0c0      	b.n	80011a8 <__aeabi_dsub+0x5a8>
 8001026:	2480      	movs	r4, #128	; 0x80
 8001028:	464d      	mov	r5, r9
 800102a:	0424      	lsls	r4, r4, #16
 800102c:	4325      	orrs	r5, r4
 800102e:	46a9      	mov	r9, r5
 8001030:	4664      	mov	r4, ip
 8001032:	2c38      	cmp	r4, #56	; 0x38
 8001034:	dc53      	bgt.n	80010de <__aeabi_dsub+0x4de>
 8001036:	4661      	mov	r1, ip
 8001038:	2c1f      	cmp	r4, #31
 800103a:	dd00      	ble.n	800103e <__aeabi_dsub+0x43e>
 800103c:	e0cd      	b.n	80011da <__aeabi_dsub+0x5da>
 800103e:	2520      	movs	r5, #32
 8001040:	001e      	movs	r6, r3
 8001042:	1b2d      	subs	r5, r5, r4
 8001044:	464c      	mov	r4, r9
 8001046:	40ab      	lsls	r3, r5
 8001048:	40ac      	lsls	r4, r5
 800104a:	40ce      	lsrs	r6, r1
 800104c:	1e5d      	subs	r5, r3, #1
 800104e:	41ab      	sbcs	r3, r5
 8001050:	4334      	orrs	r4, r6
 8001052:	4323      	orrs	r3, r4
 8001054:	464c      	mov	r4, r9
 8001056:	40cc      	lsrs	r4, r1
 8001058:	1b3f      	subs	r7, r7, r4
 800105a:	e045      	b.n	80010e8 <__aeabi_dsub+0x4e8>
 800105c:	464a      	mov	r2, r9
 800105e:	1a1c      	subs	r4, r3, r0
 8001060:	1bd1      	subs	r1, r2, r7
 8001062:	42a3      	cmp	r3, r4
 8001064:	4192      	sbcs	r2, r2
 8001066:	4252      	negs	r2, r2
 8001068:	4692      	mov	sl, r2
 800106a:	000a      	movs	r2, r1
 800106c:	4651      	mov	r1, sl
 800106e:	1a52      	subs	r2, r2, r1
 8001070:	4692      	mov	sl, r2
 8001072:	0212      	lsls	r2, r2, #8
 8001074:	d500      	bpl.n	8001078 <__aeabi_dsub+0x478>
 8001076:	e083      	b.n	8001180 <__aeabi_dsub+0x580>
 8001078:	4653      	mov	r3, sl
 800107a:	4323      	orrs	r3, r4
 800107c:	d000      	beq.n	8001080 <__aeabi_dsub+0x480>
 800107e:	e621      	b.n	8000cc4 <__aeabi_dsub+0xc4>
 8001080:	2200      	movs	r2, #0
 8001082:	2500      	movs	r5, #0
 8001084:	e753      	b.n	8000f2e <__aeabi_dsub+0x32e>
 8001086:	181c      	adds	r4, r3, r0
 8001088:	429c      	cmp	r4, r3
 800108a:	419b      	sbcs	r3, r3
 800108c:	444f      	add	r7, r9
 800108e:	46ba      	mov	sl, r7
 8001090:	425b      	negs	r3, r3
 8001092:	449a      	add	sl, r3
 8001094:	4653      	mov	r3, sl
 8001096:	2601      	movs	r6, #1
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	d400      	bmi.n	800109e <__aeabi_dsub+0x49e>
 800109c:	e73a      	b.n	8000f14 <__aeabi_dsub+0x314>
 800109e:	2602      	movs	r6, #2
 80010a0:	4652      	mov	r2, sl
 80010a2:	4b93      	ldr	r3, [pc, #588]	; (80012f0 <__aeabi_dsub+0x6f0>)
 80010a4:	2101      	movs	r1, #1
 80010a6:	401a      	ands	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	4021      	ands	r1, r4
 80010ac:	0862      	lsrs	r2, r4, #1
 80010ae:	430a      	orrs	r2, r1
 80010b0:	07dc      	lsls	r4, r3, #31
 80010b2:	085b      	lsrs	r3, r3, #1
 80010b4:	469a      	mov	sl, r3
 80010b6:	4314      	orrs	r4, r2
 80010b8:	e62c      	b.n	8000d14 <__aeabi_dsub+0x114>
 80010ba:	0039      	movs	r1, r7
 80010bc:	3a20      	subs	r2, #32
 80010be:	40d1      	lsrs	r1, r2
 80010c0:	4662      	mov	r2, ip
 80010c2:	2a20      	cmp	r2, #32
 80010c4:	d006      	beq.n	80010d4 <__aeabi_dsub+0x4d4>
 80010c6:	4664      	mov	r4, ip
 80010c8:	2240      	movs	r2, #64	; 0x40
 80010ca:	1b12      	subs	r2, r2, r4
 80010cc:	003c      	movs	r4, r7
 80010ce:	4094      	lsls	r4, r2
 80010d0:	4304      	orrs	r4, r0
 80010d2:	9401      	str	r4, [sp, #4]
 80010d4:	9c01      	ldr	r4, [sp, #4]
 80010d6:	1e62      	subs	r2, r4, #1
 80010d8:	4194      	sbcs	r4, r2
 80010da:	430c      	orrs	r4, r1
 80010dc:	e5e3      	b.n	8000ca6 <__aeabi_dsub+0xa6>
 80010de:	4649      	mov	r1, r9
 80010e0:	4319      	orrs	r1, r3
 80010e2:	000b      	movs	r3, r1
 80010e4:	1e5c      	subs	r4, r3, #1
 80010e6:	41a3      	sbcs	r3, r4
 80010e8:	1ac4      	subs	r4, r0, r3
 80010ea:	42a0      	cmp	r0, r4
 80010ec:	419b      	sbcs	r3, r3
 80010ee:	425b      	negs	r3, r3
 80010f0:	1afb      	subs	r3, r7, r3
 80010f2:	469a      	mov	sl, r3
 80010f4:	465d      	mov	r5, fp
 80010f6:	0016      	movs	r6, r2
 80010f8:	e5dc      	b.n	8000cb4 <__aeabi_dsub+0xb4>
 80010fa:	4649      	mov	r1, r9
 80010fc:	4319      	orrs	r1, r3
 80010fe:	d100      	bne.n	8001102 <__aeabi_dsub+0x502>
 8001100:	e0ae      	b.n	8001260 <__aeabi_dsub+0x660>
 8001102:	4661      	mov	r1, ip
 8001104:	4664      	mov	r4, ip
 8001106:	3901      	subs	r1, #1
 8001108:	2c01      	cmp	r4, #1
 800110a:	d100      	bne.n	800110e <__aeabi_dsub+0x50e>
 800110c:	e0e0      	b.n	80012d0 <__aeabi_dsub+0x6d0>
 800110e:	4c77      	ldr	r4, [pc, #476]	; (80012ec <__aeabi_dsub+0x6ec>)
 8001110:	45a4      	cmp	ip, r4
 8001112:	d056      	beq.n	80011c2 <__aeabi_dsub+0x5c2>
 8001114:	468c      	mov	ip, r1
 8001116:	e69a      	b.n	8000e4e <__aeabi_dsub+0x24e>
 8001118:	4661      	mov	r1, ip
 800111a:	2220      	movs	r2, #32
 800111c:	003c      	movs	r4, r7
 800111e:	1a52      	subs	r2, r2, r1
 8001120:	4094      	lsls	r4, r2
 8001122:	0001      	movs	r1, r0
 8001124:	4090      	lsls	r0, r2
 8001126:	46a0      	mov	r8, r4
 8001128:	4664      	mov	r4, ip
 800112a:	1e42      	subs	r2, r0, #1
 800112c:	4190      	sbcs	r0, r2
 800112e:	4662      	mov	r2, ip
 8001130:	40e1      	lsrs	r1, r4
 8001132:	4644      	mov	r4, r8
 8001134:	40d7      	lsrs	r7, r2
 8001136:	430c      	orrs	r4, r1
 8001138:	4304      	orrs	r4, r0
 800113a:	44b9      	add	r9, r7
 800113c:	e701      	b.n	8000f42 <__aeabi_dsub+0x342>
 800113e:	496b      	ldr	r1, [pc, #428]	; (80012ec <__aeabi_dsub+0x6ec>)
 8001140:	428a      	cmp	r2, r1
 8001142:	d100      	bne.n	8001146 <__aeabi_dsub+0x546>
 8001144:	e70c      	b.n	8000f60 <__aeabi_dsub+0x360>
 8001146:	1818      	adds	r0, r3, r0
 8001148:	4298      	cmp	r0, r3
 800114a:	419b      	sbcs	r3, r3
 800114c:	444f      	add	r7, r9
 800114e:	425b      	negs	r3, r3
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	07dc      	lsls	r4, r3, #31
 8001154:	0840      	lsrs	r0, r0, #1
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	469a      	mov	sl, r3
 800115a:	0016      	movs	r6, r2
 800115c:	4304      	orrs	r4, r0
 800115e:	e6d9      	b.n	8000f14 <__aeabi_dsub+0x314>
 8001160:	2a00      	cmp	r2, #0
 8001162:	d000      	beq.n	8001166 <__aeabi_dsub+0x566>
 8001164:	e081      	b.n	800126a <__aeabi_dsub+0x66a>
 8001166:	003b      	movs	r3, r7
 8001168:	4303      	orrs	r3, r0
 800116a:	d11d      	bne.n	80011a8 <__aeabi_dsub+0x5a8>
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	2500      	movs	r5, #0
 8001170:	0312      	lsls	r2, r2, #12
 8001172:	e70b      	b.n	8000f8c <__aeabi_dsub+0x38c>
 8001174:	08c0      	lsrs	r0, r0, #3
 8001176:	077b      	lsls	r3, r7, #29
 8001178:	465d      	mov	r5, fp
 800117a:	4303      	orrs	r3, r0
 800117c:	08fa      	lsrs	r2, r7, #3
 800117e:	e6d3      	b.n	8000f28 <__aeabi_dsub+0x328>
 8001180:	1ac4      	subs	r4, r0, r3
 8001182:	42a0      	cmp	r0, r4
 8001184:	4180      	sbcs	r0, r0
 8001186:	464b      	mov	r3, r9
 8001188:	4240      	negs	r0, r0
 800118a:	1aff      	subs	r7, r7, r3
 800118c:	1a3b      	subs	r3, r7, r0
 800118e:	469a      	mov	sl, r3
 8001190:	465d      	mov	r5, fp
 8001192:	e597      	b.n	8000cc4 <__aeabi_dsub+0xc4>
 8001194:	1a1c      	subs	r4, r3, r0
 8001196:	464a      	mov	r2, r9
 8001198:	42a3      	cmp	r3, r4
 800119a:	419b      	sbcs	r3, r3
 800119c:	1bd7      	subs	r7, r2, r7
 800119e:	425b      	negs	r3, r3
 80011a0:	1afb      	subs	r3, r7, r3
 80011a2:	469a      	mov	sl, r3
 80011a4:	2601      	movs	r6, #1
 80011a6:	e585      	b.n	8000cb4 <__aeabi_dsub+0xb4>
 80011a8:	08c0      	lsrs	r0, r0, #3
 80011aa:	077b      	lsls	r3, r7, #29
 80011ac:	465d      	mov	r5, fp
 80011ae:	4303      	orrs	r3, r0
 80011b0:	08fa      	lsrs	r2, r7, #3
 80011b2:	e6e7      	b.n	8000f84 <__aeabi_dsub+0x384>
 80011b4:	464a      	mov	r2, r9
 80011b6:	08db      	lsrs	r3, r3, #3
 80011b8:	0752      	lsls	r2, r2, #29
 80011ba:	4313      	orrs	r3, r2
 80011bc:	464a      	mov	r2, r9
 80011be:	08d2      	lsrs	r2, r2, #3
 80011c0:	e6b5      	b.n	8000f2e <__aeabi_dsub+0x32e>
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	077b      	lsls	r3, r7, #29
 80011c6:	4303      	orrs	r3, r0
 80011c8:	08fa      	lsrs	r2, r7, #3
 80011ca:	e6db      	b.n	8000f84 <__aeabi_dsub+0x384>
 80011cc:	4649      	mov	r1, r9
 80011ce:	4319      	orrs	r1, r3
 80011d0:	000b      	movs	r3, r1
 80011d2:	1e59      	subs	r1, r3, #1
 80011d4:	418b      	sbcs	r3, r1
 80011d6:	001c      	movs	r4, r3
 80011d8:	e653      	b.n	8000e82 <__aeabi_dsub+0x282>
 80011da:	464d      	mov	r5, r9
 80011dc:	3c20      	subs	r4, #32
 80011de:	40e5      	lsrs	r5, r4
 80011e0:	2920      	cmp	r1, #32
 80011e2:	d005      	beq.n	80011f0 <__aeabi_dsub+0x5f0>
 80011e4:	2440      	movs	r4, #64	; 0x40
 80011e6:	1a64      	subs	r4, r4, r1
 80011e8:	4649      	mov	r1, r9
 80011ea:	40a1      	lsls	r1, r4
 80011ec:	430b      	orrs	r3, r1
 80011ee:	4698      	mov	r8, r3
 80011f0:	4643      	mov	r3, r8
 80011f2:	1e5c      	subs	r4, r3, #1
 80011f4:	41a3      	sbcs	r3, r4
 80011f6:	432b      	orrs	r3, r5
 80011f8:	e776      	b.n	80010e8 <__aeabi_dsub+0x4e8>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d0e1      	beq.n	80011c2 <__aeabi_dsub+0x5c2>
 80011fe:	003a      	movs	r2, r7
 8001200:	08db      	lsrs	r3, r3, #3
 8001202:	4302      	orrs	r2, r0
 8001204:	d100      	bne.n	8001208 <__aeabi_dsub+0x608>
 8001206:	e6b8      	b.n	8000f7a <__aeabi_dsub+0x37a>
 8001208:	464a      	mov	r2, r9
 800120a:	0752      	lsls	r2, r2, #29
 800120c:	2480      	movs	r4, #128	; 0x80
 800120e:	4313      	orrs	r3, r2
 8001210:	464a      	mov	r2, r9
 8001212:	0324      	lsls	r4, r4, #12
 8001214:	08d2      	lsrs	r2, r2, #3
 8001216:	4222      	tst	r2, r4
 8001218:	d007      	beq.n	800122a <__aeabi_dsub+0x62a>
 800121a:	08fe      	lsrs	r6, r7, #3
 800121c:	4226      	tst	r6, r4
 800121e:	d104      	bne.n	800122a <__aeabi_dsub+0x62a>
 8001220:	465d      	mov	r5, fp
 8001222:	0032      	movs	r2, r6
 8001224:	08c3      	lsrs	r3, r0, #3
 8001226:	077f      	lsls	r7, r7, #29
 8001228:	433b      	orrs	r3, r7
 800122a:	0f59      	lsrs	r1, r3, #29
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	0749      	lsls	r1, r1, #29
 8001230:	08db      	lsrs	r3, r3, #3
 8001232:	430b      	orrs	r3, r1
 8001234:	e6a6      	b.n	8000f84 <__aeabi_dsub+0x384>
 8001236:	1ac4      	subs	r4, r0, r3
 8001238:	42a0      	cmp	r0, r4
 800123a:	4180      	sbcs	r0, r0
 800123c:	464b      	mov	r3, r9
 800123e:	4240      	negs	r0, r0
 8001240:	1aff      	subs	r7, r7, r3
 8001242:	1a3b      	subs	r3, r7, r0
 8001244:	469a      	mov	sl, r3
 8001246:	465d      	mov	r5, fp
 8001248:	2601      	movs	r6, #1
 800124a:	e533      	b.n	8000cb4 <__aeabi_dsub+0xb4>
 800124c:	003b      	movs	r3, r7
 800124e:	4303      	orrs	r3, r0
 8001250:	d100      	bne.n	8001254 <__aeabi_dsub+0x654>
 8001252:	e715      	b.n	8001080 <__aeabi_dsub+0x480>
 8001254:	08c0      	lsrs	r0, r0, #3
 8001256:	077b      	lsls	r3, r7, #29
 8001258:	465d      	mov	r5, fp
 800125a:	4303      	orrs	r3, r0
 800125c:	08fa      	lsrs	r2, r7, #3
 800125e:	e666      	b.n	8000f2e <__aeabi_dsub+0x32e>
 8001260:	08c0      	lsrs	r0, r0, #3
 8001262:	077b      	lsls	r3, r7, #29
 8001264:	4303      	orrs	r3, r0
 8001266:	08fa      	lsrs	r2, r7, #3
 8001268:	e65e      	b.n	8000f28 <__aeabi_dsub+0x328>
 800126a:	003a      	movs	r2, r7
 800126c:	08db      	lsrs	r3, r3, #3
 800126e:	4302      	orrs	r2, r0
 8001270:	d100      	bne.n	8001274 <__aeabi_dsub+0x674>
 8001272:	e682      	b.n	8000f7a <__aeabi_dsub+0x37a>
 8001274:	464a      	mov	r2, r9
 8001276:	0752      	lsls	r2, r2, #29
 8001278:	2480      	movs	r4, #128	; 0x80
 800127a:	4313      	orrs	r3, r2
 800127c:	464a      	mov	r2, r9
 800127e:	0324      	lsls	r4, r4, #12
 8001280:	08d2      	lsrs	r2, r2, #3
 8001282:	4222      	tst	r2, r4
 8001284:	d007      	beq.n	8001296 <__aeabi_dsub+0x696>
 8001286:	08fe      	lsrs	r6, r7, #3
 8001288:	4226      	tst	r6, r4
 800128a:	d104      	bne.n	8001296 <__aeabi_dsub+0x696>
 800128c:	465d      	mov	r5, fp
 800128e:	0032      	movs	r2, r6
 8001290:	08c3      	lsrs	r3, r0, #3
 8001292:	077f      	lsls	r7, r7, #29
 8001294:	433b      	orrs	r3, r7
 8001296:	0f59      	lsrs	r1, r3, #29
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	08db      	lsrs	r3, r3, #3
 800129c:	0749      	lsls	r1, r1, #29
 800129e:	430b      	orrs	r3, r1
 80012a0:	e670      	b.n	8000f84 <__aeabi_dsub+0x384>
 80012a2:	08c0      	lsrs	r0, r0, #3
 80012a4:	077b      	lsls	r3, r7, #29
 80012a6:	4303      	orrs	r3, r0
 80012a8:	08fa      	lsrs	r2, r7, #3
 80012aa:	e640      	b.n	8000f2e <__aeabi_dsub+0x32e>
 80012ac:	464c      	mov	r4, r9
 80012ae:	3920      	subs	r1, #32
 80012b0:	40cc      	lsrs	r4, r1
 80012b2:	4661      	mov	r1, ip
 80012b4:	2920      	cmp	r1, #32
 80012b6:	d006      	beq.n	80012c6 <__aeabi_dsub+0x6c6>
 80012b8:	4666      	mov	r6, ip
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	1b89      	subs	r1, r1, r6
 80012be:	464e      	mov	r6, r9
 80012c0:	408e      	lsls	r6, r1
 80012c2:	4333      	orrs	r3, r6
 80012c4:	4698      	mov	r8, r3
 80012c6:	4643      	mov	r3, r8
 80012c8:	1e59      	subs	r1, r3, #1
 80012ca:	418b      	sbcs	r3, r1
 80012cc:	431c      	orrs	r4, r3
 80012ce:	e5d8      	b.n	8000e82 <__aeabi_dsub+0x282>
 80012d0:	181c      	adds	r4, r3, r0
 80012d2:	4284      	cmp	r4, r0
 80012d4:	4180      	sbcs	r0, r0
 80012d6:	444f      	add	r7, r9
 80012d8:	46ba      	mov	sl, r7
 80012da:	4240      	negs	r0, r0
 80012dc:	4482      	add	sl, r0
 80012de:	e6d9      	b.n	8001094 <__aeabi_dsub+0x494>
 80012e0:	4653      	mov	r3, sl
 80012e2:	4323      	orrs	r3, r4
 80012e4:	d100      	bne.n	80012e8 <__aeabi_dsub+0x6e8>
 80012e6:	e6cb      	b.n	8001080 <__aeabi_dsub+0x480>
 80012e8:	e614      	b.n	8000f14 <__aeabi_dsub+0x314>
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	000007ff 	.word	0x000007ff
 80012f0:	ff7fffff 	.word	0xff7fffff
 80012f4:	000007fe 	.word	0x000007fe
 80012f8:	2300      	movs	r3, #0
 80012fa:	4a01      	ldr	r2, [pc, #4]	; (8001300 <__aeabi_dsub+0x700>)
 80012fc:	001c      	movs	r4, r3
 80012fe:	e529      	b.n	8000d54 <__aeabi_dsub+0x154>
 8001300:	000007ff 	.word	0x000007ff

08001304 <__aeabi_d2iz>:
 8001304:	000a      	movs	r2, r1
 8001306:	b530      	push	{r4, r5, lr}
 8001308:	4c13      	ldr	r4, [pc, #76]	; (8001358 <__aeabi_d2iz+0x54>)
 800130a:	0053      	lsls	r3, r2, #1
 800130c:	0309      	lsls	r1, r1, #12
 800130e:	0005      	movs	r5, r0
 8001310:	0b09      	lsrs	r1, r1, #12
 8001312:	2000      	movs	r0, #0
 8001314:	0d5b      	lsrs	r3, r3, #21
 8001316:	0fd2      	lsrs	r2, r2, #31
 8001318:	42a3      	cmp	r3, r4
 800131a:	dd04      	ble.n	8001326 <__aeabi_d2iz+0x22>
 800131c:	480f      	ldr	r0, [pc, #60]	; (800135c <__aeabi_d2iz+0x58>)
 800131e:	4283      	cmp	r3, r0
 8001320:	dd02      	ble.n	8001328 <__aeabi_d2iz+0x24>
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <__aeabi_d2iz+0x5c>)
 8001324:	18d0      	adds	r0, r2, r3
 8001326:	bd30      	pop	{r4, r5, pc}
 8001328:	2080      	movs	r0, #128	; 0x80
 800132a:	0340      	lsls	r0, r0, #13
 800132c:	4301      	orrs	r1, r0
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <__aeabi_d2iz+0x60>)
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	281f      	cmp	r0, #31
 8001334:	dd08      	ble.n	8001348 <__aeabi_d2iz+0x44>
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <__aeabi_d2iz+0x64>)
 8001338:	1ac3      	subs	r3, r0, r3
 800133a:	40d9      	lsrs	r1, r3
 800133c:	000b      	movs	r3, r1
 800133e:	4258      	negs	r0, r3
 8001340:	2a00      	cmp	r2, #0
 8001342:	d1f0      	bne.n	8001326 <__aeabi_d2iz+0x22>
 8001344:	0018      	movs	r0, r3
 8001346:	e7ee      	b.n	8001326 <__aeabi_d2iz+0x22>
 8001348:	4c08      	ldr	r4, [pc, #32]	; (800136c <__aeabi_d2iz+0x68>)
 800134a:	40c5      	lsrs	r5, r0
 800134c:	46a4      	mov	ip, r4
 800134e:	4463      	add	r3, ip
 8001350:	4099      	lsls	r1, r3
 8001352:	000b      	movs	r3, r1
 8001354:	432b      	orrs	r3, r5
 8001356:	e7f2      	b.n	800133e <__aeabi_d2iz+0x3a>
 8001358:	000003fe 	.word	0x000003fe
 800135c:	0000041d 	.word	0x0000041d
 8001360:	7fffffff 	.word	0x7fffffff
 8001364:	00000433 	.word	0x00000433
 8001368:	00000413 	.word	0x00000413
 800136c:	fffffbed 	.word	0xfffffbed

08001370 <__aeabi_ui2d>:
 8001370:	b510      	push	{r4, lr}
 8001372:	1e04      	subs	r4, r0, #0
 8001374:	d010      	beq.n	8001398 <__aeabi_ui2d+0x28>
 8001376:	f000 f85f 	bl	8001438 <__clzsi2>
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <__aeabi_ui2d+0x48>)
 800137c:	1a1b      	subs	r3, r3, r0
 800137e:	280a      	cmp	r0, #10
 8001380:	dc11      	bgt.n	80013a6 <__aeabi_ui2d+0x36>
 8001382:	220b      	movs	r2, #11
 8001384:	0021      	movs	r1, r4
 8001386:	1a12      	subs	r2, r2, r0
 8001388:	40d1      	lsrs	r1, r2
 800138a:	3015      	adds	r0, #21
 800138c:	030a      	lsls	r2, r1, #12
 800138e:	055b      	lsls	r3, r3, #21
 8001390:	4084      	lsls	r4, r0
 8001392:	0b12      	lsrs	r2, r2, #12
 8001394:	0d5b      	lsrs	r3, r3, #21
 8001396:	e001      	b.n	800139c <__aeabi_ui2d+0x2c>
 8001398:	2300      	movs	r3, #0
 800139a:	2200      	movs	r2, #0
 800139c:	051b      	lsls	r3, r3, #20
 800139e:	4313      	orrs	r3, r2
 80013a0:	0020      	movs	r0, r4
 80013a2:	0019      	movs	r1, r3
 80013a4:	bd10      	pop	{r4, pc}
 80013a6:	0022      	movs	r2, r4
 80013a8:	380b      	subs	r0, #11
 80013aa:	4082      	lsls	r2, r0
 80013ac:	055b      	lsls	r3, r3, #21
 80013ae:	0312      	lsls	r2, r2, #12
 80013b0:	2400      	movs	r4, #0
 80013b2:	0b12      	lsrs	r2, r2, #12
 80013b4:	0d5b      	lsrs	r3, r3, #21
 80013b6:	e7f1      	b.n	800139c <__aeabi_ui2d+0x2c>
 80013b8:	0000041e 	.word	0x0000041e

080013bc <__aeabi_cdrcmple>:
 80013bc:	4684      	mov	ip, r0
 80013be:	0010      	movs	r0, r2
 80013c0:	4662      	mov	r2, ip
 80013c2:	468c      	mov	ip, r1
 80013c4:	0019      	movs	r1, r3
 80013c6:	4663      	mov	r3, ip
 80013c8:	e000      	b.n	80013cc <__aeabi_cdcmpeq>
 80013ca:	46c0      	nop			; (mov r8, r8)

080013cc <__aeabi_cdcmpeq>:
 80013cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80013ce:	f000 f8f9 	bl	80015c4 <__ledf2>
 80013d2:	2800      	cmp	r0, #0
 80013d4:	d401      	bmi.n	80013da <__aeabi_cdcmpeq+0xe>
 80013d6:	2100      	movs	r1, #0
 80013d8:	42c8      	cmn	r0, r1
 80013da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080013dc <__aeabi_dcmpeq>:
 80013dc:	b510      	push	{r4, lr}
 80013de:	f000 f849 	bl	8001474 <__eqdf2>
 80013e2:	4240      	negs	r0, r0
 80013e4:	3001      	adds	r0, #1
 80013e6:	bd10      	pop	{r4, pc}

080013e8 <__aeabi_dcmplt>:
 80013e8:	b510      	push	{r4, lr}
 80013ea:	f000 f8eb 	bl	80015c4 <__ledf2>
 80013ee:	2800      	cmp	r0, #0
 80013f0:	db01      	blt.n	80013f6 <__aeabi_dcmplt+0xe>
 80013f2:	2000      	movs	r0, #0
 80013f4:	bd10      	pop	{r4, pc}
 80013f6:	2001      	movs	r0, #1
 80013f8:	bd10      	pop	{r4, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)

080013fc <__aeabi_dcmple>:
 80013fc:	b510      	push	{r4, lr}
 80013fe:	f000 f8e1 	bl	80015c4 <__ledf2>
 8001402:	2800      	cmp	r0, #0
 8001404:	dd01      	ble.n	800140a <__aeabi_dcmple+0xe>
 8001406:	2000      	movs	r0, #0
 8001408:	bd10      	pop	{r4, pc}
 800140a:	2001      	movs	r0, #1
 800140c:	bd10      	pop	{r4, pc}
 800140e:	46c0      	nop			; (mov r8, r8)

08001410 <__aeabi_dcmpgt>:
 8001410:	b510      	push	{r4, lr}
 8001412:	f000 f871 	bl	80014f8 <__gedf2>
 8001416:	2800      	cmp	r0, #0
 8001418:	dc01      	bgt.n	800141e <__aeabi_dcmpgt+0xe>
 800141a:	2000      	movs	r0, #0
 800141c:	bd10      	pop	{r4, pc}
 800141e:	2001      	movs	r0, #1
 8001420:	bd10      	pop	{r4, pc}
 8001422:	46c0      	nop			; (mov r8, r8)

08001424 <__aeabi_dcmpge>:
 8001424:	b510      	push	{r4, lr}
 8001426:	f000 f867 	bl	80014f8 <__gedf2>
 800142a:	2800      	cmp	r0, #0
 800142c:	da01      	bge.n	8001432 <__aeabi_dcmpge+0xe>
 800142e:	2000      	movs	r0, #0
 8001430:	bd10      	pop	{r4, pc}
 8001432:	2001      	movs	r0, #1
 8001434:	bd10      	pop	{r4, pc}
 8001436:	46c0      	nop			; (mov r8, r8)

08001438 <__clzsi2>:
 8001438:	211c      	movs	r1, #28
 800143a:	2301      	movs	r3, #1
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	4298      	cmp	r0, r3
 8001440:	d301      	bcc.n	8001446 <__clzsi2+0xe>
 8001442:	0c00      	lsrs	r0, r0, #16
 8001444:	3910      	subs	r1, #16
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	4298      	cmp	r0, r3
 800144a:	d301      	bcc.n	8001450 <__clzsi2+0x18>
 800144c:	0a00      	lsrs	r0, r0, #8
 800144e:	3908      	subs	r1, #8
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	4298      	cmp	r0, r3
 8001454:	d301      	bcc.n	800145a <__clzsi2+0x22>
 8001456:	0900      	lsrs	r0, r0, #4
 8001458:	3904      	subs	r1, #4
 800145a:	a202      	add	r2, pc, #8	; (adr r2, 8001464 <__clzsi2+0x2c>)
 800145c:	5c10      	ldrb	r0, [r2, r0]
 800145e:	1840      	adds	r0, r0, r1
 8001460:	4770      	bx	lr
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	02020304 	.word	0x02020304
 8001468:	01010101 	.word	0x01010101
	...

08001474 <__eqdf2>:
 8001474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001476:	464e      	mov	r6, r9
 8001478:	4645      	mov	r5, r8
 800147a:	46de      	mov	lr, fp
 800147c:	4657      	mov	r7, sl
 800147e:	4690      	mov	r8, r2
 8001480:	b5e0      	push	{r5, r6, r7, lr}
 8001482:	0017      	movs	r7, r2
 8001484:	031a      	lsls	r2, r3, #12
 8001486:	0b12      	lsrs	r2, r2, #12
 8001488:	0005      	movs	r5, r0
 800148a:	4684      	mov	ip, r0
 800148c:	4819      	ldr	r0, [pc, #100]	; (80014f4 <__eqdf2+0x80>)
 800148e:	030e      	lsls	r6, r1, #12
 8001490:	004c      	lsls	r4, r1, #1
 8001492:	4691      	mov	r9, r2
 8001494:	005a      	lsls	r2, r3, #1
 8001496:	0fdb      	lsrs	r3, r3, #31
 8001498:	469b      	mov	fp, r3
 800149a:	0b36      	lsrs	r6, r6, #12
 800149c:	0d64      	lsrs	r4, r4, #21
 800149e:	0fc9      	lsrs	r1, r1, #31
 80014a0:	0d52      	lsrs	r2, r2, #21
 80014a2:	4284      	cmp	r4, r0
 80014a4:	d019      	beq.n	80014da <__eqdf2+0x66>
 80014a6:	4282      	cmp	r2, r0
 80014a8:	d010      	beq.n	80014cc <__eqdf2+0x58>
 80014aa:	2001      	movs	r0, #1
 80014ac:	4294      	cmp	r4, r2
 80014ae:	d10e      	bne.n	80014ce <__eqdf2+0x5a>
 80014b0:	454e      	cmp	r6, r9
 80014b2:	d10c      	bne.n	80014ce <__eqdf2+0x5a>
 80014b4:	2001      	movs	r0, #1
 80014b6:	45c4      	cmp	ip, r8
 80014b8:	d109      	bne.n	80014ce <__eqdf2+0x5a>
 80014ba:	4559      	cmp	r1, fp
 80014bc:	d017      	beq.n	80014ee <__eqdf2+0x7a>
 80014be:	2c00      	cmp	r4, #0
 80014c0:	d105      	bne.n	80014ce <__eqdf2+0x5a>
 80014c2:	0030      	movs	r0, r6
 80014c4:	4328      	orrs	r0, r5
 80014c6:	1e43      	subs	r3, r0, #1
 80014c8:	4198      	sbcs	r0, r3
 80014ca:	e000      	b.n	80014ce <__eqdf2+0x5a>
 80014cc:	2001      	movs	r0, #1
 80014ce:	bcf0      	pop	{r4, r5, r6, r7}
 80014d0:	46bb      	mov	fp, r7
 80014d2:	46b2      	mov	sl, r6
 80014d4:	46a9      	mov	r9, r5
 80014d6:	46a0      	mov	r8, r4
 80014d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014da:	0033      	movs	r3, r6
 80014dc:	2001      	movs	r0, #1
 80014de:	432b      	orrs	r3, r5
 80014e0:	d1f5      	bne.n	80014ce <__eqdf2+0x5a>
 80014e2:	42a2      	cmp	r2, r4
 80014e4:	d1f3      	bne.n	80014ce <__eqdf2+0x5a>
 80014e6:	464b      	mov	r3, r9
 80014e8:	433b      	orrs	r3, r7
 80014ea:	d1f0      	bne.n	80014ce <__eqdf2+0x5a>
 80014ec:	e7e2      	b.n	80014b4 <__eqdf2+0x40>
 80014ee:	2000      	movs	r0, #0
 80014f0:	e7ed      	b.n	80014ce <__eqdf2+0x5a>
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	000007ff 	.word	0x000007ff

080014f8 <__gedf2>:
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	4647      	mov	r7, r8
 80014fc:	46ce      	mov	lr, r9
 80014fe:	0004      	movs	r4, r0
 8001500:	0018      	movs	r0, r3
 8001502:	0016      	movs	r6, r2
 8001504:	031b      	lsls	r3, r3, #12
 8001506:	0b1b      	lsrs	r3, r3, #12
 8001508:	4d2d      	ldr	r5, [pc, #180]	; (80015c0 <__gedf2+0xc8>)
 800150a:	004a      	lsls	r2, r1, #1
 800150c:	4699      	mov	r9, r3
 800150e:	b580      	push	{r7, lr}
 8001510:	0043      	lsls	r3, r0, #1
 8001512:	030f      	lsls	r7, r1, #12
 8001514:	46a4      	mov	ip, r4
 8001516:	46b0      	mov	r8, r6
 8001518:	0b3f      	lsrs	r7, r7, #12
 800151a:	0d52      	lsrs	r2, r2, #21
 800151c:	0fc9      	lsrs	r1, r1, #31
 800151e:	0d5b      	lsrs	r3, r3, #21
 8001520:	0fc0      	lsrs	r0, r0, #31
 8001522:	42aa      	cmp	r2, r5
 8001524:	d021      	beq.n	800156a <__gedf2+0x72>
 8001526:	42ab      	cmp	r3, r5
 8001528:	d013      	beq.n	8001552 <__gedf2+0x5a>
 800152a:	2a00      	cmp	r2, #0
 800152c:	d122      	bne.n	8001574 <__gedf2+0x7c>
 800152e:	433c      	orrs	r4, r7
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <__gedf2+0x42>
 8001534:	464d      	mov	r5, r9
 8001536:	432e      	orrs	r6, r5
 8001538:	d022      	beq.n	8001580 <__gedf2+0x88>
 800153a:	2c00      	cmp	r4, #0
 800153c:	d010      	beq.n	8001560 <__gedf2+0x68>
 800153e:	4281      	cmp	r1, r0
 8001540:	d022      	beq.n	8001588 <__gedf2+0x90>
 8001542:	2002      	movs	r0, #2
 8001544:	3901      	subs	r1, #1
 8001546:	4008      	ands	r0, r1
 8001548:	3801      	subs	r0, #1
 800154a:	bcc0      	pop	{r6, r7}
 800154c:	46b9      	mov	r9, r7
 800154e:	46b0      	mov	r8, r6
 8001550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001552:	464d      	mov	r5, r9
 8001554:	432e      	orrs	r6, r5
 8001556:	d129      	bne.n	80015ac <__gedf2+0xb4>
 8001558:	2a00      	cmp	r2, #0
 800155a:	d1f0      	bne.n	800153e <__gedf2+0x46>
 800155c:	433c      	orrs	r4, r7
 800155e:	d1ee      	bne.n	800153e <__gedf2+0x46>
 8001560:	2800      	cmp	r0, #0
 8001562:	d1f2      	bne.n	800154a <__gedf2+0x52>
 8001564:	2001      	movs	r0, #1
 8001566:	4240      	negs	r0, r0
 8001568:	e7ef      	b.n	800154a <__gedf2+0x52>
 800156a:	003d      	movs	r5, r7
 800156c:	4325      	orrs	r5, r4
 800156e:	d11d      	bne.n	80015ac <__gedf2+0xb4>
 8001570:	4293      	cmp	r3, r2
 8001572:	d0ee      	beq.n	8001552 <__gedf2+0x5a>
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e2      	bne.n	800153e <__gedf2+0x46>
 8001578:	464c      	mov	r4, r9
 800157a:	4326      	orrs	r6, r4
 800157c:	d1df      	bne.n	800153e <__gedf2+0x46>
 800157e:	e7e0      	b.n	8001542 <__gedf2+0x4a>
 8001580:	2000      	movs	r0, #0
 8001582:	2c00      	cmp	r4, #0
 8001584:	d0e1      	beq.n	800154a <__gedf2+0x52>
 8001586:	e7dc      	b.n	8001542 <__gedf2+0x4a>
 8001588:	429a      	cmp	r2, r3
 800158a:	dc0a      	bgt.n	80015a2 <__gedf2+0xaa>
 800158c:	dbe8      	blt.n	8001560 <__gedf2+0x68>
 800158e:	454f      	cmp	r7, r9
 8001590:	d8d7      	bhi.n	8001542 <__gedf2+0x4a>
 8001592:	d00e      	beq.n	80015b2 <__gedf2+0xba>
 8001594:	2000      	movs	r0, #0
 8001596:	454f      	cmp	r7, r9
 8001598:	d2d7      	bcs.n	800154a <__gedf2+0x52>
 800159a:	2900      	cmp	r1, #0
 800159c:	d0e2      	beq.n	8001564 <__gedf2+0x6c>
 800159e:	0008      	movs	r0, r1
 80015a0:	e7d3      	b.n	800154a <__gedf2+0x52>
 80015a2:	4243      	negs	r3, r0
 80015a4:	4158      	adcs	r0, r3
 80015a6:	0040      	lsls	r0, r0, #1
 80015a8:	3801      	subs	r0, #1
 80015aa:	e7ce      	b.n	800154a <__gedf2+0x52>
 80015ac:	2002      	movs	r0, #2
 80015ae:	4240      	negs	r0, r0
 80015b0:	e7cb      	b.n	800154a <__gedf2+0x52>
 80015b2:	45c4      	cmp	ip, r8
 80015b4:	d8c5      	bhi.n	8001542 <__gedf2+0x4a>
 80015b6:	2000      	movs	r0, #0
 80015b8:	45c4      	cmp	ip, r8
 80015ba:	d2c6      	bcs.n	800154a <__gedf2+0x52>
 80015bc:	e7ed      	b.n	800159a <__gedf2+0xa2>
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	000007ff 	.word	0x000007ff

080015c4 <__ledf2>:
 80015c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c6:	4647      	mov	r7, r8
 80015c8:	46ce      	mov	lr, r9
 80015ca:	0004      	movs	r4, r0
 80015cc:	0018      	movs	r0, r3
 80015ce:	0016      	movs	r6, r2
 80015d0:	031b      	lsls	r3, r3, #12
 80015d2:	0b1b      	lsrs	r3, r3, #12
 80015d4:	4d2c      	ldr	r5, [pc, #176]	; (8001688 <__ledf2+0xc4>)
 80015d6:	004a      	lsls	r2, r1, #1
 80015d8:	4699      	mov	r9, r3
 80015da:	b580      	push	{r7, lr}
 80015dc:	0043      	lsls	r3, r0, #1
 80015de:	030f      	lsls	r7, r1, #12
 80015e0:	46a4      	mov	ip, r4
 80015e2:	46b0      	mov	r8, r6
 80015e4:	0b3f      	lsrs	r7, r7, #12
 80015e6:	0d52      	lsrs	r2, r2, #21
 80015e8:	0fc9      	lsrs	r1, r1, #31
 80015ea:	0d5b      	lsrs	r3, r3, #21
 80015ec:	0fc0      	lsrs	r0, r0, #31
 80015ee:	42aa      	cmp	r2, r5
 80015f0:	d00d      	beq.n	800160e <__ledf2+0x4a>
 80015f2:	42ab      	cmp	r3, r5
 80015f4:	d010      	beq.n	8001618 <__ledf2+0x54>
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d127      	bne.n	800164a <__ledf2+0x86>
 80015fa:	433c      	orrs	r4, r7
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d111      	bne.n	8001624 <__ledf2+0x60>
 8001600:	464d      	mov	r5, r9
 8001602:	432e      	orrs	r6, r5
 8001604:	d10e      	bne.n	8001624 <__ledf2+0x60>
 8001606:	2000      	movs	r0, #0
 8001608:	2c00      	cmp	r4, #0
 800160a:	d015      	beq.n	8001638 <__ledf2+0x74>
 800160c:	e00e      	b.n	800162c <__ledf2+0x68>
 800160e:	003d      	movs	r5, r7
 8001610:	4325      	orrs	r5, r4
 8001612:	d110      	bne.n	8001636 <__ledf2+0x72>
 8001614:	4293      	cmp	r3, r2
 8001616:	d118      	bne.n	800164a <__ledf2+0x86>
 8001618:	464d      	mov	r5, r9
 800161a:	432e      	orrs	r6, r5
 800161c:	d10b      	bne.n	8001636 <__ledf2+0x72>
 800161e:	2a00      	cmp	r2, #0
 8001620:	d102      	bne.n	8001628 <__ledf2+0x64>
 8001622:	433c      	orrs	r4, r7
 8001624:	2c00      	cmp	r4, #0
 8001626:	d00b      	beq.n	8001640 <__ledf2+0x7c>
 8001628:	4281      	cmp	r1, r0
 800162a:	d014      	beq.n	8001656 <__ledf2+0x92>
 800162c:	2002      	movs	r0, #2
 800162e:	3901      	subs	r1, #1
 8001630:	4008      	ands	r0, r1
 8001632:	3801      	subs	r0, #1
 8001634:	e000      	b.n	8001638 <__ledf2+0x74>
 8001636:	2002      	movs	r0, #2
 8001638:	bcc0      	pop	{r6, r7}
 800163a:	46b9      	mov	r9, r7
 800163c:	46b0      	mov	r8, r6
 800163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001640:	2800      	cmp	r0, #0
 8001642:	d1f9      	bne.n	8001638 <__ledf2+0x74>
 8001644:	2001      	movs	r0, #1
 8001646:	4240      	negs	r0, r0
 8001648:	e7f6      	b.n	8001638 <__ledf2+0x74>
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ec      	bne.n	8001628 <__ledf2+0x64>
 800164e:	464c      	mov	r4, r9
 8001650:	4326      	orrs	r6, r4
 8001652:	d1e9      	bne.n	8001628 <__ledf2+0x64>
 8001654:	e7ea      	b.n	800162c <__ledf2+0x68>
 8001656:	429a      	cmp	r2, r3
 8001658:	dd04      	ble.n	8001664 <__ledf2+0xa0>
 800165a:	4243      	negs	r3, r0
 800165c:	4158      	adcs	r0, r3
 800165e:	0040      	lsls	r0, r0, #1
 8001660:	3801      	subs	r0, #1
 8001662:	e7e9      	b.n	8001638 <__ledf2+0x74>
 8001664:	429a      	cmp	r2, r3
 8001666:	dbeb      	blt.n	8001640 <__ledf2+0x7c>
 8001668:	454f      	cmp	r7, r9
 800166a:	d8df      	bhi.n	800162c <__ledf2+0x68>
 800166c:	d006      	beq.n	800167c <__ledf2+0xb8>
 800166e:	2000      	movs	r0, #0
 8001670:	454f      	cmp	r7, r9
 8001672:	d2e1      	bcs.n	8001638 <__ledf2+0x74>
 8001674:	2900      	cmp	r1, #0
 8001676:	d0e5      	beq.n	8001644 <__ledf2+0x80>
 8001678:	0008      	movs	r0, r1
 800167a:	e7dd      	b.n	8001638 <__ledf2+0x74>
 800167c:	45c4      	cmp	ip, r8
 800167e:	d8d5      	bhi.n	800162c <__ledf2+0x68>
 8001680:	2000      	movs	r0, #0
 8001682:	45c4      	cmp	ip, r8
 8001684:	d2d8      	bcs.n	8001638 <__ledf2+0x74>
 8001686:	e7f5      	b.n	8001674 <__ledf2+0xb0>
 8001688:	000007ff 	.word	0x000007ff

0800168c <TMC5160_Basic_Init>:
int Ax = 0;				// counter for buffer
uint8_t AMS_Ready;		//check for interrupt
uint16_t AngleP[1000];

void TMC5160_Basic_Init(CurrentConfig *Current)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	/* CURRENT SETTINGS
	 I_RUN, Max run current = 20 = ~2.0A
	 I_HOLD, Max Hold current = 20 = ~2.0A
	*/

	uint32_t IHOLD_IRUN = 0x00070000; // standard IHOLD DELAY value
 8001694:	23e0      	movs	r3, #224	; 0xe0
 8001696:	02db      	lsls	r3, r3, #11
 8001698:	60fb      	str	r3, [r7, #12]
	//uint32_t GSTAT_VALUE = 0x00000000; //default value for GSTAT

	if(Current->IHOLD > 20) // set upper current limit ~2.0A
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b14      	cmp	r3, #20
 80016a0:	d902      	bls.n	80016a8 <TMC5160_Basic_Init+0x1c>
	{
		Current->IHOLD = 20;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2214      	movs	r2, #20
 80016a6:	605a      	str	r2, [r3, #4]
	}

	if(Current->IRUN > 20) // set upper current limit ~2.0A
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b14      	cmp	r3, #20
 80016ae:	d902      	bls.n	80016b6 <TMC5160_Basic_Init+0x2a>
	{
		Current->IRUN = 20;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2214      	movs	r2, #20
 80016b4:	601a      	str	r2, [r3, #0]
	}

	IHOLD_IRUN += Current->IHOLD + (Current->IRUN <<8);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	18d3      	adds	r3, r2, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	18d3      	adds	r3, r2, r3
 80016c6:	60fb      	str	r3, [r7, #12]

	TMC5160_SPIWrite(0x00, 0x00000008, 1); // writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 80016c8:	2201      	movs	r2, #1
 80016ca:	2108      	movs	r1, #8
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 f9e1 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x00, 0x00000008, 0); // writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 80016d2:	2200      	movs	r2, #0
 80016d4:	2108      	movs	r1, #8
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f9dc 	bl	8001a94 <TMC5160_SPIWrite>
	{
		TMC5160_SPIWrite(0x01, 0x00000001, 1); // write 1 bit to GSTAT to clear all error flags
		// TODO: is clearing the flags enough? or poweqr cycle needed?
	}*/

	TMC5160_SPIWrite(0x03, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 1 = 0x03(SLAVECONF)
 80016dc:	2201      	movs	r2, #1
 80016de:	2100      	movs	r1, #0
 80016e0:	2003      	movs	r0, #3
 80016e2:	f000 f9d7 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x05, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 2 = 0x05(X_COMPARE)
 80016e6:	2201      	movs	r2, #1
 80016e8:	2100      	movs	r1, #0
 80016ea:	2005      	movs	r0, #5
 80016ec:	f000 f9d2 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x06, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 3 = 0x06(OTP_PROG)
 80016f0:	2201      	movs	r2, #1
 80016f2:	2100      	movs	r1, #0
 80016f4:	2006      	movs	r0, #6
 80016f6:	f000 f9cd 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x08, 0x0000000F, 1); // writing value 0x0000000F = 15 = 0.0 to address 4 = 0x08(FACTORY_CONF)
 80016fa:	2201      	movs	r2, #1
 80016fc:	210f      	movs	r1, #15
 80016fe:	2008      	movs	r0, #8
 8001700:	f000 f9c8 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x09, 0x00010606, 1); // writing value 0x00010606 = 67078 = 0.0 to address 5 = 0x09(SHORT_CONF)
 8001704:	4b53      	ldr	r3, [pc, #332]	; (8001854 <TMC5160_Basic_Init+0x1c8>)
 8001706:	2201      	movs	r2, #1
 8001708:	0019      	movs	r1, r3
 800170a:	2009      	movs	r0, #9
 800170c:	f000 f9c2 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x0A, 0x00080400, 1); // writing value 0x00080400 = 525312 = 0.0 to address 6 = 0x0A(DRV_CONF)
 8001710:	4b51      	ldr	r3, [pc, #324]	; (8001858 <TMC5160_Basic_Init+0x1cc>)
 8001712:	2201      	movs	r2, #1
 8001714:	0019      	movs	r1, r3
 8001716:	200a      	movs	r0, #10
 8001718:	f000 f9bc 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x0B, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 7 = 0x0B(GLOBAL_SCALER)
 800171c:	2201      	movs	r2, #1
 800171e:	2100      	movs	r1, #0
 8001720:	200b      	movs	r0, #11
 8001722:	f000 f9b7 	bl	8001a94 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x10, IHOLD_IRUN, 1); // writing value 0x00070A03 = 461315 = 0.0 to address 8 = 0x10(IHOLD_IRUN)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2201      	movs	r2, #1
 800172a:	0019      	movs	r1, r3
 800172c:	2010      	movs	r0, #16
 800172e:	f000 f9b1 	bl	8001a94 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x11, 0x0000000A, 1); // writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 8001732:	2201      	movs	r2, #1
 8001734:	210a      	movs	r1, #10
 8001736:	2011      	movs	r0, #17
 8001738:	f000 f9ac 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x13, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 800173c:	2201      	movs	r2, #1
 800173e:	2100      	movs	r1, #0
 8001740:	2013      	movs	r0, #19
 8001742:	f000 f9a7 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x14, 0x00000000, 1); // writing value 0x00000010 = 16 = 0.0 to address 11 = 0x14(TCOOLTHRS)
 8001746:	2201      	movs	r2, #1
 8001748:	2100      	movs	r1, #0
 800174a:	2014      	movs	r0, #20
 800174c:	f000 f9a2 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x15, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 12 = 0x15(THIGH)
 8001750:	2201      	movs	r2, #1
 8001752:	2100      	movs	r1, #0
 8001754:	2015      	movs	r0, #21
 8001756:	f000 f99d 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2C, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 23 = 0x2C(TZEROWAIT)
 800175a:	2201      	movs	r2, #1
 800175c:	2100      	movs	r1, #0
 800175e:	202c      	movs	r0, #44	; 0x2c
 8001760:	f000 f998 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x33, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 25 = 0x33(VDCMIN)
 8001764:	2201      	movs	r2, #1
 8001766:	2100      	movs	r1, #0
 8001768:	2033      	movs	r0, #51	; 0x33
 800176a:	f000 f993 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x34, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 26 = 0x34(SW_MODE)
 800176e:	2201      	movs	r2, #1
 8001770:	2100      	movs	r1, #0
 8001772:	2034      	movs	r0, #52	; 0x34
 8001774:	f000 f98e 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x38, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 27 = 0x38(ENCMODE)
 8001778:	2201      	movs	r2, #1
 800177a:	2100      	movs	r1, #0
 800177c:	2038      	movs	r0, #56	; 0x38
 800177e:	f000 f989 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x39, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 28 = 0x39(X_ENC)
 8001782:	2201      	movs	r2, #1
 8001784:	2100      	movs	r1, #0
 8001786:	2039      	movs	r0, #57	; 0x39
 8001788:	f000 f984 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x3A, 0x00010000, 1); // writing value 0x00010000 = 65536 = 0.0 to address 29 = 0x3A(ENC_CONST)
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	025b      	lsls	r3, r3, #9
 8001790:	2201      	movs	r2, #1
 8001792:	0019      	movs	r1, r3
 8001794:	203a      	movs	r0, #58	; 0x3a
 8001796:	f000 f97d 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x3D, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 30 = 0x3D(ENC_DEVIATION)
 800179a:	2201      	movs	r2, #1
 800179c:	2100      	movs	r1, #0
 800179e:	203d      	movs	r0, #61	; 0x3d
 80017a0:	f000 f978 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x60, 0xAAAAB554, 1); // writing value 0xAAAAB554 = 0 = 0.0 to address 31 = 0x60(MSLUT[0])
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <TMC5160_Basic_Init+0x1d0>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	0019      	movs	r1, r3
 80017aa:	2060      	movs	r0, #96	; 0x60
 80017ac:	f000 f972 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x61, 0x4A9554AA, 1); // writing value 0x4A9554AA = 1251300522 = 0.0 to address 32 = 0x61(MSLUT[1])
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <TMC5160_Basic_Init+0x1d4>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	0019      	movs	r1, r3
 80017b6:	2061      	movs	r0, #97	; 0x61
 80017b8:	f000 f96c 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x62, 0x24492929, 1); // writing value 0x24492929 = 608774441 = 0.0 to address 33 = 0x62(MSLUT[2])
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <TMC5160_Basic_Init+0x1d8>)
 80017be:	2201      	movs	r2, #1
 80017c0:	0019      	movs	r1, r3
 80017c2:	2062      	movs	r0, #98	; 0x62
 80017c4:	f000 f966 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x63, 0x10104222, 1); // writing value 0x10104222 = 269500962 = 0.0 to address 34 = 0x63(MSLUT[3])
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <TMC5160_Basic_Init+0x1dc>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	0019      	movs	r1, r3
 80017ce:	2063      	movs	r0, #99	; 0x63
 80017d0:	f000 f960 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x64, 0xFBFFFFFF, 1); // writing value 0xFBFFFFFF = 0 = 0.0 to address 35 = 0x64(MSLUT[4])
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <TMC5160_Basic_Init+0x1e0>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	0019      	movs	r1, r3
 80017da:	2064      	movs	r0, #100	; 0x64
 80017dc:	f000 f95a 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x65, 0xB5BB777D, 1); // writing value 0xB5BB777D = 0 = 0.0 to address 36 = 0x65(MSLUT[5])
 80017e0:	4b23      	ldr	r3, [pc, #140]	; (8001870 <TMC5160_Basic_Init+0x1e4>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	0019      	movs	r1, r3
 80017e6:	2065      	movs	r0, #101	; 0x65
 80017e8:	f000 f954 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x66, 0x49295556, 1); // writing value 0x49295556 = 1227445590 = 0.0 to address 37 = 0x66(MSLUT[6])
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <TMC5160_Basic_Init+0x1e8>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	0019      	movs	r1, r3
 80017f2:	2066      	movs	r0, #102	; 0x66
 80017f4:	f000 f94e 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x67, 0x00404222, 1); // writing value 0x00404222 = 4211234 = 0.0 to address 38 = 0x67(MSLUT[7])
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <TMC5160_Basic_Init+0x1ec>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	0019      	movs	r1, r3
 80017fe:	2067      	movs	r0, #103	; 0x67
 8001800:	f000 f948 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x68, 0xFFFF8056, 1); // writing value 0xFFFF8056 = 0 = 0.0 to address 39 = 0x68(MSLUTSEL)
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <TMC5160_Basic_Init+0x1f0>)
 8001806:	2201      	movs	r2, #1
 8001808:	0019      	movs	r1, r3
 800180a:	2068      	movs	r0, #104	; 0x68
 800180c:	f000 f942 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x69, 0x00F70000, 1); // writing value 0x00F70000 = 16187392 = 0.0 to address 40 = 0x69(MSLUTSTART)
 8001810:	23f7      	movs	r3, #247	; 0xf7
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	2201      	movs	r2, #1
 8001816:	0019      	movs	r1, r3
 8001818:	2069      	movs	r0, #105	; 0x69
 800181a:	f000 f93b 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6C, 0x00410153, 1); // writing value 0x00410153 = 4260099 = 0.0 to address 41 = 0x6C(CHOPCONF)
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <TMC5160_Basic_Init+0x1f4>)
 8001820:	2201      	movs	r2, #1
 8001822:	0019      	movs	r1, r3
 8001824:	206c      	movs	r0, #108	; 0x6c
 8001826:	f000 f935 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6D, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 42 = 0x6D(COOLCONF)
 800182a:	2201      	movs	r2, #1
 800182c:	2100      	movs	r1, #0
 800182e:	206d      	movs	r0, #109	; 0x6d
 8001830:	f000 f930 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x6E, 0x00000000, 1); // writing value 0x00000000 = 0 = 0.0 to address 43 = 0x6E(DCCTRL)
 8001834:	2201      	movs	r2, #1
 8001836:	2100      	movs	r1, #0
 8001838:	206e      	movs	r0, #110	; 0x6e
 800183a:	f000 f92b 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x70, 0xC40C001E, 1); // writing value 0xC40C001E = 0 = 0.0 to address 44 = 0x70(PWMCONF)
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <TMC5160_Basic_Init+0x1f8>)
 8001840:	2201      	movs	r2, #1
 8001842:	0019      	movs	r1, r3
 8001844:	2070      	movs	r0, #112	; 0x70
 8001846:	f000 f925 	bl	8001a94 <TMC5160_SPIWrite>

}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b004      	add	sp, #16
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	00010606 	.word	0x00010606
 8001858:	00080400 	.word	0x00080400
 800185c:	aaaab554 	.word	0xaaaab554
 8001860:	4a9554aa 	.word	0x4a9554aa
 8001864:	24492929 	.word	0x24492929
 8001868:	10104222 	.word	0x10104222
 800186c:	fbffffff 	.word	0xfbffffff
 8001870:	b5bb777d 	.word	0xb5bb777d
 8001874:	49295556 	.word	0x49295556
 8001878:	00404222 	.word	0x00404222
 800187c:	ffff8056 	.word	0xffff8056
 8001880:	00410153 	.word	0x00410153
 8001884:	c40c001e 	.word	0xc40c001e

08001888 <TMC5160_Rotate_To>:
	}
}


void TMC5160_Rotate_To(uint32_t Position, RampConfig *Ramp)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
	uint32_t Target_Angle = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
	uint32_t AMS_Angle = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
	uint32_t ENC_Angle = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
	uint32_t TMC_Angle = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]

	TMC5160_SPIWrite(0x11, 	0x0000000A, 1); 	// writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 80018a2:	2201      	movs	r2, #1
 80018a4:	210a      	movs	r1, #10
 80018a6:	2011      	movs	r0, #17
 80018a8:	f000 f8f4 	bl	8001a94 <TMC5160_SPIWrite>
	//TMC5160_SPIWrite(0x00, 	0x00000008, 1); 	// writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
	TMC5160_SPIWrite(0x13, 	0x000001F4, 1); 	// writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 80018ac:	23fa      	movs	r3, #250	; 0xfa
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2201      	movs	r2, #1
 80018b2:	0019      	movs	r1, r3
 80018b4:	2013      	movs	r0, #19
 80018b6:	f000 f8ed 	bl	8001a94 <TMC5160_SPIWrite>

	// setup for profile
	TMC5160_SPIWrite(0x23, Ramp->VSTART, 1); 	// = 1000 = 0.0 to address 15 = 0x23(VSTART)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	0019      	movs	r1, r3
 80018c2:	2023      	movs	r0, #35	; 0x23
 80018c4:	f000 f8e6 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x24, Ramp->A1, 1); 		// = 5600 = 0.0 to address 16 = 0x24(A1)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	0019      	movs	r1, r3
 80018d0:	2024      	movs	r0, #36	; 0x24
 80018d2:	f000 f8df 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x25, Ramp->V1, 1); 		// = 12800 = 0.0 to address 17 = 0x25(V1)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2201      	movs	r2, #1
 80018dc:	0019      	movs	r1, r3
 80018de:	2025      	movs	r0, #37	; 0x25
 80018e0:	f000 f8d8 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x26, Ramp->AMAX, 1); 		// = 12800 = 0.0 to address 18 = 0x26(AMAX)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2201      	movs	r2, #1
 80018ea:	0019      	movs	r1, r3
 80018ec:	2026      	movs	r0, #38	; 0x26
 80018ee:	f000 f8d1 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x27, Ramp->VMAX, 1); 		// = 51200 = 0.0 to address 19 = 0x27(VMAX)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	2201      	movs	r2, #1
 80018f8:	0019      	movs	r1, r3
 80018fa:	2027      	movs	r0, #39	; 0x27
 80018fc:	f000 f8ca 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x28, Ramp->DMAX, 1); 		// = 700 = 0.0 to address 20 = 0x28(DMAX)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	2201      	movs	r2, #1
 8001906:	0019      	movs	r1, r3
 8001908:	2028      	movs	r0, #40	; 0x28
 800190a:	f000 f8c3 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2A, Ramp->D1, 1); 		// = 1400 = 0.0 to address 21 = 0x2A(D1)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2201      	movs	r2, #1
 8001914:	0019      	movs	r1, r3
 8001916:	202a      	movs	r0, #42	; 0x2a
 8001918:	f000 f8bc 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2B, Ramp->VSTOP, 1); 	// = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2201      	movs	r2, #1
 8001922:	0019      	movs	r1, r3
 8001924:	202b      	movs	r0, #43	; 0x2b
 8001926:	f000 f8b5 	bl	8001a94 <TMC5160_SPIWrite>

	TMC5160_SPIWrite(0x20, 	0x00000000, 1); 	// writing value 0x00000000 = 0 = 0.0 to address 13 = 0x20(RAMPMODE) MTP
 800192a:	2201      	movs	r2, #1
 800192c:	2100      	movs	r1, #0
 800192e:	2020      	movs	r0, #32
 8001930:	f000 f8b0 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2D, Position, 1); 		// writing value to address 24 = 0x2D(XTARGET)  1 lap
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	0019      	movs	r1, r3
 800193a:	202d      	movs	r0, #45	; 0x2d
 800193c:	f000 f8aa 	bl	8001a94 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x21,	0x00000000, 0);		// READ position register
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2021      	movs	r0, #33	; 0x21
 8001946:	f000 f8a5 	bl	8001a94 <TMC5160_SPIWrite>

	/*Convert to Angle so we can compare to Hall Sensor*/

	if((int)Position < 0)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	da02      	bge.n	8001956 <TMC5160_Rotate_To+0xce>
	{
		Position = Position * (-1); 			// make positive for easier math
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	425b      	negs	r3, r3
 8001954:	607b      	str	r3, [r7, #4]
	}

	if(Position == 0) 							// to fix the first reading when target position = 0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <TMC5160_Rotate_To+0xe0>
	{
		AMS_Angle = 1;
 800195c:	2301      	movs	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
		ENC_Angle = 1;
 8001960:	2301      	movs	r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
		TMC_Angle = 1;
 8001964:	2301      	movs	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
	}

    Target_Angle = ((Position / 256) * 1.8);	//convert target position to angle
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff fcff 	bl	8001370 <__aeabi_ui2d>
 8001972:	4a16      	ldr	r2, [pc, #88]	; (80019cc <TMC5160_Rotate_To+0x144>)
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <TMC5160_Rotate_To+0x148>)
 8001976:	f7fe fe81 	bl	800067c <__aeabi_dmul>
 800197a:	0002      	movs	r2, r0
 800197c:	000b      	movs	r3, r1
 800197e:	0010      	movs	r0, r2
 8001980:	0019      	movs	r1, r3
 8001982:	f7fe fc4b 	bl	800021c <__aeabi_d2uiz>
 8001986:	0003      	movs	r3, r0
 8001988:	613b      	str	r3, [r7, #16]

	// enter loop to check if position is reached
	while(TMC_Angle != Target_Angle) //&& AMS_Angle != Target_Angle && ENC_Angle != Target_Angle
 800198a:	e016      	b.n	80019ba <TMC5160_Rotate_To+0x132>
	{
		TMC_Angle = TMC_Get_Position();
 800198c:	f000 f826 	bl	80019dc <TMC_Get_Position>
 8001990:	0003      	movs	r3, r0
 8001992:	617b      	str	r3, [r7, #20]

		if(AMS_ENB == 1)// Hall sensor is enabled
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <TMC5160_Rotate_To+0x14c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d106      	bne.n	80019aa <TMC5160_Rotate_To+0x122>
		{
			HAL_Delay(5);//to reduce sensor readout freq
 800199c:	2005      	movs	r0, #5
 800199e:	f000 ff89 	bl	80028b4 <HAL_Delay>
			AMS_Angle = AMS5055_Get_Position();
 80019a2:	f000 f8f1 	bl	8001b88 <AMS5055_Get_Position>
 80019a6:	0003      	movs	r3, r0
 80019a8:	60fb      	str	r3, [r7, #12]
		}

		if(ENC_ENB == 1)// Encoder is enabled
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <TMC5160_Rotate_To+0x150>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d103      	bne.n	80019ba <TMC5160_Rotate_To+0x132>
		{
			ENC_Angle = ENC_Get_Position();
 80019b2:	f000 fa2f 	bl	8001e14 <ENC_Get_Position>
 80019b6:	0003      	movs	r3, r0
 80019b8:	60bb      	str	r3, [r7, #8]
	while(TMC_Angle != Target_Angle) //&& AMS_Angle != Target_Angle && ENC_Angle != Target_Angle
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d1e4      	bne.n	800198c <TMC5160_Rotate_To+0x104>
		}
	}
 }
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b006      	add	sp, #24
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	cccccccd 	.word	0xcccccccd
 80019d0:	3ffccccc 	.word	0x3ffccccc
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20001130 	.word	0x20001130

080019dc <TMC_Get_Position>:

uint16_t TMC_Get_Position()
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
	uint32_t AngleT = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]

	AngleT = TMC5160_SPIWrite(0x21, 0x00000000, 0); //read step counter from TMC5160
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2021      	movs	r0, #33	; 0x21
 80019ec:	f000 f852 	bl	8001a94 <TMC5160_SPIWrite>
 80019f0:	0003      	movs	r3, r0
 80019f2:	607b      	str	r3, [r7, #4]


	if((int)AngleT < 0)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da02      	bge.n	8001a00 <TMC_Get_Position+0x24>
	{
		AngleT = AngleT * (-1); // make positive for easier math
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	425b      	negs	r3, r3
 80019fe:	607b      	str	r3, [r7, #4]
	}

	AngleT = ((AngleT / 256)* 1.8);//convert target position to angle
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff fcb3 	bl	8001370 <__aeabi_ui2d>
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <TMC_Get_Position+0x54>)
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <TMC_Get_Position+0x58>)
 8001a0e:	f7fe fe35 	bl	800067c <__aeabi_dmul>
 8001a12:	0002      	movs	r2, r0
 8001a14:	000b      	movs	r3, r1
 8001a16:	0010      	movs	r0, r2
 8001a18:	0019      	movs	r1, r3
 8001a1a:	f7fe fbff 	bl	800021c <__aeabi_d2uiz>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	607b      	str	r3, [r7, #4]

	return AngleT;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	b29b      	uxth	r3, r3
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	cccccccd 	.word	0xcccccccd
 8001a34:	3ffccccc 	.word	0x3ffccccc

08001a38 <TMC5160_Stop>:

void TMC5160_Stop(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	TMC5160_SPIWrite(0x27,0x00000000, 1); //set VMAX to 0
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2027      	movs	r0, #39	; 0x27
 8001a42:	f000 f827 	bl	8001a94 <TMC5160_SPIWrite>
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <Drive_Enable>:

void Drive_Enable(int state)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	if(state == 1) // Enable driver
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d10a      	bne.n	8001a70 <Drive_Enable+0x24>
	{
		HAL_GPIO_WritePin(GPIOA, DRV_ENN_Pin, 0); // LOW = ON
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	0059      	lsls	r1, r3, #1
 8001a5e:	2390      	movs	r3, #144	; 0x90
 8001a60:	05db      	lsls	r3, r3, #23
 8001a62:	2200      	movs	r2, #0
 8001a64:	0018      	movs	r0, r3
 8001a66:	f002 f97d 	bl	8003d64 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001a6a:	200a      	movs	r0, #10
 8001a6c:	f000 ff22 	bl	80028b4 <HAL_Delay>
	}

	if(state == 0) // disable drive
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <Drive_Enable+0x40>
	{
		HAL_GPIO_WritePin(GPIOA, DRV_ENN_Pin, 1); // HIGH = OFF
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	0059      	lsls	r1, r3, #1
 8001a7a:	2390      	movs	r3, #144	; 0x90
 8001a7c:	05db      	lsls	r3, r3, #23
 8001a7e:	2201      	movs	r2, #1
 8001a80:	0018      	movs	r0, r3
 8001a82:	f002 f96f 	bl	8003d64 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001a86:	200a      	movs	r0, #10
 8001a88:	f000 ff14 	bl	80028b4 <HAL_Delay>
	}
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b002      	add	sp, #8
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <TMC5160_SPIWrite>:


uint32_t TMC5160_SPIWrite(uint8_t Address, uint32_t Value, int Action)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b08d      	sub	sp, #52	; 0x34
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	240f      	movs	r4, #15
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	1c02      	adds	r2, r0, #0
 8001aa4:	701a      	strb	r2, [r3, #0]

	uint8_t SPI2TxData[5];  //TX data array SPI2
	uint8_t SPI2RxData[5];  //RX data array SPI2
	uint32_t SPI2Rx = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,0); // set TMC CS low
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	015b      	lsls	r3, r3, #5
 8001aae:	482d      	ldr	r0, [pc, #180]	; (8001b64 <TMC5160_SPIWrite+0xd0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	f002 f956 	bl	8003d64 <HAL_GPIO_WritePin>

	  if (Action == 1) //Write
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <TMC5160_SPIWrite+0x3a>
	  {
		SPI2TxData[0] = Address + 0x80;
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	3b80      	subs	r3, #128	; 0x80
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	231c      	movs	r3, #28
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e005      	b.n	8001ada <TMC5160_SPIWrite+0x46>
	  }

	  else //Read
	  {
		SPI2TxData[0] = Address;
 8001ace:	231c      	movs	r3, #28
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	18ba      	adds	r2, r7, r2
 8001ad6:	7812      	ldrb	r2, [r2, #0]
 8001ad8:	701a      	strb	r2, [r3, #0]
	  }

	  SPI2TxData[1] = Value >> 24;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	0e1b      	lsrs	r3, r3, #24
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	211c      	movs	r1, #28
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	705a      	strb	r2, [r3, #1]
	  SPI2TxData[2] = Value >> 16;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	709a      	strb	r2, [r3, #2]
	  SPI2TxData[3] = Value >> 8;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	70da      	strb	r2, [r3, #3]
	  SPI2TxData[4] = Value;
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	711a      	strb	r2, [r3, #4]

	  HAL_SPI_TransmitReceive(&hspi2, SPI2TxData, SPI2RxData, 0x05, 100);
 8001b02:	2414      	movs	r4, #20
 8001b04:	193a      	adds	r2, r7, r4
 8001b06:	1879      	adds	r1, r7, r1
 8001b08:	4817      	ldr	r0, [pc, #92]	; (8001b68 <TMC5160_SPIWrite+0xd4>)
 8001b0a:	2364      	movs	r3, #100	; 0x64
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2305      	movs	r3, #5
 8001b10:	f002 fefc 	bl	800490c <HAL_SPI_TransmitReceive>


	  SPI2Rx += (SPI2RxData[1] << 24);
 8001b14:	0021      	movs	r1, r4
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	785b      	ldrb	r3, [r3, #1]
 8001b1a:	061b      	lsls	r3, r3, #24
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	189b      	adds	r3, r3, r2
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[2] << 16);
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	789b      	ldrb	r3, [r3, #2]
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	189b      	adds	r3, r3, r2
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[3] << 8);
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	78db      	ldrb	r3, [r3, #3]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	001a      	movs	r2, r3
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	189b      	adds	r3, r3, r2
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
	  SPI2Rx += (SPI2RxData[4] << 0);
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	791b      	ldrb	r3, [r3, #4]
 8001b44:	001a      	movs	r2, r3
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	189b      	adds	r3, r3, r2
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,1); // set TMC CS high
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	015b      	lsls	r3, r3, #5
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <TMC5160_SPIWrite+0xd0>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	0019      	movs	r1, r3
 8001b56:	f002 f905 	bl	8003d64 <HAL_GPIO_WritePin>

	  return SPI2Rx;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b00b      	add	sp, #44	; 0x2c
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	48000400 	.word	0x48000400
 8001b68:	200010a4 	.word	0x200010a4

08001b6c <AMS5055_Basic_Init>:

void AMS5055_Basic_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	//start new angle measuremnt
	AMSoffset = AMS5055_Get_Position();  // Angle read when standstill is offset
 8001b70:	f000 f80a 	bl	8001b88 <AMS5055_Get_Position>
 8001b74:	0003      	movs	r3, r0
 8001b76:	001a      	movs	r2, r3
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <AMS5055_Basic_Init+0x18>)
 8001b7a:	801a      	strh	r2, [r3, #0]

	//TODO AMSoffset
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	2000002c 	.word	0x2000002c

08001b88 <AMS5055_Get_Position>:

uint16_t AMS5055_Get_Position(void)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
	uint16_t Angle = 0;
 8001b8e:	1dbb      	adds	r3, r7, #6
 8001b90:	2200      	movs	r2, #0
 8001b92:	801a      	strh	r2, [r3, #0]
	float Calc_angle =0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	603b      	str	r3, [r7, #0]

	AMS5055_SPIWriteInt(ANGULAR_DATA,1);
 8001b98:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <AMS5055_Get_Position+0x120>)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 f8cb 	bl	8001d38 <AMS5055_SPIWriteInt>

	while(AMS_Ready != 1) //wacht op INT
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	4b41      	ldr	r3, [pc, #260]	; (8001cac <AMS5055_Get_Position+0x124>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d1fb      	bne.n	8001ba4 <AMS5055_Get_Position+0x1c>
	{
	}

	Angle = AMS5055_SPIWriteInt(NOP,1);
 8001bac:	1dbc      	adds	r4, r7, #6
 8001bae:	2101      	movs	r1, #1
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f000 f8c1 	bl	8001d38 <AMS5055_SPIWriteInt>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	8023      	strh	r3, [r4, #0]

	if(Angle > 32768)
 8001bba:	1dbb      	adds	r3, r7, #6
 8001bbc:	881a      	ldrh	r2, [r3, #0]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d906      	bls.n	8001bd4 <AMS5055_Get_Position+0x4c>
	{
		Angle = Angle - 32768;
 8001bc6:	1dbb      	adds	r3, r7, #6
 8001bc8:	1dba      	adds	r2, r7, #6
 8001bca:	8812      	ldrh	r2, [r2, #0]
 8001bcc:	4938      	ldr	r1, [pc, #224]	; (8001cb0 <AMS5055_Get_Position+0x128>)
 8001bce:	468c      	mov	ip, r1
 8001bd0:	4462      	add	r2, ip
 8001bd2:	801a      	strh	r2, [r3, #0]
	}

	if(Angle > 16384)
 8001bd4:	1dbb      	adds	r3, r7, #6
 8001bd6:	881a      	ldrh	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	01db      	lsls	r3, r3, #7
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d906      	bls.n	8001bee <AMS5055_Get_Position+0x66>
	{
		Angle = Angle - 16384;
 8001be0:	1dbb      	adds	r3, r7, #6
 8001be2:	1dba      	adds	r2, r7, #6
 8001be4:	8812      	ldrh	r2, [r2, #0]
 8001be6:	4933      	ldr	r1, [pc, #204]	; (8001cb4 <AMS5055_Get_Position+0x12c>)
 8001be8:	468c      	mov	ip, r1
 8001bea:	4462      	add	r2, ip
 8001bec:	801a      	strh	r2, [r3, #0]
	}

	if(Angle > 8192)
 8001bee:	1dbb      	adds	r3, r7, #6
 8001bf0:	881a      	ldrh	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	019b      	lsls	r3, r3, #6
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d906      	bls.n	8001c08 <AMS5055_Get_Position+0x80>
	{
		Angle = Angle - 8192;
 8001bfa:	1dbb      	adds	r3, r7, #6
 8001bfc:	1dba      	adds	r2, r7, #6
 8001bfe:	8812      	ldrh	r2, [r2, #0]
 8001c00:	492d      	ldr	r1, [pc, #180]	; (8001cb8 <AMS5055_Get_Position+0x130>)
 8001c02:	468c      	mov	ip, r1
 8001c04:	4462      	add	r2, ip
 8001c06:	801a      	strh	r2, [r3, #0]
	}

	Angle >>= 1;
 8001c08:	1dbb      	adds	r3, r7, #6
 8001c0a:	1dba      	adds	r2, r7, #6
 8001c0c:	8812      	ldrh	r2, [r2, #0]
 8001c0e:	0852      	lsrs	r2, r2, #1
 8001c10:	801a      	strh	r2, [r3, #0]

	Angles[Ax] = Angle;  //uncomment to enable logging of Angle position
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <AMS5055_Get_Position+0x134>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <AMS5055_Get_Position+0x138>)
 8001c18:	0052      	lsls	r2, r2, #1
 8001c1a:	1db9      	adds	r1, r7, #6
 8001c1c:	8809      	ldrh	r1, [r1, #0]
 8001c1e:	52d1      	strh	r1, [r2, r3]


	Calc_angle = (Angle / 4095) * 360; //12 bit resolution
 8001c20:	1dbb      	adds	r3, r7, #6
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	4927      	ldr	r1, [pc, #156]	; (8001cc4 <AMS5055_Get_Position+0x13c>)
 8001c26:	0018      	movs	r0, r3
 8001c28:	f7fe fa6c 	bl	8000104 <__udivsi3>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	001a      	movs	r2, r3
 8001c32:	0013      	movs	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	189b      	adds	r3, r3, r2
 8001c38:	011a      	lsls	r2, r3, #4
 8001c3a:	1ad2      	subs	r2, r2, r3
 8001c3c:	00d3      	lsls	r3, r2, #3
 8001c3e:	001a      	movs	r2, r3
 8001c40:	0013      	movs	r3, r2
 8001c42:	0018      	movs	r0, r3
 8001c44:	f7fe fcc8 	bl	80005d8 <__aeabi_i2f>
 8001c48:	1c03      	adds	r3, r0, #0
 8001c4a:	603b      	str	r3, [r7, #0]
	Calc_angle = Calc_angle - AMSoffset;  // AMS is not calibrated, so angle needs to be fixed
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <AMS5055_Get_Position+0x140>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7fe fcc1 	bl	80005d8 <__aeabi_i2f>
 8001c56:	1c03      	adds	r3, r0, #0
 8001c58:	1c19      	adds	r1, r3, #0
 8001c5a:	6838      	ldr	r0, [r7, #0]
 8001c5c:	f7fe fafc 	bl	8000258 <__aeabi_fsub>
 8001c60:	1c03      	adds	r3, r0, #0
 8001c62:	603b      	str	r3, [r7, #0]
	AngleP[Ax] = (int)Calc_angle;  //uncomment to enable logging of Angle position
 8001c64:	6838      	ldr	r0, [r7, #0]
 8001c66:	f7fe fc97 	bl	8000598 <__aeabi_f2iz>
 8001c6a:	0001      	movs	r1, r0
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <AMS5055_Get_Position+0x134>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	b289      	uxth	r1, r1
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <AMS5055_Get_Position+0x144>)
 8001c74:	0052      	lsls	r2, r2, #1
 8001c76:	52d1      	strh	r1, [r2, r3]

	if (Ax >= 1000) // to prevent overflow
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <AMS5055_Get_Position+0x134>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	23fa      	movs	r3, #250	; 0xfa
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	429a      	cmp	r2, r3
 8001c82:	db03      	blt.n	8001c8c <AMS5055_Get_Position+0x104>
	{
		Ax = 0;
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <AMS5055_Get_Position+0x134>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e007      	b.n	8001c9c <AMS5055_Get_Position+0x114>
	}

	else
	{
		Ax++;
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <AMS5055_Get_Position+0x134>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <AMS5055_Get_Position+0x134>)
 8001c94:	601a      	str	r2, [r3, #0]
		AMS_Ready = 0;
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <AMS5055_Get_Position+0x124>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
	}

	return Angle;
 8001c9c:	1dbb      	adds	r3, r7, #6
 8001c9e:	881b      	ldrh	r3, [r3, #0]
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b003      	add	sp, #12
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	00003fff 	.word	0x00003fff
 8001cac:	20000804 	.word	0x20000804
 8001cb0:	ffff8000 	.word	0xffff8000
 8001cb4:	ffffc000 	.word	0xffffc000
 8001cb8:	ffffe000 	.word	0xffffe000
 8001cbc:	20000800 	.word	0x20000800
 8001cc0:	20000030 	.word	0x20000030
 8001cc4:	00000fff 	.word	0x00000fff
 8001cc8:	2000002c 	.word	0x2000002c
 8001ccc:	20000808 	.word	0x20000808

08001cd0 <AMSParity>:

uint8_t AMSParity(uint16_t value)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	1dbb      	adds	r3, r7, #6
 8001cda:	801a      	strh	r2, [r3, #0]
	uint8_t cnt = 0;
 8001cdc:	230f      	movs	r3, #15
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8001ce4:	230e      	movs	r3, #14
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	e015      	b.n	8001d1a <AMSParity+0x4a>
	{
		if (value & 0x1)
 8001cee:	1dbb      	adds	r3, r7, #6
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d005      	beq.n	8001d04 <AMSParity+0x34>
		{
			cnt++;
 8001cf8:	210f      	movs	r1, #15
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	3201      	adds	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
		}

		value >>= 1;
 8001d04:	1dbb      	adds	r3, r7, #6
 8001d06:	1dba      	adds	r2, r7, #6
 8001d08:	8812      	ldrh	r2, [r2, #0]
 8001d0a:	0852      	lsrs	r2, r2, #1
 8001d0c:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 16; i++)
 8001d0e:	210e      	movs	r1, #14
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	3201      	adds	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	230e      	movs	r3, #14
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b0f      	cmp	r3, #15
 8001d22:	d9e4      	bls.n	8001cee <AMSParity+0x1e>
	}
	return cnt & 0x1;
 8001d24:	230f      	movs	r3, #15
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	b2db      	uxtb	r3, r3
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b004      	add	sp, #16
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <AMS5055_SPIWriteInt>:

uint16_t AMS5055_SPIWriteInt(uint16_t Address, int Action)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	0002      	movs	r2, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	1dbb      	adds	r3, r7, #6
 8001d44:	801a      	strh	r2, [r3, #0]
	*/

	uint8_t SPI1TxData[2];	//TX data array SPI1
	uint8_t SPI1RxData[2];	//RX data array SPI1

	uint16_t SPI1Rx = 0;
 8001d46:	2314      	movs	r3, #20
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	801a      	strh	r2, [r3, #0]
	uint16_t SPI1Tx = 0;
 8001d4e:	2416      	movs	r4, #22
 8001d50:	193b      	adds	r3, r7, r4
 8001d52:	2200      	movs	r2, #0
 8001d54:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low
 8001d56:	2390      	movs	r3, #144	; 0x90
 8001d58:	05db      	lsls	r3, r3, #23
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f002 f800 	bl	8003d64 <HAL_GPIO_WritePin>


	  SPI1Tx = (Address << 1);
 8001d64:	0021      	movs	r1, r4
 8001d66:	187a      	adds	r2, r7, r1
 8001d68:	1dbb      	adds	r3, r7, #6
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	18db      	adds	r3, r3, r3
 8001d6e:	8013      	strh	r3, [r2, #0]

	  if (Action == 1) //READ
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d105      	bne.n	8001d82 <AMS5055_SPIWriteInt+0x4a>
	  {
		  SPI1Tx = SPI1Tx | 0x8000;
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	187a      	adds	r2, r7, r1
 8001d7a:	8812      	ldrh	r2, [r2, #0]
 8001d7c:	4923      	ldr	r1, [pc, #140]	; (8001e0c <AMS5055_SPIWriteInt+0xd4>)
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	801a      	strh	r2, [r3, #0]
	  }

	  SPI1Tx = SPI1Tx | AMSParity(SPI1Tx);
 8001d82:	2416      	movs	r4, #22
 8001d84:	193b      	adds	r3, r7, r4
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff ffa1 	bl	8001cd0 <AMSParity>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	b299      	uxth	r1, r3
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	193a      	adds	r2, r7, r4
 8001d96:	8812      	ldrh	r2, [r2, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	801a      	strh	r2, [r3, #0]

	 // HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low

	  SPI1TxData[0] = SPI1Tx >> 8;
 8001d9c:	0021      	movs	r1, r4
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	2010      	movs	r0, #16
 8001daa:	183b      	adds	r3, r7, r0
 8001dac:	701a      	strb	r2, [r3, #0]
	  SPI1TxData[1] = SPI1Tx;
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	183b      	adds	r3, r7, r0
 8001db6:	705a      	strb	r2, [r3, #1]

	  HAL_SPI_TransmitReceive(&hspi1, SPI1TxData, SPI1RxData, 0x02, 100);
 8001db8:	240c      	movs	r4, #12
 8001dba:	193a      	adds	r2, r7, r4
 8001dbc:	1839      	adds	r1, r7, r0
 8001dbe:	4814      	ldr	r0, [pc, #80]	; (8001e10 <AMS5055_SPIWriteInt+0xd8>)
 8001dc0:	2364      	movs	r3, #100	; 0x64
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f002 fda1 	bl	800490c <HAL_SPI_TransmitReceive>
	//HAL_SPI_TransmitReceive(&hspi1, SPI1Tx, SPI1Rx, 0x02, 100);

	  //HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high

	  SPI1Rx += (SPI1RxData[0] << 8);	//<< 8
 8001dca:	193b      	adds	r3, r7, r4
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	b299      	uxth	r1, r3
 8001dd4:	2014      	movs	r0, #20
 8001dd6:	183b      	adds	r3, r7, r0
 8001dd8:	183a      	adds	r2, r7, r0
 8001dda:	8812      	ldrh	r2, [r2, #0]
 8001ddc:	188a      	adds	r2, r1, r2
 8001dde:	801a      	strh	r2, [r3, #0]
	  SPI1Rx += (SPI1RxData[1] << 0);	//<< 0
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	785b      	ldrb	r3, [r3, #1]
 8001de4:	b299      	uxth	r1, r3
 8001de6:	183b      	adds	r3, r7, r0
 8001de8:	0004      	movs	r4, r0
 8001dea:	183a      	adds	r2, r7, r0
 8001dec:	8812      	ldrh	r2, [r2, #0]
 8001dee:	188a      	adds	r2, r1, r2
 8001df0:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high
 8001df2:	2390      	movs	r3, #144	; 0x90
 8001df4:	05db      	lsls	r3, r3, #23
 8001df6:	2201      	movs	r2, #1
 8001df8:	2110      	movs	r1, #16
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f001 ffb2 	bl	8003d64 <HAL_GPIO_WritePin>

	  return SPI1Rx;
 8001e00:	193b      	adds	r3, r7, r4
 8001e02:	881b      	ldrh	r3, [r3, #0]
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b007      	add	sp, #28
 8001e0a:	bd90      	pop	{r4, r7, pc}
 8001e0c:	ffff8000 	.word	0xffff8000
 8001e10:	20001040 	.word	0x20001040

08001e14 <ENC_Get_Position>:

uint16_t ENC_Get_Position(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
	uint32_t Enc_Position = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2039      	movs	r0, #57	; 0x39
 8001e20:	f7ff fe38 	bl	8001a94 <TMC5160_SPIWrite>
 8001e24:	0003      	movs	r3, r0
 8001e26:	607b      	str	r3, [r7, #4]

	if((int)Enc_Position <= 0)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	dc02      	bgt.n	8001e34 <ENC_Get_Position+0x20>
	{
		Enc_Position = Enc_Position * (-1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	425b      	negs	r3, r3
 8001e32:	607b      	str	r3, [r7, #4]
	}

	Enc_Position = ((Enc_Position / 256)* 1.8);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff fa99 	bl	8001370 <__aeabi_ui2d>
 8001e3e:	4a09      	ldr	r2, [pc, #36]	; (8001e64 <ENC_Get_Position+0x50>)
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <ENC_Get_Position+0x54>)
 8001e42:	f7fe fc1b 	bl	800067c <__aeabi_dmul>
 8001e46:	0002      	movs	r2, r0
 8001e48:	000b      	movs	r3, r1
 8001e4a:	0010      	movs	r0, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	f7fe f9e5 	bl	800021c <__aeabi_d2uiz>
 8001e52:	0003      	movs	r3, r0
 8001e54:	607b      	str	r3, [r7, #4]

	return Enc_Position;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	b29b      	uxth	r3, r3
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b002      	add	sp, #8
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	cccccccd 	.word	0xcccccccd
 8001e68:	3ffccccc 	.word	0x3ffccccc

08001e6c <HAL_CAN_RxFifo0MsgPendingCallback>:
int Datacheck;			//temp value for checking incomming CAN Data


/*  CAN RECEIVE INTERRUPT */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CANRxHeader, CANRxData);
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	f001 f9c2 	bl	8003204 <HAL_CAN_GetRxMessage>

	if (CANRxData[0] == 0x01)
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d102      	bne.n	8001e8e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Datacheck = 1;
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
	}
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b002      	add	sp, #8
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	20001150 	.word	0x20001150
 8001e9c:	20001134 	.word	0x20001134
 8001ea0:	20001158 	.word	0x20001158

08001ea4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	0002      	movs	r2, r0
 8001eac:	1dbb      	adds	r3, r7, #6
 8001eae:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == AMS_INT_Pin && AMS_Ready == 0)
 8001eb0:	1dbb      	adds	r3, r7, #6
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_GPIO_EXTI_Callback+0x22>
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <HAL_GPIO_EXTI_Callback+0x22>
	{
		AMS_Ready = 1;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
	}
}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b002      	add	sp, #8
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	20000804 	.word	0x20000804

08001ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	4c50      	ldr	r4, [pc, #320]	; (8002018 <main+0x144>)
 8001ed8:	44a5      	add	sp, r4
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001edc:	f000 fc86 	bl	80027ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ee0:	f000 f8aa 	bl	8002038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee4:	f000 fa2a 	bl	800233c <MX_GPIO_Init>
  MX_ADC_Init();
 8001ee8:	f000 f8ea 	bl	80020c0 <MX_ADC_Init>
  MX_CAN_Init();
 8001eec:	f000 f944 	bl	8002178 <MX_CAN_Init>
  MX_SPI1_Init();
 8001ef0:	f000 f9a8 	bl	8002244 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ef4:	f000 f9e4 	bl	80022c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  TMC5160_Stop();
 8001ef8:	f7ff fd9e 	bl	8001a38 <TMC5160_Stop>
  HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,1); // LOW = ON
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	0059      	lsls	r1, r3, #1
 8001f00:	2390      	movs	r3, #144	; 0x90
 8001f02:	05db      	lsls	r3, r3, #23
 8001f04:	2201      	movs	r2, #1
 8001f06:	0018      	movs	r0, r3
 8001f08:	f001 ff2c 	bl	8003d64 <HAL_GPIO_WritePin>
  HAL_Delay(2500);	//startup delay, so motor does not spin on debug
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <main+0x148>)
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 fcd0 	bl	80028b4 <HAL_Delay>

  Ramp1.VSTART 	= 10;
 8001f14:	4b42      	ldr	r3, [pc, #264]	; (8002020 <main+0x14c>)
 8001f16:	220a      	movs	r2, #10
 8001f18:	601a      	str	r2, [r3, #0]
  Ramp1.A1 		= 1000;
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <main+0x14c>)
 8001f1c:	22fa      	movs	r2, #250	; 0xfa
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	605a      	str	r2, [r3, #4]
  Ramp1.V1 		= 10000;
 8001f22:	4b3f      	ldr	r3, [pc, #252]	; (8002020 <main+0x14c>)
 8001f24:	4a3f      	ldr	r2, [pc, #252]	; (8002024 <main+0x150>)
 8001f26:	609a      	str	r2, [r3, #8]
  Ramp1.AMAX 	= 12800;
 8001f28:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <main+0x14c>)
 8001f2a:	22c8      	movs	r2, #200	; 0xc8
 8001f2c:	0192      	lsls	r2, r2, #6
 8001f2e:	60da      	str	r2, [r3, #12]
  Ramp1.VMAX 	= 51200;
 8001f30:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <main+0x14c>)
 8001f32:	22c8      	movs	r2, #200	; 0xc8
 8001f34:	0212      	lsls	r2, r2, #8
 8001f36:	611a      	str	r2, [r3, #16]
  Ramp1.DMAX 	= 700;
 8001f38:	4b39      	ldr	r3, [pc, #228]	; (8002020 <main+0x14c>)
 8001f3a:	22af      	movs	r2, #175	; 0xaf
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	615a      	str	r2, [r3, #20]
  Ramp1.D1 		= 1400;
 8001f40:	4b37      	ldr	r3, [pc, #220]	; (8002020 <main+0x14c>)
 8001f42:	22af      	movs	r2, #175	; 0xaf
 8001f44:	00d2      	lsls	r2, r2, #3
 8001f46:	619a      	str	r2, [r3, #24]
  Ramp1.VSTOP 	= 10;
 8001f48:	4b35      	ldr	r3, [pc, #212]	; (8002020 <main+0x14c>)
 8001f4a:	220a      	movs	r2, #10
 8001f4c:	61da      	str	r2, [r3, #28]

  CurrentSetting1.IHOLD = 3;
 8001f4e:	4b36      	ldr	r3, [pc, #216]	; (8002028 <main+0x154>)
 8001f50:	2203      	movs	r2, #3
 8001f52:	605a      	str	r2, [r3, #4]
  CurrentSetting1.IRUN 	= 1;
 8001f54:	4b34      	ldr	r3, [pc, #208]	; (8002028 <main+0x154>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

  int h = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	4a33      	ldr	r2, [pc, #204]	; (800202c <main+0x158>)
 8001f5e:	18ba      	adds	r2, r7, r2
 8001f60:	6013      	str	r3, [r2, #0]
  uint32_t Enc_Position[500];
  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set AM CS low
 8001f62:	2390      	movs	r3, #144	; 0x90
 8001f64:	05db      	lsls	r3, r3, #23
 8001f66:	2201      	movs	r2, #1
 8001f68:	2110      	movs	r1, #16
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f001 fefa 	bl	8003d64 <HAL_GPIO_WritePin>

  Drive_Enable(0); // enable driver
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff fd6b 	bl	8001a4c <Drive_Enable>
  TMC5160_Stop();
 8001f76:	f7ff fd5f 	bl	8001a38 <TMC5160_Stop>

  AMS5055_Basic_Init();
 8001f7a:	f7ff fdf7 	bl	8001b6c <AMS5055_Basic_Init>

  TMC5160_SPIWrite(0x21, 0x00000000, 1);// writing value to address 24 = 0x2D(XTARGET)  1 lap
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2100      	movs	r1, #0
 8001f82:	2021      	movs	r0, #33	; 0x21
 8001f84:	f7ff fd86 	bl	8001a94 <TMC5160_SPIWrite>
  TMC5160_Rotate_To(0, &Ramp1);
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <main+0x14c>)
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff fc7b 	bl	8001888 <TMC5160_Rotate_To>
  HAL_Delay(1500);
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <main+0x15c>)
 8001f94:	0018      	movs	r0, r3
 8001f96:	f000 fc8d 	bl	80028b4 <HAL_Delay>


  /* Perform Basic Init of TMC5160 and AMS5055 */
  TMC5160_Basic_Init(&CurrentSetting1);
 8001f9a:	4b23      	ldr	r3, [pc, #140]	; (8002028 <main+0x154>)
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7ff fb75 	bl	800168c <TMC5160_Basic_Init>


  Drive_Enable(1); // enable driver
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7ff fd52 	bl	8001a4c <Drive_Enable>

  TMC5160_Rotate_To(51200, &Ramp1); // move to Position X
 8001fa8:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <main+0x14c>)
 8001faa:	23c8      	movs	r3, #200	; 0xc8
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	0011      	movs	r1, r2
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f7ff fc69 	bl	8001888 <TMC5160_Rotate_To>
  HAL_Delay(100);
 8001fb6:	2064      	movs	r0, #100	; 0x64
 8001fb8:	f000 fc7c 	bl	80028b4 <HAL_Delay>
  TMC5160_Rotate_To(0, &Ramp1); // move to Position X
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <main+0x14c>)
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff fc61 	bl	8001888 <TMC5160_Rotate_To>

  TMC5160_Stop();
 8001fc6:	f7ff fd37 	bl	8001a38 <TMC5160_Stop>
  Drive_Enable(0);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff fd3e 	bl	8001a4c <Drive_Enable>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  Enc_Position[h] = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2039      	movs	r0, #57	; 0x39
 8001fd6:	f7ff fd5d 	bl	8001a94 <TMC5160_SPIWrite>
 8001fda:	0001      	movs	r1, r0
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <main+0x160>)
 8001fde:	22fb      	movs	r2, #251	; 0xfb
 8001fe0:	00d2      	lsls	r2, r2, #3
 8001fe2:	189b      	adds	r3, r3, r2
 8001fe4:	19db      	adds	r3, r3, r7
 8001fe6:	4c11      	ldr	r4, [pc, #68]	; (800202c <main+0x158>)
 8001fe8:	193a      	adds	r2, r7, r4
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	0092      	lsls	r2, r2, #2
 8001fee:	50d1      	str	r1, [r2, r3]
	  HAL_Delay(5);
 8001ff0:	2005      	movs	r0, #5
 8001ff2:	f000 fc5f 	bl	80028b4 <HAL_Delay>
	  h++;
 8001ff6:	0021      	movs	r1, r4
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	187a      	adds	r2, r7, r1
 8002000:	6013      	str	r3, [r2, #0]

	  if(h == 500)
 8002002:	187b      	adds	r3, r7, r1
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	23fa      	movs	r3, #250	; 0xfa
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	429a      	cmp	r2, r3
 800200c:	d1e0      	bne.n	8001fd0 <main+0xfc>
	  {
			h = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	187a      	adds	r2, r7, r1
 8002012:	6013      	str	r3, [r2, #0]
	  Enc_Position[h] = TMC5160_SPIWrite(0x39, 0x00000000, 0); // read encoder position
 8002014:	e7dc      	b.n	8001fd0 <main+0xfc>
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	fffff824 	.word	0xfffff824
 800201c:	000009c4 	.word	0x000009c4
 8002020:	20001108 	.word	0x20001108
 8002024:	00002710 	.word	0x00002710
 8002028:	20001128 	.word	0x20001128
 800202c:	000007d4 	.word	0x000007d4
 8002030:	000005dc 	.word	0x000005dc
 8002034:	fffff82c 	.word	0xfffff82c

08002038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b093      	sub	sp, #76	; 0x4c
 800203c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800203e:	2414      	movs	r4, #20
 8002040:	193b      	adds	r3, r7, r4
 8002042:	0018      	movs	r0, r3
 8002044:	2334      	movs	r3, #52	; 0x34
 8002046:	001a      	movs	r2, r3
 8002048:	2100      	movs	r1, #0
 800204a:	f002 ffa7 	bl	8004f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	0018      	movs	r0, r3
 8002052:	2310      	movs	r3, #16
 8002054:	001a      	movs	r2, r3
 8002056:	2100      	movs	r1, #0
 8002058:	f002 ffa0 	bl	8004f9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 800205c:	0021      	movs	r1, r4
 800205e:	187b      	adds	r3, r7, r1
 8002060:	2211      	movs	r2, #17
 8002062:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002064:	187b      	adds	r3, r7, r1
 8002066:	2201      	movs	r2, #1
 8002068:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800206a:	187b      	adds	r3, r7, r1
 800206c:	2201      	movs	r2, #1
 800206e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002070:	187b      	adds	r3, r7, r1
 8002072:	2210      	movs	r2, #16
 8002074:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002076:	187b      	adds	r3, r7, r1
 8002078:	2200      	movs	r2, #0
 800207a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800207c:	187b      	adds	r3, r7, r1
 800207e:	0018      	movs	r0, r3
 8002080:	f001 feaa 	bl	8003dd8 <HAL_RCC_OscConfig>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8002088:	f000 fa04 	bl	8002494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	2207      	movs	r2, #7
 8002090:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	2201      	movs	r2, #1
 8002096:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	2100      	movs	r1, #0
 80020a8:	0018      	movs	r0, r3
 80020aa:	f002 fa1b 	bl	80044e4 <HAL_RCC_ClockConfig>
 80020ae:	1e03      	subs	r3, r0, #0
 80020b0:	d001      	beq.n	80020b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80020b2:	f000 f9ef 	bl	8002494 <Error_Handler>
  }
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b013      	add	sp, #76	; 0x4c
 80020bc:	bd90      	pop	{r4, r7, pc}
	...

080020c0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	0018      	movs	r0, r3
 80020ca:	230c      	movs	r3, #12
 80020cc:	001a      	movs	r2, r3
 80020ce:	2100      	movs	r1, #0
 80020d0:	f002 ff64 	bl	8004f9c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <MX_ADC_Init+0xb0>)
 80020d6:	4a27      	ldr	r2, [pc, #156]	; (8002174 <MX_ADC_Init+0xb4>)
 80020d8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <MX_ADC_Init+0xb0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80020e0:	4b23      	ldr	r3, [pc, #140]	; (8002170 <MX_ADC_Init+0xb0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <MX_ADC_Init+0xb0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80020ec:	4b20      	ldr	r3, [pc, #128]	; (8002170 <MX_ADC_Init+0xb0>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <MX_ADC_Init+0xb0>)
 80020f4:	2204      	movs	r2, #4
 80020f6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <MX_ADC_Init+0xb0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <MX_ADC_Init+0xb0>)
 8002100:	2200      	movs	r2, #0
 8002102:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002104:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <MX_ADC_Init+0xb0>)
 8002106:	2200      	movs	r2, #0
 8002108:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <MX_ADC_Init+0xb0>)
 800210c:	2200      	movs	r2, #0
 800210e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002110:	4b17      	ldr	r3, [pc, #92]	; (8002170 <MX_ADC_Init+0xb0>)
 8002112:	22c2      	movs	r2, #194	; 0xc2
 8002114:	32ff      	adds	r2, #255	; 0xff
 8002116:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <MX_ADC_Init+0xb0>)
 800211a:	2200      	movs	r2, #0
 800211c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <MX_ADC_Init+0xb0>)
 8002120:	2224      	movs	r2, #36	; 0x24
 8002122:	2100      	movs	r1, #0
 8002124:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <MX_ADC_Init+0xb0>)
 8002128:	2201      	movs	r2, #1
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <MX_ADC_Init+0xb0>)
 800212e:	0018      	movs	r0, r3
 8002130:	f000 fbe4 	bl	80028fc <HAL_ADC_Init>
 8002134:	1e03      	subs	r3, r0, #0
 8002136:	d001      	beq.n	800213c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002138:	f000 f9ac 	bl	8002494 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	0152      	lsls	r2, r2, #5
 8002148:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	0552      	lsls	r2, r2, #21
 8002150:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002152:	1d3a      	adds	r2, r7, #4
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_ADC_Init+0xb0>)
 8002156:	0011      	movs	r1, r2
 8002158:	0018      	movs	r0, r3
 800215a:	f000 fd0f 	bl	8002b7c <HAL_ADC_ConfigChannel>
 800215e:	1e03      	subs	r3, r0, #0
 8002160:	d001      	beq.n	8002166 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002162:	f000 f997 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b004      	add	sp, #16
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	20000fd8 	.word	0x20000fd8
 8002174:	40012400 	.word	0x40012400

08002178 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800217e:	4b2f      	ldr	r3, [pc, #188]	; (800223c <MX_CAN_Init+0xc4>)
 8002180:	4a2f      	ldr	r2, [pc, #188]	; (8002240 <MX_CAN_Init+0xc8>)
 8002182:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <MX_CAN_Init+0xc4>)
 8002186:	2210      	movs	r2, #16
 8002188:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800218a:	4b2c      	ldr	r3, [pc, #176]	; (800223c <MX_CAN_Init+0xc4>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <MX_CAN_Init+0xc4>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002196:	4b29      	ldr	r3, [pc, #164]	; (800223c <MX_CAN_Init+0xc4>)
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	0252      	lsls	r2, r2, #9
 800219c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800219e:	4b27      	ldr	r3, [pc, #156]	; (800223c <MX_CAN_Init+0xc4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80021a4:	4b25      	ldr	r3, [pc, #148]	; (800223c <MX_CAN_Init+0xc4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <MX_CAN_Init+0xc4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <MX_CAN_Init+0xc4>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80021b6:	4b21      	ldr	r3, [pc, #132]	; (800223c <MX_CAN_Init+0xc4>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80021bc:	4b1f      	ldr	r3, [pc, #124]	; (800223c <MX_CAN_Init+0xc4>)
 80021be:	2200      	movs	r2, #0
 80021c0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <MX_CAN_Init+0xc4>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <MX_CAN_Init+0xc4>)
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 fde4 	bl	8002d98 <HAL_CAN_Init>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d001      	beq.n	80021d8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80021d4:	f000 f95e 	bl	8002494 <Error_Handler>

  /* CAN filter */

  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 80021d8:	003b      	movs	r3, r7
 80021da:	2201      	movs	r2, #1
 80021dc:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 10;
 80021de:	003b      	movs	r3, r7
 80021e0:	220a      	movs	r2, #10
 80021e2:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80021e4:	003b      	movs	r3, r7
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x0000;
 80021ea:	003b      	movs	r3, r7
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80021f0:	003b      	movs	r3, r7
 80021f2:	2200      	movs	r2, #0
 80021f4:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80021f6:	003b      	movs	r3, r7
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80021fc:	003b      	movs	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002202:	003b      	movs	r3, r7
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002208:	003b      	movs	r3, r7
 800220a:	2201      	movs	r2, #1
 800220c:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 0;
 800220e:	003b      	movs	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8002214:	003a      	movs	r2, r7
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_CAN_Init+0xc4>)
 8002218:	0011      	movs	r1, r2
 800221a:	0018      	movs	r0, r3
 800221c:	f000 feba 	bl	8002f94 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <MX_CAN_Init+0xc4>)
 8002222:	0018      	movs	r0, r3
 8002224:	f000 ffa8 	bl	8003178 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <MX_CAN_Init+0xc4>)
 800222a:	2102      	movs	r1, #2
 800222c:	0018      	movs	r0, r3
 800222e:	f001 f905 	bl	800343c <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	b00a      	add	sp, #40	; 0x28
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	20001018 	.word	0x20001018
 8002240:	40006400 	.word	0x40006400

08002244 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <MX_SPI1_Init+0x74>)
 800224a:	4a1c      	ldr	r2, [pc, #112]	; (80022bc <MX_SPI1_Init+0x78>)
 800224c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <MX_SPI1_Init+0x74>)
 8002250:	2282      	movs	r2, #130	; 0x82
 8002252:	0052      	lsls	r2, r2, #1
 8002254:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <MX_SPI1_Init+0x74>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800225c:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <MX_SPI1_Init+0x74>)
 800225e:	22e0      	movs	r2, #224	; 0xe0
 8002260:	00d2      	lsls	r2, r2, #3
 8002262:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <MX_SPI1_Init+0x74>)
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800226a:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <MX_SPI1_Init+0x74>)
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MX_SPI1_Init+0x74>)
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <MX_SPI1_Init+0x74>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <MX_SPI1_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <MX_SPI1_Init+0x74>)
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <MX_SPI1_Init+0x74>)
 800228c:	2200      	movs	r2, #0
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <MX_SPI1_Init+0x74>)
 8002292:	2207      	movs	r2, #7
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <MX_SPI1_Init+0x74>)
 8002298:	2200      	movs	r2, #0
 800229a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <MX_SPI1_Init+0x74>)
 800229e:	2208      	movs	r2, #8
 80022a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <MX_SPI1_Init+0x74>)
 80022a4:	0018      	movs	r0, r3
 80022a6:	f002 fa79 	bl	800479c <HAL_SPI_Init>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d001      	beq.n	80022b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022ae:	f000 f8f1 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20001040 	.word	0x20001040
 80022bc:	40013000 	.word	0x40013000

080022c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <MX_SPI2_Init+0x74>)
 80022c6:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <MX_SPI2_Init+0x78>)
 80022c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <MX_SPI2_Init+0x74>)
 80022cc:	2282      	movs	r2, #130	; 0x82
 80022ce:	0052      	lsls	r2, r2, #1
 80022d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022d2:	4b18      	ldr	r3, [pc, #96]	; (8002334 <MX_SPI2_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <MX_SPI2_Init+0x74>)
 80022da:	22e0      	movs	r2, #224	; 0xe0
 80022dc:	00d2      	lsls	r2, r2, #3
 80022de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_SPI2_Init+0x74>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <MX_SPI2_Init+0x74>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_SPI2_Init+0x74>)
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	0092      	lsls	r2, r2, #2
 80022f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_SPI2_Init+0x74>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_SPI2_Init+0x74>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_SPI2_Init+0x74>)
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <MX_SPI2_Init+0x74>)
 8002308:	2200      	movs	r2, #0
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_SPI2_Init+0x74>)
 800230e:	2207      	movs	r2, #7
 8002310:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <MX_SPI2_Init+0x74>)
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_SPI2_Init+0x74>)
 800231a:	2208      	movs	r2, #8
 800231c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <MX_SPI2_Init+0x74>)
 8002320:	0018      	movs	r0, r3
 8002322:	f002 fa3b 	bl	800479c <HAL_SPI_Init>
 8002326:	1e03      	subs	r3, r0, #0
 8002328:	d001      	beq.n	800232e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800232a:	f000 f8b3 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200010a4 	.word	0x200010a4
 8002338:	40003800 	.word	0x40003800

0800233c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002342:	240c      	movs	r4, #12
 8002344:	193b      	adds	r3, r7, r4
 8002346:	0018      	movs	r0, r3
 8002348:	2314      	movs	r3, #20
 800234a:	001a      	movs	r2, r3
 800234c:	2100      	movs	r1, #0
 800234e:	f002 fe25 	bl	8004f9c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002352:	4b4d      	ldr	r3, [pc, #308]	; (8002488 <MX_GPIO_Init+0x14c>)
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <MX_GPIO_Init+0x14c>)
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	03c9      	lsls	r1, r1, #15
 800235c:	430a      	orrs	r2, r1
 800235e:	615a      	str	r2, [r3, #20]
 8002360:	4b49      	ldr	r3, [pc, #292]	; (8002488 <MX_GPIO_Init+0x14c>)
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	03db      	lsls	r3, r3, #15
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	4b46      	ldr	r3, [pc, #280]	; (8002488 <MX_GPIO_Init+0x14c>)
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	4b45      	ldr	r3, [pc, #276]	; (8002488 <MX_GPIO_Init+0x14c>)
 8002374:	2180      	movs	r1, #128	; 0x80
 8002376:	0289      	lsls	r1, r1, #10
 8002378:	430a      	orrs	r2, r1
 800237a:	615a      	str	r2, [r3, #20]
 800237c:	4b42      	ldr	r3, [pc, #264]	; (8002488 <MX_GPIO_Init+0x14c>)
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	029b      	lsls	r3, r3, #10
 8002384:	4013      	ands	r3, r2
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <MX_GPIO_Init+0x14c>)
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <MX_GPIO_Init+0x14c>)
 8002390:	2180      	movs	r1, #128	; 0x80
 8002392:	02c9      	lsls	r1, r1, #11
 8002394:	430a      	orrs	r2, r1
 8002396:	615a      	str	r2, [r3, #20]
 8002398:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <MX_GPIO_Init+0x14c>)
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	02db      	lsls	r3, r3, #11
 80023a0:	4013      	ands	r3, r2
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin, GPIO_PIN_RESET);
 80023a6:	238a      	movs	r3, #138	; 0x8a
 80023a8:	0059      	lsls	r1, r3, #1
 80023aa:	2390      	movs	r3, #144	; 0x90
 80023ac:	05db      	lsls	r3, r3, #23
 80023ae:	2200      	movs	r2, #0
 80023b0:	0018      	movs	r0, r3
 80023b2:	f001 fcd7 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin, GPIO_PIN_RESET);
 80023b6:	4935      	ldr	r1, [pc, #212]	; (800248c <MX_GPIO_Init+0x150>)
 80023b8:	4b35      	ldr	r3, [pc, #212]	; (8002490 <MX_GPIO_Init+0x154>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	0018      	movs	r0, r3
 80023be:	f001 fcd1 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_STB_Pin AMS_CS_Pin DRV_ENN_Pin */
  GPIO_InitStruct.Pin = CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin;
 80023c2:	193b      	adds	r3, r7, r4
 80023c4:	228a      	movs	r2, #138	; 0x8a
 80023c6:	0052      	lsls	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ca:	193b      	adds	r3, r7, r4
 80023cc:	2201      	movs	r2, #1
 80023ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	193b      	adds	r3, r7, r4
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	193b      	adds	r3, r7, r4
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	193a      	adds	r2, r7, r4
 80023de:	2390      	movs	r3, #144	; 0x90
 80023e0:	05db      	lsls	r3, r3, #23
 80023e2:	0011      	movs	r1, r2
 80023e4:	0018      	movs	r0, r3
 80023e6:	f001 fb45 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_INT_Pin */
  GPIO_InitStruct.Pin = AMS_INT_Pin;
 80023ea:	0021      	movs	r1, r4
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023f2:	187b      	adds	r3, r7, r1
 80023f4:	2288      	movs	r2, #136	; 0x88
 80023f6:	0352      	lsls	r2, r2, #13
 80023f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	000c      	movs	r4, r1
 80023fc:	193b      	adds	r3, r7, r4
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AMS_INT_GPIO_Port, &GPIO_InitStruct);
 8002402:	193b      	adds	r3, r7, r4
 8002404:	4a22      	ldr	r2, [pc, #136]	; (8002490 <MX_GPIO_Init+0x154>)
 8002406:	0019      	movs	r1, r3
 8002408:	0010      	movs	r0, r2
 800240a:	f001 fb33 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC_CS_Pin EXT_OUT_1_Pin EXT_OUT_2_Pin */
  GPIO_InitStruct.Pin = TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin;
 800240e:	193b      	adds	r3, r7, r4
 8002410:	4a1e      	ldr	r2, [pc, #120]	; (800248c <MX_GPIO_Init+0x150>)
 8002412:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002414:	193b      	adds	r3, r7, r4
 8002416:	2201      	movs	r2, #1
 8002418:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	193b      	adds	r3, r7, r4
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	193b      	adds	r3, r7, r4
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002426:	193b      	adds	r3, r7, r4
 8002428:	4a19      	ldr	r2, [pc, #100]	; (8002490 <MX_GPIO_Init+0x154>)
 800242a:	0019      	movs	r1, r3
 800242c:	0010      	movs	r0, r2
 800242e:	f001 fb21 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : REFL_UC_Pin */
  GPIO_InitStruct.Pin = REFL_UC_Pin;
 8002432:	193b      	adds	r3, r7, r4
 8002434:	2240      	movs	r2, #64	; 0x40
 8002436:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002438:	193b      	adds	r3, r7, r4
 800243a:	2200      	movs	r2, #0
 800243c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800243e:	193b      	adds	r3, r7, r4
 8002440:	2201      	movs	r2, #1
 8002442:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REFL_UC_GPIO_Port, &GPIO_InitStruct);
 8002444:	193b      	adds	r3, r7, r4
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <MX_GPIO_Init+0x154>)
 8002448:	0019      	movs	r1, r3
 800244a:	0010      	movs	r0, r2
 800244c:	f001 fb12 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : REFR_UC_Pin */
  GPIO_InitStruct.Pin = REFR_UC_Pin;
 8002450:	0021      	movs	r1, r4
 8002452:	187b      	adds	r3, r7, r1
 8002454:	2280      	movs	r2, #128	; 0x80
 8002456:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002458:	187b      	adds	r3, r7, r1
 800245a:	2200      	movs	r2, #0
 800245c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	187b      	adds	r3, r7, r1
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REFR_UC_GPIO_Port, &GPIO_InitStruct);
 8002464:	187b      	adds	r3, r7, r1
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <MX_GPIO_Init+0x154>)
 8002468:	0019      	movs	r1, r3
 800246a:	0010      	movs	r0, r2
 800246c:	f001 fb02 	bl	8003a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	2005      	movs	r0, #5
 8002476:	f001 facb 	bl	8003a10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800247a:	2005      	movs	r0, #5
 800247c:	f001 fadd 	bl	8003a3a <HAL_NVIC_EnableIRQ>

}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b009      	add	sp, #36	; 0x24
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	00001030 	.word	0x00001030
 8002490:	48000400 	.word	0x48000400

08002494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002498:	b672      	cpsid	i
}
 800249a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800249c:	e7fe      	b.n	800249c <Error_Handler+0x8>
	...

080024a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_MspInit+0x44>)
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HAL_MspInit+0x44>)
 80024ac:	2101      	movs	r1, #1
 80024ae:	430a      	orrs	r2, r1
 80024b0:	619a      	str	r2, [r3, #24]
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_MspInit+0x44>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2201      	movs	r2, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_MspInit+0x44>)
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_MspInit+0x44>)
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	0549      	lsls	r1, r1, #21
 80024c8:	430a      	orrs	r2, r1
 80024ca:	61da      	str	r2, [r3, #28]
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_MspInit+0x44>)
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	055b      	lsls	r3, r3, #21
 80024d4:	4013      	ands	r3, r2
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b002      	add	sp, #8
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b08b      	sub	sp, #44	; 0x2c
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	2414      	movs	r4, #20
 80024f2:	193b      	adds	r3, r7, r4
 80024f4:	0018      	movs	r0, r3
 80024f6:	2314      	movs	r3, #20
 80024f8:	001a      	movs	r2, r3
 80024fa:	2100      	movs	r1, #0
 80024fc:	f002 fd4e 	bl	8004f9c <memset>
  if(hadc->Instance==ADC1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <HAL_ADC_MspInit+0x84>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d12b      	bne.n	8002562 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_ADC_MspInit+0x88>)
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_ADC_MspInit+0x88>)
 8002510:	2180      	movs	r1, #128	; 0x80
 8002512:	0089      	lsls	r1, r1, #2
 8002514:	430a      	orrs	r2, r1
 8002516:	619a      	str	r2, [r3, #24]
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_ADC_MspInit+0x88>)
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_ADC_MspInit+0x88>)
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_ADC_MspInit+0x88>)
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0289      	lsls	r1, r1, #10
 8002530:	430a      	orrs	r2, r1
 8002532:	615a      	str	r2, [r3, #20]
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_ADC_MspInit+0x88>)
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	029b      	lsls	r3, r3, #10
 800253c:	4013      	ands	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = AIN_MCU_Pin;
 8002542:	193b      	adds	r3, r7, r4
 8002544:	2201      	movs	r2, #1
 8002546:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002548:	193b      	adds	r3, r7, r4
 800254a:	2203      	movs	r2, #3
 800254c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	193b      	adds	r3, r7, r4
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AIN_MCU_GPIO_Port, &GPIO_InitStruct);
 8002554:	193a      	adds	r2, r7, r4
 8002556:	2390      	movs	r3, #144	; 0x90
 8002558:	05db      	lsls	r3, r3, #23
 800255a:	0011      	movs	r1, r2
 800255c:	0018      	movs	r0, r3
 800255e:	f001 fa89 	bl	8003a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	46bd      	mov	sp, r7
 8002566:	b00b      	add	sp, #44	; 0x2c
 8002568:	bd90      	pop	{r4, r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	40012400 	.word	0x40012400
 8002570:	40021000 	.word	0x40021000

08002574 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b08b      	sub	sp, #44	; 0x2c
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	2414      	movs	r4, #20
 800257e:	193b      	adds	r3, r7, r4
 8002580:	0018      	movs	r0, r3
 8002582:	2314      	movs	r3, #20
 8002584:	001a      	movs	r2, r3
 8002586:	2100      	movs	r1, #0
 8002588:	f002 fd08 	bl	8004f9c <memset>
  if(hcan->Instance==CAN)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a20      	ldr	r2, [pc, #128]	; (8002614 <HAL_CAN_MspInit+0xa0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d13a      	bne.n	800260c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_CAN_MspInit+0xa4>)
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <HAL_CAN_MspInit+0xa4>)
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	0489      	lsls	r1, r1, #18
 80025a0:	430a      	orrs	r2, r1
 80025a2:	61da      	str	r2, [r3, #28]
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <HAL_CAN_MspInit+0xa4>)
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	049b      	lsls	r3, r3, #18
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_CAN_MspInit+0xa4>)
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_CAN_MspInit+0xa4>)
 80025b8:	2180      	movs	r1, #128	; 0x80
 80025ba:	02c9      	lsls	r1, r1, #11
 80025bc:	430a      	orrs	r2, r1
 80025be:	615a      	str	r2, [r3, #20]
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_CAN_MspInit+0xa4>)
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	02db      	lsls	r3, r3, #11
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025ce:	193b      	adds	r3, r7, r4
 80025d0:	22c0      	movs	r2, #192	; 0xc0
 80025d2:	0092      	lsls	r2, r2, #2
 80025d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	0021      	movs	r1, r4
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	2202      	movs	r2, #2
 80025dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	2203      	movs	r2, #3
 80025e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	2204      	movs	r2, #4
 80025ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <HAL_CAN_MspInit+0xa8>)
 80025f4:	0019      	movs	r1, r3
 80025f6:	0010      	movs	r0, r2
 80025f8:	f001 fa3c 	bl	8003a74 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2100      	movs	r1, #0
 8002600:	201e      	movs	r0, #30
 8002602:	f001 fa05 	bl	8003a10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8002606:	201e      	movs	r0, #30
 8002608:	f001 fa17 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b00b      	add	sp, #44	; 0x2c
 8002612:	bd90      	pop	{r4, r7, pc}
 8002614:	40006400 	.word	0x40006400
 8002618:	40021000 	.word	0x40021000
 800261c:	48000400 	.word	0x48000400

08002620 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b08d      	sub	sp, #52	; 0x34
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	241c      	movs	r4, #28
 800262a:	193b      	adds	r3, r7, r4
 800262c:	0018      	movs	r0, r3
 800262e:	2314      	movs	r3, #20
 8002630:	001a      	movs	r2, r3
 8002632:	2100      	movs	r1, #0
 8002634:	f002 fcb2 	bl	8004f9c <memset>
  if(hspi->Instance==SPI1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a39      	ldr	r2, [pc, #228]	; (8002724 <HAL_SPI_MspInit+0x104>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d133      	bne.n	80026aa <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002642:	4b39      	ldr	r3, [pc, #228]	; (8002728 <HAL_SPI_MspInit+0x108>)
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	4b38      	ldr	r3, [pc, #224]	; (8002728 <HAL_SPI_MspInit+0x108>)
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	0149      	lsls	r1, r1, #5
 800264c:	430a      	orrs	r2, r1
 800264e:	619a      	str	r2, [r3, #24]
 8002650:	4b35      	ldr	r3, [pc, #212]	; (8002728 <HAL_SPI_MspInit+0x108>)
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	015b      	lsls	r3, r3, #5
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265e:	4b32      	ldr	r3, [pc, #200]	; (8002728 <HAL_SPI_MspInit+0x108>)
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_SPI_MspInit+0x108>)
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	0289      	lsls	r1, r1, #10
 8002668:	430a      	orrs	r2, r1
 800266a:	615a      	str	r2, [r3, #20]
 800266c:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <HAL_SPI_MspInit+0x108>)
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	029b      	lsls	r3, r3, #10
 8002674:	4013      	ands	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AMS_SCK_Pin|AMS_MISO_Pin|AMS_MOSI_Pin;
 800267a:	0021      	movs	r1, r4
 800267c:	187b      	adds	r3, r7, r1
 800267e:	22e0      	movs	r2, #224	; 0xe0
 8002680:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2202      	movs	r2, #2
 8002686:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2203      	movs	r2, #3
 8002692:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269a:	187a      	adds	r2, r7, r1
 800269c:	2390      	movs	r3, #144	; 0x90
 800269e:	05db      	lsls	r3, r3, #23
 80026a0:	0011      	movs	r1, r2
 80026a2:	0018      	movs	r0, r3
 80026a4:	f001 f9e6 	bl	8003a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026a8:	e037      	b.n	800271a <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1f      	ldr	r2, [pc, #124]	; (800272c <HAL_SPI_MspInit+0x10c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d132      	bne.n	800271a <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026b4:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <HAL_SPI_MspInit+0x108>)
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_SPI_MspInit+0x108>)
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	01c9      	lsls	r1, r1, #7
 80026be:	430a      	orrs	r2, r1
 80026c0:	61da      	str	r2, [r3, #28]
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_SPI_MspInit+0x108>)
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	01db      	lsls	r3, r3, #7
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_SPI_MspInit+0x108>)
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <HAL_SPI_MspInit+0x108>)
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	02c9      	lsls	r1, r1, #11
 80026da:	430a      	orrs	r2, r1
 80026dc:	615a      	str	r2, [r3, #20]
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_SPI_MspInit+0x108>)
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	02db      	lsls	r3, r3, #11
 80026e6:	4013      	ands	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMC_SCK_Pin|TMC_MISO_Pin|TMC_MOSI_Pin;
 80026ec:	211c      	movs	r1, #28
 80026ee:	187b      	adds	r3, r7, r1
 80026f0:	22e0      	movs	r2, #224	; 0xe0
 80026f2:	0212      	lsls	r2, r2, #8
 80026f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	2202      	movs	r2, #2
 80026fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002702:	187b      	adds	r3, r7, r1
 8002704:	2203      	movs	r2, #3
 8002706:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002708:	187b      	adds	r3, r7, r1
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270e:	187b      	adds	r3, r7, r1
 8002710:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_SPI_MspInit+0x110>)
 8002712:	0019      	movs	r1, r3
 8002714:	0010      	movs	r0, r2
 8002716:	f001 f9ad 	bl	8003a74 <HAL_GPIO_Init>
}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	46bd      	mov	sp, r7
 800271e:	b00d      	add	sp, #52	; 0x34
 8002720:	bd90      	pop	{r4, r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	40013000 	.word	0x40013000
 8002728:	40021000 	.word	0x40021000
 800272c:	40003800 	.word	0x40003800
 8002730:	48000400 	.word	0x48000400

08002734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002738:	e7fe      	b.n	8002738 <NMI_Handler+0x4>

0800273a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273e:	e7fe      	b.n	800273e <HardFault_Handler+0x4>

08002740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002758:	f000 f890 	bl	800287c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AMS_INT_Pin);
 8002766:	2001      	movs	r0, #1
 8002768:	f001 fb1a 	bl	8003da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <CEC_CAN_IRQHandler+0x14>)
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fe88 	bl	8003490 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	20001018 	.word	0x20001018

0800278c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002798:	480d      	ldr	r0, [pc, #52]	; (80027d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800279a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800279c:	480d      	ldr	r0, [pc, #52]	; (80027d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800279e:	490e      	ldr	r1, [pc, #56]	; (80027d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <LoopForever+0xe>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a4:	e002      	b.n	80027ac <LoopCopyDataInit>

080027a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027aa:	3304      	adds	r3, #4

080027ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b0:	d3f9      	bcc.n	80027a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027b4:	4c0b      	ldr	r4, [pc, #44]	; (80027e4 <LoopForever+0x16>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b8:	e001      	b.n	80027be <LoopFillZerobss>

080027ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027bc:	3204      	adds	r2, #4

080027be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c0:	d3fb      	bcc.n	80027ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80027c2:	f7ff ffe3 	bl	800278c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80027c6:	f002 fbf1 	bl	8004fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027ca:	f7ff fb83 	bl	8001ed4 <main>

080027ce <LoopForever>:

LoopForever:
    b LoopForever
 80027ce:	e7fe      	b.n	80027ce <LoopForever>
  ldr   r0, =_estack
 80027d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80027dc:	08005044 	.word	0x08005044
  ldr r2, =_sbss
 80027e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80027e4:	20001160 	.word	0x20001160

080027e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027e8:	e7fe      	b.n	80027e8 <ADC1_COMP_IRQHandler>
	...

080027ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_Init+0x24>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_Init+0x24>)
 80027f6:	2110      	movs	r1, #16
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80027fc:	2003      	movs	r0, #3
 80027fe:	f000 f809 	bl	8002814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002802:	f7ff fe4d 	bl	80024a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	40022000 	.word	0x40022000

08002814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_InitTick+0x5c>)
 800281e:	681c      	ldr	r4, [r3, #0]
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <HAL_InitTick+0x60>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	0019      	movs	r1, r3
 8002826:	23fa      	movs	r3, #250	; 0xfa
 8002828:	0098      	lsls	r0, r3, #2
 800282a:	f7fd fc6b 	bl	8000104 <__udivsi3>
 800282e:	0003      	movs	r3, r0
 8002830:	0019      	movs	r1, r3
 8002832:	0020      	movs	r0, r4
 8002834:	f7fd fc66 	bl	8000104 <__udivsi3>
 8002838:	0003      	movs	r3, r0
 800283a:	0018      	movs	r0, r3
 800283c:	f001 f90d 	bl	8003a5a <HAL_SYSTICK_Config>
 8002840:	1e03      	subs	r3, r0, #0
 8002842:	d001      	beq.n	8002848 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e00f      	b.n	8002868 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b03      	cmp	r3, #3
 800284c:	d80b      	bhi.n	8002866 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	2301      	movs	r3, #1
 8002852:	425b      	negs	r3, r3
 8002854:	2200      	movs	r2, #0
 8002856:	0018      	movs	r0, r3
 8002858:	f001 f8da 	bl	8003a10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_InitTick+0x64>)
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b003      	add	sp, #12
 800286e:	bd90      	pop	{r4, r7, pc}
 8002870:	20000004 	.word	0x20000004
 8002874:	2000000c 	.word	0x2000000c
 8002878:	20000008 	.word	0x20000008

0800287c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_IncTick+0x1c>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	001a      	movs	r2, r3
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_IncTick+0x20>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	18d2      	adds	r2, r2, r3
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <HAL_IncTick+0x20>)
 800288e:	601a      	str	r2, [r3, #0]
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	2000000c 	.word	0x2000000c
 800289c:	2000115c 	.word	0x2000115c

080028a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  return uwTick;
 80028a4:	4b02      	ldr	r3, [pc, #8]	; (80028b0 <HAL_GetTick+0x10>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	2000115c 	.word	0x2000115c

080028b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028bc:	f7ff fff0 	bl	80028a0 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3301      	adds	r3, #1
 80028cc:	d005      	beq.n	80028da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_Delay+0x44>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	001a      	movs	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	189b      	adds	r3, r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	f7ff ffe0 	bl	80028a0 <HAL_GetTick>
 80028e0:	0002      	movs	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d8f7      	bhi.n	80028dc <HAL_Delay+0x28>
  {
  }
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b004      	add	sp, #16
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	2000000c 	.word	0x2000000c

080028fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002904:	230f      	movs	r3, #15
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e125      	b.n	8002b66 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2234      	movs	r2, #52	; 0x34
 800292c:	2100      	movs	r1, #0
 800292e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f7ff fdd8 	bl	80024e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	2210      	movs	r2, #16
 800293e:	4013      	ands	r3, r2
 8002940:	d000      	beq.n	8002944 <HAL_ADC_Init+0x48>
 8002942:	e103      	b.n	8002b4c <HAL_ADC_Init+0x250>
 8002944:	230f      	movs	r3, #15
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d000      	beq.n	8002950 <HAL_ADC_Init+0x54>
 800294e:	e0fd      	b.n	8002b4c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2204      	movs	r2, #4
 8002958:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800295a:	d000      	beq.n	800295e <HAL_ADC_Init+0x62>
 800295c:	e0f6      	b.n	8002b4c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	4a83      	ldr	r2, [pc, #524]	; (8002b70 <HAL_ADC_Init+0x274>)
 8002964:	4013      	ands	r3, r2
 8002966:	2202      	movs	r2, #2
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2203      	movs	r2, #3
 8002976:	4013      	ands	r3, r2
 8002978:	2b01      	cmp	r3, #1
 800297a:	d112      	bne.n	80029a2 <HAL_ADC_Init+0xa6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2201      	movs	r2, #1
 8002984:	4013      	ands	r3, r2
 8002986:	2b01      	cmp	r3, #1
 8002988:	d009      	beq.n	800299e <HAL_ADC_Init+0xa2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	401a      	ands	r2, r3
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	429a      	cmp	r2, r3
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_Init+0xa6>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_ADC_Init+0xa8>
 80029a2:	2300      	movs	r3, #0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d116      	bne.n	80029d6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2218      	movs	r2, #24
 80029b0:	4393      	bics	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	0899      	lsrs	r1, r3, #2
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4964      	ldr	r1, [pc, #400]	; (8002b74 <HAL_ADC_Init+0x278>)
 80029e2:	400a      	ands	r2, r1
 80029e4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7e1b      	ldrb	r3, [r3, #24]
 80029ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7e5b      	ldrb	r3, [r3, #25]
 80029f0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7e9b      	ldrb	r3, [r3, #26]
 80029f8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80029fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d002      	beq.n	8002a0a <HAL_ADC_Init+0x10e>
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	015b      	lsls	r3, r3, #5
 8002a08:	e000      	b.n	8002a0c <HAL_ADC_Init+0x110>
 8002a0a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002a0c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002a12:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADC_Init+0x124>
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	e000      	b.n	8002a22 <HAL_ADC_Init+0x126>
 8002a20:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002a22:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2124      	movs	r1, #36	; 0x24
 8002a28:	5c5b      	ldrb	r3, [r3, r1]
 8002a2a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002a2c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7edb      	ldrb	r3, [r3, #27]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d115      	bne.n	8002a68 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	7e9b      	ldrb	r3, [r3, #26]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d105      	bne.n	8002a50 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	0252      	lsls	r2, r2, #9
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	e00b      	b.n	8002a68 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	2220      	movs	r2, #32
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	2201      	movs	r2, #1
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	23c2      	movs	r3, #194	; 0xc2
 8002a6e:	33ff      	adds	r3, #255	; 0xff
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d007      	beq.n	8002a84 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68d9      	ldr	r1, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	055b      	lsls	r3, r3, #21
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d01b      	beq.n	8002ad8 <HAL_ADC_Init+0x1dc>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d017      	beq.n	8002ad8 <HAL_ADC_Init+0x1dc>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d013      	beq.n	8002ad8 <HAL_ADC_Init+0x1dc>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d00f      	beq.n	8002ad8 <HAL_ADC_Init+0x1dc>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d00b      	beq.n	8002ad8 <HAL_ADC_Init+0x1dc>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d007      	beq.n	8002ad8 <HAL_ADC_Init+0x1dc>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	2b06      	cmp	r3, #6
 8002ace:	d003      	beq.n	8002ad8 <HAL_ADC_Init+0x1dc>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	2b07      	cmp	r3, #7
 8002ad6:	d112      	bne.n	8002afe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2107      	movs	r1, #7
 8002ae4:	438a      	bics	r2, r1
 8002ae6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6959      	ldr	r1, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	2207      	movs	r2, #7
 8002af4:	401a      	ands	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a1c      	ldr	r2, [pc, #112]	; (8002b78 <HAL_ADC_Init+0x27c>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d10b      	bne.n	8002b26 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	2203      	movs	r2, #3
 8002b1a:	4393      	bics	r3, r2
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002b24:	e01c      	b.n	8002b60 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	2212      	movs	r2, #18
 8002b2c:	4393      	bics	r3, r2
 8002b2e:	2210      	movs	r2, #16
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002b42:	230f      	movs	r3, #15
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002b4a:	e009      	b.n	8002b60 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	2210      	movs	r2, #16
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002b58:	230f      	movs	r3, #15
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b60:	230f      	movs	r3, #15
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	781b      	ldrb	r3, [r3, #0]
}
 8002b66:	0018      	movs	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b004      	add	sp, #16
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	fffffefd 	.word	0xfffffefd
 8002b74:	fffe0219 	.word	0xfffe0219
 8002b78:	833fffe7 	.word	0x833fffe7

08002b7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b86:	230f      	movs	r3, #15
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	055b      	lsls	r3, r3, #21
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d011      	beq.n	8002bc2 <HAL_ADC_ConfigChannel+0x46>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_ADC_ConfigChannel+0x46>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d009      	beq.n	8002bc2 <HAL_ADC_ConfigChannel+0x46>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d005      	beq.n	8002bc2 <HAL_ADC_ConfigChannel+0x46>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d001      	beq.n	8002bc2 <HAL_ADC_ConfigChannel+0x46>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2234      	movs	r2, #52	; 0x34
 8002bc6:	5c9b      	ldrb	r3, [r3, r2]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x54>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0d0      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x1f6>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2234      	movs	r2, #52	; 0x34
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2204      	movs	r2, #4
 8002be0:	4013      	ands	r3, r2
 8002be2:	d000      	beq.n	8002be6 <HAL_ADC_ConfigChannel+0x6a>
 8002be4:	e0b4      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4a64      	ldr	r2, [pc, #400]	; (8002d7c <HAL_ADC_ConfigChannel+0x200>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d100      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x76>
 8002bf0:	e082      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	055b      	lsls	r3, r3, #21
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d037      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x108>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d033      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x108>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d02f      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x108>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d02b      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x108>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d027      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x108>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d023      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x108>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	2b06      	cmp	r3, #6
 8002c42:	d01f      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x108>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	2b07      	cmp	r3, #7
 8002c4a:	d01b      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	2107      	movs	r1, #7
 8002c58:	400b      	ands	r3, r1
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d012      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2107      	movs	r1, #7
 8002c6a:	438a      	bics	r2, r1
 8002c6c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6959      	ldr	r1, [r3, #20]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2207      	movs	r2, #7
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d007      	beq.n	8002c9c <HAL_ADC_ConfigChannel+0x120>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b11      	cmp	r3, #17
 8002c92:	d003      	beq.n	8002c9c <HAL_ADC_ConfigChannel+0x120>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b12      	cmp	r3, #18
 8002c9a:	d163      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c9c:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <HAL_ADC_ConfigChannel+0x204>)
 8002c9e:	6819      	ldr	r1, [r3, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d009      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0x140>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b11      	cmp	r3, #17
 8002cae:	d102      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x13a>
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	03db      	lsls	r3, r3, #15
 8002cb4:	e004      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x144>
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	045b      	lsls	r3, r3, #17
 8002cba:	e001      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x144>
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	041b      	lsls	r3, r3, #16
 8002cc0:	4a2f      	ldr	r2, [pc, #188]	; (8002d80 <HAL_ADC_ConfigChannel+0x204>)
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d14a      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cce:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <HAL_ADC_ConfigChannel+0x208>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	492d      	ldr	r1, [pc, #180]	; (8002d88 <HAL_ADC_ConfigChannel+0x20c>)
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7fd fa15 	bl	8000104 <__udivsi3>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	001a      	movs	r2, r3
 8002cde:	0013      	movs	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ce8:	e002      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f9      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x16e>
 8002cf6:	e035      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2101      	movs	r1, #1
 8002d04:	4099      	lsls	r1, r3
 8002d06:	000b      	movs	r3, r1
 8002d08:	43d9      	mvns	r1, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	400a      	ands	r2, r1
 8002d10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d007      	beq.n	8002d2a <HAL_ADC_ConfigChannel+0x1ae>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b11      	cmp	r3, #17
 8002d20:	d003      	beq.n	8002d2a <HAL_ADC_ConfigChannel+0x1ae>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b12      	cmp	r3, #18
 8002d28:	d11c      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <HAL_ADC_ConfigChannel+0x204>)
 8002d2c:	6819      	ldr	r1, [r3, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d007      	beq.n	8002d46 <HAL_ADC_ConfigChannel+0x1ca>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b11      	cmp	r3, #17
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x1c6>
 8002d3e:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <HAL_ADC_ConfigChannel+0x210>)
 8002d40:	e002      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x1cc>
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_ADC_ConfigChannel+0x214>)
 8002d44:	e000      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x1cc>
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_ADC_ConfigChannel+0x218>)
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <HAL_ADC_ConfigChannel+0x204>)
 8002d4a:	400b      	ands	r3, r1
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e009      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	2220      	movs	r2, #32
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002d5c:	230f      	movs	r3, #15
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2234      	movs	r2, #52	; 0x34
 8002d68:	2100      	movs	r1, #0
 8002d6a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	781b      	ldrb	r3, [r3, #0]
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	00001001 	.word	0x00001001
 8002d80:	40012708 	.word	0x40012708
 8002d84:	20000004 	.word	0x20000004
 8002d88:	000f4240 	.word	0x000f4240
 8002d8c:	ffbfffff 	.word	0xffbfffff
 8002d90:	feffffff 	.word	0xfeffffff
 8002d94:	ff7fffff 	.word	0xff7fffff

08002d98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e0f0      	b.n	8002f8c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	5c9b      	ldrb	r3, [r3, r2]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7ff fbdb 	bl	8002574 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dce:	f7ff fd67 	bl	80028a0 <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002dd6:	e013      	b.n	8002e00 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002dd8:	f7ff fd62 	bl	80028a0 <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b0a      	cmp	r3, #10
 8002de4:	d90c      	bls.n	8002e00 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	0292      	lsls	r2, r2, #10
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	2105      	movs	r1, #5
 8002dfa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0c5      	b.n	8002f8c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d0e5      	beq.n	8002dd8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2102      	movs	r1, #2
 8002e18:	438a      	bics	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e1c:	f7ff fd40 	bl	80028a0 <HAL_GetTick>
 8002e20:	0003      	movs	r3, r0
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e24:	e013      	b.n	8002e4e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e26:	f7ff fd3b 	bl	80028a0 <HAL_GetTick>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b0a      	cmp	r3, #10
 8002e32:	d90c      	bls.n	8002e4e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	2280      	movs	r2, #128	; 0x80
 8002e3a:	0292      	lsls	r2, r2, #10
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	2105      	movs	r1, #5
 8002e48:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e09e      	b.n	8002f8c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	4013      	ands	r3, r2
 8002e58:	d1e5      	bne.n	8002e26 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	7e1b      	ldrb	r3, [r3, #24]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d108      	bne.n	8002e74 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e007      	b.n	8002e84 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	438a      	bics	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7e5b      	ldrb	r3, [r3, #25]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d108      	bne.n	8002e9e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2140      	movs	r1, #64	; 0x40
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e007      	b.n	8002eae <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2140      	movs	r1, #64	; 0x40
 8002eaa:	438a      	bics	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7e9b      	ldrb	r3, [r3, #26]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d108      	bne.n	8002ec8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2120      	movs	r1, #32
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e007      	b.n	8002ed8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2120      	movs	r1, #32
 8002ed4:	438a      	bics	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7edb      	ldrb	r3, [r3, #27]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d108      	bne.n	8002ef2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2110      	movs	r1, #16
 8002eec:	438a      	bics	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	e007      	b.n	8002f02 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2110      	movs	r1, #16
 8002efe:	430a      	orrs	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	7f1b      	ldrb	r3, [r3, #28]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d108      	bne.n	8002f1c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2108      	movs	r1, #8
 8002f16:	430a      	orrs	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	e007      	b.n	8002f2c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2108      	movs	r1, #8
 8002f28:	438a      	bics	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7f5b      	ldrb	r3, [r3, #29]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d108      	bne.n	8002f46 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2104      	movs	r1, #4
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e007      	b.n	8002f56 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2104      	movs	r1, #4
 8002f52:	438a      	bics	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	0011      	movs	r1, r2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	1e5a      	subs	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	2101      	movs	r1, #1
 8002f88:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fa4:	2013      	movs	r0, #19
 8002fa6:	183b      	adds	r3, r7, r0
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	2120      	movs	r1, #32
 8002fac:	5c52      	ldrb	r2, [r2, r1]
 8002fae:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	18bb      	adds	r3, r7, r2
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d004      	beq.n	8002fc4 <HAL_CAN_ConfigFilter+0x30>
 8002fba:	18bb      	adds	r3, r7, r2
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d000      	beq.n	8002fc4 <HAL_CAN_ConfigFilter+0x30>
 8002fc2:	e0cd      	b.n	8003160 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	58d3      	ldr	r3, [r2, r3]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	0011      	movs	r1, r2
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	221f      	movs	r2, #31
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	0013      	movs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	2387      	movs	r3, #135	; 0x87
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	58d3      	ldr	r3, [r2, r3]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	43d2      	mvns	r2, r2
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	0011      	movs	r1, r2
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	2387      	movs	r3, #135	; 0x87
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d129      	bne.n	800305e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	2383      	movs	r3, #131	; 0x83
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	58d3      	ldr	r3, [r2, r3]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	43d2      	mvns	r2, r2
 8003016:	401a      	ands	r2, r3
 8003018:	0011      	movs	r1, r2
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	2383      	movs	r3, #131	; 0x83
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	041b      	lsls	r3, r3, #16
 800302e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003034:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3248      	adds	r2, #72	; 0x48
 800303a:	00d2      	lsls	r2, r2, #3
 800303c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003050:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003052:	6979      	ldr	r1, [r7, #20]
 8003054:	3348      	adds	r3, #72	; 0x48
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	18cb      	adds	r3, r1, r3
 800305a:	3304      	adds	r3, #4
 800305c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d128      	bne.n	80030b8 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	2383      	movs	r3, #131	; 0x83
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	58d2      	ldr	r2, [r2, r3]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	431a      	orrs	r2, r3
 8003072:	0011      	movs	r1, r2
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	2383      	movs	r3, #131	; 0x83
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	041b      	lsls	r3, r3, #16
 8003088:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800308e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	3248      	adds	r2, #72	; 0x48
 8003094:	00d2      	lsls	r2, r2, #3
 8003096:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030ac:	6979      	ldr	r1, [r7, #20]
 80030ae:	3348      	adds	r3, #72	; 0x48
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	18cb      	adds	r3, r1, r3
 80030b4:	3304      	adds	r3, #4
 80030b6:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10c      	bne.n	80030da <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	2381      	movs	r3, #129	; 0x81
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	58d3      	ldr	r3, [r2, r3]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	43d2      	mvns	r2, r2
 80030cc:	401a      	ands	r2, r3
 80030ce:	0011      	movs	r1, r2
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	2381      	movs	r3, #129	; 0x81
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	50d1      	str	r1, [r2, r3]
 80030d8:	e00a      	b.n	80030f0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	2381      	movs	r3, #129	; 0x81
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	58d2      	ldr	r2, [r2, r3]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	0011      	movs	r1, r2
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	2381      	movs	r3, #129	; 0x81
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10c      	bne.n	8003112 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	2385      	movs	r3, #133	; 0x85
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	58d3      	ldr	r3, [r2, r3]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	43d2      	mvns	r2, r2
 8003104:	401a      	ands	r2, r3
 8003106:	0011      	movs	r1, r2
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	2385      	movs	r3, #133	; 0x85
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	50d1      	str	r1, [r2, r3]
 8003110:	e00a      	b.n	8003128 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	2385      	movs	r3, #133	; 0x85
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	58d2      	ldr	r2, [r2, r3]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	431a      	orrs	r2, r3
 800311e:	0011      	movs	r1, r2
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	2385      	movs	r3, #133	; 0x85
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10a      	bne.n	8003146 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	2387      	movs	r3, #135	; 0x87
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	58d2      	ldr	r2, [r2, r3]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	431a      	orrs	r2, r3
 800313c:	0011      	movs	r1, r2
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	2387      	movs	r3, #135	; 0x87
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	58d3      	ldr	r3, [r2, r3]
 800314e:	2201      	movs	r2, #1
 8003150:	4393      	bics	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e007      	b.n	8003170 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	02d2      	lsls	r2, r2, #11
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
  }
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b006      	add	sp, #24
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	5c9b      	ldrb	r3, [r3, r2]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d12f      	bne.n	80031ec <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	2102      	movs	r1, #2
 8003192:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2101      	movs	r1, #1
 80031a0:	438a      	bics	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031a4:	f7ff fb7c 	bl	80028a0 <HAL_GetTick>
 80031a8:	0003      	movs	r3, r0
 80031aa:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031ac:	e013      	b.n	80031d6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031ae:	f7ff fb77 	bl	80028a0 <HAL_GetTick>
 80031b2:	0002      	movs	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b0a      	cmp	r3, #10
 80031ba:	d90c      	bls.n	80031d6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	2280      	movs	r2, #128	; 0x80
 80031c2:	0292      	lsls	r2, r2, #10
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	2105      	movs	r1, #5
 80031d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e012      	b.n	80031fc <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	4013      	ands	r3, r2
 80031e0:	d1e5      	bne.n	80031ae <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e007      	b.n	80031fc <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	0312      	lsls	r2, r2, #12
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
  }
}
 80031fc:	0018      	movs	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	b004      	add	sp, #16
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003212:	2017      	movs	r0, #23
 8003214:	183b      	adds	r3, r7, r0
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	2120      	movs	r1, #32
 800321a:	5c52      	ldrb	r2, [r2, r1]
 800321c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800321e:	0002      	movs	r2, r0
 8003220:	18bb      	adds	r3, r7, r2
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d004      	beq.n	8003232 <HAL_CAN_GetRxMessage+0x2e>
 8003228:	18bb      	adds	r3, r7, r2
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d000      	beq.n	8003232 <HAL_CAN_GetRxMessage+0x2e>
 8003230:	e0f8      	b.n	8003424 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10e      	bne.n	8003256 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2203      	movs	r2, #3
 8003240:	4013      	ands	r3, r2
 8003242:	d117      	bne.n	8003274 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2280      	movs	r2, #128	; 0x80
 800324a:	0392      	lsls	r2, r2, #14
 800324c:	431a      	orrs	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0ee      	b.n	8003434 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2203      	movs	r2, #3
 800325e:	4013      	ands	r3, r2
 8003260:	d108      	bne.n	8003274 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2280      	movs	r2, #128	; 0x80
 8003268:	0392      	lsls	r2, r2, #14
 800326a:	431a      	orrs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0df      	b.n	8003434 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	321b      	adds	r2, #27
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	58d3      	ldr	r3, [r2, r3]
 8003280:	2204      	movs	r2, #4
 8003282:	401a      	ands	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	321b      	adds	r2, #27
 8003298:	0112      	lsls	r2, r2, #4
 800329a:	58d3      	ldr	r3, [r2, r3]
 800329c:	0d5b      	lsrs	r3, r3, #21
 800329e:	055b      	lsls	r3, r3, #21
 80032a0:	0d5a      	lsrs	r2, r3, #21
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e00a      	b.n	80032be <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	321b      	adds	r2, #27
 80032b0:	0112      	lsls	r2, r2, #4
 80032b2:	58d3      	ldr	r3, [r2, r3]
 80032b4:	08db      	lsrs	r3, r3, #3
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	08da      	lsrs	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	321b      	adds	r2, #27
 80032c6:	0112      	lsls	r2, r2, #4
 80032c8:	58d3      	ldr	r3, [r2, r3]
 80032ca:	2202      	movs	r2, #2
 80032cc:	401a      	ands	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	331b      	adds	r3, #27
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	18d3      	adds	r3, r2, r3
 80032de:	3304      	adds	r3, #4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	220f      	movs	r2, #15
 80032e4:	401a      	ands	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	331b      	adds	r3, #27
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	18d3      	adds	r3, r2, r3
 80032f6:	3304      	adds	r3, #4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	0a1b      	lsrs	r3, r3, #8
 80032fc:	22ff      	movs	r2, #255	; 0xff
 80032fe:	401a      	ands	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	331b      	adds	r3, #27
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	18d3      	adds	r3, r2, r3
 8003310:	3304      	adds	r3, #4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	0c1a      	lsrs	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6819      	ldr	r1, [r3, #0]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	23dc      	movs	r3, #220	; 0xdc
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	188a      	adds	r2, r1, r2
 800332c:	18d3      	adds	r3, r2, r3
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	23dc      	movs	r3, #220	; 0xdc
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	0112      	lsls	r2, r2, #4
 8003342:	188a      	adds	r2, r1, r2
 8003344:	18d3      	adds	r3, r2, r3
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	0a1a      	lsrs	r2, r3, #8
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6819      	ldr	r1, [r3, #0]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	23dc      	movs	r3, #220	; 0xdc
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	188a      	adds	r2, r1, r2
 8003360:	18d3      	adds	r3, r2, r3
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0c1a      	lsrs	r2, r3, #16
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	3302      	adds	r3, #2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	23dc      	movs	r3, #220	; 0xdc
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	0112      	lsls	r2, r2, #4
 800337a:	188a      	adds	r2, r1, r2
 800337c:	18d3      	adds	r3, r2, r3
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	0e1a      	lsrs	r2, r3, #24
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	3303      	adds	r3, #3
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6819      	ldr	r1, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	23de      	movs	r3, #222	; 0xde
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	0112      	lsls	r2, r2, #4
 8003396:	188a      	adds	r2, r1, r2
 8003398:	18d3      	adds	r3, r2, r3
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	3304      	adds	r3, #4
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6819      	ldr	r1, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	23de      	movs	r3, #222	; 0xde
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	0112      	lsls	r2, r2, #4
 80033b0:	188a      	adds	r2, r1, r2
 80033b2:	18d3      	adds	r3, r2, r3
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	0a1a      	lsrs	r2, r3, #8
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	3305      	adds	r3, #5
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6819      	ldr	r1, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	23de      	movs	r3, #222	; 0xde
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	0112      	lsls	r2, r2, #4
 80033cc:	188a      	adds	r2, r1, r2
 80033ce:	18d3      	adds	r3, r2, r3
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	0c1a      	lsrs	r2, r3, #16
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	3306      	adds	r3, #6
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6819      	ldr	r1, [r3, #0]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	23de      	movs	r3, #222	; 0xde
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	0112      	lsls	r2, r2, #4
 80033e8:	188a      	adds	r2, r1, r2
 80033ea:	18d3      	adds	r3, r2, r3
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	0e1a      	lsrs	r2, r3, #24
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	3307      	adds	r3, #7
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d108      	bne.n	8003410 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2120      	movs	r1, #32
 800340a:	430a      	orrs	r2, r1
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	e007      	b.n	8003420 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2120      	movs	r1, #32
 800341c:	430a      	orrs	r2, r1
 800341e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e007      	b.n	8003434 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	02d2      	lsls	r2, r2, #11
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
  }
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b006      	add	sp, #24
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003446:	200f      	movs	r0, #15
 8003448:	183b      	adds	r3, r7, r0
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	2120      	movs	r1, #32
 800344e:	5c52      	ldrb	r2, [r2, r1]
 8003450:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003452:	0002      	movs	r2, r0
 8003454:	18bb      	adds	r3, r7, r2
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d003      	beq.n	8003464 <HAL_CAN_ActivateNotification+0x28>
 800345c:	18bb      	adds	r3, r7, r2
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d109      	bne.n	8003478 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6959      	ldr	r1, [r3, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e007      	b.n	8003488 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	02d2      	lsls	r2, r2, #11
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
  }
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	b004      	add	sp, #16
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	2201      	movs	r2, #1
 80034d0:	4013      	ands	r3, r2
 80034d2:	d100      	bne.n	80034d6 <HAL_CAN_IRQHandler+0x46>
 80034d4:	e084      	b.n	80035e0 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2201      	movs	r2, #1
 80034da:	4013      	ands	r3, r2
 80034dc:	d024      	beq.n	8003528 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2201      	movs	r2, #1
 80034e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2202      	movs	r2, #2
 80034ea:	4013      	ands	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 f981 	bl	80037f8 <HAL_CAN_TxMailbox0CompleteCallback>
 80034f6:	e017      	b.n	8003528 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2204      	movs	r2, #4
 80034fc:	4013      	ands	r3, r2
 80034fe:	d005      	beq.n	800350c <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	0112      	lsls	r2, r2, #4
 8003506:	4313      	orrs	r3, r2
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
 800350a:	e00d      	b.n	8003528 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2208      	movs	r2, #8
 8003510:	4013      	ands	r3, r2
 8003512:	d005      	beq.n	8003520 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	0152      	lsls	r2, r2, #5
 800351a:	4313      	orrs	r3, r2
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
 800351e:	e003      	b.n	8003528 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 f980 	bl	8003828 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4013      	ands	r3, r2
 8003530:	d028      	beq.n	8003584 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	0052      	lsls	r2, r2, #1
 800353a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4013      	ands	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0018      	movs	r0, r3
 800354a:	f000 f95d 	bl	8003808 <HAL_CAN_TxMailbox1CompleteCallback>
 800354e:	e019      	b.n	8003584 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4013      	ands	r3, r2
 8003558:	d005      	beq.n	8003566 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	0192      	lsls	r2, r2, #6
 8003560:	4313      	orrs	r3, r2
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
 8003564:	e00e      	b.n	8003584 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	4013      	ands	r3, r2
 800356e:	d005      	beq.n	800357c <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	01d2      	lsls	r2, r2, #7
 8003576:	4313      	orrs	r3, r2
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	e003      	b.n	8003584 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	0018      	movs	r0, r3
 8003580:	f000 f95a 	bl	8003838 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	025b      	lsls	r3, r3, #9
 800358a:	4013      	ands	r3, r2
 800358c:	d028      	beq.n	80035e0 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	0252      	lsls	r2, r2, #9
 8003596:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	029b      	lsls	r3, r3, #10
 800359e:	4013      	ands	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f000 f937 	bl	8003818 <HAL_CAN_TxMailbox2CompleteCallback>
 80035aa:	e019      	b.n	80035e0 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	02db      	lsls	r3, r3, #11
 80035b2:	4013      	ands	r3, r2
 80035b4:	d005      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	0212      	lsls	r2, r2, #8
 80035bc:	4313      	orrs	r3, r2
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
 80035c0:	e00e      	b.n	80035e0 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	031b      	lsls	r3, r3, #12
 80035c8:	4013      	ands	r3, r2
 80035ca:	d005      	beq.n	80035d8 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	0252      	lsls	r2, r2, #9
 80035d2:	4313      	orrs	r3, r2
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	e003      	b.n	80035e0 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 f934 	bl	8003848 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	2208      	movs	r2, #8
 80035e4:	4013      	ands	r3, r2
 80035e6:	d00c      	beq.n	8003602 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2210      	movs	r2, #16
 80035ec:	4013      	ands	r3, r2
 80035ee:	d008      	beq.n	8003602 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	0092      	lsls	r2, r2, #2
 80035f6:	4313      	orrs	r3, r2
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2210      	movs	r2, #16
 8003600:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	2204      	movs	r2, #4
 8003606:	4013      	ands	r3, r2
 8003608:	d00b      	beq.n	8003622 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2208      	movs	r2, #8
 800360e:	4013      	ands	r3, r2
 8003610:	d007      	beq.n	8003622 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2208      	movs	r2, #8
 8003618:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	0018      	movs	r0, r3
 800361e:	f000 f91b 	bl	8003858 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	2202      	movs	r2, #2
 8003626:	4013      	ands	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2203      	movs	r2, #3
 8003632:	4013      	ands	r3, r2
 8003634:	d003      	beq.n	800363e <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	0018      	movs	r0, r3
 800363a:	f7fe fc17 	bl	8001e6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	2240      	movs	r2, #64	; 0x40
 8003642:	4013      	ands	r3, r2
 8003644:	d00c      	beq.n	8003660 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2210      	movs	r2, #16
 800364a:	4013      	ands	r3, r2
 800364c:	d008      	beq.n	8003660 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	00d2      	lsls	r2, r2, #3
 8003654:	4313      	orrs	r3, r2
 8003656:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2210      	movs	r2, #16
 800365e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	2220      	movs	r2, #32
 8003664:	4013      	ands	r3, r2
 8003666:	d00b      	beq.n	8003680 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2208      	movs	r2, #8
 800366c:	4013      	ands	r3, r2
 800366e:	d007      	beq.n	8003680 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2208      	movs	r2, #8
 8003676:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	0018      	movs	r0, r3
 800367c:	f000 f8fc 	bl	8003878 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	2210      	movs	r2, #16
 8003684:	4013      	ands	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2203      	movs	r2, #3
 8003690:	4013      	ands	r3, r2
 8003692:	d003      	beq.n	800369c <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	0018      	movs	r0, r3
 8003698:	f000 f8e6 	bl	8003868 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800369c:	6a3a      	ldr	r2, [r7, #32]
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	029b      	lsls	r3, r3, #10
 80036a2:	4013      	ands	r3, r2
 80036a4:	d00b      	beq.n	80036be <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	2210      	movs	r2, #16
 80036aa:	4013      	ands	r3, r2
 80036ac:	d007      	beq.n	80036be <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2210      	movs	r2, #16
 80036b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f000 f8e5 	bl	8003888 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80036be:	6a3a      	ldr	r2, [r7, #32]
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	025b      	lsls	r3, r3, #9
 80036c4:	4013      	ands	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2208      	movs	r2, #8
 80036cc:	4013      	ands	r3, r2
 80036ce:	d007      	beq.n	80036e0 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2208      	movs	r2, #8
 80036d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 f8dc 	bl	8003898 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	4013      	ands	r3, r2
 80036e8:	d100      	bne.n	80036ec <HAL_CAN_IRQHandler+0x25c>
 80036ea:	e074      	b.n	80037d6 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2204      	movs	r2, #4
 80036f0:	4013      	ands	r3, r2
 80036f2:	d100      	bne.n	80036f6 <HAL_CAN_IRQHandler+0x266>
 80036f4:	e06b      	b.n	80037ce <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036f6:	6a3a      	ldr	r2, [r7, #32]
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4013      	ands	r3, r2
 80036fe:	d007      	beq.n	8003710 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003706:	d003      	beq.n	8003710 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	2201      	movs	r2, #1
 800370c:	4313      	orrs	r3, r2
 800370e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003710:	6a3a      	ldr	r2, [r7, #32]
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4013      	ands	r3, r2
 8003718:	d007      	beq.n	800372a <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2202      	movs	r2, #2
 800371e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003720:	d003      	beq.n	800372a <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	2202      	movs	r2, #2
 8003726:	4313      	orrs	r3, r2
 8003728:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800372a:	6a3a      	ldr	r2, [r7, #32]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4013      	ands	r3, r2
 8003732:	d007      	beq.n	8003744 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2204      	movs	r2, #4
 8003738:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800373a:	d003      	beq.n	8003744 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	2204      	movs	r2, #4
 8003740:	4313      	orrs	r3, r2
 8003742:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003744:	6a3a      	ldr	r2, [r7, #32]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	4013      	ands	r3, r2
 800374c:	d03f      	beq.n	80037ce <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2270      	movs	r2, #112	; 0x70
 8003752:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003754:	d03b      	beq.n	80037ce <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2270      	movs	r2, #112	; 0x70
 800375a:	4013      	ands	r3, r2
 800375c:	2b60      	cmp	r3, #96	; 0x60
 800375e:	d027      	beq.n	80037b0 <HAL_CAN_IRQHandler+0x320>
 8003760:	d82c      	bhi.n	80037bc <HAL_CAN_IRQHandler+0x32c>
 8003762:	2b50      	cmp	r3, #80	; 0x50
 8003764:	d01f      	beq.n	80037a6 <HAL_CAN_IRQHandler+0x316>
 8003766:	d829      	bhi.n	80037bc <HAL_CAN_IRQHandler+0x32c>
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d017      	beq.n	800379c <HAL_CAN_IRQHandler+0x30c>
 800376c:	d826      	bhi.n	80037bc <HAL_CAN_IRQHandler+0x32c>
 800376e:	2b30      	cmp	r3, #48	; 0x30
 8003770:	d00f      	beq.n	8003792 <HAL_CAN_IRQHandler+0x302>
 8003772:	d823      	bhi.n	80037bc <HAL_CAN_IRQHandler+0x32c>
 8003774:	2b10      	cmp	r3, #16
 8003776:	d002      	beq.n	800377e <HAL_CAN_IRQHandler+0x2ee>
 8003778:	2b20      	cmp	r3, #32
 800377a:	d005      	beq.n	8003788 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800377c:	e01e      	b.n	80037bc <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	2208      	movs	r2, #8
 8003782:	4313      	orrs	r3, r2
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003786:	e01a      	b.n	80037be <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	2210      	movs	r2, #16
 800378c:	4313      	orrs	r3, r2
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003790:	e015      	b.n	80037be <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	2220      	movs	r2, #32
 8003796:	4313      	orrs	r3, r2
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800379a:	e010      	b.n	80037be <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	2240      	movs	r2, #64	; 0x40
 80037a0:	4313      	orrs	r3, r2
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037a4:	e00b      	b.n	80037be <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	2280      	movs	r2, #128	; 0x80
 80037aa:	4313      	orrs	r3, r2
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037ae:	e006      	b.n	80037be <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	2280      	movs	r2, #128	; 0x80
 80037b4:	0052      	lsls	r2, r2, #1
 80037b6:	4313      	orrs	r3, r2
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037ba:	e000      	b.n	80037be <HAL_CAN_IRQHandler+0x32e>
            break;
 80037bc:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699a      	ldr	r2, [r3, #24]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2170      	movs	r1, #112	; 0x70
 80037ca:	438a      	bics	r2, r1
 80037cc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2204      	movs	r2, #4
 80037d4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 f85c 	bl	80038a8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b00a      	add	sp, #40	; 0x28
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b002      	add	sp, #8
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003810:	46c0      	nop			; (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	b002      	add	sp, #8
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b002      	add	sp, #8
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	b002      	add	sp, #8
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b002      	add	sp, #8
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b002      	add	sp, #8
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b002      	add	sp, #8
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	0002      	movs	r2, r0
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038c4:	1dfb      	adds	r3, r7, #7
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b7f      	cmp	r3, #127	; 0x7f
 80038ca:	d809      	bhi.n	80038e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038cc:	1dfb      	adds	r3, r7, #7
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	001a      	movs	r2, r3
 80038d2:	231f      	movs	r3, #31
 80038d4:	401a      	ands	r2, r3
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <__NVIC_EnableIRQ+0x30>)
 80038d8:	2101      	movs	r1, #1
 80038da:	4091      	lsls	r1, r2
 80038dc:	000a      	movs	r2, r1
 80038de:	601a      	str	r2, [r3, #0]
  }
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b002      	add	sp, #8
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	e000e100 	.word	0xe000e100

080038ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	0002      	movs	r2, r0
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	1dfb      	adds	r3, r7, #7
 80038f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038fa:	1dfb      	adds	r3, r7, #7
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003900:	d828      	bhi.n	8003954 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003902:	4a2f      	ldr	r2, [pc, #188]	; (80039c0 <__NVIC_SetPriority+0xd4>)
 8003904:	1dfb      	adds	r3, r7, #7
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b25b      	sxtb	r3, r3
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	33c0      	adds	r3, #192	; 0xc0
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	589b      	ldr	r3, [r3, r2]
 8003912:	1dfa      	adds	r2, r7, #7
 8003914:	7812      	ldrb	r2, [r2, #0]
 8003916:	0011      	movs	r1, r2
 8003918:	2203      	movs	r2, #3
 800391a:	400a      	ands	r2, r1
 800391c:	00d2      	lsls	r2, r2, #3
 800391e:	21ff      	movs	r1, #255	; 0xff
 8003920:	4091      	lsls	r1, r2
 8003922:	000a      	movs	r2, r1
 8003924:	43d2      	mvns	r2, r2
 8003926:	401a      	ands	r2, r3
 8003928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	019b      	lsls	r3, r3, #6
 800392e:	22ff      	movs	r2, #255	; 0xff
 8003930:	401a      	ands	r2, r3
 8003932:	1dfb      	adds	r3, r7, #7
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	0018      	movs	r0, r3
 8003938:	2303      	movs	r3, #3
 800393a:	4003      	ands	r3, r0
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003940:	481f      	ldr	r0, [pc, #124]	; (80039c0 <__NVIC_SetPriority+0xd4>)
 8003942:	1dfb      	adds	r3, r7, #7
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	b25b      	sxtb	r3, r3
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	430a      	orrs	r2, r1
 800394c:	33c0      	adds	r3, #192	; 0xc0
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003952:	e031      	b.n	80039b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003954:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <__NVIC_SetPriority+0xd8>)
 8003956:	1dfb      	adds	r3, r7, #7
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	0019      	movs	r1, r3
 800395c:	230f      	movs	r3, #15
 800395e:	400b      	ands	r3, r1
 8003960:	3b08      	subs	r3, #8
 8003962:	089b      	lsrs	r3, r3, #2
 8003964:	3306      	adds	r3, #6
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	18d3      	adds	r3, r2, r3
 800396a:	3304      	adds	r3, #4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	1dfa      	adds	r2, r7, #7
 8003970:	7812      	ldrb	r2, [r2, #0]
 8003972:	0011      	movs	r1, r2
 8003974:	2203      	movs	r2, #3
 8003976:	400a      	ands	r2, r1
 8003978:	00d2      	lsls	r2, r2, #3
 800397a:	21ff      	movs	r1, #255	; 0xff
 800397c:	4091      	lsls	r1, r2
 800397e:	000a      	movs	r2, r1
 8003980:	43d2      	mvns	r2, r2
 8003982:	401a      	ands	r2, r3
 8003984:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	019b      	lsls	r3, r3, #6
 800398a:	22ff      	movs	r2, #255	; 0xff
 800398c:	401a      	ands	r2, r3
 800398e:	1dfb      	adds	r3, r7, #7
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	0018      	movs	r0, r3
 8003994:	2303      	movs	r3, #3
 8003996:	4003      	ands	r3, r0
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800399c:	4809      	ldr	r0, [pc, #36]	; (80039c4 <__NVIC_SetPriority+0xd8>)
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	001c      	movs	r4, r3
 80039a4:	230f      	movs	r3, #15
 80039a6:	4023      	ands	r3, r4
 80039a8:	3b08      	subs	r3, #8
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	430a      	orrs	r2, r1
 80039ae:	3306      	adds	r3, #6
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	18c3      	adds	r3, r0, r3
 80039b4:	3304      	adds	r3, #4
 80039b6:	601a      	str	r2, [r3, #0]
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b003      	add	sp, #12
 80039be:	bd90      	pop	{r4, r7, pc}
 80039c0:	e000e100 	.word	0xe000e100
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	1e5a      	subs	r2, r3, #1
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	045b      	lsls	r3, r3, #17
 80039d8:	429a      	cmp	r2, r3
 80039da:	d301      	bcc.n	80039e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039dc:	2301      	movs	r3, #1
 80039de:	e010      	b.n	8003a02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <SysTick_Config+0x44>)
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	3a01      	subs	r2, #1
 80039e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e8:	2301      	movs	r3, #1
 80039ea:	425b      	negs	r3, r3
 80039ec:	2103      	movs	r1, #3
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7ff ff7c 	bl	80038ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <SysTick_Config+0x44>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039fa:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <SysTick_Config+0x44>)
 80039fc:	2207      	movs	r2, #7
 80039fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b002      	add	sp, #8
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	e000e010 	.word	0xe000e010

08003a10 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	210f      	movs	r1, #15
 8003a1c:	187b      	adds	r3, r7, r1
 8003a1e:	1c02      	adds	r2, r0, #0
 8003a20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	187b      	adds	r3, r7, r1
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	b25b      	sxtb	r3, r3
 8003a2a:	0011      	movs	r1, r2
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7ff ff5d 	bl	80038ec <__NVIC_SetPriority>
}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b004      	add	sp, #16
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	0002      	movs	r2, r0
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a46:	1dfb      	adds	r3, r7, #7
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	b25b      	sxtb	r3, r3
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7ff ff33 	bl	80038b8 <__NVIC_EnableIRQ>
}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b002      	add	sp, #8
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7ff ffaf 	bl	80039c8 <SysTick_Config>
 8003a6a:	0003      	movs	r3, r0
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b002      	add	sp, #8
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a82:	e155      	b.n	8003d30 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2101      	movs	r1, #1
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4091      	lsls	r1, r2
 8003a8e:	000a      	movs	r2, r1
 8003a90:	4013      	ands	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d100      	bne.n	8003a9c <HAL_GPIO_Init+0x28>
 8003a9a:	e146      	b.n	8003d2a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d005      	beq.n	8003ab4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2203      	movs	r2, #3
 8003aae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d130      	bne.n	8003b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2203      	movs	r2, #3
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	0013      	movs	r3, r2
 8003ac4:	43da      	mvns	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	0013      	movs	r3, r2
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aea:	2201      	movs	r2, #1
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	409a      	lsls	r2, r3
 8003af0:	0013      	movs	r3, r2
 8003af2:	43da      	mvns	r2, r3
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	2201      	movs	r2, #1
 8003b02:	401a      	ands	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	409a      	lsls	r2, r3
 8003b08:	0013      	movs	r3, r2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d017      	beq.n	8003b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	0013      	movs	r3, r2
 8003b32:	43da      	mvns	r2, r3
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	409a      	lsls	r2, r3
 8003b44:	0013      	movs	r3, r2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2203      	movs	r2, #3
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d123      	bne.n	8003ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	08da      	lsrs	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3208      	adds	r2, #8
 8003b66:	0092      	lsls	r2, r2, #2
 8003b68:	58d3      	ldr	r3, [r2, r3]
 8003b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2207      	movs	r2, #7
 8003b70:	4013      	ands	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	220f      	movs	r2, #15
 8003b76:	409a      	lsls	r2, r3
 8003b78:	0013      	movs	r3, r2
 8003b7a:	43da      	mvns	r2, r3
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2107      	movs	r1, #7
 8003b8a:	400b      	ands	r3, r1
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	0013      	movs	r3, r2
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	08da      	lsrs	r2, r3, #3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3208      	adds	r2, #8
 8003ba0:	0092      	lsls	r2, r2, #2
 8003ba2:	6939      	ldr	r1, [r7, #16]
 8003ba4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	0013      	movs	r3, r2
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	401a      	ands	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	0013      	movs	r3, r2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	23c0      	movs	r3, #192	; 0xc0
 8003be0:	029b      	lsls	r3, r3, #10
 8003be2:	4013      	ands	r3, r2
 8003be4:	d100      	bne.n	8003be8 <HAL_GPIO_Init+0x174>
 8003be6:	e0a0      	b.n	8003d2a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be8:	4b57      	ldr	r3, [pc, #348]	; (8003d48 <HAL_GPIO_Init+0x2d4>)
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	4b56      	ldr	r3, [pc, #344]	; (8003d48 <HAL_GPIO_Init+0x2d4>)
 8003bee:	2101      	movs	r1, #1
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	619a      	str	r2, [r3, #24]
 8003bf4:	4b54      	ldr	r3, [pc, #336]	; (8003d48 <HAL_GPIO_Init+0x2d4>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c00:	4a52      	ldr	r2, [pc, #328]	; (8003d4c <HAL_GPIO_Init+0x2d8>)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	089b      	lsrs	r3, r3, #2
 8003c06:	3302      	adds	r3, #2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	589b      	ldr	r3, [r3, r2]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2203      	movs	r2, #3
 8003c12:	4013      	ands	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	220f      	movs	r2, #15
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	0013      	movs	r3, r2
 8003c1c:	43da      	mvns	r2, r3
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	2390      	movs	r3, #144	; 0x90
 8003c28:	05db      	lsls	r3, r3, #23
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d019      	beq.n	8003c62 <HAL_GPIO_Init+0x1ee>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a47      	ldr	r2, [pc, #284]	; (8003d50 <HAL_GPIO_Init+0x2dc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_GPIO_Init+0x1ea>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a46      	ldr	r2, [pc, #280]	; (8003d54 <HAL_GPIO_Init+0x2e0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00d      	beq.n	8003c5a <HAL_GPIO_Init+0x1e6>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a45      	ldr	r2, [pc, #276]	; (8003d58 <HAL_GPIO_Init+0x2e4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <HAL_GPIO_Init+0x1e2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a44      	ldr	r2, [pc, #272]	; (8003d5c <HAL_GPIO_Init+0x2e8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_GPIO_Init+0x1de>
 8003c4e:	2304      	movs	r3, #4
 8003c50:	e008      	b.n	8003c64 <HAL_GPIO_Init+0x1f0>
 8003c52:	2305      	movs	r3, #5
 8003c54:	e006      	b.n	8003c64 <HAL_GPIO_Init+0x1f0>
 8003c56:	2303      	movs	r3, #3
 8003c58:	e004      	b.n	8003c64 <HAL_GPIO_Init+0x1f0>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e002      	b.n	8003c64 <HAL_GPIO_Init+0x1f0>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_GPIO_Init+0x1f0>
 8003c62:	2300      	movs	r3, #0
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	2103      	movs	r1, #3
 8003c68:	400a      	ands	r2, r1
 8003c6a:	0092      	lsls	r2, r2, #2
 8003c6c:	4093      	lsls	r3, r2
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c74:	4935      	ldr	r1, [pc, #212]	; (8003d4c <HAL_GPIO_Init+0x2d8>)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c82:	4b37      	ldr	r3, [pc, #220]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	025b      	lsls	r3, r3, #9
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003cac:	4b2c      	ldr	r3, [pc, #176]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	029b      	lsls	r3, r3, #10
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003cd0:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cd6:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	035b      	lsls	r3, r3, #13
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003cfa:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	43da      	mvns	r2, r3
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	039b      	lsls	r3, r3, #14
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d24:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	40da      	lsrs	r2, r3
 8003d38:	1e13      	subs	r3, r2, #0
 8003d3a:	d000      	beq.n	8003d3e <HAL_GPIO_Init+0x2ca>
 8003d3c:	e6a2      	b.n	8003a84 <HAL_GPIO_Init+0x10>
  } 
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b006      	add	sp, #24
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	48000400 	.word	0x48000400
 8003d54:	48000800 	.word	0x48000800
 8003d58:	48000c00 	.word	0x48000c00
 8003d5c:	48001000 	.word	0x48001000
 8003d60:	40010400 	.word	0x40010400

08003d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	0008      	movs	r0, r1
 8003d6e:	0011      	movs	r1, r2
 8003d70:	1cbb      	adds	r3, r7, #2
 8003d72:	1c02      	adds	r2, r0, #0
 8003d74:	801a      	strh	r2, [r3, #0]
 8003d76:	1c7b      	adds	r3, r7, #1
 8003d78:	1c0a      	adds	r2, r1, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d7c:	1c7b      	adds	r3, r7, #1
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d84:	1cbb      	adds	r3, r7, #2
 8003d86:	881a      	ldrh	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d8c:	e003      	b.n	8003d96 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d8e:	1cbb      	adds	r3, r7, #2
 8003d90:	881a      	ldrh	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	0002      	movs	r2, r0
 8003da8:	1dbb      	adds	r3, r7, #6
 8003daa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	1dba      	adds	r2, r7, #6
 8003db2:	8812      	ldrh	r2, [r2, #0]
 8003db4:	4013      	ands	r3, r2
 8003db6:	d008      	beq.n	8003dca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003dba:	1dba      	adds	r2, r7, #6
 8003dbc:	8812      	ldrh	r2, [r2, #0]
 8003dbe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dc0:	1dbb      	adds	r3, r7, #6
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7fe f86d 	bl	8001ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b002      	add	sp, #8
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	40010400 	.word	0x40010400

08003dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f000 fb76 	bl	80044d8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2201      	movs	r2, #1
 8003df2:	4013      	ands	r3, r2
 8003df4:	d100      	bne.n	8003df8 <HAL_RCC_OscConfig+0x20>
 8003df6:	e08e      	b.n	8003f16 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003df8:	4bc5      	ldr	r3, [pc, #788]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	220c      	movs	r2, #12
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d00e      	beq.n	8003e22 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e04:	4bc2      	ldr	r3, [pc, #776]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	220c      	movs	r2, #12
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d117      	bne.n	8003e40 <HAL_RCC_OscConfig+0x68>
 8003e10:	4bbf      	ldr	r3, [pc, #764]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	23c0      	movs	r3, #192	; 0xc0
 8003e16:	025b      	lsls	r3, r3, #9
 8003e18:	401a      	ands	r2, r3
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	025b      	lsls	r3, r3, #9
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d10e      	bne.n	8003e40 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e22:	4bbb      	ldr	r3, [pc, #748]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	029b      	lsls	r3, r3, #10
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d100      	bne.n	8003e30 <HAL_RCC_OscConfig+0x58>
 8003e2e:	e071      	b.n	8003f14 <HAL_RCC_OscConfig+0x13c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d000      	beq.n	8003e3a <HAL_RCC_OscConfig+0x62>
 8003e38:	e06c      	b.n	8003f14 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f000 fb4c 	bl	80044d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_OscConfig+0x80>
 8003e48:	4bb1      	ldr	r3, [pc, #708]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4bb0      	ldr	r3, [pc, #704]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	0249      	lsls	r1, r1, #9
 8003e52:	430a      	orrs	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e02f      	b.n	8003eb8 <HAL_RCC_OscConfig+0xe0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCC_OscConfig+0xa2>
 8003e60:	4bab      	ldr	r3, [pc, #684]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4baa      	ldr	r3, [pc, #680]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e66:	49ab      	ldr	r1, [pc, #684]	; (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003e68:	400a      	ands	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	4ba8      	ldr	r3, [pc, #672]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4ba7      	ldr	r3, [pc, #668]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e72:	49a9      	ldr	r1, [pc, #676]	; (8004118 <HAL_RCC_OscConfig+0x340>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	e01e      	b.n	8003eb8 <HAL_RCC_OscConfig+0xe0>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b05      	cmp	r3, #5
 8003e80:	d10e      	bne.n	8003ea0 <HAL_RCC_OscConfig+0xc8>
 8003e82:	4ba3      	ldr	r3, [pc, #652]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4ba2      	ldr	r3, [pc, #648]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e88:	2180      	movs	r1, #128	; 0x80
 8003e8a:	02c9      	lsls	r1, r1, #11
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	4b9f      	ldr	r3, [pc, #636]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b9e      	ldr	r3, [pc, #632]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	0249      	lsls	r1, r1, #9
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_OscConfig+0xe0>
 8003ea0:	4b9b      	ldr	r3, [pc, #620]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b9a      	ldr	r3, [pc, #616]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003ea6:	499b      	ldr	r1, [pc, #620]	; (8004114 <HAL_RCC_OscConfig+0x33c>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	4b98      	ldr	r3, [pc, #608]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b97      	ldr	r3, [pc, #604]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003eb2:	4999      	ldr	r1, [pc, #612]	; (8004118 <HAL_RCC_OscConfig+0x340>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d014      	beq.n	8003eea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fcee 	bl	80028a0 <HAL_GetTick>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eca:	f7fe fce9 	bl	80028a0 <HAL_GetTick>
 8003ece:	0002      	movs	r2, r0
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b64      	cmp	r3, #100	; 0x64
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e2fd      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003edc:	4b8c      	ldr	r3, [pc, #560]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	029b      	lsls	r3, r3, #10
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0xf2>
 8003ee8:	e015      	b.n	8003f16 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fe fcd9 	bl	80028a0 <HAL_GetTick>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef4:	f7fe fcd4 	bl	80028a0 <HAL_GetTick>
 8003ef8:	0002      	movs	r2, r0
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	; 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e2e8      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f06:	4b82      	ldr	r3, [pc, #520]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	029b      	lsls	r3, r3, #10
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x11c>
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d100      	bne.n	8003f22 <HAL_RCC_OscConfig+0x14a>
 8003f20:	e06c      	b.n	8003ffc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f22:	4b7b      	ldr	r3, [pc, #492]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	220c      	movs	r2, #12
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d00e      	beq.n	8003f4a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f2c:	4b78      	ldr	r3, [pc, #480]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	220c      	movs	r2, #12
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d11f      	bne.n	8003f78 <HAL_RCC_OscConfig+0x1a0>
 8003f38:	4b75      	ldr	r3, [pc, #468]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	23c0      	movs	r3, #192	; 0xc0
 8003f3e:	025b      	lsls	r3, r3, #9
 8003f40:	401a      	ands	r2, r3
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d116      	bne.n	8003f78 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4a:	4b71      	ldr	r3, [pc, #452]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	4013      	ands	r3, r2
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_OscConfig+0x188>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e2bb      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b6b      	ldr	r3, [pc, #428]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	22f8      	movs	r2, #248	; 0xf8
 8003f66:	4393      	bics	r3, r2
 8003f68:	0019      	movs	r1, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	00da      	lsls	r2, r3, #3
 8003f70:	4b67      	ldr	r3, [pc, #412]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003f72:	430a      	orrs	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f76:	e041      	b.n	8003ffc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d024      	beq.n	8003fca <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f80:	4b63      	ldr	r3, [pc, #396]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4b62      	ldr	r3, [pc, #392]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003f86:	2101      	movs	r1, #1
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7fe fc88 	bl	80028a0 <HAL_GetTick>
 8003f90:	0003      	movs	r3, r0
 8003f92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f96:	f7fe fc83 	bl	80028a0 <HAL_GetTick>
 8003f9a:	0002      	movs	r2, r0
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e297      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa8:	4b59      	ldr	r3, [pc, #356]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2202      	movs	r2, #2
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d0f1      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb2:	4b57      	ldr	r3, [pc, #348]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	22f8      	movs	r2, #248	; 0xf8
 8003fb8:	4393      	bics	r3, r2
 8003fba:	0019      	movs	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	00da      	lsls	r2, r3, #3
 8003fc2:	4b53      	ldr	r3, [pc, #332]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e018      	b.n	8003ffc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fca:	4b51      	ldr	r3, [pc, #324]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b50      	ldr	r3, [pc, #320]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	438a      	bics	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fc63 	bl	80028a0 <HAL_GetTick>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe0:	f7fe fc5e 	bl	80028a0 <HAL_GetTick>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e272      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff2:	4b47      	ldr	r3, [pc, #284]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d1f1      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2208      	movs	r2, #8
 8004002:	4013      	ands	r3, r2
 8004004:	d036      	beq.n	8004074 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d019      	beq.n	8004042 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400e:	4b40      	ldr	r3, [pc, #256]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8004010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004012:	4b3f      	ldr	r3, [pc, #252]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8004014:	2101      	movs	r1, #1
 8004016:	430a      	orrs	r2, r1
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401a:	f7fe fc41 	bl	80028a0 <HAL_GetTick>
 800401e:	0003      	movs	r3, r0
 8004020:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004024:	f7fe fc3c 	bl	80028a0 <HAL_GetTick>
 8004028:	0002      	movs	r2, r0
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e250      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	2202      	movs	r2, #2
 800403c:	4013      	ands	r3, r2
 800403e:	d0f1      	beq.n	8004024 <HAL_RCC_OscConfig+0x24c>
 8004040:	e018      	b.n	8004074 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004042:	4b33      	ldr	r3, [pc, #204]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8004044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004046:	4b32      	ldr	r3, [pc, #200]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8004048:	2101      	movs	r1, #1
 800404a:	438a      	bics	r2, r1
 800404c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404e:	f7fe fc27 	bl	80028a0 <HAL_GetTick>
 8004052:	0003      	movs	r3, r0
 8004054:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004058:	f7fe fc22 	bl	80028a0 <HAL_GetTick>
 800405c:	0002      	movs	r2, r0
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e236      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406a:	4b29      	ldr	r3, [pc, #164]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	2202      	movs	r2, #2
 8004070:	4013      	ands	r3, r2
 8004072:	d1f1      	bne.n	8004058 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2204      	movs	r2, #4
 800407a:	4013      	ands	r3, r2
 800407c:	d100      	bne.n	8004080 <HAL_RCC_OscConfig+0x2a8>
 800407e:	e0b5      	b.n	80041ec <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004080:	201f      	movs	r0, #31
 8004082:	183b      	adds	r3, r7, r0
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004088:	4b21      	ldr	r3, [pc, #132]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	055b      	lsls	r3, r3, #21
 8004090:	4013      	ands	r3, r2
 8004092:	d110      	bne.n	80040b6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004094:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 800409a:	2180      	movs	r1, #128	; 0x80
 800409c:	0549      	lsls	r1, r1, #21
 800409e:	430a      	orrs	r2, r1
 80040a0:	61da      	str	r2, [r3, #28]
 80040a2:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	055b      	lsls	r3, r3, #21
 80040aa:	4013      	ands	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040b0:	183b      	adds	r3, r7, r0
 80040b2:	2201      	movs	r2, #1
 80040b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b6:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_OscConfig+0x344>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	4013      	ands	r3, r2
 80040c0:	d11a      	bne.n	80040f8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040c2:	4b16      	ldr	r3, [pc, #88]	; (800411c <HAL_RCC_OscConfig+0x344>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_RCC_OscConfig+0x344>)
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	0049      	lsls	r1, r1, #1
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d0:	f7fe fbe6 	bl	80028a0 <HAL_GetTick>
 80040d4:	0003      	movs	r3, r0
 80040d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040da:	f7fe fbe1 	bl	80028a0 <HAL_GetTick>
 80040de:	0002      	movs	r2, r0
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b64      	cmp	r3, #100	; 0x64
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1f5      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_OscConfig+0x344>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4013      	ands	r3, r2
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d10f      	bne.n	8004120 <HAL_RCC_OscConfig+0x348>
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8004102:	6a1a      	ldr	r2, [r3, #32]
 8004104:	4b02      	ldr	r3, [pc, #8]	; (8004110 <HAL_RCC_OscConfig+0x338>)
 8004106:	2101      	movs	r1, #1
 8004108:	430a      	orrs	r2, r1
 800410a:	621a      	str	r2, [r3, #32]
 800410c:	e036      	b.n	800417c <HAL_RCC_OscConfig+0x3a4>
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	40021000 	.word	0x40021000
 8004114:	fffeffff 	.word	0xfffeffff
 8004118:	fffbffff 	.word	0xfffbffff
 800411c:	40007000 	.word	0x40007000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10c      	bne.n	8004142 <HAL_RCC_OscConfig+0x36a>
 8004128:	4bca      	ldr	r3, [pc, #808]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800412a:	6a1a      	ldr	r2, [r3, #32]
 800412c:	4bc9      	ldr	r3, [pc, #804]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800412e:	2101      	movs	r1, #1
 8004130:	438a      	bics	r2, r1
 8004132:	621a      	str	r2, [r3, #32]
 8004134:	4bc7      	ldr	r3, [pc, #796]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004136:	6a1a      	ldr	r2, [r3, #32]
 8004138:	4bc6      	ldr	r3, [pc, #792]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800413a:	2104      	movs	r1, #4
 800413c:	438a      	bics	r2, r1
 800413e:	621a      	str	r2, [r3, #32]
 8004140:	e01c      	b.n	800417c <HAL_RCC_OscConfig+0x3a4>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b05      	cmp	r3, #5
 8004148:	d10c      	bne.n	8004164 <HAL_RCC_OscConfig+0x38c>
 800414a:	4bc2      	ldr	r3, [pc, #776]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800414c:	6a1a      	ldr	r2, [r3, #32]
 800414e:	4bc1      	ldr	r3, [pc, #772]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004150:	2104      	movs	r1, #4
 8004152:	430a      	orrs	r2, r1
 8004154:	621a      	str	r2, [r3, #32]
 8004156:	4bbf      	ldr	r3, [pc, #764]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004158:	6a1a      	ldr	r2, [r3, #32]
 800415a:	4bbe      	ldr	r3, [pc, #760]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800415c:	2101      	movs	r1, #1
 800415e:	430a      	orrs	r2, r1
 8004160:	621a      	str	r2, [r3, #32]
 8004162:	e00b      	b.n	800417c <HAL_RCC_OscConfig+0x3a4>
 8004164:	4bbb      	ldr	r3, [pc, #748]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004166:	6a1a      	ldr	r2, [r3, #32]
 8004168:	4bba      	ldr	r3, [pc, #744]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800416a:	2101      	movs	r1, #1
 800416c:	438a      	bics	r2, r1
 800416e:	621a      	str	r2, [r3, #32]
 8004170:	4bb8      	ldr	r3, [pc, #736]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004172:	6a1a      	ldr	r2, [r3, #32]
 8004174:	4bb7      	ldr	r3, [pc, #732]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004176:	2104      	movs	r1, #4
 8004178:	438a      	bics	r2, r1
 800417a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d014      	beq.n	80041ae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004184:	f7fe fb8c 	bl	80028a0 <HAL_GetTick>
 8004188:	0003      	movs	r3, r0
 800418a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418c:	e009      	b.n	80041a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800418e:	f7fe fb87 	bl	80028a0 <HAL_GetTick>
 8004192:	0002      	movs	r2, r0
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	4aaf      	ldr	r2, [pc, #700]	; (8004458 <HAL_RCC_OscConfig+0x680>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e19a      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a2:	4bac      	ldr	r3, [pc, #688]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	2202      	movs	r2, #2
 80041a8:	4013      	ands	r3, r2
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x3b6>
 80041ac:	e013      	b.n	80041d6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ae:	f7fe fb77 	bl	80028a0 <HAL_GetTick>
 80041b2:	0003      	movs	r3, r0
 80041b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b6:	e009      	b.n	80041cc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b8:	f7fe fb72 	bl	80028a0 <HAL_GetTick>
 80041bc:	0002      	movs	r2, r0
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	4aa5      	ldr	r2, [pc, #660]	; (8004458 <HAL_RCC_OscConfig+0x680>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e185      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041cc:	4ba1      	ldr	r3, [pc, #644]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	2202      	movs	r2, #2
 80041d2:	4013      	ands	r3, r2
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041d6:	231f      	movs	r3, #31
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e0:	4b9c      	ldr	r3, [pc, #624]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	4b9b      	ldr	r3, [pc, #620]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80041e6:	499d      	ldr	r1, [pc, #628]	; (800445c <HAL_RCC_OscConfig+0x684>)
 80041e8:	400a      	ands	r2, r1
 80041ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2210      	movs	r2, #16
 80041f2:	4013      	ands	r3, r2
 80041f4:	d063      	beq.n	80042be <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d12a      	bne.n	8004254 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80041fe:	4b95      	ldr	r3, [pc, #596]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004202:	4b94      	ldr	r3, [pc, #592]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004204:	2104      	movs	r1, #4
 8004206:	430a      	orrs	r2, r1
 8004208:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800420a:	4b92      	ldr	r3, [pc, #584]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800420c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800420e:	4b91      	ldr	r3, [pc, #580]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004210:	2101      	movs	r1, #1
 8004212:	430a      	orrs	r2, r1
 8004214:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004216:	f7fe fb43 	bl	80028a0 <HAL_GetTick>
 800421a:	0003      	movs	r3, r0
 800421c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004220:	f7fe fb3e 	bl	80028a0 <HAL_GetTick>
 8004224:	0002      	movs	r2, r0
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e152      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004232:	4b88      	ldr	r3, [pc, #544]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	2202      	movs	r2, #2
 8004238:	4013      	ands	r3, r2
 800423a:	d0f1      	beq.n	8004220 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800423c:	4b85      	ldr	r3, [pc, #532]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	22f8      	movs	r2, #248	; 0xf8
 8004242:	4393      	bics	r3, r2
 8004244:	0019      	movs	r1, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	00da      	lsls	r2, r3, #3
 800424c:	4b81      	ldr	r3, [pc, #516]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800424e:	430a      	orrs	r2, r1
 8004250:	635a      	str	r2, [r3, #52]	; 0x34
 8004252:	e034      	b.n	80042be <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	3305      	adds	r3, #5
 800425a:	d111      	bne.n	8004280 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800425c:	4b7d      	ldr	r3, [pc, #500]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800425e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004260:	4b7c      	ldr	r3, [pc, #496]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004262:	2104      	movs	r1, #4
 8004264:	438a      	bics	r2, r1
 8004266:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004268:	4b7a      	ldr	r3, [pc, #488]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800426a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426c:	22f8      	movs	r2, #248	; 0xf8
 800426e:	4393      	bics	r3, r2
 8004270:	0019      	movs	r1, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	00da      	lsls	r2, r3, #3
 8004278:	4b76      	ldr	r3, [pc, #472]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800427a:	430a      	orrs	r2, r1
 800427c:	635a      	str	r2, [r3, #52]	; 0x34
 800427e:	e01e      	b.n	80042be <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004280:	4b74      	ldr	r3, [pc, #464]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004284:	4b73      	ldr	r3, [pc, #460]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004286:	2104      	movs	r1, #4
 8004288:	430a      	orrs	r2, r1
 800428a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800428c:	4b71      	ldr	r3, [pc, #452]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800428e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004290:	4b70      	ldr	r3, [pc, #448]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004292:	2101      	movs	r1, #1
 8004294:	438a      	bics	r2, r1
 8004296:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004298:	f7fe fb02 	bl	80028a0 <HAL_GetTick>
 800429c:	0003      	movs	r3, r0
 800429e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80042a2:	f7fe fafd 	bl	80028a0 <HAL_GetTick>
 80042a6:	0002      	movs	r2, r0
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e111      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80042b4:	4b67      	ldr	r3, [pc, #412]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80042b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b8:	2202      	movs	r2, #2
 80042ba:	4013      	ands	r3, r2
 80042bc:	d1f1      	bne.n	80042a2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2220      	movs	r2, #32
 80042c4:	4013      	ands	r3, r2
 80042c6:	d05c      	beq.n	8004382 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80042c8:	4b62      	ldr	r3, [pc, #392]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	220c      	movs	r2, #12
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b0c      	cmp	r3, #12
 80042d2:	d00e      	beq.n	80042f2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80042d4:	4b5f      	ldr	r3, [pc, #380]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	220c      	movs	r2, #12
 80042da:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d114      	bne.n	800430a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80042e0:	4b5c      	ldr	r3, [pc, #368]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	23c0      	movs	r3, #192	; 0xc0
 80042e6:	025b      	lsls	r3, r3, #9
 80042e8:	401a      	ands	r2, r3
 80042ea:	23c0      	movs	r3, #192	; 0xc0
 80042ec:	025b      	lsls	r3, r3, #9
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d10b      	bne.n	800430a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80042f2:	4b58      	ldr	r3, [pc, #352]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80042f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	025b      	lsls	r3, r3, #9
 80042fa:	4013      	ands	r3, r2
 80042fc:	d040      	beq.n	8004380 <HAL_RCC_OscConfig+0x5a8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d03c      	beq.n	8004380 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0e6      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01b      	beq.n	800434a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004312:	4b50      	ldr	r3, [pc, #320]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004316:	4b4f      	ldr	r3, [pc, #316]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004318:	2180      	movs	r1, #128	; 0x80
 800431a:	0249      	lsls	r1, r1, #9
 800431c:	430a      	orrs	r2, r1
 800431e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fe fabe 	bl	80028a0 <HAL_GetTick>
 8004324:	0003      	movs	r3, r0
 8004326:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800432a:	f7fe fab9 	bl	80028a0 <HAL_GetTick>
 800432e:	0002      	movs	r2, r0
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e0cd      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800433c:	4b45      	ldr	r3, [pc, #276]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800433e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	025b      	lsls	r3, r3, #9
 8004344:	4013      	ands	r3, r2
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x552>
 8004348:	e01b      	b.n	8004382 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800434a:	4b42      	ldr	r3, [pc, #264]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800434c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004350:	4943      	ldr	r1, [pc, #268]	; (8004460 <HAL_RCC_OscConfig+0x688>)
 8004352:	400a      	ands	r2, r1
 8004354:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7fe faa3 	bl	80028a0 <HAL_GetTick>
 800435a:	0003      	movs	r3, r0
 800435c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004360:	f7fe fa9e 	bl	80028a0 <HAL_GetTick>
 8004364:	0002      	movs	r2, r0
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e0b2      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004372:	4b38      	ldr	r3, [pc, #224]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	025b      	lsls	r3, r3, #9
 800437a:	4013      	ands	r3, r2
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x588>
 800437e:	e000      	b.n	8004382 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004380:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	d100      	bne.n	800438c <HAL_RCC_OscConfig+0x5b4>
 800438a:	e0a4      	b.n	80044d6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800438c:	4b31      	ldr	r3, [pc, #196]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	220c      	movs	r2, #12
 8004392:	4013      	ands	r3, r2
 8004394:	2b08      	cmp	r3, #8
 8004396:	d100      	bne.n	800439a <HAL_RCC_OscConfig+0x5c2>
 8004398:	e078      	b.n	800448c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d14c      	bne.n	800443c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a2:	4b2c      	ldr	r3, [pc, #176]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80043a8:	492e      	ldr	r1, [pc, #184]	; (8004464 <HAL_RCC_OscConfig+0x68c>)
 80043aa:	400a      	ands	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ae:	f7fe fa77 	bl	80028a0 <HAL_GetTick>
 80043b2:	0003      	movs	r3, r0
 80043b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fe fa72 	bl	80028a0 <HAL_GetTick>
 80043bc:	0002      	movs	r2, r0
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e086      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ca:	4b22      	ldr	r3, [pc, #136]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	049b      	lsls	r3, r3, #18
 80043d2:	4013      	ands	r3, r2
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d6:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	220f      	movs	r2, #15
 80043dc:	4393      	bics	r3, r2
 80043de:	0019      	movs	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80043e6:	430a      	orrs	r2, r1
 80043e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4a1e      	ldr	r2, [pc, #120]	; (8004468 <HAL_RCC_OscConfig+0x690>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	0019      	movs	r1, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fc:	431a      	orrs	r2, r3
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004404:	4b13      	ldr	r3, [pc, #76]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800440a:	2180      	movs	r1, #128	; 0x80
 800440c:	0449      	lsls	r1, r1, #17
 800440e:	430a      	orrs	r2, r1
 8004410:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004412:	f7fe fa45 	bl	80028a0 <HAL_GetTick>
 8004416:	0003      	movs	r3, r0
 8004418:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441c:	f7fe fa40 	bl	80028a0 <HAL_GetTick>
 8004420:	0002      	movs	r2, r0
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e054      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	049b      	lsls	r3, r3, #18
 8004436:	4013      	ands	r3, r2
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x644>
 800443a:	e04c      	b.n	80044d6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <HAL_RCC_OscConfig+0x67c>)
 8004442:	4908      	ldr	r1, [pc, #32]	; (8004464 <HAL_RCC_OscConfig+0x68c>)
 8004444:	400a      	ands	r2, r1
 8004446:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004448:	f7fe fa2a 	bl	80028a0 <HAL_GetTick>
 800444c:	0003      	movs	r3, r0
 800444e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004450:	e015      	b.n	800447e <HAL_RCC_OscConfig+0x6a6>
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	40021000 	.word	0x40021000
 8004458:	00001388 	.word	0x00001388
 800445c:	efffffff 	.word	0xefffffff
 8004460:	fffeffff 	.word	0xfffeffff
 8004464:	feffffff 	.word	0xfeffffff
 8004468:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446c:	f7fe fa18 	bl	80028a0 <HAL_GetTick>
 8004470:	0002      	movs	r2, r0
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e02c      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800447e:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <HAL_RCC_OscConfig+0x708>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	049b      	lsls	r3, r3, #18
 8004486:	4013      	ands	r3, r2
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x694>
 800448a:	e024      	b.n	80044d6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e01f      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <HAL_RCC_OscConfig+0x708>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <HAL_RCC_OscConfig+0x708>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	23c0      	movs	r3, #192	; 0xc0
 80044a8:	025b      	lsls	r3, r3, #9
 80044aa:	401a      	ands	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d10e      	bne.n	80044d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	220f      	movs	r2, #15
 80044b8:	401a      	ands	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d107      	bne.n	80044d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	23f0      	movs	r3, #240	; 0xf0
 80044c6:	039b      	lsls	r3, r3, #14
 80044c8:	401a      	ands	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b008      	add	sp, #32
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40021000 	.word	0x40021000

080044e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0bf      	b.n	8004678 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044f8:	4b61      	ldr	r3, [pc, #388]	; (8004680 <HAL_RCC_ClockConfig+0x19c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2201      	movs	r2, #1
 80044fe:	4013      	ands	r3, r2
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d911      	bls.n	800452a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004506:	4b5e      	ldr	r3, [pc, #376]	; (8004680 <HAL_RCC_ClockConfig+0x19c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2201      	movs	r2, #1
 800450c:	4393      	bics	r3, r2
 800450e:	0019      	movs	r1, r3
 8004510:	4b5b      	ldr	r3, [pc, #364]	; (8004680 <HAL_RCC_ClockConfig+0x19c>)
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004518:	4b59      	ldr	r3, [pc, #356]	; (8004680 <HAL_RCC_ClockConfig+0x19c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2201      	movs	r2, #1
 800451e:	4013      	ands	r3, r2
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d001      	beq.n	800452a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e0a6      	b.n	8004678 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2202      	movs	r2, #2
 8004530:	4013      	ands	r3, r2
 8004532:	d015      	beq.n	8004560 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2204      	movs	r2, #4
 800453a:	4013      	ands	r3, r2
 800453c:	d006      	beq.n	800454c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800453e:	4b51      	ldr	r3, [pc, #324]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	4b50      	ldr	r3, [pc, #320]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 8004544:	21e0      	movs	r1, #224	; 0xe0
 8004546:	00c9      	lsls	r1, r1, #3
 8004548:	430a      	orrs	r2, r1
 800454a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800454c:	4b4d      	ldr	r3, [pc, #308]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	22f0      	movs	r2, #240	; 0xf0
 8004552:	4393      	bics	r3, r2
 8004554:	0019      	movs	r1, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2201      	movs	r2, #1
 8004566:	4013      	ands	r3, r2
 8004568:	d04c      	beq.n	8004604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d107      	bne.n	8004582 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	4b44      	ldr	r3, [pc, #272]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	029b      	lsls	r3, r3, #10
 800457a:	4013      	ands	r3, r2
 800457c:	d120      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e07a      	b.n	8004678 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d107      	bne.n	800459a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458a:	4b3e      	ldr	r3, [pc, #248]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	049b      	lsls	r3, r3, #18
 8004592:	4013      	ands	r3, r2
 8004594:	d114      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e06e      	b.n	8004678 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80045a2:	4b38      	ldr	r3, [pc, #224]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 80045a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a6:	2380      	movs	r3, #128	; 0x80
 80045a8:	025b      	lsls	r3, r3, #9
 80045aa:	4013      	ands	r3, r2
 80045ac:	d108      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e062      	b.n	8004678 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b2:	4b34      	ldr	r3, [pc, #208]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2202      	movs	r2, #2
 80045b8:	4013      	ands	r3, r2
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e05b      	b.n	8004678 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c0:	4b30      	ldr	r3, [pc, #192]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2203      	movs	r2, #3
 80045c6:	4393      	bics	r3, r2
 80045c8:	0019      	movs	r1, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	4b2d      	ldr	r3, [pc, #180]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d4:	f7fe f964 	bl	80028a0 <HAL_GetTick>
 80045d8:	0003      	movs	r3, r0
 80045da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045dc:	e009      	b.n	80045f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045de:	f7fe f95f 	bl	80028a0 <HAL_GetTick>
 80045e2:	0002      	movs	r2, r0
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	4a27      	ldr	r2, [pc, #156]	; (8004688 <HAL_RCC_ClockConfig+0x1a4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e042      	b.n	8004678 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	220c      	movs	r2, #12
 80045f8:	401a      	ands	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	429a      	cmp	r2, r3
 8004602:	d1ec      	bne.n	80045de <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004604:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <HAL_RCC_ClockConfig+0x19c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2201      	movs	r2, #1
 800460a:	4013      	ands	r3, r2
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d211      	bcs.n	8004636 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_RCC_ClockConfig+0x19c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2201      	movs	r2, #1
 8004618:	4393      	bics	r3, r2
 800461a:	0019      	movs	r1, r3
 800461c:	4b18      	ldr	r3, [pc, #96]	; (8004680 <HAL_RCC_ClockConfig+0x19c>)
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004624:	4b16      	ldr	r3, [pc, #88]	; (8004680 <HAL_RCC_ClockConfig+0x19c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2201      	movs	r2, #1
 800462a:	4013      	ands	r3, r2
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d001      	beq.n	8004636 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e020      	b.n	8004678 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2204      	movs	r2, #4
 800463c:	4013      	ands	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a11      	ldr	r2, [pc, #68]	; (800468c <HAL_RCC_ClockConfig+0x1a8>)
 8004646:	4013      	ands	r3, r2
 8004648:	0019      	movs	r1, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004654:	f000 f820 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8004658:	0001      	movs	r1, r0
 800465a:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <HAL_RCC_ClockConfig+0x1a0>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	220f      	movs	r2, #15
 8004662:	4013      	ands	r3, r2
 8004664:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <HAL_RCC_ClockConfig+0x1ac>)
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	000a      	movs	r2, r1
 800466a:	40da      	lsrs	r2, r3
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_RCC_ClockConfig+0x1b0>)
 800466e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004670:	2003      	movs	r0, #3
 8004672:	f7fe f8cf 	bl	8002814 <HAL_InitTick>
  
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b004      	add	sp, #16
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40022000 	.word	0x40022000
 8004684:	40021000 	.word	0x40021000
 8004688:	00001388 	.word	0x00001388
 800468c:	fffff8ff 	.word	0xfffff8ff
 8004690:	0800502c 	.word	0x0800502c
 8004694:	20000004 	.word	0x20000004

08004698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b08f      	sub	sp, #60	; 0x3c
 800469c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800469e:	2314      	movs	r3, #20
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	4a38      	ldr	r2, [pc, #224]	; (8004784 <HAL_RCC_GetSysClockFreq+0xec>)
 80046a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046a6:	c313      	stmia	r3!, {r0, r1, r4}
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80046ac:	1d3b      	adds	r3, r7, #4
 80046ae:	4a36      	ldr	r2, [pc, #216]	; (8004788 <HAL_RCC_GetSysClockFreq+0xf0>)
 80046b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046b2:	c313      	stmia	r3!, {r0, r1, r4}
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046bc:	2300      	movs	r3, #0
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c0:	2300      	movs	r3, #0
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
 80046c4:	2300      	movs	r3, #0
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80046cc:	4b2f      	ldr	r3, [pc, #188]	; (800478c <HAL_RCC_GetSysClockFreq+0xf4>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	220c      	movs	r2, #12
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	d047      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0xd4>
 80046dc:	d849      	bhi.n	8004772 <HAL_RCC_GetSysClockFreq+0xda>
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d002      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x50>
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d003      	beq.n	80046ee <HAL_RCC_GetSysClockFreq+0x56>
 80046e6:	e044      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046e8:	4b29      	ldr	r3, [pc, #164]	; (8004790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046ec:	e044      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	0c9b      	lsrs	r3, r3, #18
 80046f2:	220f      	movs	r2, #15
 80046f4:	4013      	ands	r3, r2
 80046f6:	2214      	movs	r2, #20
 80046f8:	18ba      	adds	r2, r7, r2
 80046fa:	5cd3      	ldrb	r3, [r2, r3]
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80046fe:	4b23      	ldr	r3, [pc, #140]	; (800478c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	220f      	movs	r2, #15
 8004704:	4013      	ands	r3, r2
 8004706:	1d3a      	adds	r2, r7, #4
 8004708:	5cd3      	ldrb	r3, [r2, r3]
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800470c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800470e:	23c0      	movs	r3, #192	; 0xc0
 8004710:	025b      	lsls	r3, r3, #9
 8004712:	401a      	ands	r2, r3
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	025b      	lsls	r3, r3, #9
 8004718:	429a      	cmp	r2, r3
 800471a:	d109      	bne.n	8004730 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800471c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800471e:	481c      	ldr	r0, [pc, #112]	; (8004790 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004720:	f7fb fcf0 	bl	8000104 <__udivsi3>
 8004724:	0003      	movs	r3, r0
 8004726:	001a      	movs	r2, r3
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	4353      	muls	r3, r2
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
 800472e:	e01a      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004732:	23c0      	movs	r3, #192	; 0xc0
 8004734:	025b      	lsls	r3, r3, #9
 8004736:	401a      	ands	r2, r3
 8004738:	23c0      	movs	r3, #192	; 0xc0
 800473a:	025b      	lsls	r3, r3, #9
 800473c:	429a      	cmp	r2, r3
 800473e:	d109      	bne.n	8004754 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004742:	4814      	ldr	r0, [pc, #80]	; (8004794 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004744:	f7fb fcde 	bl	8000104 <__udivsi3>
 8004748:	0003      	movs	r3, r0
 800474a:	001a      	movs	r2, r3
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	4353      	muls	r3, r2
 8004750:	637b      	str	r3, [r7, #52]	; 0x34
 8004752:	e008      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004756:	4810      	ldr	r0, [pc, #64]	; (8004798 <HAL_RCC_GetSysClockFreq+0x100>)
 8004758:	f7fb fcd4 	bl	8000104 <__udivsi3>
 800475c:	0003      	movs	r3, r0
 800475e:	001a      	movs	r2, r3
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	4353      	muls	r3, r2
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004768:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800476a:	e005      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_GetSysClockFreq+0xfc>)
 800476e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004770:	e002      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004772:	4b09      	ldr	r3, [pc, #36]	; (8004798 <HAL_RCC_GetSysClockFreq+0x100>)
 8004774:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004776:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b00f      	add	sp, #60	; 0x3c
 8004780:	bd90      	pop	{r4, r7, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	0800500c 	.word	0x0800500c
 8004788:	0800501c 	.word	0x0800501c
 800478c:	40021000 	.word	0x40021000
 8004790:	00b71b00 	.word	0x00b71b00
 8004794:	02dc6c00 	.word	0x02dc6c00
 8004798:	007a1200 	.word	0x007a1200

0800479c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e0a8      	b.n	8004900 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	2382      	movs	r3, #130	; 0x82
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	429a      	cmp	r2, r3
 80047c0:	d009      	beq.n	80047d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	61da      	str	r2, [r3, #28]
 80047c8:	e005      	b.n	80047d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	225d      	movs	r2, #93	; 0x5d
 80047e0:	5c9b      	ldrb	r3, [r3, r2]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d107      	bne.n	80047f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	225c      	movs	r2, #92	; 0x5c
 80047ec:	2100      	movs	r1, #0
 80047ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7fd ff14 	bl	8002620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	225d      	movs	r2, #93	; 0x5d
 80047fc:	2102      	movs	r1, #2
 80047fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2140      	movs	r1, #64	; 0x40
 800480c:	438a      	bics	r2, r1
 800480e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	23e0      	movs	r3, #224	; 0xe0
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	429a      	cmp	r2, r3
 800481a:	d902      	bls.n	8004822 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	e002      	b.n	8004828 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	015b      	lsls	r3, r3, #5
 8004826:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	23f0      	movs	r3, #240	; 0xf0
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	429a      	cmp	r2, r3
 8004832:	d008      	beq.n	8004846 <HAL_SPI_Init+0xaa>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	23e0      	movs	r3, #224	; 0xe0
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	429a      	cmp	r2, r3
 800483e:	d002      	beq.n	8004846 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	2382      	movs	r3, #130	; 0x82
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	401a      	ands	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6899      	ldr	r1, [r3, #8]
 8004854:	2384      	movs	r3, #132	; 0x84
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	400b      	ands	r3, r1
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	2102      	movs	r1, #2
 8004862:	400b      	ands	r3, r1
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	2101      	movs	r1, #1
 800486c:	400b      	ands	r3, r1
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6999      	ldr	r1, [r3, #24]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	400b      	ands	r3, r1
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	2138      	movs	r1, #56	; 0x38
 8004882:	400b      	ands	r3, r1
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	2180      	movs	r1, #128	; 0x80
 800488c:	400b      	ands	r3, r1
 800488e:	431a      	orrs	r2, r3
 8004890:	0011      	movs	r1, r2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	019b      	lsls	r3, r3, #6
 800489a:	401a      	ands	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	2204      	movs	r2, #4
 80048ac:	401a      	ands	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2110      	movs	r1, #16
 80048b4:	400b      	ands	r3, r1
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	2108      	movs	r1, #8
 80048be:	400b      	ands	r3, r1
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68d9      	ldr	r1, [r3, #12]
 80048c6:	23f0      	movs	r3, #240	; 0xf0
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	400b      	ands	r3, r1
 80048cc:	431a      	orrs	r2, r3
 80048ce:	0011      	movs	r1, r2
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	2380      	movs	r3, #128	; 0x80
 80048d4:	015b      	lsls	r3, r3, #5
 80048d6:	401a      	ands	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4907      	ldr	r1, [pc, #28]	; (8004908 <HAL_SPI_Init+0x16c>)
 80048ec:	400a      	ands	r2, r1
 80048ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	225d      	movs	r2, #93	; 0x5d
 80048fa:	2101      	movs	r1, #1
 80048fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	0018      	movs	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	b004      	add	sp, #16
 8004906:	bd80      	pop	{r7, pc}
 8004908:	fffff7ff 	.word	0xfffff7ff

0800490c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	001a      	movs	r2, r3
 800491a:	1cbb      	adds	r3, r7, #2
 800491c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800491e:	2301      	movs	r3, #1
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004922:	2323      	movs	r3, #35	; 0x23
 8004924:	18fb      	adds	r3, r7, r3
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	225c      	movs	r2, #92	; 0x5c
 800492e:	5c9b      	ldrb	r3, [r3, r2]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_SPI_TransmitReceive+0x2c>
 8004934:	2302      	movs	r3, #2
 8004936:	e1b5      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x398>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	225c      	movs	r2, #92	; 0x5c
 800493c:	2101      	movs	r1, #1
 800493e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004940:	f7fd ffae 	bl	80028a0 <HAL_GetTick>
 8004944:	0003      	movs	r3, r0
 8004946:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004948:	201b      	movs	r0, #27
 800494a:	183b      	adds	r3, r7, r0
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	215d      	movs	r1, #93	; 0x5d
 8004950:	5c52      	ldrb	r2, [r2, r1]
 8004952:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800495a:	2312      	movs	r3, #18
 800495c:	18fb      	adds	r3, r7, r3
 800495e:	1cba      	adds	r2, r7, #2
 8004960:	8812      	ldrh	r2, [r2, #0]
 8004962:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004964:	183b      	adds	r3, r7, r0
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d011      	beq.n	8004990 <HAL_SPI_TransmitReceive+0x84>
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	2382      	movs	r3, #130	; 0x82
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	429a      	cmp	r2, r3
 8004974:	d107      	bne.n	8004986 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <HAL_SPI_TransmitReceive+0x7a>
 800497e:	183b      	adds	r3, r7, r0
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b04      	cmp	r3, #4
 8004984:	d004      	beq.n	8004990 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004986:	2323      	movs	r3, #35	; 0x23
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	2202      	movs	r2, #2
 800498c:	701a      	strb	r2, [r3, #0]
    goto error;
 800498e:	e17e      	b.n	8004c8e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d006      	beq.n	80049a4 <HAL_SPI_TransmitReceive+0x98>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_SPI_TransmitReceive+0x98>
 800499c:	1cbb      	adds	r3, r7, #2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d104      	bne.n	80049ae <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80049a4:	2323      	movs	r3, #35	; 0x23
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80049ac:	e16f      	b.n	8004c8e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	225d      	movs	r2, #93	; 0x5d
 80049b2:	5c9b      	ldrb	r3, [r3, r2]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d003      	beq.n	80049c2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	225d      	movs	r2, #93	; 0x5d
 80049be:	2105      	movs	r1, #5
 80049c0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1cba      	adds	r2, r7, #2
 80049d2:	2146      	movs	r1, #70	; 0x46
 80049d4:	8812      	ldrh	r2, [r2, #0]
 80049d6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1cba      	adds	r2, r7, #2
 80049dc:	2144      	movs	r1, #68	; 0x44
 80049de:	8812      	ldrh	r2, [r2, #0]
 80049e0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1cba      	adds	r2, r7, #2
 80049ec:	8812      	ldrh	r2, [r2, #0]
 80049ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1cba      	adds	r2, r7, #2
 80049f4:	8812      	ldrh	r2, [r2, #0]
 80049f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	23e0      	movs	r3, #224	; 0xe0
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d908      	bls.n	8004a22 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	49a4      	ldr	r1, [pc, #656]	; (8004cac <HAL_SPI_TransmitReceive+0x3a0>)
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
 8004a20:	e008      	b.n	8004a34 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2180      	movs	r1, #128	; 0x80
 8004a2e:	0149      	lsls	r1, r1, #5
 8004a30:	430a      	orrs	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2240      	movs	r2, #64	; 0x40
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d007      	beq.n	8004a52 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	23e0      	movs	r3, #224	; 0xe0
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d800      	bhi.n	8004a60 <HAL_SPI_TransmitReceive+0x154>
 8004a5e:	e07f      	b.n	8004b60 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x168>
 8004a68:	2312      	movs	r3, #18
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d000      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x168>
 8004a72:	e069      	b.n	8004b48 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	881a      	ldrh	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	1c9a      	adds	r2, r3, #2
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a98:	e056      	b.n	8004b48 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d11b      	bne.n	8004ae0 <HAL_SPI_TransmitReceive+0x1d4>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_SPI_TransmitReceive+0x1d4>
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d113      	bne.n	8004ae0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	881a      	ldrh	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	1c9a      	adds	r2, r3, #2
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d11c      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x21c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2246      	movs	r2, #70	; 0x46
 8004af2:	5a9b      	ldrh	r3, [r3, r2]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	b292      	uxth	r2, r2
 8004b06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	1c9a      	adds	r2, r3, #2
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2246      	movs	r2, #70	; 0x46
 8004b16:	5a9b      	ldrh	r3, [r3, r2]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b299      	uxth	r1, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2246      	movs	r2, #70	; 0x46
 8004b22:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b24:	2301      	movs	r3, #1
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b28:	f7fd feba 	bl	80028a0 <HAL_GetTick>
 8004b2c:	0002      	movs	r2, r0
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d807      	bhi.n	8004b48 <HAL_SPI_TransmitReceive+0x23c>
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	d004      	beq.n	8004b48 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8004b3e:	2323      	movs	r3, #35	; 0x23
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	2203      	movs	r2, #3
 8004b44:	701a      	strb	r2, [r3, #0]
        goto error;
 8004b46:	e0a2      	b.n	8004c8e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1a3      	bne.n	8004a9a <HAL_SPI_TransmitReceive+0x18e>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2246      	movs	r2, #70	; 0x46
 8004b56:	5a9b      	ldrh	r3, [r3, r2]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d19d      	bne.n	8004a9a <HAL_SPI_TransmitReceive+0x18e>
 8004b5e:	e085      	b.n	8004c6c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_SPI_TransmitReceive+0x268>
 8004b68:	2312      	movs	r3, #18
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d000      	beq.n	8004b74 <HAL_SPI_TransmitReceive+0x268>
 8004b72:	e070      	b.n	8004c56 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	7812      	ldrb	r2, [r2, #0]
 8004b80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b9a:	e05c      	b.n	8004c56 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d11c      	bne.n	8004be4 <HAL_SPI_TransmitReceive+0x2d8>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d017      	beq.n	8004be4 <HAL_SPI_TransmitReceive+0x2d8>
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d114      	bne.n	8004be4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	7812      	ldrb	r2, [r2, #0]
 8004bc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2201      	movs	r2, #1
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d11e      	bne.n	8004c30 <HAL_SPI_TransmitReceive+0x324>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2246      	movs	r2, #70	; 0x46
 8004bf6:	5a9b      	ldrh	r3, [r3, r2]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d018      	beq.n	8004c30 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	001a      	movs	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	7812      	ldrb	r2, [r2, #0]
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2246      	movs	r2, #70	; 0x46
 8004c1e:	5a9b      	ldrh	r3, [r3, r2]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b299      	uxth	r1, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2246      	movs	r2, #70	; 0x46
 8004c2a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c30:	f7fd fe36 	bl	80028a0 <HAL_GetTick>
 8004c34:	0002      	movs	r2, r0
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d802      	bhi.n	8004c46 <HAL_SPI_TransmitReceive+0x33a>
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	3301      	adds	r3, #1
 8004c44:	d102      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x340>
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d104      	bne.n	8004c56 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004c4c:	2323      	movs	r3, #35	; 0x23
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	2203      	movs	r2, #3
 8004c52:	701a      	strb	r2, [r3, #0]
        goto error;
 8004c54:	e01b      	b.n	8004c8e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d19d      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x290>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2246      	movs	r2, #70	; 0x46
 8004c64:	5a9b      	ldrh	r3, [r3, r2]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d197      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	0018      	movs	r0, r3
 8004c74:	f000 f94c 	bl	8004f10 <SPI_EndRxTxTransaction>
 8004c78:	1e03      	subs	r3, r0, #0
 8004c7a:	d007      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004c7c:	2323      	movs	r3, #35	; 0x23
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	661a      	str	r2, [r3, #96]	; 0x60
 8004c8a:	e000      	b.n	8004c8e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004c8c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	225d      	movs	r2, #93	; 0x5d
 8004c92:	2101      	movs	r1, #1
 8004c94:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	225c      	movs	r2, #92	; 0x5c
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004c9e:	2323      	movs	r3, #35	; 0x23
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	781b      	ldrb	r3, [r3, #0]
}
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b00a      	add	sp, #40	; 0x28
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	ffffefff 	.word	0xffffefff

08004cb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	1dfb      	adds	r3, r7, #7
 8004cbe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cc0:	f7fd fdee 	bl	80028a0 <HAL_GetTick>
 8004cc4:	0002      	movs	r2, r0
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	18d3      	adds	r3, r2, r3
 8004cce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cd0:	f7fd fde6 	bl	80028a0 <HAL_GetTick>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cd8:	4b3a      	ldr	r3, [pc, #232]	; (8004dc4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	015b      	lsls	r3, r3, #5
 8004cde:	0d1b      	lsrs	r3, r3, #20
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	4353      	muls	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ce6:	e058      	b.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	3301      	adds	r3, #1
 8004cec:	d055      	beq.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cee:	f7fd fdd7 	bl	80028a0 <HAL_GetTick>
 8004cf2:	0002      	movs	r2, r0
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d902      	bls.n	8004d04 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d142      	bne.n	8004d8a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	21e0      	movs	r1, #224	; 0xe0
 8004d10:	438a      	bics	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	2382      	movs	r3, #130	; 0x82
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d113      	bne.n	8004d48 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	2380      	movs	r3, #128	; 0x80
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d005      	beq.n	8004d38 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d107      	bne.n	8004d48 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2140      	movs	r1, #64	; 0x40
 8004d44:	438a      	bics	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	019b      	lsls	r3, r3, #6
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d110      	bne.n	8004d76 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	491a      	ldr	r1, [pc, #104]	; (8004dc8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004d60:	400a      	ands	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2180      	movs	r1, #128	; 0x80
 8004d70:	0189      	lsls	r1, r1, #6
 8004d72:	430a      	orrs	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	225d      	movs	r2, #93	; 0x5d
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	225c      	movs	r2, #92	; 0x5c
 8004d82:	2100      	movs	r1, #0
 8004d84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e017      	b.n	8004dba <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	425a      	negs	r2, r3
 8004daa:	4153      	adcs	r3, r2
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	001a      	movs	r2, r3
 8004db0:	1dfb      	adds	r3, r7, #7
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d197      	bne.n	8004ce8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	0018      	movs	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b008      	add	sp, #32
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	20000004 	.word	0x20000004
 8004dc8:	ffffdfff 	.word	0xffffdfff

08004dcc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	; 0x28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004dda:	2317      	movs	r3, #23
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	2200      	movs	r2, #0
 8004de0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004de2:	f7fd fd5d 	bl	80028a0 <HAL_GetTick>
 8004de6:	0002      	movs	r2, r0
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	1a9b      	subs	r3, r3, r2
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	18d3      	adds	r3, r2, r3
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004df2:	f7fd fd55 	bl	80028a0 <HAL_GetTick>
 8004df6:	0003      	movs	r3, r0
 8004df8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e02:	4b41      	ldr	r3, [pc, #260]	; (8004f08 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	0013      	movs	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	189b      	adds	r3, r3, r2
 8004e0c:	00da      	lsls	r2, r3, #3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	0d1b      	lsrs	r3, r3, #20
 8004e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e14:	4353      	muls	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e18:	e068      	b.n	8004eec <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	23c0      	movs	r3, #192	; 0xc0
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d10a      	bne.n	8004e3a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d107      	bne.n	8004e3a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	2117      	movs	r1, #23
 8004e32:	187b      	adds	r3, r7, r1
 8004e34:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e36:	187b      	adds	r3, r7, r1
 8004e38:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	d055      	beq.n	8004eec <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e40:	f7fd fd2e 	bl	80028a0 <HAL_GetTick>
 8004e44:	0002      	movs	r2, r0
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d902      	bls.n	8004e56 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d142      	bne.n	8004edc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	21e0      	movs	r1, #224	; 0xe0
 8004e62:	438a      	bics	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	2382      	movs	r3, #130	; 0x82
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d113      	bne.n	8004e9a <SPI_WaitFifoStateUntilTimeout+0xce>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d005      	beq.n	8004e8a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d107      	bne.n	8004e9a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2140      	movs	r1, #64	; 0x40
 8004e96:	438a      	bics	r2, r1
 8004e98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	019b      	lsls	r3, r3, #6
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d110      	bne.n	8004ec8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4916      	ldr	r1, [pc, #88]	; (8004f0c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004eb2:	400a      	ands	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2180      	movs	r1, #128	; 0x80
 8004ec2:	0189      	lsls	r1, r1, #6
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	225d      	movs	r2, #93	; 0x5d
 8004ecc:	2101      	movs	r1, #1
 8004ece:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	225c      	movs	r2, #92	; 0x5c
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e010      	b.n	8004efe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d18e      	bne.n	8004e1a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	0018      	movs	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b00a      	add	sp, #40	; 0x28
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	20000004 	.word	0x20000004
 8004f0c:	ffffdfff 	.word	0xffffdfff

08004f10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	23c0      	movs	r3, #192	; 0xc0
 8004f20:	0159      	lsls	r1, r3, #5
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	0013      	movs	r3, r2
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f7ff ff4e 	bl	8004dcc <SPI_WaitFifoStateUntilTimeout>
 8004f30:	1e03      	subs	r3, r0, #0
 8004f32:	d007      	beq.n	8004f44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f38:	2220      	movs	r2, #32
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e027      	b.n	8004f94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	0013      	movs	r3, r2
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2180      	movs	r1, #128	; 0x80
 8004f52:	f7ff fead 	bl	8004cb0 <SPI_WaitFlagStateUntilTimeout>
 8004f56:	1e03      	subs	r3, r0, #0
 8004f58:	d007      	beq.n	8004f6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5e:	2220      	movs	r2, #32
 8004f60:	431a      	orrs	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e014      	b.n	8004f94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	23c0      	movs	r3, #192	; 0xc0
 8004f6e:	00d9      	lsls	r1, r3, #3
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	0013      	movs	r3, r2
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f7ff ff27 	bl	8004dcc <SPI_WaitFifoStateUntilTimeout>
 8004f7e:	1e03      	subs	r3, r0, #0
 8004f80:	d007      	beq.n	8004f92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f86:	2220      	movs	r2, #32
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e000      	b.n	8004f94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	0018      	movs	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b004      	add	sp, #16
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <memset>:
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	1882      	adds	r2, r0, r2
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d100      	bne.n	8004fa6 <memset+0xa>
 8004fa4:	4770      	bx	lr
 8004fa6:	7019      	strb	r1, [r3, #0]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	e7f9      	b.n	8004fa0 <memset+0x4>

08004fac <__libc_init_array>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	2600      	movs	r6, #0
 8004fb0:	4c0c      	ldr	r4, [pc, #48]	; (8004fe4 <__libc_init_array+0x38>)
 8004fb2:	4d0d      	ldr	r5, [pc, #52]	; (8004fe8 <__libc_init_array+0x3c>)
 8004fb4:	1b64      	subs	r4, r4, r5
 8004fb6:	10a4      	asrs	r4, r4, #2
 8004fb8:	42a6      	cmp	r6, r4
 8004fba:	d109      	bne.n	8004fd0 <__libc_init_array+0x24>
 8004fbc:	2600      	movs	r6, #0
 8004fbe:	f000 f819 	bl	8004ff4 <_init>
 8004fc2:	4c0a      	ldr	r4, [pc, #40]	; (8004fec <__libc_init_array+0x40>)
 8004fc4:	4d0a      	ldr	r5, [pc, #40]	; (8004ff0 <__libc_init_array+0x44>)
 8004fc6:	1b64      	subs	r4, r4, r5
 8004fc8:	10a4      	asrs	r4, r4, #2
 8004fca:	42a6      	cmp	r6, r4
 8004fcc:	d105      	bne.n	8004fda <__libc_init_array+0x2e>
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	00b3      	lsls	r3, r6, #2
 8004fd2:	58eb      	ldr	r3, [r5, r3]
 8004fd4:	4798      	blx	r3
 8004fd6:	3601      	adds	r6, #1
 8004fd8:	e7ee      	b.n	8004fb8 <__libc_init_array+0xc>
 8004fda:	00b3      	lsls	r3, r6, #2
 8004fdc:	58eb      	ldr	r3, [r5, r3]
 8004fde:	4798      	blx	r3
 8004fe0:	3601      	adds	r6, #1
 8004fe2:	e7f2      	b.n	8004fca <__libc_init_array+0x1e>
 8004fe4:	0800503c 	.word	0x0800503c
 8004fe8:	0800503c 	.word	0x0800503c
 8004fec:	08005040 	.word	0x08005040
 8004ff0:	0800503c 	.word	0x0800503c

08004ff4 <_init>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr

08005000 <_fini>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr
