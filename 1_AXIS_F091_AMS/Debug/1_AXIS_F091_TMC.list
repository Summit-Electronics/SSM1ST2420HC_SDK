
1_AXIS_F091_TMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003914  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a00  08003a00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a00  08003a00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a00  08003a00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000000c  08003a14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08003a14  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f03  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a44  00000000  00000000  00028f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002a980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002b240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b373  00000000  00000000  0002ba38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d92  00000000  00000000  00046dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa33a  00000000  00000000  00050b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fae77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e74  00000000  00000000  000faec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080039b8 	.word	0x080039b8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080039b8 	.word	0x080039b8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <TMC5160_Basic_Init>:
	}*/
}


void TMC5160_Basic_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
		TMC5160_Stop();
 8000220:	f000 f926 	bl	8000470 <TMC5160_Stop>
		TMC5160_SPIWrite(0x00, 	0x00000008, 1); 		// writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 8000224:	2201      	movs	r2, #1
 8000226:	2108      	movs	r1, #8
 8000228:	2000      	movs	r0, #0
 800022a:	f000 fbfd 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x00, 	0x00000008, 0); 		// writing value 0x00000008 = 8 = 0.0 to address 0 = 0x00(GCONF)
 800022e:	2200      	movs	r2, #0
 8000230:	2108      	movs	r1, #8
 8000232:	2000      	movs	r0, #0
 8000234:	f000 fbf8 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x03, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 1 = 0x03(SLAVECONF)
 8000238:	2201      	movs	r2, #1
 800023a:	2100      	movs	r1, #0
 800023c:	2003      	movs	r0, #3
 800023e:	f000 fbf3 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x05, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 2 = 0x05(X_COMPARE)
 8000242:	2201      	movs	r2, #1
 8000244:	2100      	movs	r1, #0
 8000246:	2005      	movs	r0, #5
 8000248:	f000 fbee 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x06, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 3 = 0x06(OTP_PROG)
 800024c:	2201      	movs	r2, #1
 800024e:	2100      	movs	r1, #0
 8000250:	2006      	movs	r0, #6
 8000252:	f000 fbe9 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x08, 	0x0000000F, 1); 		// writing value 0x0000000F = 15 = 0.0 to address 4 = 0x08(FACTORY_CONF)
 8000256:	2201      	movs	r2, #1
 8000258:	210f      	movs	r1, #15
 800025a:	2008      	movs	r0, #8
 800025c:	f000 fbe4 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x09, 	0x00010606, 1); 		// writing value 0x00010606 = 67078 = 0.0 to address 5 = 0x09(SHORT_CONF)
 8000260:	4b73      	ldr	r3, [pc, #460]	; (8000430 <TMC5160_Basic_Init+0x214>)
 8000262:	2201      	movs	r2, #1
 8000264:	0019      	movs	r1, r3
 8000266:	2009      	movs	r0, #9
 8000268:	f000 fbde 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x0A, 	0x00080400, 1); 		// writing value 0x00080400 = 525312 = 0.0 to address 6 = 0x0A(DRV_CONF)
 800026c:	4b71      	ldr	r3, [pc, #452]	; (8000434 <TMC5160_Basic_Init+0x218>)
 800026e:	2201      	movs	r2, #1
 8000270:	0019      	movs	r1, r3
 8000272:	200a      	movs	r0, #10
 8000274:	f000 fbd8 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x0B, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 7 = 0x0B(GLOBAL_SCALER)
 8000278:	2201      	movs	r2, #1
 800027a:	2100      	movs	r1, #0
 800027c:	200b      	movs	r0, #11
 800027e:	f000 fbd3 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x10, 	0x00070A03, 1); 		// writing value 0x00070A03 = 461315 = 0.0 to address 8 = 0x10(IHOLD_IRUN)
 8000282:	4b6d      	ldr	r3, [pc, #436]	; (8000438 <TMC5160_Basic_Init+0x21c>)
 8000284:	2201      	movs	r2, #1
 8000286:	0019      	movs	r1, r3
 8000288:	2010      	movs	r0, #16
 800028a:	f000 fbcd 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x11, 	0x0000000A, 1); 		// writing value 0x0000000A = 10 = 0.0 to address 9 = 0x11(TPOWERDOWN)
 800028e:	2201      	movs	r2, #1
 8000290:	210a      	movs	r1, #10
 8000292:	2011      	movs	r0, #17
 8000294:	f000 fbc8 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x13, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 10 = 0x13(TPWMTHRS)
 8000298:	2201      	movs	r2, #1
 800029a:	2100      	movs	r1, #0
 800029c:	2013      	movs	r0, #19
 800029e:	f000 fbc3 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x14, 	0x00000000, 1); 		// writing value 0x00000010 = 16 = 0.0 to address 11 = 0x14(TCOOLTHRS)
 80002a2:	2201      	movs	r2, #1
 80002a4:	2100      	movs	r1, #0
 80002a6:	2014      	movs	r0, #20
 80002a8:	f000 fbbe 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x15, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 12 = 0x15(THIGH)
 80002ac:	2201      	movs	r2, #1
 80002ae:	2100      	movs	r1, #0
 80002b0:	2015      	movs	r0, #21
 80002b2:	f000 fbb9 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x20, 	0x00000001, 1); 		// writing value 0x00000001 = 1 = 0.0 to address 13 = 0x20(RAMPMODE)
 80002b6:	2201      	movs	r2, #1
 80002b8:	2101      	movs	r1, #1
 80002ba:	2020      	movs	r0, #32
 80002bc:	f000 fbb4 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x21, 	0x00000000, 1); 		// writing value 0x0016DFDD = 1499101 = 0.0 to address 14 = 0x21(XACTUAL)
 80002c0:	2201      	movs	r2, #1
 80002c2:	2100      	movs	r1, #0
 80002c4:	2021      	movs	r0, #33	; 0x21
 80002c6:	f000 fbaf 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x23, 	0x000003E8, 1); 		// writing value 0x000003E8 = 1000 = 0.0 to address 15 = 0x23(VSTART)
 80002ca:	23fa      	movs	r3, #250	; 0xfa
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	2201      	movs	r2, #1
 80002d0:	0019      	movs	r1, r3
 80002d2:	2023      	movs	r0, #35	; 0x23
 80002d4:	f000 fba8 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x24, 	0x000003E8, 1); 		// writing value 0x000003E8 = 1000 = 0.0 to address 16 = 0x24(A1)
 80002d8:	23fa      	movs	r3, #250	; 0xfa
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	2201      	movs	r2, #1
 80002de:	0019      	movs	r1, r3
 80002e0:	2024      	movs	r0, #36	; 0x24
 80002e2:	f000 fba1 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x25, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 17 = 0x25(V1)
 80002e6:	2201      	movs	r2, #1
 80002e8:	2100      	movs	r1, #0
 80002ea:	2025      	movs	r0, #37	; 0x25
 80002ec:	f000 fb9c 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x26, 	0x000009C4, 1); 		// writing value 0x000009C4 = 2500 = 0.0 to address 18 = 0x26(AMAX)
 80002f0:	4b52      	ldr	r3, [pc, #328]	; (800043c <TMC5160_Basic_Init+0x220>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	0019      	movs	r1, r3
 80002f6:	2026      	movs	r0, #38	; 0x26
 80002f8:	f000 fb96 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x27, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 19 = 0x27(VMAX)
 80002fc:	2201      	movs	r2, #1
 80002fe:	2100      	movs	r1, #0
 8000300:	2027      	movs	r0, #39	; 0x27
 8000302:	f000 fb91 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x28, 	0x000002BC, 1); 		// writing value 0x000002BC = 700 = 0.0 to address 20 = 0x28(DMAX)
 8000306:	23af      	movs	r3, #175	; 0xaf
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	2201      	movs	r2, #1
 800030c:	0019      	movs	r1, r3
 800030e:	2028      	movs	r0, #40	; 0x28
 8000310:	f000 fb8a 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x2A, 	0x00000578, 1); 		// writing value 0x00000578 = 1400 = 0.0 to address 21 = 0x2A(D1)
 8000314:	23af      	movs	r3, #175	; 0xaf
 8000316:	00db      	lsls	r3, r3, #3
 8000318:	2201      	movs	r2, #1
 800031a:	0019      	movs	r1, r3
 800031c:	202a      	movs	r0, #42	; 0x2a
 800031e:	f000 fb83 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x2B, 	0x0000000A, 1); 		// writing value 0x0000000A = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 8000322:	2201      	movs	r2, #1
 8000324:	210a      	movs	r1, #10
 8000326:	202b      	movs	r0, #43	; 0x2b
 8000328:	f000 fb7e 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x2C, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 23 = 0x2C(TZEROWAIT)
 800032c:	2201      	movs	r2, #1
 800032e:	2100      	movs	r1, #0
 8000330:	202c      	movs	r0, #44	; 0x2c
 8000332:	f000 fb79 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x2D, 	0xFFFF9C00, 1); 		// writing value 0xFFFF9C00 = 0 = 0.0 to address 24 = 0x2D(XTARGET)
 8000336:	4b42      	ldr	r3, [pc, #264]	; (8000440 <TMC5160_Basic_Init+0x224>)
 8000338:	2201      	movs	r2, #1
 800033a:	0019      	movs	r1, r3
 800033c:	202d      	movs	r0, #45	; 0x2d
 800033e:	f000 fb73 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x33, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 25 = 0x33(VDCMIN)
 8000342:	2201      	movs	r2, #1
 8000344:	2100      	movs	r1, #0
 8000346:	2033      	movs	r0, #51	; 0x33
 8000348:	f000 fb6e 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x34, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 26 = 0x34(SW_MODE)
 800034c:	2201      	movs	r2, #1
 800034e:	2100      	movs	r1, #0
 8000350:	2034      	movs	r0, #52	; 0x34
 8000352:	f000 fb69 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x38, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 27 = 0x38(ENCMODE)
 8000356:	2201      	movs	r2, #1
 8000358:	2100      	movs	r1, #0
 800035a:	2038      	movs	r0, #56	; 0x38
 800035c:	f000 fb64 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x39, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 28 = 0x39(X_ENC)
 8000360:	2201      	movs	r2, #1
 8000362:	2100      	movs	r1, #0
 8000364:	2039      	movs	r0, #57	; 0x39
 8000366:	f000 fb5f 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x3A, 	0x00010000, 1); 		// writing value 0x00010000 = 65536 = 0.0 to address 29 = 0x3A(ENC_CONST)
 800036a:	2380      	movs	r3, #128	; 0x80
 800036c:	025b      	lsls	r3, r3, #9
 800036e:	2201      	movs	r2, #1
 8000370:	0019      	movs	r1, r3
 8000372:	203a      	movs	r0, #58	; 0x3a
 8000374:	f000 fb58 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x3D, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 30 = 0x3D(ENC_DEVIATION)
 8000378:	2201      	movs	r2, #1
 800037a:	2100      	movs	r1, #0
 800037c:	203d      	movs	r0, #61	; 0x3d
 800037e:	f000 fb53 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x60, 	0xAAAAB554, 1); 		// writing value 0xAAAAB554 = 0 = 0.0 to address 31 = 0x60(MSLUT[0])
 8000382:	4b30      	ldr	r3, [pc, #192]	; (8000444 <TMC5160_Basic_Init+0x228>)
 8000384:	2201      	movs	r2, #1
 8000386:	0019      	movs	r1, r3
 8000388:	2060      	movs	r0, #96	; 0x60
 800038a:	f000 fb4d 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x61, 	0x4A9554AA, 1); 		// writing value 0x4A9554AA = 1251300522 = 0.0 to address 32 = 0x61(MSLUT[1])
 800038e:	4b2e      	ldr	r3, [pc, #184]	; (8000448 <TMC5160_Basic_Init+0x22c>)
 8000390:	2201      	movs	r2, #1
 8000392:	0019      	movs	r1, r3
 8000394:	2061      	movs	r0, #97	; 0x61
 8000396:	f000 fb47 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x62, 	0x24492929, 1); 		// writing value 0x24492929 = 608774441 = 0.0 to address 33 = 0x62(MSLUT[2])
 800039a:	4b2c      	ldr	r3, [pc, #176]	; (800044c <TMC5160_Basic_Init+0x230>)
 800039c:	2201      	movs	r2, #1
 800039e:	0019      	movs	r1, r3
 80003a0:	2062      	movs	r0, #98	; 0x62
 80003a2:	f000 fb41 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x63, 	0x10104222, 1); 		// writing value 0x10104222 = 269500962 = 0.0 to address 34 = 0x63(MSLUT[3])
 80003a6:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <TMC5160_Basic_Init+0x234>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	0019      	movs	r1, r3
 80003ac:	2063      	movs	r0, #99	; 0x63
 80003ae:	f000 fb3b 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x64, 	0xFBFFFFFF, 1); 		// writing value 0xFBFFFFFF = 0 = 0.0 to address 35 = 0x64(MSLUT[4])
 80003b2:	4b28      	ldr	r3, [pc, #160]	; (8000454 <TMC5160_Basic_Init+0x238>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	0019      	movs	r1, r3
 80003b8:	2064      	movs	r0, #100	; 0x64
 80003ba:	f000 fb35 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x65, 	0xB5BB777D, 1); 		// writing value 0xB5BB777D = 0 = 0.0 to address 36 = 0x65(MSLUT[5])
 80003be:	4b26      	ldr	r3, [pc, #152]	; (8000458 <TMC5160_Basic_Init+0x23c>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	0019      	movs	r1, r3
 80003c4:	2065      	movs	r0, #101	; 0x65
 80003c6:	f000 fb2f 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x66, 	0x49295556, 1); 		// writing value 0x49295556 = 1227445590 = 0.0 to address 37 = 0x66(MSLUT[6])
 80003ca:	4b24      	ldr	r3, [pc, #144]	; (800045c <TMC5160_Basic_Init+0x240>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	0019      	movs	r1, r3
 80003d0:	2066      	movs	r0, #102	; 0x66
 80003d2:	f000 fb29 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x67, 	0x00404222, 1); 		// writing value 0x00404222 = 4211234 = 0.0 to address 38 = 0x67(MSLUT[7])
 80003d6:	4b22      	ldr	r3, [pc, #136]	; (8000460 <TMC5160_Basic_Init+0x244>)
 80003d8:	2201      	movs	r2, #1
 80003da:	0019      	movs	r1, r3
 80003dc:	2067      	movs	r0, #103	; 0x67
 80003de:	f000 fb23 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x68, 	0xFFFF8056, 1); 		// writing value 0xFFFF8056 = 0 = 0.0 to address 39 = 0x68(MSLUTSEL)
 80003e2:	4b20      	ldr	r3, [pc, #128]	; (8000464 <TMC5160_Basic_Init+0x248>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	0019      	movs	r1, r3
 80003e8:	2068      	movs	r0, #104	; 0x68
 80003ea:	f000 fb1d 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x69, 	0x00F70000, 1); 		// writing value 0x00F70000 = 16187392 = 0.0 to address 40 = 0x69(MSLUTSTART)
 80003ee:	23f7      	movs	r3, #247	; 0xf7
 80003f0:	041b      	lsls	r3, r3, #16
 80003f2:	2201      	movs	r2, #1
 80003f4:	0019      	movs	r1, r3
 80003f6:	2069      	movs	r0, #105	; 0x69
 80003f8:	f000 fb16 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x6C, 	0x00410153, 1); 		// writing value 0x00410103 = 4260099 = 0.0 to address 41 = 0x6C(CHOPCONF)
 80003fc:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <TMC5160_Basic_Init+0x24c>)
 80003fe:	2201      	movs	r2, #1
 8000400:	0019      	movs	r1, r3
 8000402:	206c      	movs	r0, #108	; 0x6c
 8000404:	f000 fb10 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x6D, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 42 = 0x6D(COOLCONF)
 8000408:	2201      	movs	r2, #1
 800040a:	2100      	movs	r1, #0
 800040c:	206d      	movs	r0, #109	; 0x6d
 800040e:	f000 fb0b 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x6E, 	0x00000000, 1); 		// writing value 0x00000000 = 0 = 0.0 to address 43 = 0x6E(DCCTRL)
 8000412:	2201      	movs	r2, #1
 8000414:	2100      	movs	r1, #0
 8000416:	206e      	movs	r0, #110	; 0x6e
 8000418:	f000 fb06 	bl	8000a28 <TMC5160_SPIWrite>
		TMC5160_SPIWrite(0x70, 	0xC40C001E, 1); 		// writing value 0xC40C001E = 0 = 0.0 to address 44 = 0x70(PWMCONF)
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <TMC5160_Basic_Init+0x250>)
 800041e:	2201      	movs	r2, #1
 8000420:	0019      	movs	r1, r3
 8000422:	2070      	movs	r0, #112	; 0x70
 8000424:	f000 fb00 	bl	8000a28 <TMC5160_SPIWrite>
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	00010606 	.word	0x00010606
 8000434:	00080400 	.word	0x00080400
 8000438:	00070a03 	.word	0x00070a03
 800043c:	000009c4 	.word	0x000009c4
 8000440:	ffff9c00 	.word	0xffff9c00
 8000444:	aaaab554 	.word	0xaaaab554
 8000448:	4a9554aa 	.word	0x4a9554aa
 800044c:	24492929 	.word	0x24492929
 8000450:	10104222 	.word	0x10104222
 8000454:	fbffffff 	.word	0xfbffffff
 8000458:	b5bb777d 	.word	0xb5bb777d
 800045c:	49295556 	.word	0x49295556
 8000460:	00404222 	.word	0x00404222
 8000464:	ffff8056 	.word	0xffff8056
 8000468:	00410153 	.word	0x00410153
 800046c:	c40c001e 	.word	0xc40c001e

08000470 <TMC5160_Stop>:
		AMS5055_SPIWriteInt(0x3FFF,1);
	}
}

void TMC5160_Stop(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	TMC5160_SPIWrite(0x26, 	0x00000000, 1); 		// writing value 0x000009C4 = 500 = 0.0 to address 18 = 0x26(AMAX)
 8000474:	2201      	movs	r2, #1
 8000476:	2100      	movs	r1, #0
 8000478:	2026      	movs	r0, #38	; 0x26
 800047a:	f000 fad5 	bl	8000a28 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x27, 	0x00000000, 1); 		// writing value 0x00000000 = 200 000 = 0.0 to address 19 = 0x27(VMAX)
 800047e:	2201      	movs	r2, #1
 8000480:	2100      	movs	r1, #0
 8000482:	2027      	movs	r0, #39	; 0x27
 8000484:	f000 fad0 	bl	8000a28 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x24, 	0x00000000, 1); 		// writing value 0x000003E8 = 1 000 = 0.0 to address 16 = 0x24(A1)
 8000488:	2201      	movs	r2, #1
 800048a:	2100      	movs	r1, #0
 800048c:	2024      	movs	r0, #36	; 0x24
 800048e:	f000 facb 	bl	8000a28 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x25, 	0x00000000, 1); 		// writing value 0x00000000 = 50 000 = 0.0 to address 17 = 0x25(V1)
 8000492:	2201      	movs	r2, #1
 8000494:	2100      	movs	r1, #0
 8000496:	2025      	movs	r0, #37	; 0x25
 8000498:	f000 fac6 	bl	8000a28 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x28, 	0x00000000, 1); 		// writing value 0x000002BC = 700 = 0.0 to address 20 = 0x28(DMAX)
 800049c:	2201      	movs	r2, #1
 800049e:	2100      	movs	r1, #0
 80004a0:	2028      	movs	r0, #40	; 0x28
 80004a2:	f000 fac1 	bl	8000a28 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2A, 	0x00000010, 1); 		// writing value 0x00000578 = 1 400 = 0.0 to address 21 = 0x2A(D1)
 80004a6:	2201      	movs	r2, #1
 80004a8:	2110      	movs	r1, #16
 80004aa:	202a      	movs	r0, #42	; 0x2a
 80004ac:	f000 fabc 	bl	8000a28 <TMC5160_SPIWrite>
	TMC5160_SPIWrite(0x2B, 	0x00000010, 1); 		// writing value 0x0000000A = 10 = 0.0 to address 22 = 0x2B(VSTOP)
 80004b0:	2201      	movs	r2, #1
 80004b2:	2110      	movs	r1, #16
 80004b4:	202b      	movs	r0, #43	; 0x2b
 80004b6:	f000 fab7 	bl	8000a28 <TMC5160_SPIWrite>
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <HAL_CAN_RxFifo0MsgPendingCallback>:
int x;


/*  CAN RECEIVE INTERRUPT */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CANRxHeader, CANRxData);
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	2100      	movs	r1, #0
 80004d0:	f001 fb7a 	bl	8001bc8 <HAL_CAN_GetRxMessage>

	if (CANRxData[0] == 0x01)
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d102      	bne.n	80004e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Datacheck = 1;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
	}
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b002      	add	sp, #8
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	20000174 	.word	0x20000174
 80004f0:	20000158 	.word	0x20000158
 80004f4:	20000264 	.word	0x20000264

080004f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	0002      	movs	r2, r0
 8000500:	1dbb      	adds	r3, r7, #6
 8000502:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == AMS_INT_Pin && ReadingData == 0)
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d126      	bne.n	800055a <HAL_GPIO_EXTI_Callback+0x62>
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <HAL_GPIO_EXTI_Callback+0x6c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d122      	bne.n	800055a <HAL_GPIO_EXTI_Callback+0x62>
	{
		ReadingData = 1;
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]


		if(Ax == 0) // do not write, first value is random
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <HAL_GPIO_EXTI_Callback+0x70>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d102      	bne.n	8000528 <HAL_GPIO_EXTI_Callback+0x30>
		{
			AMS5055_Get_Position();
 8000522:	f000 fc87 	bl	8000e34 <AMS5055_Get_Position>
 8000526:	e008      	b.n	800053a <HAL_GPIO_EXTI_Callback+0x42>
		}

		else
		{
			Angles[Ax] = AMS5055_Get_Position();
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_GPIO_EXTI_Callback+0x70>)
 800052a:	681c      	ldr	r4, [r3, #0]
 800052c:	f000 fc82 	bl	8000e34 <AMS5055_Get_Position>
 8000530:	0003      	movs	r3, r0
 8000532:	0019      	movs	r1, r3
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <HAL_GPIO_EXTI_Callback+0x74>)
 8000536:	0062      	lsls	r2, r4, #1
 8000538:	52d1      	strh	r1, [r2, r3]
		}

		if(Ax == 100)
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <HAL_GPIO_EXTI_Callback+0x70>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b64      	cmp	r3, #100	; 0x64
 8000540:	d103      	bne.n	800054a <HAL_GPIO_EXTI_Callback+0x52>
		{
			Ax = 0;
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <HAL_GPIO_EXTI_Callback+0x70>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	e004      	b.n	8000554 <HAL_GPIO_EXTI_Callback+0x5c>
		}

		else
		{
			Ax++;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <HAL_GPIO_EXTI_Callback+0x70>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_GPIO_EXTI_Callback+0x70>)
 8000552:	601a      	str	r2, [r3, #0]
		}

		ReadingData = 0;
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
	}
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b003      	add	sp, #12
 8000560:	bd90      	pop	{r4, r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	20000268 	.word	0x20000268
 8000568:	2000026c 	.word	0x2000026c
 800056c:	20000188 	.word	0x20000188

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fe1c 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f834 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f9b6 	bl	80008ec <MX_GPIO_Init>
  MX_ADC_Init();
 8000580:	f000 f876 	bl	8000670 <MX_ADC_Init>
  MX_CAN_Init();
 8000584:	f000 f8d0 	bl	8000728 <MX_CAN_Init>
  MX_SPI1_Init();
 8000588:	f000 f934 	bl	80007f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800058c:	f000 f970 	bl	8000870 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,1); // set TMC CS high
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	015b      	lsls	r3, r3, #5
 8000594:	4812      	ldr	r0, [pc, #72]	; (80005e0 <main+0x70>)
 8000596:	2201      	movs	r2, #1
 8000598:	0019      	movs	r1, r3
 800059a:	f002 f8c5 	bl	8002728 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS low
 800059e:	2390      	movs	r3, #144	; 0x90
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	2201      	movs	r2, #1
 80005a4:	2110      	movs	r1, #16
 80005a6:	0018      	movs	r0, r3
 80005a8:	f002 f8be 	bl	8002728 <HAL_GPIO_WritePin>

  /* Enable DRV stage*/
  HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,0); // LOW = ON
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	0059      	lsls	r1, r3, #1
 80005b0:	2390      	movs	r3, #144	; 0x90
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	2200      	movs	r2, #0
 80005b6:	0018      	movs	r0, r3
 80005b8:	f002 f8b6 	bl	8002728 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005bc:	2064      	movs	r0, #100	; 0x64
 80005be:	f000 fe5b 	bl	8001278 <HAL_Delay>

  /* Perform Basic Init of TMC5160 and AMS5055 */
  TMC5160_Basic_Init();
 80005c2:	f7ff fe2b 	bl	800021c <TMC5160_Basic_Init>
  AMS5055_Basic_Init();
 80005c6:	f000 fb19 	bl	8000bfc <AMS5055_Basic_Init>
  TMC5160_Rotate_To(51200); // move to Position X
  TMC5160_Rotate_To(0); // move to Position X
*/


  HAL_GPIO_WritePin(GPIOA,DRV_ENN_Pin,1); // LOW = ON
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	0059      	lsls	r1, r3, #1
 80005ce:	2390      	movs	r3, #144	; 0x90
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	2201      	movs	r2, #1
 80005d4:	0018      	movs	r0, r3
 80005d6:	f002 f8a7 	bl	8002728 <HAL_GPIO_WritePin>
  TMC5160_Stop();
 80005da:	f7ff ff49 	bl	8000470 <TMC5160_Stop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005de:	e7fe      	b.n	80005de <main+0x6e>
 80005e0:	48000400 	.word	0x48000400

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b093      	sub	sp, #76	; 0x4c
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	2414      	movs	r4, #20
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2334      	movs	r3, #52	; 0x34
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f003 f9d7 	bl	80039a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	0018      	movs	r0, r3
 80005fe:	2310      	movs	r3, #16
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f003 f9d0 	bl	80039a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000608:	0021      	movs	r1, r4
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2212      	movs	r2, #18
 800060e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2201      	movs	r2, #1
 8000614:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2201      	movs	r2, #1
 800061a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2210      	movs	r2, #16
 8000620:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2210      	movs	r2, #16
 8000626:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	187b      	adds	r3, r7, r1
 8000630:	0018      	movs	r0, r3
 8000632:	f002 f8b3 	bl	800279c <HAL_RCC_OscConfig>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800063a:	f000 fc0d 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2207      	movs	r2, #7
 8000642:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2100      	movs	r1, #0
 800065a:	0018      	movs	r0, r3
 800065c:	f002 fc24 	bl	8002ea8 <HAL_RCC_ClockConfig>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000664:	f000 fbf8 	bl	8000e58 <Error_Handler>
  }
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b013      	add	sp, #76	; 0x4c
 800066e:	bd90      	pop	{r4, r7, pc}

08000670 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	0018      	movs	r0, r3
 800067a:	230c      	movs	r3, #12
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f003 f992 	bl	80039a8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <MX_ADC_Init+0xb0>)
 8000686:	4a27      	ldr	r2, [pc, #156]	; (8000724 <MX_ADC_Init+0xb4>)
 8000688:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <MX_ADC_Init+0xb0>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <MX_ADC_Init+0xb0>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <MX_ADC_Init+0xb0>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_ADC_Init+0xb0>)
 800069e:	2201      	movs	r2, #1
 80006a0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_ADC_Init+0xb0>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_ADC_Init+0xb0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_ADC_Init+0xb0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_ADC_Init+0xb0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_ADC_Init+0xb0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_ADC_Init+0xb0>)
 80006c2:	22c2      	movs	r2, #194	; 0xc2
 80006c4:	32ff      	adds	r2, #255	; 0xff
 80006c6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_ADC_Init+0xb0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_ADC_Init+0xb0>)
 80006d0:	2224      	movs	r2, #36	; 0x24
 80006d2:	2100      	movs	r1, #0
 80006d4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_ADC_Init+0xb0>)
 80006d8:	2201      	movs	r2, #1
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_ADC_Init+0xb0>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 fdee 	bl	80012c0 <HAL_ADC_Init>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80006e8:	f000 fbb6 	bl	8000e58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0152      	lsls	r2, r2, #5
 80006f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0552      	lsls	r2, r2, #21
 8000700:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000702:	1d3a      	adds	r2, r7, #4
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_ADC_Init+0xb0>)
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f000 ff19 	bl	8001540 <HAL_ADC_ConfigChannel>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000712:	f000 fba1 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b004      	add	sp, #16
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	20000028 	.word	0x20000028
 8000724:	40012400 	.word	0x40012400

08000728 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800072e:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <MX_CAN_Init+0xc4>)
 8000730:	4a2f      	ldr	r2, [pc, #188]	; (80007f0 <MX_CAN_Init+0xc8>)
 8000732:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <MX_CAN_Init+0xc4>)
 8000736:	2210      	movs	r2, #16
 8000738:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800073a:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <MX_CAN_Init+0xc4>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000740:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_CAN_Init+0xc4>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000746:	4b29      	ldr	r3, [pc, #164]	; (80007ec <MX_CAN_Init+0xc4>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0252      	lsls	r2, r2, #9
 800074c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <MX_CAN_Init+0xc4>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000754:	4b25      	ldr	r3, [pc, #148]	; (80007ec <MX_CAN_Init+0xc4>)
 8000756:	2200      	movs	r2, #0
 8000758:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <MX_CAN_Init+0xc4>)
 800075c:	2200      	movs	r2, #0
 800075e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <MX_CAN_Init+0xc4>)
 8000762:	2200      	movs	r2, #0
 8000764:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <MX_CAN_Init+0xc4>)
 8000768:	2200      	movs	r2, #0
 800076a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_CAN_Init+0xc4>)
 800076e:	2200      	movs	r2, #0
 8000770:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_CAN_Init+0xc4>)
 8000774:	2200      	movs	r2, #0
 8000776:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_CAN_Init+0xc4>)
 800077a:	0018      	movs	r0, r3
 800077c:	f000 ffee 	bl	800175c <HAL_CAN_Init>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 fb68 	bl	8000e58 <Error_Handler>

  /* CAN filter */

  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 8000788:	003b      	movs	r3, r7
 800078a:	2201      	movs	r2, #1
 800078c:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 10;
 800078e:	003b      	movs	r3, r7
 8000790:	220a      	movs	r2, #10
 8000792:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000794:	003b      	movs	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x0000;
 800079a:	003b      	movs	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80007a0:	003b      	movs	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80007a6:	003b      	movs	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80007ac:	003b      	movs	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007b2:	003b      	movs	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007b8:	003b      	movs	r3, r7
 80007ba:	2201      	movs	r2, #1
 80007bc:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 0;
 80007be:	003b      	movs	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80007c4:	003a      	movs	r2, r7
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_CAN_Init+0xc4>)
 80007c8:	0011      	movs	r1, r2
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 f8c4 	bl	8001958 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_CAN_Init+0xc4>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 f9b2 	bl	8001b3c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <MX_CAN_Init+0xc4>)
 80007da:	2102      	movs	r1, #2
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 fb0f 	bl	8001e00 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b00a      	add	sp, #40	; 0x28
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	20000068 	.word	0x20000068
 80007f0:	40006400 	.word	0x40006400

080007f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_SPI1_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_SPI1_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_SPI1_Init+0x74>)
 8000800:	2282      	movs	r2, #130	; 0x82
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_SPI1_Init+0x74>)
 800080e:	22e0      	movs	r2, #224	; 0xe0
 8000810:	00d2      	lsls	r2, r2, #3
 8000812:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_SPI1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_SPI1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_SPI1_Init+0x74>)
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	0092      	lsls	r2, r2, #2
 8000826:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_SPI1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_SPI1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_SPI1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SPI1_Init+0x74>)
 8000842:	2207      	movs	r2, #7
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_SPI1_Init+0x74>)
 800084e:	2208      	movs	r2, #8
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MX_SPI1_Init+0x74>)
 8000854:	0018      	movs	r0, r3
 8000856:	f002 fc83 	bl	8003160 <HAL_SPI_Init>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 fafb 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000090 	.word	0x20000090
 800086c:	40013000 	.word	0x40013000

08000870 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_SPI2_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_SPI2_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_SPI2_Init+0x74>)
 800087c:	2282      	movs	r2, #130	; 0x82
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_SPI2_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_SPI2_Init+0x74>)
 800088a:	22e0      	movs	r2, #224	; 0xe0
 800088c:	00d2      	lsls	r2, r2, #3
 800088e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_SPI2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_SPI2_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_SPI2_Init+0x74>)
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	0092      	lsls	r2, r2, #2
 80008a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_SPI2_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_SPI2_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_SPI2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_SPI2_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_SPI2_Init+0x74>)
 80008be:	2207      	movs	r2, #7
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_SPI2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_SPI2_Init+0x74>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <MX_SPI2_Init+0x74>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f002 fc45 	bl	8003160 <HAL_SPI_Init>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008da:	f000 fabd 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000f4 	.word	0x200000f4
 80008e8:	40003800 	.word	0x40003800

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	240c      	movs	r4, #12
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	0018      	movs	r0, r3
 80008f8:	2314      	movs	r3, #20
 80008fa:	001a      	movs	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	f003 f853 	bl	80039a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b46      	ldr	r3, [pc, #280]	; (8000a1c <MX_GPIO_Init+0x130>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <MX_GPIO_Init+0x130>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0289      	lsls	r1, r1, #10
 800090c:	430a      	orrs	r2, r1
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	4b42      	ldr	r3, [pc, #264]	; (8000a1c <MX_GPIO_Init+0x130>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	029b      	lsls	r3, r3, #10
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <MX_GPIO_Init+0x130>)
 8000920:	695a      	ldr	r2, [r3, #20]
 8000922:	4b3e      	ldr	r3, [pc, #248]	; (8000a1c <MX_GPIO_Init+0x130>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	02c9      	lsls	r1, r1, #11
 8000928:	430a      	orrs	r2, r1
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	4b3b      	ldr	r3, [pc, #236]	; (8000a1c <MX_GPIO_Init+0x130>)
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	02db      	lsls	r3, r3, #11
 8000934:	4013      	ands	r3, r2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin, GPIO_PIN_RESET);
 800093a:	238a      	movs	r3, #138	; 0x8a
 800093c:	0059      	lsls	r1, r3, #1
 800093e:	2390      	movs	r3, #144	; 0x90
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	2200      	movs	r2, #0
 8000944:	0018      	movs	r0, r3
 8000946:	f001 feef 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin, GPIO_PIN_RESET);
 800094a:	4935      	ldr	r1, [pc, #212]	; (8000a20 <MX_GPIO_Init+0x134>)
 800094c:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <MX_GPIO_Init+0x138>)
 800094e:	2200      	movs	r2, #0
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fee9 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_STB_Pin AMS_CS_Pin DRV_ENN_Pin */
  GPIO_InitStruct.Pin = CAN_STB_Pin|AMS_CS_Pin|DRV_ENN_Pin;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	228a      	movs	r2, #138	; 0x8a
 800095a:	0052      	lsls	r2, r2, #1
 800095c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2201      	movs	r2, #1
 8000962:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	193a      	adds	r2, r7, r4
 8000972:	2390      	movs	r3, #144	; 0x90
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f001 fd5d 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_INT_Pin */
  GPIO_InitStruct.Pin = AMS_INT_Pin;
 800097e:	0021      	movs	r1, r4
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2201      	movs	r2, #1
 8000984:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2288      	movs	r2, #136	; 0x88
 800098a:	0352      	lsls	r2, r2, #13
 800098c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	000c      	movs	r4, r1
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AMS_INT_GPIO_Port, &GPIO_InitStruct);
 8000996:	193b      	adds	r3, r7, r4
 8000998:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <MX_GPIO_Init+0x138>)
 800099a:	0019      	movs	r1, r3
 800099c:	0010      	movs	r0, r2
 800099e:	f001 fd4b 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC_CS_Pin EXT_OUT_1_Pin EXT_OUT_2_Pin */
  GPIO_InitStruct.Pin = TMC_CS_Pin|EXT_OUT_1_Pin|EXT_OUT_2_Pin;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <MX_GPIO_Init+0x134>)
 80009a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2201      	movs	r2, #1
 80009ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <MX_GPIO_Init+0x138>)
 80009be:	0019      	movs	r1, r3
 80009c0:	0010      	movs	r0, r2
 80009c2:	f001 fd39 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : REFL_UC_Pin */
  GPIO_InitStruct.Pin = REFL_UC_Pin;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2240      	movs	r2, #64	; 0x40
 80009ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2201      	movs	r2, #1
 80009d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REFL_UC_GPIO_Port, &GPIO_InitStruct);
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_GPIO_Init+0x138>)
 80009dc:	0019      	movs	r1, r3
 80009de:	0010      	movs	r0, r2
 80009e0:	f001 fd2a 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : REFR_UC_Pin */
  GPIO_InitStruct.Pin = REFR_UC_Pin;
 80009e4:	0021      	movs	r1, r4
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REFR_UC_GPIO_Port, &GPIO_InitStruct);
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <MX_GPIO_Init+0x138>)
 80009fc:	0019      	movs	r1, r3
 80009fe:	0010      	movs	r0, r2
 8000a00:	f001 fd1a 	bl	8002438 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2005      	movs	r0, #5
 8000a0a:	f001 fce3 	bl	80023d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a0e:	2005      	movs	r0, #5
 8000a10:	f001 fcf5 	bl	80023fe <HAL_NVIC_EnableIRQ>

}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b009      	add	sp, #36	; 0x24
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	00001030 	.word	0x00001030
 8000a24:	48000400 	.word	0x48000400

08000a28 <TMC5160_SPIWrite>:
	HAL_GPIO_WritePin(GPIOB, TMC_CS_Pin, 1);
}*/


uint32_t TMC5160_SPIWrite(uint8_t Adress, uint32_t Value, int Action)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	240f      	movs	r4, #15
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	1c02      	adds	r2, r0, #0
 8000a38:	701a      	strb	r2, [r3, #0]

	  SPI2Rx = 0;
 8000a3a:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <TMC5160_SPIWrite+0xdc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,0); // set TMC CS low
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	015b      	lsls	r3, r3, #5
 8000a44:	4830      	ldr	r0, [pc, #192]	; (8000b08 <TMC5160_SPIWrite+0xe0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	0019      	movs	r1, r3
 8000a4a:	f001 fe6d 	bl	8002728 <HAL_GPIO_WritePin>

	  if (Action == 1) //Write
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d106      	bne.n	8000a62 <TMC5160_SPIWrite+0x3a>
	  {
		SPI2TxData[0] = Adress + 0x80;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	3b80      	subs	r3, #128	; 0x80
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <TMC5160_SPIWrite+0xe4>)
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e004      	b.n	8000a6c <TMC5160_SPIWrite+0x44>
	  }

	  else //Read
	  {
		SPI2TxData[0] = Adress;
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <TMC5160_SPIWrite+0xe4>)
 8000a64:	220f      	movs	r2, #15
 8000a66:	18ba      	adds	r2, r7, r2
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	701a      	strb	r2, [r3, #0]
	  }

	  SPI2TxData[1] = Value >> 24;
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	0e1b      	lsrs	r3, r3, #24
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <TMC5160_SPIWrite+0xe4>)
 8000a74:	705a      	strb	r2, [r3, #1]
	  SPI2TxData[2] = Value >> 16;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	0c1b      	lsrs	r3, r3, #16
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <TMC5160_SPIWrite+0xe4>)
 8000a7e:	709a      	strb	r2, [r3, #2]
	  SPI2TxData[3] = Value >> 8;
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <TMC5160_SPIWrite+0xe4>)
 8000a88:	70da      	strb	r2, [r3, #3]
	  SPI2TxData[4] = Value;
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <TMC5160_SPIWrite+0xe4>)
 8000a90:	711a      	strb	r2, [r3, #4]

	  HAL_SPI_TransmitReceive(&hspi2, SPI2TxData, SPI2RxData, 0x05, 100);
 8000a92:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <TMC5160_SPIWrite+0xe8>)
 8000a94:	491d      	ldr	r1, [pc, #116]	; (8000b0c <TMC5160_SPIWrite+0xe4>)
 8000a96:	481f      	ldr	r0, [pc, #124]	; (8000b14 <TMC5160_SPIWrite+0xec>)
 8000a98:	2364      	movs	r3, #100	; 0x64
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2305      	movs	r3, #5
 8000a9e:	f002 fc17 	bl	80032d0 <HAL_SPI_TransmitReceive>


	  SPI2Rx += (SPI2RxData[1] << 24);
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <TMC5160_SPIWrite+0xe8>)
 8000aa4:	785b      	ldrb	r3, [r3, #1]
 8000aa6:	061b      	lsls	r3, r3, #24
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <TMC5160_SPIWrite+0xdc>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	18d2      	adds	r2, r2, r3
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <TMC5160_SPIWrite+0xdc>)
 8000ab2:	601a      	str	r2, [r3, #0]
	  SPI2Rx += (SPI2RxData[2] << 16);
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <TMC5160_SPIWrite+0xe8>)
 8000ab6:	789b      	ldrb	r3, [r3, #2]
 8000ab8:	041b      	lsls	r3, r3, #16
 8000aba:	001a      	movs	r2, r3
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <TMC5160_SPIWrite+0xdc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	18d2      	adds	r2, r2, r3
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <TMC5160_SPIWrite+0xdc>)
 8000ac4:	601a      	str	r2, [r3, #0]
	  SPI2Rx += (SPI2RxData[3] << 8);
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <TMC5160_SPIWrite+0xe8>)
 8000ac8:	78db      	ldrb	r3, [r3, #3]
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	001a      	movs	r2, r3
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <TMC5160_SPIWrite+0xdc>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	18d2      	adds	r2, r2, r3
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <TMC5160_SPIWrite+0xdc>)
 8000ad6:	601a      	str	r2, [r3, #0]
	  SPI2Rx += (SPI2RxData[4] << 0);
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <TMC5160_SPIWrite+0xe8>)
 8000ada:	791b      	ldrb	r3, [r3, #4]
 8000adc:	001a      	movs	r2, r3
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <TMC5160_SPIWrite+0xdc>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	18d2      	adds	r2, r2, r3
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <TMC5160_SPIWrite+0xdc>)
 8000ae6:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOB,TMC_CS_Pin,1); // set TMC CS high
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	015b      	lsls	r3, r3, #5
 8000aec:	4806      	ldr	r0, [pc, #24]	; (8000b08 <TMC5160_SPIWrite+0xe0>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	0019      	movs	r1, r3
 8000af2:	f001 fe19 	bl	8002728 <HAL_GPIO_WritePin>

	  return SPI2Rx;
 8000af6:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <TMC5160_SPIWrite+0xdc>)
 8000af8:	681b      	ldr	r3, [r3, #0]
}
 8000afa:	0018      	movs	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b005      	add	sp, #20
 8000b00:	bd90      	pop	{r4, r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	20000260 	.word	0x20000260
 8000b08:	48000400 	.word	0x48000400
 8000b0c:	20000250 	.word	0x20000250
 8000b10:	20000258 	.word	0x20000258
 8000b14:	200000f4 	.word	0x200000f4

08000b18 <AMS5055_SPIWriteInt>:


uint16_t AMS5055_SPIWriteInt(uint16_t Adress, int Action)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	0002      	movs	r2, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	1dbb      	adds	r3, r7, #6
 8000b24:	801a      	strh	r2, [r3, #0]

 	DC -> Don't care
 	PAR -> Parity bit
	*/

	  SPI1Rx = 0;
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <AMS5055_SPIWriteInt+0xcc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	801a      	strh	r2, [r3, #0]
	  SPI1Tx = 0;
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <AMS5055_SPIWriteInt+0xd0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	801a      	strh	r2, [r3, #0]
	  SPI1Tx = (Adress << 1);
 8000b32:	1dbb      	adds	r3, r7, #6
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	18db      	adds	r3, r3, r3
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <AMS5055_SPIWriteInt+0xd0>)
 8000b3c:	801a      	strh	r2, [r3, #0]

	  if (Action == 1) //READ
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d106      	bne.n	8000b52 <AMS5055_SPIWriteInt+0x3a>
	  {
		  SPI1Tx = SPI1Tx | 0x8000;
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <AMS5055_SPIWriteInt+0xd0>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	4a28      	ldr	r2, [pc, #160]	; (8000bec <AMS5055_SPIWriteInt+0xd4>)
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <AMS5055_SPIWriteInt+0xd0>)
 8000b50:	801a      	strh	r2, [r3, #0]
	  }

	  SPI1Tx = SPI1Tx | AMSParity(SPI1Tx);
 8000b52:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <AMS5055_SPIWriteInt+0xd0>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 f938 	bl	8000dcc <AMSParity>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <AMS5055_SPIWriteInt+0xd0>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <AMS5055_SPIWriteInt+0xd0>)
 8000b6a:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,0); // set TMC CS low
 8000b6c:	2390      	movs	r3, #144	; 0x90
 8000b6e:	05db      	lsls	r3, r3, #23
 8000b70:	2200      	movs	r2, #0
 8000b72:	2110      	movs	r1, #16
 8000b74:	0018      	movs	r0, r3
 8000b76:	f001 fdd7 	bl	8002728 <HAL_GPIO_WritePin>

	  SPI1TxData[0] = SPI1Tx >> 8;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <AMS5055_SPIWriteInt+0xd0>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <AMS5055_SPIWriteInt+0xd8>)
 8000b86:	701a      	strb	r2, [r3, #0]
	  SPI1TxData[1] = SPI1Tx;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <AMS5055_SPIWriteInt+0xd0>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <AMS5055_SPIWriteInt+0xd8>)
 8000b90:	705a      	strb	r2, [r3, #1]

	  HAL_SPI_TransmitReceive(&hspi1, SPI1TxData, SPI1RxData, 0x02, 100);
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <AMS5055_SPIWriteInt+0xdc>)
 8000b94:	4916      	ldr	r1, [pc, #88]	; (8000bf0 <AMS5055_SPIWriteInt+0xd8>)
 8000b96:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <AMS5055_SPIWriteInt+0xe0>)
 8000b98:	2364      	movs	r3, #100	; 0x64
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f002 fb97 	bl	80032d0 <HAL_SPI_TransmitReceive>

	  HAL_GPIO_WritePin(GPIOA,AMS_CS_Pin,1); // set TMC CS high
 8000ba2:	2390      	movs	r3, #144	; 0x90
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2110      	movs	r1, #16
 8000baa:	0018      	movs	r0, r3
 8000bac:	f001 fdbc 	bl	8002728 <HAL_GPIO_WritePin>

	  SPI1Rx += (SPI1RxData[0] << 8);
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <AMS5055_SPIWriteInt+0xdc>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <AMS5055_SPIWriteInt+0xcc>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	18d3      	adds	r3, r2, r3
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <AMS5055_SPIWriteInt+0xcc>)
 8000bc4:	801a      	strh	r2, [r3, #0]
	  SPI1Rx += (SPI1RxData[1] << 0);
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <AMS5055_SPIWriteInt+0xdc>)
 8000bc8:	785b      	ldrb	r3, [r3, #1]
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <AMS5055_SPIWriteInt+0xcc>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	18d3      	adds	r3, r2, r3
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <AMS5055_SPIWriteInt+0xcc>)
 8000bd6:	801a      	strh	r2, [r3, #0]

	  return SPI1Rx;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <AMS5055_SPIWriteInt+0xcc>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000182 	.word	0x20000182
 8000be8:	20000184 	.word	0x20000184
 8000bec:	ffff8000 	.word	0xffff8000
 8000bf0:	2000017c 	.word	0x2000017c
 8000bf4:	20000180 	.word	0x20000180
 8000bf8:	20000090 	.word	0x20000090

08000bfc <AMS5055_Basic_Init>:
	  }
}


void AMS5055_Basic_Init(void)
{
 8000bfc:	b5b0      	push	{r4, r5, r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000c00:	4b6e      	ldr	r3, [pc, #440]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000c02:	681c      	ldr	r4, [r3, #0]
 8000c04:	4b6e      	ldr	r3, [pc, #440]	; (8000dc0 <AMS5055_Basic_Init+0x1c4>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff ff85 	bl	8000b18 <AMS5055_SPIWriteInt>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	0019      	movs	r1, r3
 8000c12:	4b6c      	ldr	r3, [pc, #432]	; (8000dc4 <AMS5055_Basic_Init+0x1c8>)
 8000c14:	0062      	lsls	r2, r4, #1
 8000c16:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000c18:	4b68      	ldr	r3, [pc, #416]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	4b67      	ldr	r3, [pc, #412]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000c20:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000c22:	2064      	movs	r0, #100	; 0x64
 8000c24:	f000 fb28 	bl	8001278 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(NOP,1); // Random
 8000c28:	4b64      	ldr	r3, [pc, #400]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000c2a:	681c      	ldr	r4, [r3, #0]
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff ff72 	bl	8000b18 <AMS5055_SPIWriteInt>
 8000c34:	0003      	movs	r3, r0
 8000c36:	0019      	movs	r1, r3
 8000c38:	4b62      	ldr	r3, [pc, #392]	; (8000dc4 <AMS5055_Basic_Init+0x1c8>)
 8000c3a:	0062      	lsls	r2, r4, #1
 8000c3c:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000c3e:	4b5f      	ldr	r3, [pc, #380]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	4b5d      	ldr	r3, [pc, #372]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000c46:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000c48:	2064      	movs	r0, #100	; 0x64
 8000c4a:	f000 fb15 	bl	8001278 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(AGC,1); // Random
 8000c4e:	4b5b      	ldr	r3, [pc, #364]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000c50:	681c      	ldr	r4, [r3, #0]
 8000c52:	4b5d      	ldr	r3, [pc, #372]	; (8000dc8 <AMS5055_Basic_Init+0x1cc>)
 8000c54:	2101      	movs	r1, #1
 8000c56:	0018      	movs	r0, r3
 8000c58:	f7ff ff5e 	bl	8000b18 <AMS5055_SPIWriteInt>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	0019      	movs	r1, r3
 8000c60:	4b58      	ldr	r3, [pc, #352]	; (8000dc4 <AMS5055_Basic_Init+0x1c8>)
 8000c62:	0062      	lsls	r2, r4, #1
 8000c64:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000c66:	4b55      	ldr	r3, [pc, #340]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	4b53      	ldr	r3, [pc, #332]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000c6e:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000c70:	2064      	movs	r0, #100	; 0x64
 8000c72:	f000 fb01 	bl	8001278 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(SOFTWARE_RESET,1); // Random
 8000c76:	4b51      	ldr	r3, [pc, #324]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000c78:	681c      	ldr	r4, [r3, #0]
 8000c7a:	23f0      	movs	r3, #240	; 0xf0
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	2101      	movs	r1, #1
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff ff49 	bl	8000b18 <AMS5055_SPIWriteInt>
 8000c86:	0003      	movs	r3, r0
 8000c88:	0019      	movs	r1, r3
 8000c8a:	4b4e      	ldr	r3, [pc, #312]	; (8000dc4 <AMS5055_Basic_Init+0x1c8>)
 8000c8c:	0062      	lsls	r2, r4, #1
 8000c8e:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000c90:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	4b49      	ldr	r3, [pc, #292]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000c98:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000c9a:	2064      	movs	r0, #100	; 0x64
 8000c9c:	f000 faec 	bl	8001278 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(SOFTWARE_RESET_SPI,0); // Random
 8000ca0:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000ca2:	681c      	ldr	r4, [r3, #0]
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	f7ff ff36 	bl	8000b18 <AMS5055_SPIWriteInt>
 8000cac:	0003      	movs	r3, r0
 8000cae:	0019      	movs	r1, r3
 8000cb0:	4b44      	ldr	r3, [pc, #272]	; (8000dc4 <AMS5055_Basic_Init+0x1c8>)
 8000cb2:	0062      	lsls	r2, r4, #1
 8000cb4:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000cb6:	4b41      	ldr	r3, [pc, #260]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000cbe:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000cc0:	2064      	movs	r0, #100	; 0x64
 8000cc2:	f000 fad9 	bl	8001278 <HAL_Delay>



	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000cc6:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000cc8:	681c      	ldr	r4, [r3, #0]
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <AMS5055_Basic_Init+0x1c4>)
 8000ccc:	2101      	movs	r1, #1
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff ff22 	bl	8000b18 <AMS5055_SPIWriteInt>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <AMS5055_Basic_Init+0x1c8>)
 8000cda:	0062      	lsls	r2, r4, #1
 8000cdc:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000cde:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000ce6:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000ce8:	2064      	movs	r0, #100	; 0x64
 8000cea:	f000 fac5 	bl	8001278 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(NOP,1); // Random
 8000cee:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000cf0:	681c      	ldr	r4, [r3, #0]
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff ff0f 	bl	8000b18 <AMS5055_SPIWriteInt>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <AMS5055_Basic_Init+0x1c8>)
 8000d00:	0062      	lsls	r2, r4, #1
 8000d02:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000d0c:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000d0e:	2064      	movs	r0, #100	; 0x64
 8000d10:	f000 fab2 	bl	8001278 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(AGC,1); // Random
 8000d14:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000d16:	681c      	ldr	r4, [r3, #0]
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <AMS5055_Basic_Init+0x1cc>)
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff fefb 	bl	8000b18 <AMS5055_SPIWriteInt>
 8000d22:	0003      	movs	r3, r0
 8000d24:	0019      	movs	r1, r3
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <AMS5055_Basic_Init+0x1c8>)
 8000d28:	0062      	lsls	r2, r4, #1
 8000d2a:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000d2c:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000d34:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000d36:	2064      	movs	r0, #100	; 0x64
 8000d38:	f000 fa9e 	bl	8001278 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000d3e:	681c      	ldr	r4, [r3, #0]
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <AMS5055_Basic_Init+0x1c4>)
 8000d42:	2101      	movs	r1, #1
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff fee7 	bl	8000b18 <AMS5055_SPIWriteInt>
 8000d4a:	0003      	movs	r3, r0
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <AMS5055_Basic_Init+0x1c8>)
 8000d50:	0062      	lsls	r2, r4, #1
 8000d52:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000d5c:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000d5e:	2064      	movs	r0, #100	; 0x64
 8000d60:	f000 fa8a 	bl	8001278 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000d66:	681c      	ldr	r4, [r3, #0]
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <AMS5055_Basic_Init+0x1c4>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fed3 	bl	8000b18 <AMS5055_SPIWriteInt>
 8000d72:	0003      	movs	r3, r0
 8000d74:	0019      	movs	r1, r3
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <AMS5055_Basic_Init+0x1c8>)
 8000d78:	0062      	lsls	r2, r4, #1
 8000d7a:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	1c5a      	adds	r2, r3, #1
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000d84:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000d86:	2064      	movs	r0, #100	; 0x64
 8000d88:	f000 fa76 	bl	8001278 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(ANGULAR_DATA,1); // Random
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000d8e:	681c      	ldr	r4, [r3, #0]
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <AMS5055_Basic_Init+0x1c4>)
 8000d92:	2101      	movs	r1, #1
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff febf 	bl	8000b18 <AMS5055_SPIWriteInt>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	0019      	movs	r1, r3
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <AMS5055_Basic_Init+0x1c8>)
 8000da0:	0062      	lsls	r2, r4, #1
 8000da2:	52d1      	strh	r1, [r2, r3]
	Ax++;
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <AMS5055_Basic_Init+0x1c0>)
 8000dac:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000dae:	2064      	movs	r0, #100	; 0x64
 8000db0:	f000 fa62 	bl	8001278 <HAL_Delay>

	Angles[Ax] = AMS5055_SPIWriteInt(NOP,1); // 0
	Ax++;
	HAL_Delay(100);
	*/
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	2000026c 	.word	0x2000026c
 8000dc0:	00003fff 	.word	0x00003fff
 8000dc4:	20000188 	.word	0x20000188
 8000dc8:	00003ff8 	.word	0x00003ff8

08000dcc <AMSParity>:

uint8_t AMSParity(uint16_t value)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	1dbb      	adds	r3, r7, #6
 8000dd6:	801a      	strh	r2, [r3, #0]
	uint8_t cnt = 0;
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8000de0:	230e      	movs	r3, #14
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	e015      	b.n	8000e16 <AMSParity+0x4a>
	{
		if (value & 0x1)
 8000dea:	1dbb      	adds	r3, r7, #6
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	2201      	movs	r2, #1
 8000df0:	4013      	ands	r3, r2
 8000df2:	d005      	beq.n	8000e00 <AMSParity+0x34>
		{
			cnt++;
 8000df4:	210f      	movs	r1, #15
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	3201      	adds	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
		}

		value >>= 1;
 8000e00:	1dbb      	adds	r3, r7, #6
 8000e02:	1dba      	adds	r2, r7, #6
 8000e04:	8812      	ldrh	r2, [r2, #0]
 8000e06:	0852      	lsrs	r2, r2, #1
 8000e08:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 16; i++)
 8000e0a:	210e      	movs	r1, #14
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	3201      	adds	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	230e      	movs	r3, #14
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d9e4      	bls.n	8000dea <AMSParity+0x1e>
	}
	return cnt & 0x1;
 8000e20:	230f      	movs	r3, #15
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2201      	movs	r2, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	b2db      	uxtb	r3, r3
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b004      	add	sp, #16
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <AMS5055_Get_Position>:


uint16_t AMS5055_Get_Position(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	Angle = AMS5055_SPIWriteInt(NOP,1);
 8000e38:	2101      	movs	r1, #1
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fe6c 	bl	8000b18 <AMS5055_SPIWriteInt>
 8000e40:	0003      	movs	r3, r0
 8000e42:	001a      	movs	r2, r3
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <AMS5055_Get_Position+0x20>)
 8000e46:	801a      	strh	r2, [r3, #0]

	//Angle = Angle << 2;
	//Angle = (Angle >> 2) & 0x3fff;
	//Angle = ((Angle * 360) / 4095);

	return Angle;
 8000e48:	4b02      	ldr	r3, [pc, #8]	; (8000e54 <AMS5055_Get_Position+0x20>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	20000186 	.word	0x20000186

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e6c:	699a      	ldr	r2, [r3, #24]
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e70:	2101      	movs	r1, #1
 8000e72:	430a      	orrs	r2, r1
 8000e74:	619a      	str	r2, [r3, #24]
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e84:	69da      	ldr	r2, [r3, #28]
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	0549      	lsls	r1, r1, #21
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	61da      	str	r2, [r3, #28]
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e92:	69da      	ldr	r2, [r3, #28]
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	055b      	lsls	r3, r3, #21
 8000e98:	4013      	ands	r3, r2
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b08b      	sub	sp, #44	; 0x2c
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	2414      	movs	r4, #20
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	0018      	movs	r0, r3
 8000eba:	2314      	movs	r3, #20
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f002 fd72 	bl	80039a8 <memset>
  if(hadc->Instance==ADC1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <HAL_ADC_MspInit+0x84>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d12b      	bne.n	8000f26 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_ADC_MspInit+0x88>)
 8000ed0:	699a      	ldr	r2, [r3, #24]
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_ADC_MspInit+0x88>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	0089      	lsls	r1, r1, #2
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	619a      	str	r2, [r3, #24]
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_ADC_MspInit+0x88>)
 8000ede:	699a      	ldr	r2, [r3, #24]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_ADC_MspInit+0x88>)
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_ADC_MspInit+0x88>)
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	0289      	lsls	r1, r1, #10
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	615a      	str	r2, [r3, #20]
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_ADC_MspInit+0x88>)
 8000efa:	695a      	ldr	r2, [r3, #20]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	029b      	lsls	r3, r3, #10
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = AIN_MCU_Pin;
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	2203      	movs	r2, #3
 8000f10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AIN_MCU_GPIO_Port, &GPIO_InitStruct);
 8000f18:	193a      	adds	r2, r7, r4
 8000f1a:	2390      	movs	r3, #144	; 0x90
 8000f1c:	05db      	lsls	r3, r3, #23
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f001 fa89 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b00b      	add	sp, #44	; 0x2c
 8000f2c:	bd90      	pop	{r4, r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	40012400 	.word	0x40012400
 8000f34:	40021000 	.word	0x40021000

08000f38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b08b      	sub	sp, #44	; 0x2c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	2414      	movs	r4, #20
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	0018      	movs	r0, r3
 8000f46:	2314      	movs	r3, #20
 8000f48:	001a      	movs	r2, r3
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	f002 fd2c 	bl	80039a8 <memset>
  if(hcan->Instance==CAN)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <HAL_CAN_MspInit+0xa0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d13a      	bne.n	8000fd0 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_CAN_MspInit+0xa4>)
 8000f5c:	69da      	ldr	r2, [r3, #28]
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <HAL_CAN_MspInit+0xa4>)
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	0489      	lsls	r1, r1, #18
 8000f64:	430a      	orrs	r2, r1
 8000f66:	61da      	str	r2, [r3, #28]
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_CAN_MspInit+0xa4>)
 8000f6a:	69da      	ldr	r2, [r3, #28]
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	049b      	lsls	r3, r3, #18
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_CAN_MspInit+0xa4>)
 8000f78:	695a      	ldr	r2, [r3, #20]
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_CAN_MspInit+0xa4>)
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	02c9      	lsls	r1, r1, #11
 8000f80:	430a      	orrs	r2, r1
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_CAN_MspInit+0xa4>)
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	02db      	lsls	r3, r3, #11
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	22c0      	movs	r2, #192	; 0xc0
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	0021      	movs	r1, r4
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2203      	movs	r2, #3
 8000fac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_CAN_MspInit+0xa8>)
 8000fb8:	0019      	movs	r1, r3
 8000fba:	0010      	movs	r0, r2
 8000fbc:	f001 fa3c 	bl	8002438 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	201e      	movs	r0, #30
 8000fc6:	f001 fa05 	bl	80023d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000fca:	201e      	movs	r0, #30
 8000fcc:	f001 fa17 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b00b      	add	sp, #44	; 0x2c
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	40006400 	.word	0x40006400
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b08d      	sub	sp, #52	; 0x34
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	241c      	movs	r4, #28
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	2314      	movs	r3, #20
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f002 fcd6 	bl	80039a8 <memset>
  if(hspi->Instance==SPI1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a39      	ldr	r2, [pc, #228]	; (80010e8 <HAL_SPI_MspInit+0x104>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d133      	bne.n	800106e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001006:	4b39      	ldr	r3, [pc, #228]	; (80010ec <HAL_SPI_MspInit+0x108>)
 8001008:	699a      	ldr	r2, [r3, #24]
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <HAL_SPI_MspInit+0x108>)
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	0149      	lsls	r1, r1, #5
 8001010:	430a      	orrs	r2, r1
 8001012:	619a      	str	r2, [r3, #24]
 8001014:	4b35      	ldr	r3, [pc, #212]	; (80010ec <HAL_SPI_MspInit+0x108>)
 8001016:	699a      	ldr	r2, [r3, #24]
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	015b      	lsls	r3, r3, #5
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b32      	ldr	r3, [pc, #200]	; (80010ec <HAL_SPI_MspInit+0x108>)
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <HAL_SPI_MspInit+0x108>)
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	0289      	lsls	r1, r1, #10
 800102c:	430a      	orrs	r2, r1
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <HAL_SPI_MspInit+0x108>)
 8001032:	695a      	ldr	r2, [r3, #20]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	029b      	lsls	r3, r3, #10
 8001038:	4013      	ands	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AMS_SCK_Pin|AMS_MISO_Pin|AMS_MOSI_Pin;
 800103e:	0021      	movs	r1, r4
 8001040:	187b      	adds	r3, r7, r1
 8001042:	22e0      	movs	r2, #224	; 0xe0
 8001044:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2202      	movs	r2, #2
 800104a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2203      	movs	r2, #3
 8001056:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	187a      	adds	r2, r7, r1
 8001060:	2390      	movs	r3, #144	; 0x90
 8001062:	05db      	lsls	r3, r3, #23
 8001064:	0011      	movs	r1, r2
 8001066:	0018      	movs	r0, r3
 8001068:	f001 f9e6 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800106c:	e037      	b.n	80010de <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <HAL_SPI_MspInit+0x10c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d132      	bne.n	80010de <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <HAL_SPI_MspInit+0x108>)
 800107a:	69da      	ldr	r2, [r3, #28]
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HAL_SPI_MspInit+0x108>)
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	01c9      	lsls	r1, r1, #7
 8001082:	430a      	orrs	r2, r1
 8001084:	61da      	str	r2, [r3, #28]
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_SPI_MspInit+0x108>)
 8001088:	69da      	ldr	r2, [r3, #28]
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	01db      	lsls	r3, r3, #7
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_SPI_MspInit+0x108>)
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_SPI_MspInit+0x108>)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	02c9      	lsls	r1, r1, #11
 800109e:	430a      	orrs	r2, r1
 80010a0:	615a      	str	r2, [r3, #20]
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_SPI_MspInit+0x108>)
 80010a4:	695a      	ldr	r2, [r3, #20]
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	02db      	lsls	r3, r3, #11
 80010aa:	4013      	ands	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMC_SCK_Pin|TMC_MISO_Pin|TMC_MOSI_Pin;
 80010b0:	211c      	movs	r1, #28
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	22e0      	movs	r2, #224	; 0xe0
 80010b6:	0212      	lsls	r2, r2, #8
 80010b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2202      	movs	r2, #2
 80010be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2203      	movs	r2, #3
 80010ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_SPI_MspInit+0x110>)
 80010d6:	0019      	movs	r1, r3
 80010d8:	0010      	movs	r0, r2
 80010da:	f001 f9ad 	bl	8002438 <HAL_GPIO_Init>
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b00d      	add	sp, #52	; 0x34
 80010e4:	bd90      	pop	{r4, r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	40013000 	.word	0x40013000
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40003800 	.word	0x40003800
 80010f4:	48000400 	.word	0x48000400

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f000 f890 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AMS_INT_Pin);
 800112a:	2001      	movs	r0, #1
 800112c:	f001 fb1a 	bl	8002764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <CEC_CAN_IRQHandler+0x14>)
 800113e:	0018      	movs	r0, r3
 8001140:	f000 fe88 	bl	8001e54 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	20000068 	.word	0x20000068

08001150 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <Reset_Handler>:
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopForever+0x2>)
 800115e:	4685      	mov	sp, r0
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopForever+0x6>)
 8001162:	490e      	ldr	r1, [pc, #56]	; (800119c <LoopForever+0xa>)
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <LoopForever+0xe>)
 8001166:	2300      	movs	r3, #0
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:
 800116a:	58d4      	ldr	r4, [r2, r3]
 800116c:	50c4      	str	r4, [r0, r3]
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:
 8001170:	18c4      	adds	r4, r0, r3
 8001172:	428c      	cmp	r4, r1
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <LoopForever+0x12>)
 8001178:	4c0b      	ldr	r4, [pc, #44]	; (80011a8 <LoopForever+0x16>)
 800117a:	2300      	movs	r3, #0
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:
 8001182:	42a2      	cmp	r2, r4
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>
 8001186:	f7ff ffe3 	bl	8001150 <SystemInit>
 800118a:	f002 fbe9 	bl	8003960 <__libc_init_array>
 800118e:	f7ff f9ef 	bl	8000570 <main>

08001192 <LoopForever>:
 8001192:	e7fe      	b.n	8001192 <LoopForever>
 8001194:	20008000 	.word	0x20008000
 8001198:	20000000 	.word	0x20000000
 800119c:	2000000c 	.word	0x2000000c
 80011a0:	08003a08 	.word	0x08003a08
 80011a4:	2000000c 	.word	0x2000000c
 80011a8:	20000274 	.word	0x20000274

080011ac <ADC1_COMP_IRQHandler>:
 80011ac:	e7fe      	b.n	80011ac <ADC1_COMP_IRQHandler>
	...

080011b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <HAL_Init+0x24>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_Init+0x24>)
 80011ba:	2110      	movs	r1, #16
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f809 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c6:	f7ff fe4d 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	40022000 	.word	0x40022000

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_InitTick+0x5c>)
 80011e2:	681c      	ldr	r4, [r3, #0]
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_InitTick+0x60>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	0019      	movs	r1, r3
 80011ea:	23fa      	movs	r3, #250	; 0xfa
 80011ec:	0098      	lsls	r0, r3, #2
 80011ee:	f7fe ff89 	bl	8000104 <__udivsi3>
 80011f2:	0003      	movs	r3, r0
 80011f4:	0019      	movs	r1, r3
 80011f6:	0020      	movs	r0, r4
 80011f8:	f7fe ff84 	bl	8000104 <__udivsi3>
 80011fc:	0003      	movs	r3, r0
 80011fe:	0018      	movs	r0, r3
 8001200:	f001 f90d 	bl	800241e <HAL_SYSTICK_Config>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d001      	beq.n	800120c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e00f      	b.n	800122c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b03      	cmp	r3, #3
 8001210:	d80b      	bhi.n	800122a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	2301      	movs	r3, #1
 8001216:	425b      	negs	r3, r3
 8001218:	2200      	movs	r2, #0
 800121a:	0018      	movs	r0, r3
 800121c:	f001 f8da 	bl	80023d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_InitTick+0x64>)
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b003      	add	sp, #12
 8001232:	bd90      	pop	{r4, r7, pc}
 8001234:	20000000 	.word	0x20000000
 8001238:	20000008 	.word	0x20000008
 800123c:	20000004 	.word	0x20000004

08001240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_IncTick+0x1c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	001a      	movs	r2, r3
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_IncTick+0x20>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	18d2      	adds	r2, r2, r3
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <HAL_IncTick+0x20>)
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	20000008 	.word	0x20000008
 8001260:	20000270 	.word	0x20000270

08001264 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b02      	ldr	r3, [pc, #8]	; (8001274 <HAL_GetTick+0x10>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	20000270 	.word	0x20000270

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff fff0 	bl	8001264 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3301      	adds	r3, #1
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	001a      	movs	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	189b      	adds	r3, r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	f7ff ffe0 	bl	8001264 <HAL_GetTick>
 80012a4:	0002      	movs	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b004      	add	sp, #16
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	20000008 	.word	0x20000008

080012c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c8:	230f      	movs	r3, #15
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e125      	b.n	800152a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10a      	bne.n	80012fc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2234      	movs	r2, #52	; 0x34
 80012f0:	2100      	movs	r1, #0
 80012f2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff fdd8 	bl	8000eac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001300:	2210      	movs	r2, #16
 8001302:	4013      	ands	r3, r2
 8001304:	d000      	beq.n	8001308 <HAL_ADC_Init+0x48>
 8001306:	e103      	b.n	8001510 <HAL_ADC_Init+0x250>
 8001308:	230f      	movs	r3, #15
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d000      	beq.n	8001314 <HAL_ADC_Init+0x54>
 8001312:	e0fd      	b.n	8001510 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2204      	movs	r2, #4
 800131c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800131e:	d000      	beq.n	8001322 <HAL_ADC_Init+0x62>
 8001320:	e0f6      	b.n	8001510 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001326:	4a83      	ldr	r2, [pc, #524]	; (8001534 <HAL_ADC_Init+0x274>)
 8001328:	4013      	ands	r3, r2
 800132a:	2202      	movs	r2, #2
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2203      	movs	r2, #3
 800133a:	4013      	ands	r3, r2
 800133c:	2b01      	cmp	r3, #1
 800133e:	d112      	bne.n	8001366 <HAL_ADC_Init+0xa6>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2201      	movs	r2, #1
 8001348:	4013      	ands	r3, r2
 800134a:	2b01      	cmp	r3, #1
 800134c:	d009      	beq.n	8001362 <HAL_ADC_Init+0xa2>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	401a      	ands	r2, r3
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	429a      	cmp	r2, r3
 8001360:	d101      	bne.n	8001366 <HAL_ADC_Init+0xa6>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_ADC_Init+0xa8>
 8001366:	2300      	movs	r3, #0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d116      	bne.n	800139a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2218      	movs	r2, #24
 8001374:	4393      	bics	r3, r2
 8001376:	0019      	movs	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	0899      	lsrs	r1, r3, #2
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4964      	ldr	r1, [pc, #400]	; (8001538 <HAL_ADC_Init+0x278>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7e1b      	ldrb	r3, [r3, #24]
 80013ae:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e5b      	ldrb	r3, [r3, #25]
 80013b4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7e9b      	ldrb	r3, [r3, #26]
 80013bc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013be:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d002      	beq.n	80013ce <HAL_ADC_Init+0x10e>
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	015b      	lsls	r3, r3, #5
 80013cc:	e000      	b.n	80013d0 <HAL_ADC_Init+0x110>
 80013ce:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013d0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013d6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d101      	bne.n	80013e4 <HAL_ADC_Init+0x124>
 80013e0:	2304      	movs	r3, #4
 80013e2:	e000      	b.n	80013e6 <HAL_ADC_Init+0x126>
 80013e4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80013e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2124      	movs	r1, #36	; 0x24
 80013ec:	5c5b      	ldrb	r3, [r3, r1]
 80013ee:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013f0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7edb      	ldrb	r3, [r3, #27]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d115      	bne.n	800142c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7e9b      	ldrb	r3, [r3, #26]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d105      	bne.n	8001414 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	0252      	lsls	r2, r2, #9
 800140e:	4313      	orrs	r3, r2
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	e00b      	b.n	800142c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001418:	2220      	movs	r2, #32
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001424:	2201      	movs	r2, #1
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69da      	ldr	r2, [r3, #28]
 8001430:	23c2      	movs	r3, #194	; 0xc2
 8001432:	33ff      	adds	r3, #255	; 0xff
 8001434:	429a      	cmp	r2, r3
 8001436:	d007      	beq.n	8001448 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001440:	4313      	orrs	r3, r2
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	4313      	orrs	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68d9      	ldr	r1, [r3, #12]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	430a      	orrs	r2, r1
 8001456:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	055b      	lsls	r3, r3, #21
 8001460:	429a      	cmp	r2, r3
 8001462:	d01b      	beq.n	800149c <HAL_ADC_Init+0x1dc>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	2b01      	cmp	r3, #1
 800146a:	d017      	beq.n	800149c <HAL_ADC_Init+0x1dc>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	2b02      	cmp	r3, #2
 8001472:	d013      	beq.n	800149c <HAL_ADC_Init+0x1dc>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	2b03      	cmp	r3, #3
 800147a:	d00f      	beq.n	800149c <HAL_ADC_Init+0x1dc>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	2b04      	cmp	r3, #4
 8001482:	d00b      	beq.n	800149c <HAL_ADC_Init+0x1dc>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	2b05      	cmp	r3, #5
 800148a:	d007      	beq.n	800149c <HAL_ADC_Init+0x1dc>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2b06      	cmp	r3, #6
 8001492:	d003      	beq.n	800149c <HAL_ADC_Init+0x1dc>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	2b07      	cmp	r3, #7
 800149a:	d112      	bne.n	80014c2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2107      	movs	r1, #7
 80014a8:	438a      	bics	r2, r1
 80014aa:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6959      	ldr	r1, [r3, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	2207      	movs	r2, #7
 80014b8:	401a      	ands	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <HAL_ADC_Init+0x27c>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d10b      	bne.n	80014ea <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014dc:	2203      	movs	r2, #3
 80014de:	4393      	bics	r3, r2
 80014e0:	2201      	movs	r2, #1
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014e8:	e01c      	b.n	8001524 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	2212      	movs	r2, #18
 80014f0:	4393      	bics	r3, r2
 80014f2:	2210      	movs	r2, #16
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fe:	2201      	movs	r2, #1
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001506:	230f      	movs	r3, #15
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800150e:	e009      	b.n	8001524 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	2210      	movs	r2, #16
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800151c:	230f      	movs	r3, #15
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001524:	230f      	movs	r3, #15
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	781b      	ldrb	r3, [r3, #0]
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b004      	add	sp, #16
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	fffffefd 	.word	0xfffffefd
 8001538:	fffe0219 	.word	0xfffe0219
 800153c:	833fffe7 	.word	0x833fffe7

08001540 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154a:	230f      	movs	r3, #15
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	055b      	lsls	r3, r3, #21
 800155e:	429a      	cmp	r2, r3
 8001560:	d011      	beq.n	8001586 <HAL_ADC_ConfigChannel+0x46>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	2b01      	cmp	r3, #1
 8001568:	d00d      	beq.n	8001586 <HAL_ADC_ConfigChannel+0x46>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	2b02      	cmp	r3, #2
 8001570:	d009      	beq.n	8001586 <HAL_ADC_ConfigChannel+0x46>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	2b03      	cmp	r3, #3
 8001578:	d005      	beq.n	8001586 <HAL_ADC_ConfigChannel+0x46>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157e:	2b04      	cmp	r3, #4
 8001580:	d001      	beq.n	8001586 <HAL_ADC_ConfigChannel+0x46>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2234      	movs	r2, #52	; 0x34
 800158a:	5c9b      	ldrb	r3, [r3, r2]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x54>
 8001590:	2302      	movs	r3, #2
 8001592:	e0d0      	b.n	8001736 <HAL_ADC_ConfigChannel+0x1f6>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2234      	movs	r2, #52	; 0x34
 8001598:	2101      	movs	r1, #1
 800159a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2204      	movs	r2, #4
 80015a4:	4013      	ands	r3, r2
 80015a6:	d000      	beq.n	80015aa <HAL_ADC_ConfigChannel+0x6a>
 80015a8:	e0b4      	b.n	8001714 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4a64      	ldr	r2, [pc, #400]	; (8001740 <HAL_ADC_ConfigChannel+0x200>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d100      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x76>
 80015b4:	e082      	b.n	80016bc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2201      	movs	r2, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	055b      	lsls	r3, r3, #21
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d037      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x108>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d033      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x108>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d02f      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x108>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d02b      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x108>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d027      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x108>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d023      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x108>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	2b06      	cmp	r3, #6
 8001606:	d01f      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x108>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	2b07      	cmp	r3, #7
 800160e:	d01b      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	2107      	movs	r1, #7
 800161c:	400b      	ands	r3, r1
 800161e:	429a      	cmp	r2, r3
 8001620:	d012      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2107      	movs	r1, #7
 800162e:	438a      	bics	r2, r1
 8001630:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6959      	ldr	r1, [r3, #20]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2207      	movs	r2, #7
 800163e:	401a      	ands	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b10      	cmp	r3, #16
 800164e:	d007      	beq.n	8001660 <HAL_ADC_ConfigChannel+0x120>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b11      	cmp	r3, #17
 8001656:	d003      	beq.n	8001660 <HAL_ADC_ConfigChannel+0x120>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b12      	cmp	r3, #18
 800165e:	d163      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001660:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_ADC_ConfigChannel+0x204>)
 8001662:	6819      	ldr	r1, [r3, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b10      	cmp	r3, #16
 800166a:	d009      	beq.n	8001680 <HAL_ADC_ConfigChannel+0x140>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b11      	cmp	r3, #17
 8001672:	d102      	bne.n	800167a <HAL_ADC_ConfigChannel+0x13a>
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	03db      	lsls	r3, r3, #15
 8001678:	e004      	b.n	8001684 <HAL_ADC_ConfigChannel+0x144>
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	045b      	lsls	r3, r3, #17
 800167e:	e001      	b.n	8001684 <HAL_ADC_ConfigChannel+0x144>
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	041b      	lsls	r3, r3, #16
 8001684:	4a2f      	ldr	r2, [pc, #188]	; (8001744 <HAL_ADC_ConfigChannel+0x204>)
 8001686:	430b      	orrs	r3, r1
 8001688:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b10      	cmp	r3, #16
 8001690:	d14a      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_ADC_ConfigChannel+0x208>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	492d      	ldr	r1, [pc, #180]	; (800174c <HAL_ADC_ConfigChannel+0x20c>)
 8001698:	0018      	movs	r0, r3
 800169a:	f7fe fd33 	bl	8000104 <__udivsi3>
 800169e:	0003      	movs	r3, r0
 80016a0:	001a      	movs	r2, r3
 80016a2:	0013      	movs	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	189b      	adds	r3, r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016ac:	e002      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f9      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x16e>
 80016ba:	e035      	b.n	8001728 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2101      	movs	r1, #1
 80016c8:	4099      	lsls	r1, r3
 80016ca:	000b      	movs	r3, r1
 80016cc:	43d9      	mvns	r1, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	400a      	ands	r2, r1
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b10      	cmp	r3, #16
 80016dc:	d007      	beq.n	80016ee <HAL_ADC_ConfigChannel+0x1ae>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b11      	cmp	r3, #17
 80016e4:	d003      	beq.n	80016ee <HAL_ADC_ConfigChannel+0x1ae>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d11c      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_ADC_ConfigChannel+0x204>)
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b10      	cmp	r3, #16
 80016f8:	d007      	beq.n	800170a <HAL_ADC_ConfigChannel+0x1ca>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b11      	cmp	r3, #17
 8001700:	d101      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x1c6>
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_ADC_ConfigChannel+0x210>)
 8001704:	e002      	b.n	800170c <HAL_ADC_ConfigChannel+0x1cc>
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <HAL_ADC_ConfigChannel+0x214>)
 8001708:	e000      	b.n	800170c <HAL_ADC_ConfigChannel+0x1cc>
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <HAL_ADC_ConfigChannel+0x218>)
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <HAL_ADC_ConfigChannel+0x204>)
 800170e:	400b      	ands	r3, r1
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e009      	b.n	8001728 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001718:	2220      	movs	r2, #32
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001720:	230f      	movs	r3, #15
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2234      	movs	r2, #52	; 0x34
 800172c:	2100      	movs	r1, #0
 800172e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001730:	230f      	movs	r3, #15
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	781b      	ldrb	r3, [r3, #0]
}
 8001736:	0018      	movs	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	b004      	add	sp, #16
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	00001001 	.word	0x00001001
 8001744:	40012708 	.word	0x40012708
 8001748:	20000000 	.word	0x20000000
 800174c:	000f4240 	.word	0x000f4240
 8001750:	ffbfffff 	.word	0xffbfffff
 8001754:	feffffff 	.word	0xfeffffff
 8001758:	ff7fffff 	.word	0xff7fffff

0800175c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e0f0      	b.n	8001950 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2220      	movs	r2, #32
 8001772:	5c9b      	ldrb	r3, [r3, r2]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d103      	bne.n	8001782 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fbdb 	bl	8000f38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2101      	movs	r1, #1
 800178e:	430a      	orrs	r2, r1
 8001790:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001792:	f7ff fd67 	bl	8001264 <HAL_GetTick>
 8001796:	0003      	movs	r3, r0
 8001798:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800179a:	e013      	b.n	80017c4 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800179c:	f7ff fd62 	bl	8001264 <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b0a      	cmp	r3, #10
 80017a8:	d90c      	bls.n	80017c4 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	2280      	movs	r2, #128	; 0x80
 80017b0:	0292      	lsls	r2, r2, #10
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2220      	movs	r2, #32
 80017bc:	2105      	movs	r1, #5
 80017be:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0c5      	b.n	8001950 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	4013      	ands	r3, r2
 80017ce:	d0e5      	beq.n	800179c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2102      	movs	r1, #2
 80017dc:	438a      	bics	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e0:	f7ff fd40 	bl	8001264 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017e8:	e013      	b.n	8001812 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017ea:	f7ff fd3b 	bl	8001264 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b0a      	cmp	r3, #10
 80017f6:	d90c      	bls.n	8001812 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	0292      	lsls	r2, r2, #10
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2220      	movs	r2, #32
 800180a:	2105      	movs	r1, #5
 800180c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e09e      	b.n	8001950 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2202      	movs	r2, #2
 800181a:	4013      	ands	r3, r2
 800181c:	d1e5      	bne.n	80017ea <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7e1b      	ldrb	r3, [r3, #24]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d108      	bne.n	8001838 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e007      	b.n	8001848 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	438a      	bics	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7e5b      	ldrb	r3, [r3, #25]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d108      	bne.n	8001862 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2140      	movs	r1, #64	; 0x40
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e007      	b.n	8001872 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2140      	movs	r1, #64	; 0x40
 800186e:	438a      	bics	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7e9b      	ldrb	r3, [r3, #26]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2120      	movs	r1, #32
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e007      	b.n	800189c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2120      	movs	r1, #32
 8001898:	438a      	bics	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7edb      	ldrb	r3, [r3, #27]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d108      	bne.n	80018b6 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2110      	movs	r1, #16
 80018b0:	438a      	bics	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e007      	b.n	80018c6 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2110      	movs	r1, #16
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7f1b      	ldrb	r3, [r3, #28]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d108      	bne.n	80018e0 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2108      	movs	r1, #8
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e007      	b.n	80018f0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2108      	movs	r1, #8
 80018ec:	438a      	bics	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7f5b      	ldrb	r3, [r3, #29]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d108      	bne.n	800190a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2104      	movs	r1, #4
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e007      	b.n	800191a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2104      	movs	r1, #4
 8001916:	438a      	bics	r2, r1
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	431a      	orrs	r2, r3
 8001930:	0011      	movs	r1, r2
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	1e5a      	subs	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2220      	movs	r2, #32
 800194a:	2101      	movs	r1, #1
 800194c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b004      	add	sp, #16
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001968:	2013      	movs	r0, #19
 800196a:	183b      	adds	r3, r7, r0
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	2120      	movs	r1, #32
 8001970:	5c52      	ldrb	r2, [r2, r1]
 8001972:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001974:	0002      	movs	r2, r0
 8001976:	18bb      	adds	r3, r7, r2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d004      	beq.n	8001988 <HAL_CAN_ConfigFilter+0x30>
 800197e:	18bb      	adds	r3, r7, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d000      	beq.n	8001988 <HAL_CAN_ConfigFilter+0x30>
 8001986:	e0cd      	b.n	8001b24 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	58d3      	ldr	r3, [r2, r3]
 8001990:	2201      	movs	r2, #1
 8001992:	431a      	orrs	r2, r3
 8001994:	0011      	movs	r1, r2
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	221f      	movs	r2, #31
 80019a4:	4013      	ands	r3, r2
 80019a6:	2201      	movs	r2, #1
 80019a8:	409a      	lsls	r2, r3
 80019aa:	0013      	movs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	2387      	movs	r3, #135	; 0x87
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	58d3      	ldr	r3, [r2, r3]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	43d2      	mvns	r2, r2
 80019ba:	401a      	ands	r2, r3
 80019bc:	0011      	movs	r1, r2
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	2387      	movs	r3, #135	; 0x87
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d129      	bne.n	8001a22 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	2383      	movs	r3, #131	; 0x83
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	58d3      	ldr	r3, [r2, r3]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	43d2      	mvns	r2, r2
 80019da:	401a      	ands	r2, r3
 80019dc:	0011      	movs	r1, r2
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	2383      	movs	r3, #131	; 0x83
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019f8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3248      	adds	r2, #72	; 0x48
 80019fe:	00d2      	lsls	r2, r2, #3
 8001a00:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	041b      	lsls	r3, r3, #16
 8001a0e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a16:	6979      	ldr	r1, [r7, #20]
 8001a18:	3348      	adds	r3, #72	; 0x48
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	18cb      	adds	r3, r1, r3
 8001a1e:	3304      	adds	r3, #4
 8001a20:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d128      	bne.n	8001a7c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	2383      	movs	r3, #131	; 0x83
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	58d2      	ldr	r2, [r2, r3]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	0011      	movs	r1, r2
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	2383      	movs	r3, #131	; 0x83
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	041b      	lsls	r3, r3, #16
 8001a4c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a52:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3248      	adds	r2, #72	; 0x48
 8001a58:	00d2      	lsls	r2, r2, #3
 8001a5a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	041b      	lsls	r3, r3, #16
 8001a68:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a70:	6979      	ldr	r1, [r7, #20]
 8001a72:	3348      	adds	r3, #72	; 0x48
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	18cb      	adds	r3, r1, r3
 8001a78:	3304      	adds	r3, #4
 8001a7a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10c      	bne.n	8001a9e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	2381      	movs	r3, #129	; 0x81
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	58d3      	ldr	r3, [r2, r3]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	43d2      	mvns	r2, r2
 8001a90:	401a      	ands	r2, r3
 8001a92:	0011      	movs	r1, r2
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	2381      	movs	r3, #129	; 0x81
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	50d1      	str	r1, [r2, r3]
 8001a9c:	e00a      	b.n	8001ab4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	2381      	movs	r3, #129	; 0x81
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	58d2      	ldr	r2, [r2, r3]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	0011      	movs	r1, r2
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	2381      	movs	r3, #129	; 0x81
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10c      	bne.n	8001ad6 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	2385      	movs	r3, #133	; 0x85
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	58d3      	ldr	r3, [r2, r3]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	43d2      	mvns	r2, r2
 8001ac8:	401a      	ands	r2, r3
 8001aca:	0011      	movs	r1, r2
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	2385      	movs	r3, #133	; 0x85
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	50d1      	str	r1, [r2, r3]
 8001ad4:	e00a      	b.n	8001aec <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	2385      	movs	r3, #133	; 0x85
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	58d2      	ldr	r2, [r2, r3]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	0011      	movs	r1, r2
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	2385      	movs	r3, #133	; 0x85
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d10a      	bne.n	8001b0a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	2387      	movs	r3, #135	; 0x87
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	58d2      	ldr	r2, [r2, r3]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	0011      	movs	r1, r2
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	2387      	movs	r3, #135	; 0x87
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	58d3      	ldr	r3, [r2, r3]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4393      	bics	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e007      	b.n	8001b34 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	02d2      	lsls	r2, r2, #11
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
  }
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b006      	add	sp, #24
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2220      	movs	r2, #32
 8001b48:	5c9b      	ldrb	r3, [r3, r2]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d12f      	bne.n	8001bb0 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2220      	movs	r2, #32
 8001b54:	2102      	movs	r1, #2
 8001b56:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2101      	movs	r1, #1
 8001b64:	438a      	bics	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b68:	f7ff fb7c 	bl	8001264 <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b70:	e013      	b.n	8001b9a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b72:	f7ff fb77 	bl	8001264 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b0a      	cmp	r3, #10
 8001b7e:	d90c      	bls.n	8001b9a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	0292      	lsls	r2, r2, #10
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2220      	movs	r2, #32
 8001b92:	2105      	movs	r1, #5
 8001b94:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e012      	b.n	8001bc0 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d1e5      	bne.n	8001b72 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e007      	b.n	8001bc0 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	0312      	lsls	r2, r2, #12
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
  }
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b004      	add	sp, #16
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bd6:	2017      	movs	r0, #23
 8001bd8:	183b      	adds	r3, r7, r0
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	2120      	movs	r1, #32
 8001bde:	5c52      	ldrb	r2, [r2, r1]
 8001be0:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001be2:	0002      	movs	r2, r0
 8001be4:	18bb      	adds	r3, r7, r2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d004      	beq.n	8001bf6 <HAL_CAN_GetRxMessage+0x2e>
 8001bec:	18bb      	adds	r3, r7, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d000      	beq.n	8001bf6 <HAL_CAN_GetRxMessage+0x2e>
 8001bf4:	e0f8      	b.n	8001de8 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10e      	bne.n	8001c1a <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2203      	movs	r2, #3
 8001c04:	4013      	ands	r3, r2
 8001c06:	d117      	bne.n	8001c38 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	0392      	lsls	r2, r2, #14
 8001c10:	431a      	orrs	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0ee      	b.n	8001df8 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2203      	movs	r2, #3
 8001c22:	4013      	ands	r3, r2
 8001c24:	d108      	bne.n	8001c38 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	0392      	lsls	r2, r2, #14
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0df      	b.n	8001df8 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	321b      	adds	r2, #27
 8001c40:	0112      	lsls	r2, r2, #4
 8001c42:	58d3      	ldr	r3, [r2, r3]
 8001c44:	2204      	movs	r2, #4
 8001c46:	401a      	ands	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10b      	bne.n	8001c6c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	321b      	adds	r2, #27
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	58d3      	ldr	r3, [r2, r3]
 8001c60:	0d5b      	lsrs	r3, r3, #21
 8001c62:	055b      	lsls	r3, r3, #21
 8001c64:	0d5a      	lsrs	r2, r3, #21
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e00a      	b.n	8001c82 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	321b      	adds	r2, #27
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	58d3      	ldr	r3, [r2, r3]
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	321b      	adds	r2, #27
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	58d3      	ldr	r3, [r2, r3]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	401a      	ands	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	331b      	adds	r3, #27
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	18d3      	adds	r3, r2, r3
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	401a      	ands	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	331b      	adds	r3, #27
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	18d3      	adds	r3, r2, r3
 8001cba:	3304      	adds	r3, #4
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	22ff      	movs	r2, #255	; 0xff
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	331b      	adds	r3, #27
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	18d3      	adds	r3, r2, r3
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	041b      	lsls	r3, r3, #16
 8001cdc:	0c1a      	lsrs	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	23dc      	movs	r3, #220	; 0xdc
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	188a      	adds	r2, r1, r2
 8001cf0:	18d3      	adds	r3, r2, r3
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6819      	ldr	r1, [r3, #0]
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	23dc      	movs	r3, #220	; 0xdc
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	188a      	adds	r2, r1, r2
 8001d08:	18d3      	adds	r3, r2, r3
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0a1a      	lsrs	r2, r3, #8
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	23dc      	movs	r3, #220	; 0xdc
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	188a      	adds	r2, r1, r2
 8001d24:	18d3      	adds	r3, r2, r3
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0c1a      	lsrs	r2, r3, #16
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6819      	ldr	r1, [r3, #0]
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	23dc      	movs	r3, #220	; 0xdc
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	188a      	adds	r2, r1, r2
 8001d40:	18d3      	adds	r3, r2, r3
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0e1a      	lsrs	r2, r3, #24
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	3303      	adds	r3, #3
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6819      	ldr	r1, [r3, #0]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	23de      	movs	r3, #222	; 0xde
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	188a      	adds	r2, r1, r2
 8001d5c:	18d3      	adds	r3, r2, r3
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	3304      	adds	r3, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6819      	ldr	r1, [r3, #0]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	23de      	movs	r3, #222	; 0xde
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	188a      	adds	r2, r1, r2
 8001d76:	18d3      	adds	r3, r2, r3
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0a1a      	lsrs	r2, r3, #8
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	3305      	adds	r3, #5
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6819      	ldr	r1, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	23de      	movs	r3, #222	; 0xde
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	188a      	adds	r2, r1, r2
 8001d92:	18d3      	adds	r3, r2, r3
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	0c1a      	lsrs	r2, r3, #16
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	3306      	adds	r3, #6
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	23de      	movs	r3, #222	; 0xde
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	188a      	adds	r2, r1, r2
 8001dae:	18d3      	adds	r3, r2, r3
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0e1a      	lsrs	r2, r3, #24
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	3307      	adds	r3, #7
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d108      	bne.n	8001dd4 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2120      	movs	r1, #32
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	e007      	b.n	8001de4 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2120      	movs	r1, #32
 8001de0:	430a      	orrs	r2, r1
 8001de2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e007      	b.n	8001df8 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	02d2      	lsls	r2, r2, #11
 8001df0:	431a      	orrs	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
  }
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b006      	add	sp, #24
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e0a:	200f      	movs	r0, #15
 8001e0c:	183b      	adds	r3, r7, r0
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	2120      	movs	r1, #32
 8001e12:	5c52      	ldrb	r2, [r2, r1]
 8001e14:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e16:	0002      	movs	r2, r0
 8001e18:	18bb      	adds	r3, r7, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d003      	beq.n	8001e28 <HAL_CAN_ActivateNotification+0x28>
 8001e20:	18bb      	adds	r3, r7, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d109      	bne.n	8001e3c <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6959      	ldr	r1, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e007      	b.n	8001e4c <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	2280      	movs	r2, #128	; 0x80
 8001e42:	02d2      	lsls	r2, r2, #11
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
  }
}
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b004      	add	sp, #16
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	d100      	bne.n	8001e9a <HAL_CAN_IRQHandler+0x46>
 8001e98:	e084      	b.n	8001fa4 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d024      	beq.n	8001eec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2202      	movs	r2, #2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d004      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f000 f981 	bl	80021bc <HAL_CAN_TxMailbox0CompleteCallback>
 8001eba:	e017      	b.n	8001eec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d005      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ece:	e00d      	b.n	8001eec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d005      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	0152      	lsls	r2, r2, #5
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee2:	e003      	b.n	8001eec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f000 f980 	bl	80021ec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d028      	beq.n	8001f48 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	0052      	lsls	r2, r2, #1
 8001efe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4013      	ands	r3, r2
 8001f08:	d004      	beq.n	8001f14 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 f95d 	bl	80021cc <HAL_CAN_TxMailbox1CompleteCallback>
 8001f12:	e019      	b.n	8001f48 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d005      	beq.n	8001f2a <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	0192      	lsls	r2, r2, #6
 8001f24:	4313      	orrs	r3, r2
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
 8001f28:	e00e      	b.n	8001f48 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4013      	ands	r3, r2
 8001f32:	d005      	beq.n	8001f40 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	01d2      	lsls	r2, r2, #7
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3e:	e003      	b.n	8001f48 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 f95a 	bl	80021fc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	025b      	lsls	r3, r3, #9
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d028      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	0252      	lsls	r2, r2, #9
 8001f5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	029b      	lsls	r3, r3, #10
 8001f62:	4013      	ands	r3, r2
 8001f64:	d004      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f000 f937 	bl	80021dc <HAL_CAN_TxMailbox2CompleteCallback>
 8001f6e:	e019      	b.n	8001fa4 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	02db      	lsls	r3, r3, #11
 8001f76:	4013      	ands	r3, r2
 8001f78:	d005      	beq.n	8001f86 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	0212      	lsls	r2, r2, #8
 8001f80:	4313      	orrs	r3, r2
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
 8001f84:	e00e      	b.n	8001fa4 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	031b      	lsls	r3, r3, #12
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d005      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	0252      	lsls	r2, r2, #9
 8001f96:	4313      	orrs	r3, r2
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	e003      	b.n	8001fa4 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f000 f934 	bl	800220c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d00c      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2210      	movs	r2, #16
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d008      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d007      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2208      	movs	r2, #8
 8001fdc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f000 f91b 	bl	800221c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	4013      	ands	r3, r2
 8001fec:	d009      	beq.n	8002002 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d003      	beq.n	8002002 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7fe fa5f 	bl	80004c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	2240      	movs	r2, #64	; 0x40
 8002006:	4013      	ands	r3, r2
 8002008:	d00c      	beq.n	8002024 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2210      	movs	r2, #16
 800200e:	4013      	ands	r3, r2
 8002010:	d008      	beq.n	8002024 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	00d2      	lsls	r2, r2, #3
 8002018:	4313      	orrs	r3, r2
 800201a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2210      	movs	r2, #16
 8002022:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	2220      	movs	r2, #32
 8002028:	4013      	ands	r3, r2
 800202a:	d00b      	beq.n	8002044 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2208      	movs	r2, #8
 8002030:	4013      	ands	r3, r2
 8002032:	d007      	beq.n	8002044 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2208      	movs	r2, #8
 800203a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	0018      	movs	r0, r3
 8002040:	f000 f8fc 	bl	800223c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	2210      	movs	r2, #16
 8002048:	4013      	ands	r3, r2
 800204a:	d009      	beq.n	8002060 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2203      	movs	r2, #3
 8002054:	4013      	ands	r3, r2
 8002056:	d003      	beq.n	8002060 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	0018      	movs	r0, r3
 800205c:	f000 f8e6 	bl	800222c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	029b      	lsls	r3, r3, #10
 8002066:	4013      	ands	r3, r2
 8002068:	d00b      	beq.n	8002082 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	2210      	movs	r2, #16
 800206e:	4013      	ands	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2210      	movs	r2, #16
 8002078:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0018      	movs	r0, r3
 800207e:	f000 f8e5 	bl	800224c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002082:	6a3a      	ldr	r2, [r7, #32]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	025b      	lsls	r3, r3, #9
 8002088:	4013      	ands	r3, r2
 800208a:	d00b      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2208      	movs	r2, #8
 8002090:	4013      	ands	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2208      	movs	r2, #8
 800209a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 f8dc 	bl	800225c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020a4:	6a3a      	ldr	r2, [r7, #32]
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	4013      	ands	r3, r2
 80020ac:	d100      	bne.n	80020b0 <HAL_CAN_IRQHandler+0x25c>
 80020ae:	e074      	b.n	800219a <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2204      	movs	r2, #4
 80020b4:	4013      	ands	r3, r2
 80020b6:	d100      	bne.n	80020ba <HAL_CAN_IRQHandler+0x266>
 80020b8:	e06b      	b.n	8002192 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020ba:	6a3a      	ldr	r2, [r7, #32]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4013      	ands	r3, r2
 80020c2:	d007      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020ca:	d003      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	2201      	movs	r2, #1
 80020d0:	4313      	orrs	r3, r2
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020d4:	6a3a      	ldr	r2, [r7, #32]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4013      	ands	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2202      	movs	r2, #2
 80020e2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020e4:	d003      	beq.n	80020ee <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	2202      	movs	r2, #2
 80020ea:	4313      	orrs	r3, r2
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020ee:	6a3a      	ldr	r2, [r7, #32]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4013      	ands	r3, r2
 80020f6:	d007      	beq.n	8002108 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2204      	movs	r2, #4
 80020fc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020fe:	d003      	beq.n	8002108 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	2204      	movs	r2, #4
 8002104:	4313      	orrs	r3, r2
 8002106:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002108:	6a3a      	ldr	r2, [r7, #32]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	4013      	ands	r3, r2
 8002110:	d03f      	beq.n	8002192 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2270      	movs	r2, #112	; 0x70
 8002116:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002118:	d03b      	beq.n	8002192 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2270      	movs	r2, #112	; 0x70
 800211e:	4013      	ands	r3, r2
 8002120:	2b60      	cmp	r3, #96	; 0x60
 8002122:	d027      	beq.n	8002174 <HAL_CAN_IRQHandler+0x320>
 8002124:	d82c      	bhi.n	8002180 <HAL_CAN_IRQHandler+0x32c>
 8002126:	2b50      	cmp	r3, #80	; 0x50
 8002128:	d01f      	beq.n	800216a <HAL_CAN_IRQHandler+0x316>
 800212a:	d829      	bhi.n	8002180 <HAL_CAN_IRQHandler+0x32c>
 800212c:	2b40      	cmp	r3, #64	; 0x40
 800212e:	d017      	beq.n	8002160 <HAL_CAN_IRQHandler+0x30c>
 8002130:	d826      	bhi.n	8002180 <HAL_CAN_IRQHandler+0x32c>
 8002132:	2b30      	cmp	r3, #48	; 0x30
 8002134:	d00f      	beq.n	8002156 <HAL_CAN_IRQHandler+0x302>
 8002136:	d823      	bhi.n	8002180 <HAL_CAN_IRQHandler+0x32c>
 8002138:	2b10      	cmp	r3, #16
 800213a:	d002      	beq.n	8002142 <HAL_CAN_IRQHandler+0x2ee>
 800213c:	2b20      	cmp	r3, #32
 800213e:	d005      	beq.n	800214c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002140:	e01e      	b.n	8002180 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	2208      	movs	r2, #8
 8002146:	4313      	orrs	r3, r2
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800214a:	e01a      	b.n	8002182 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	2210      	movs	r2, #16
 8002150:	4313      	orrs	r3, r2
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002154:	e015      	b.n	8002182 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	2220      	movs	r2, #32
 800215a:	4313      	orrs	r3, r2
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800215e:	e010      	b.n	8002182 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	2240      	movs	r2, #64	; 0x40
 8002164:	4313      	orrs	r3, r2
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002168:	e00b      	b.n	8002182 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	2280      	movs	r2, #128	; 0x80
 800216e:	4313      	orrs	r3, r2
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002172:	e006      	b.n	8002182 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	0052      	lsls	r2, r2, #1
 800217a:	4313      	orrs	r3, r2
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800217e:	e000      	b.n	8002182 <HAL_CAN_IRQHandler+0x32e>
            break;
 8002180:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699a      	ldr	r2, [r3, #24]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2170      	movs	r1, #112	; 0x70
 800218e:	438a      	bics	r2, r1
 8002190:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2204      	movs	r2, #4
 8002198:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	2b00      	cmp	r3, #0
 800219e:	d009      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 f85c 	bl	800226c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b00a      	add	sp, #40	; 0x28
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b002      	add	sp, #8
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b002      	add	sp, #8
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	b002      	add	sp, #8
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b002      	add	sp, #8
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b002      	add	sp, #8
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}

0800227c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	0002      	movs	r2, r0
 8002284:	1dfb      	adds	r3, r7, #7
 8002286:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002288:	1dfb      	adds	r3, r7, #7
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b7f      	cmp	r3, #127	; 0x7f
 800228e:	d809      	bhi.n	80022a4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002290:	1dfb      	adds	r3, r7, #7
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	001a      	movs	r2, r3
 8002296:	231f      	movs	r3, #31
 8002298:	401a      	ands	r2, r3
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <__NVIC_EnableIRQ+0x30>)
 800229c:	2101      	movs	r1, #1
 800229e:	4091      	lsls	r1, r2
 80022a0:	000a      	movs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
  }
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	0002      	movs	r2, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	1dfb      	adds	r3, r7, #7
 80022bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b7f      	cmp	r3, #127	; 0x7f
 80022c4:	d828      	bhi.n	8002318 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c6:	4a2f      	ldr	r2, [pc, #188]	; (8002384 <__NVIC_SetPriority+0xd4>)
 80022c8:	1dfb      	adds	r3, r7, #7
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	33c0      	adds	r3, #192	; 0xc0
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	589b      	ldr	r3, [r3, r2]
 80022d6:	1dfa      	adds	r2, r7, #7
 80022d8:	7812      	ldrb	r2, [r2, #0]
 80022da:	0011      	movs	r1, r2
 80022dc:	2203      	movs	r2, #3
 80022de:	400a      	ands	r2, r1
 80022e0:	00d2      	lsls	r2, r2, #3
 80022e2:	21ff      	movs	r1, #255	; 0xff
 80022e4:	4091      	lsls	r1, r2
 80022e6:	000a      	movs	r2, r1
 80022e8:	43d2      	mvns	r2, r2
 80022ea:	401a      	ands	r2, r3
 80022ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	019b      	lsls	r3, r3, #6
 80022f2:	22ff      	movs	r2, #255	; 0xff
 80022f4:	401a      	ands	r2, r3
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	0018      	movs	r0, r3
 80022fc:	2303      	movs	r3, #3
 80022fe:	4003      	ands	r3, r0
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002304:	481f      	ldr	r0, [pc, #124]	; (8002384 <__NVIC_SetPriority+0xd4>)
 8002306:	1dfb      	adds	r3, r7, #7
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	b25b      	sxtb	r3, r3
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	430a      	orrs	r2, r1
 8002310:	33c0      	adds	r3, #192	; 0xc0
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002316:	e031      	b.n	800237c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002318:	4a1b      	ldr	r2, [pc, #108]	; (8002388 <__NVIC_SetPriority+0xd8>)
 800231a:	1dfb      	adds	r3, r7, #7
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	0019      	movs	r1, r3
 8002320:	230f      	movs	r3, #15
 8002322:	400b      	ands	r3, r1
 8002324:	3b08      	subs	r3, #8
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3306      	adds	r3, #6
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	18d3      	adds	r3, r2, r3
 800232e:	3304      	adds	r3, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1dfa      	adds	r2, r7, #7
 8002334:	7812      	ldrb	r2, [r2, #0]
 8002336:	0011      	movs	r1, r2
 8002338:	2203      	movs	r2, #3
 800233a:	400a      	ands	r2, r1
 800233c:	00d2      	lsls	r2, r2, #3
 800233e:	21ff      	movs	r1, #255	; 0xff
 8002340:	4091      	lsls	r1, r2
 8002342:	000a      	movs	r2, r1
 8002344:	43d2      	mvns	r2, r2
 8002346:	401a      	ands	r2, r3
 8002348:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	019b      	lsls	r3, r3, #6
 800234e:	22ff      	movs	r2, #255	; 0xff
 8002350:	401a      	ands	r2, r3
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	0018      	movs	r0, r3
 8002358:	2303      	movs	r3, #3
 800235a:	4003      	ands	r3, r0
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002360:	4809      	ldr	r0, [pc, #36]	; (8002388 <__NVIC_SetPriority+0xd8>)
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	001c      	movs	r4, r3
 8002368:	230f      	movs	r3, #15
 800236a:	4023      	ands	r3, r4
 800236c:	3b08      	subs	r3, #8
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	430a      	orrs	r2, r1
 8002372:	3306      	adds	r3, #6
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	18c3      	adds	r3, r0, r3
 8002378:	3304      	adds	r3, #4
 800237a:	601a      	str	r2, [r3, #0]
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b003      	add	sp, #12
 8002382:	bd90      	pop	{r4, r7, pc}
 8002384:	e000e100 	.word	0xe000e100
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	1e5a      	subs	r2, r3, #1
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	045b      	lsls	r3, r3, #17
 800239c:	429a      	cmp	r2, r3
 800239e:	d301      	bcc.n	80023a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a0:	2301      	movs	r3, #1
 80023a2:	e010      	b.n	80023c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <SysTick_Config+0x44>)
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	3a01      	subs	r2, #1
 80023aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ac:	2301      	movs	r3, #1
 80023ae:	425b      	negs	r3, r3
 80023b0:	2103      	movs	r1, #3
 80023b2:	0018      	movs	r0, r3
 80023b4:	f7ff ff7c 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <SysTick_Config+0x44>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <SysTick_Config+0x44>)
 80023c0:	2207      	movs	r2, #7
 80023c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	0018      	movs	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b002      	add	sp, #8
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	e000e010 	.word	0xe000e010

080023d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	210f      	movs	r1, #15
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	1c02      	adds	r2, r0, #0
 80023e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	187b      	adds	r3, r7, r1
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b25b      	sxtb	r3, r3
 80023ee:	0011      	movs	r1, r2
 80023f0:	0018      	movs	r0, r3
 80023f2:	f7ff ff5d 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	0002      	movs	r2, r0
 8002406:	1dfb      	adds	r3, r7, #7
 8002408:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b25b      	sxtb	r3, r3
 8002410:	0018      	movs	r0, r3
 8002412:	f7ff ff33 	bl	800227c <__NVIC_EnableIRQ>
}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b002      	add	sp, #8
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0018      	movs	r0, r3
 800242a:	f7ff ffaf 	bl	800238c <SysTick_Config>
 800242e:	0003      	movs	r3, r0
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002446:	e155      	b.n	80026f4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2101      	movs	r1, #1
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4091      	lsls	r1, r2
 8002452:	000a      	movs	r2, r1
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d100      	bne.n	8002460 <HAL_GPIO_Init+0x28>
 800245e:	e146      	b.n	80026ee <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2203      	movs	r2, #3
 8002466:	4013      	ands	r3, r2
 8002468:	2b01      	cmp	r3, #1
 800246a:	d005      	beq.n	8002478 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2203      	movs	r2, #3
 8002472:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002474:	2b02      	cmp	r3, #2
 8002476:	d130      	bne.n	80024da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	409a      	lsls	r2, r3
 8002486:	0013      	movs	r3, r2
 8002488:	43da      	mvns	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	409a      	lsls	r2, r3
 800249a:	0013      	movs	r3, r2
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ae:	2201      	movs	r2, #1
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
 80024b4:	0013      	movs	r3, r2
 80024b6:	43da      	mvns	r2, r3
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	2201      	movs	r2, #1
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
 80024cc:	0013      	movs	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2203      	movs	r2, #3
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d017      	beq.n	8002516 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	2203      	movs	r2, #3
 80024f2:	409a      	lsls	r2, r3
 80024f4:	0013      	movs	r3, r2
 80024f6:	43da      	mvns	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	409a      	lsls	r2, r3
 8002508:	0013      	movs	r3, r2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2203      	movs	r2, #3
 800251c:	4013      	ands	r3, r2
 800251e:	2b02      	cmp	r3, #2
 8002520:	d123      	bne.n	800256a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	08da      	lsrs	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3208      	adds	r2, #8
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	58d3      	ldr	r3, [r2, r3]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2207      	movs	r2, #7
 8002534:	4013      	ands	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	220f      	movs	r2, #15
 800253a:	409a      	lsls	r2, r3
 800253c:	0013      	movs	r3, r2
 800253e:	43da      	mvns	r2, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2107      	movs	r1, #7
 800254e:	400b      	ands	r3, r1
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	409a      	lsls	r2, r3
 8002554:	0013      	movs	r3, r2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	08da      	lsrs	r2, r3, #3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3208      	adds	r2, #8
 8002564:	0092      	lsls	r2, r2, #2
 8002566:	6939      	ldr	r1, [r7, #16]
 8002568:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	43da      	mvns	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2203      	movs	r2, #3
 8002588:	401a      	ands	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	409a      	lsls	r2, r3
 8002590:	0013      	movs	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	23c0      	movs	r3, #192	; 0xc0
 80025a4:	029b      	lsls	r3, r3, #10
 80025a6:	4013      	ands	r3, r2
 80025a8:	d100      	bne.n	80025ac <HAL_GPIO_Init+0x174>
 80025aa:	e0a0      	b.n	80026ee <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ac:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_GPIO_Init+0x2d4>)
 80025ae:	699a      	ldr	r2, [r3, #24]
 80025b0:	4b56      	ldr	r3, [pc, #344]	; (800270c <HAL_GPIO_Init+0x2d4>)
 80025b2:	2101      	movs	r1, #1
 80025b4:	430a      	orrs	r2, r1
 80025b6:	619a      	str	r2, [r3, #24]
 80025b8:	4b54      	ldr	r3, [pc, #336]	; (800270c <HAL_GPIO_Init+0x2d4>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2201      	movs	r2, #1
 80025be:	4013      	ands	r3, r2
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025c4:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_GPIO_Init+0x2d8>)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	3302      	adds	r3, #2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	589b      	ldr	r3, [r3, r2]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2203      	movs	r2, #3
 80025d6:	4013      	ands	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	409a      	lsls	r2, r3
 80025de:	0013      	movs	r3, r2
 80025e0:	43da      	mvns	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	2390      	movs	r3, #144	; 0x90
 80025ec:	05db      	lsls	r3, r3, #23
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d019      	beq.n	8002626 <HAL_GPIO_Init+0x1ee>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_GPIO_Init+0x2dc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_GPIO_Init+0x1ea>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a46      	ldr	r2, [pc, #280]	; (8002718 <HAL_GPIO_Init+0x2e0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00d      	beq.n	800261e <HAL_GPIO_Init+0x1e6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a45      	ldr	r2, [pc, #276]	; (800271c <HAL_GPIO_Init+0x2e4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <HAL_GPIO_Init+0x1e2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a44      	ldr	r2, [pc, #272]	; (8002720 <HAL_GPIO_Init+0x2e8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_GPIO_Init+0x1de>
 8002612:	2304      	movs	r3, #4
 8002614:	e008      	b.n	8002628 <HAL_GPIO_Init+0x1f0>
 8002616:	2305      	movs	r3, #5
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x1f0>
 800261a:	2303      	movs	r3, #3
 800261c:	e004      	b.n	8002628 <HAL_GPIO_Init+0x1f0>
 800261e:	2302      	movs	r3, #2
 8002620:	e002      	b.n	8002628 <HAL_GPIO_Init+0x1f0>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_GPIO_Init+0x1f0>
 8002626:	2300      	movs	r3, #0
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	2103      	movs	r1, #3
 800262c:	400a      	ands	r2, r1
 800262e:	0092      	lsls	r2, r2, #2
 8002630:	4093      	lsls	r3, r2
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002638:	4935      	ldr	r1, [pc, #212]	; (8002710 <HAL_GPIO_Init+0x2d8>)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3302      	adds	r3, #2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002646:	4b37      	ldr	r3, [pc, #220]	; (8002724 <HAL_GPIO_Init+0x2ec>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	43da      	mvns	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	025b      	lsls	r3, r3, #9
 800265e:	4013      	ands	r3, r2
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800266a:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <HAL_GPIO_Init+0x2ec>)
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002670:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <HAL_GPIO_Init+0x2ec>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43da      	mvns	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	029b      	lsls	r3, r3, #10
 8002688:	4013      	ands	r3, r2
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <HAL_GPIO_Init+0x2ec>)
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269a:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_GPIO_Init+0x2ec>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	43da      	mvns	r2, r3
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	035b      	lsls	r3, r3, #13
 80026b2:	4013      	ands	r3, r2
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_GPIO_Init+0x2ec>)
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <HAL_GPIO_Init+0x2ec>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	43da      	mvns	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	039b      	lsls	r3, r3, #14
 80026dc:	4013      	ands	r3, r2
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <HAL_GPIO_Init+0x2ec>)
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	40da      	lsrs	r2, r3
 80026fc:	1e13      	subs	r3, r2, #0
 80026fe:	d000      	beq.n	8002702 <HAL_GPIO_Init+0x2ca>
 8002700:	e6a2      	b.n	8002448 <HAL_GPIO_Init+0x10>
  } 
}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b006      	add	sp, #24
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	40010000 	.word	0x40010000
 8002714:	48000400 	.word	0x48000400
 8002718:	48000800 	.word	0x48000800
 800271c:	48000c00 	.word	0x48000c00
 8002720:	48001000 	.word	0x48001000
 8002724:	40010400 	.word	0x40010400

08002728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	0008      	movs	r0, r1
 8002732:	0011      	movs	r1, r2
 8002734:	1cbb      	adds	r3, r7, #2
 8002736:	1c02      	adds	r2, r0, #0
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	1c7b      	adds	r3, r7, #1
 800273c:	1c0a      	adds	r2, r1, #0
 800273e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002740:	1c7b      	adds	r3, r7, #1
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002748:	1cbb      	adds	r3, r7, #2
 800274a:	881a      	ldrh	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002750:	e003      	b.n	800275a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002752:	1cbb      	adds	r3, r7, #2
 8002754:	881a      	ldrh	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	46bd      	mov	sp, r7
 800275e:	b002      	add	sp, #8
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	0002      	movs	r2, r0
 800276c:	1dbb      	adds	r3, r7, #6
 800276e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	1dba      	adds	r2, r7, #6
 8002776:	8812      	ldrh	r2, [r2, #0]
 8002778:	4013      	ands	r3, r2
 800277a:	d008      	beq.n	800278e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800277e:	1dba      	adds	r2, r7, #6
 8002780:	8812      	ldrh	r2, [r2, #0]
 8002782:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002784:	1dbb      	adds	r3, r7, #6
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	0018      	movs	r0, r3
 800278a:	f7fd feb5 	bl	80004f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b002      	add	sp, #8
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	40010400 	.word	0x40010400

0800279c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f000 fb76 	bl	8002e9c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2201      	movs	r2, #1
 80027b6:	4013      	ands	r3, r2
 80027b8:	d100      	bne.n	80027bc <HAL_RCC_OscConfig+0x20>
 80027ba:	e08e      	b.n	80028da <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027bc:	4bc5      	ldr	r3, [pc, #788]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	220c      	movs	r2, #12
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d00e      	beq.n	80027e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027c8:	4bc2      	ldr	r3, [pc, #776]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	220c      	movs	r2, #12
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d117      	bne.n	8002804 <HAL_RCC_OscConfig+0x68>
 80027d4:	4bbf      	ldr	r3, [pc, #764]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	23c0      	movs	r3, #192	; 0xc0
 80027da:	025b      	lsls	r3, r3, #9
 80027dc:	401a      	ands	r2, r3
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	025b      	lsls	r3, r3, #9
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d10e      	bne.n	8002804 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e6:	4bbb      	ldr	r3, [pc, #748]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	029b      	lsls	r3, r3, #10
 80027ee:	4013      	ands	r3, r2
 80027f0:	d100      	bne.n	80027f4 <HAL_RCC_OscConfig+0x58>
 80027f2:	e071      	b.n	80028d8 <HAL_RCC_OscConfig+0x13c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d000      	beq.n	80027fe <HAL_RCC_OscConfig+0x62>
 80027fc:	e06c      	b.n	80028d8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	f000 fb4c 	bl	8002e9c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d107      	bne.n	800281c <HAL_RCC_OscConfig+0x80>
 800280c:	4bb1      	ldr	r3, [pc, #708]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4bb0      	ldr	r3, [pc, #704]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	0249      	lsls	r1, r1, #9
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e02f      	b.n	800287c <HAL_RCC_OscConfig+0xe0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10c      	bne.n	800283e <HAL_RCC_OscConfig+0xa2>
 8002824:	4bab      	ldr	r3, [pc, #684]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4baa      	ldr	r3, [pc, #680]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 800282a:	49ab      	ldr	r1, [pc, #684]	; (8002ad8 <HAL_RCC_OscConfig+0x33c>)
 800282c:	400a      	ands	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	4ba8      	ldr	r3, [pc, #672]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4ba7      	ldr	r3, [pc, #668]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002836:	49a9      	ldr	r1, [pc, #676]	; (8002adc <HAL_RCC_OscConfig+0x340>)
 8002838:	400a      	ands	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e01e      	b.n	800287c <HAL_RCC_OscConfig+0xe0>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b05      	cmp	r3, #5
 8002844:	d10e      	bne.n	8002864 <HAL_RCC_OscConfig+0xc8>
 8002846:	4ba3      	ldr	r3, [pc, #652]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4ba2      	ldr	r3, [pc, #648]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 800284c:	2180      	movs	r1, #128	; 0x80
 800284e:	02c9      	lsls	r1, r1, #11
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	4b9f      	ldr	r3, [pc, #636]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b9e      	ldr	r3, [pc, #632]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	0249      	lsls	r1, r1, #9
 800285e:	430a      	orrs	r2, r1
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e00b      	b.n	800287c <HAL_RCC_OscConfig+0xe0>
 8002864:	4b9b      	ldr	r3, [pc, #620]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b9a      	ldr	r3, [pc, #616]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 800286a:	499b      	ldr	r1, [pc, #620]	; (8002ad8 <HAL_RCC_OscConfig+0x33c>)
 800286c:	400a      	ands	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	4b98      	ldr	r3, [pc, #608]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b97      	ldr	r3, [pc, #604]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002876:	4999      	ldr	r1, [pc, #612]	; (8002adc <HAL_RCC_OscConfig+0x340>)
 8002878:	400a      	ands	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d014      	beq.n	80028ae <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe fcee 	bl	8001264 <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800288e:	f7fe fce9 	bl	8001264 <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	; 0x64
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e2fd      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a0:	4b8c      	ldr	r3, [pc, #560]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	029b      	lsls	r3, r3, #10
 80028a8:	4013      	ands	r3, r2
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0xf2>
 80028ac:	e015      	b.n	80028da <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7fe fcd9 	bl	8001264 <HAL_GetTick>
 80028b2:	0003      	movs	r3, r0
 80028b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fe fcd4 	bl	8001264 <HAL_GetTick>
 80028bc:	0002      	movs	r2, r0
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e2e8      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	4b82      	ldr	r3, [pc, #520]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	029b      	lsls	r3, r3, #10
 80028d2:	4013      	ands	r3, r2
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x11c>
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2202      	movs	r2, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	d100      	bne.n	80028e6 <HAL_RCC_OscConfig+0x14a>
 80028e4:	e06c      	b.n	80029c0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028e6:	4b7b      	ldr	r3, [pc, #492]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	220c      	movs	r2, #12
 80028ec:	4013      	ands	r3, r2
 80028ee:	d00e      	beq.n	800290e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028f0:	4b78      	ldr	r3, [pc, #480]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	220c      	movs	r2, #12
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d11f      	bne.n	800293c <HAL_RCC_OscConfig+0x1a0>
 80028fc:	4b75      	ldr	r3, [pc, #468]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	23c0      	movs	r3, #192	; 0xc0
 8002902:	025b      	lsls	r3, r3, #9
 8002904:	401a      	ands	r2, r3
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	429a      	cmp	r2, r3
 800290c:	d116      	bne.n	800293c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4b71      	ldr	r3, [pc, #452]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2202      	movs	r2, #2
 8002914:	4013      	ands	r3, r2
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x188>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d001      	beq.n	8002924 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e2bb      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002924:	4b6b      	ldr	r3, [pc, #428]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	22f8      	movs	r2, #248	; 0xf8
 800292a:	4393      	bics	r3, r2
 800292c:	0019      	movs	r1, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00da      	lsls	r2, r3, #3
 8002934:	4b67      	ldr	r3, [pc, #412]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002936:	430a      	orrs	r2, r1
 8002938:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	e041      	b.n	80029c0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d024      	beq.n	800298e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002944:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b62      	ldr	r3, [pc, #392]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 800294a:	2101      	movs	r1, #1
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fc88 	bl	8001264 <HAL_GetTick>
 8002954:	0003      	movs	r3, r0
 8002956:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295a:	f7fe fc83 	bl	8001264 <HAL_GetTick>
 800295e:	0002      	movs	r2, r0
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e297      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2202      	movs	r2, #2
 8002972:	4013      	ands	r3, r2
 8002974:	d0f1      	beq.n	800295a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002976:	4b57      	ldr	r3, [pc, #348]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	22f8      	movs	r2, #248	; 0xf8
 800297c:	4393      	bics	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	00da      	lsls	r2, r3, #3
 8002986:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002988:	430a      	orrs	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e018      	b.n	80029c0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298e:	4b51      	ldr	r3, [pc, #324]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002994:	2101      	movs	r1, #1
 8002996:	438a      	bics	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fe fc63 	bl	8001264 <HAL_GetTick>
 800299e:	0003      	movs	r3, r0
 80029a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a4:	f7fe fc5e 	bl	8001264 <HAL_GetTick>
 80029a8:	0002      	movs	r2, r0
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e272      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d1f1      	bne.n	80029a4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2208      	movs	r2, #8
 80029c6:	4013      	ands	r3, r2
 80029c8:	d036      	beq.n	8002a38 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d019      	beq.n	8002a06 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d2:	4b40      	ldr	r3, [pc, #256]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80029d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d6:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80029d8:	2101      	movs	r1, #1
 80029da:	430a      	orrs	r2, r1
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7fe fc41 	bl	8001264 <HAL_GetTick>
 80029e2:	0003      	movs	r3, r0
 80029e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e8:	f7fe fc3c 	bl	8001264 <HAL_GetTick>
 80029ec:	0002      	movs	r2, r0
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e250      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fa:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2202      	movs	r2, #2
 8002a00:	4013      	ands	r3, r2
 8002a02:	d0f1      	beq.n	80029e8 <HAL_RCC_OscConfig+0x24c>
 8002a04:	e018      	b.n	8002a38 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a06:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a0a:	4b32      	ldr	r3, [pc, #200]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	438a      	bics	r2, r1
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7fe fc27 	bl	8001264 <HAL_GetTick>
 8002a16:	0003      	movs	r3, r0
 8002a18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fc22 	bl	8001264 <HAL_GetTick>
 8002a20:	0002      	movs	r2, r0
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e236      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2e:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	2202      	movs	r2, #2
 8002a34:	4013      	ands	r3, r2
 8002a36:	d1f1      	bne.n	8002a1c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d100      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2a8>
 8002a42:	e0b5      	b.n	8002bb0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a44:	201f      	movs	r0, #31
 8002a46:	183b      	adds	r3, r7, r0
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4c:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	055b      	lsls	r3, r3, #21
 8002a54:	4013      	ands	r3, r2
 8002a56:	d110      	bne.n	8002a7a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a58:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	0549      	lsls	r1, r1, #21
 8002a62:	430a      	orrs	r2, r1
 8002a64:	61da      	str	r2, [r3, #28]
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	055b      	lsls	r3, r3, #21
 8002a6e:	4013      	ands	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a74:	183b      	adds	r3, r7, r0
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_RCC_OscConfig+0x344>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	d11a      	bne.n	8002abc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <HAL_RCC_OscConfig+0x344>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_RCC_OscConfig+0x344>)
 8002a8c:	2180      	movs	r1, #128	; 0x80
 8002a8e:	0049      	lsls	r1, r1, #1
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a94:	f7fe fbe6 	bl	8001264 <HAL_GetTick>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9e:	f7fe fbe1 	bl	8001264 <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b64      	cmp	r3, #100	; 0x64
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e1f5      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_OscConfig+0x344>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d10f      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x348>
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	4b02      	ldr	r3, [pc, #8]	; (8002ad4 <HAL_RCC_OscConfig+0x338>)
 8002aca:	2101      	movs	r1, #1
 8002acc:	430a      	orrs	r2, r1
 8002ace:	621a      	str	r2, [r3, #32]
 8002ad0:	e036      	b.n	8002b40 <HAL_RCC_OscConfig+0x3a4>
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	fffeffff 	.word	0xfffeffff
 8002adc:	fffbffff 	.word	0xfffbffff
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x36a>
 8002aec:	4bca      	ldr	r3, [pc, #808]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002aee:	6a1a      	ldr	r2, [r3, #32]
 8002af0:	4bc9      	ldr	r3, [pc, #804]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002af2:	2101      	movs	r1, #1
 8002af4:	438a      	bics	r2, r1
 8002af6:	621a      	str	r2, [r3, #32]
 8002af8:	4bc7      	ldr	r3, [pc, #796]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	4bc6      	ldr	r3, [pc, #792]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002afe:	2104      	movs	r1, #4
 8002b00:	438a      	bics	r2, r1
 8002b02:	621a      	str	r2, [r3, #32]
 8002b04:	e01c      	b.n	8002b40 <HAL_RCC_OscConfig+0x3a4>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b05      	cmp	r3, #5
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x38c>
 8002b0e:	4bc2      	ldr	r3, [pc, #776]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002b10:	6a1a      	ldr	r2, [r3, #32]
 8002b12:	4bc1      	ldr	r3, [pc, #772]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002b14:	2104      	movs	r1, #4
 8002b16:	430a      	orrs	r2, r1
 8002b18:	621a      	str	r2, [r3, #32]
 8002b1a:	4bbf      	ldr	r3, [pc, #764]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002b1c:	6a1a      	ldr	r2, [r3, #32]
 8002b1e:	4bbe      	ldr	r3, [pc, #760]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002b20:	2101      	movs	r1, #1
 8002b22:	430a      	orrs	r2, r1
 8002b24:	621a      	str	r2, [r3, #32]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0x3a4>
 8002b28:	4bbb      	ldr	r3, [pc, #748]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002b2a:	6a1a      	ldr	r2, [r3, #32]
 8002b2c:	4bba      	ldr	r3, [pc, #744]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002b2e:	2101      	movs	r1, #1
 8002b30:	438a      	bics	r2, r1
 8002b32:	621a      	str	r2, [r3, #32]
 8002b34:	4bb8      	ldr	r3, [pc, #736]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002b36:	6a1a      	ldr	r2, [r3, #32]
 8002b38:	4bb7      	ldr	r3, [pc, #732]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d014      	beq.n	8002b72 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7fe fb8c 	bl	8001264 <HAL_GetTick>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b50:	e009      	b.n	8002b66 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7fe fb87 	bl	8001264 <HAL_GetTick>
 8002b56:	0002      	movs	r2, r0
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	4aaf      	ldr	r2, [pc, #700]	; (8002e1c <HAL_RCC_OscConfig+0x680>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e19a      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b66:	4bac      	ldr	r3, [pc, #688]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x3b6>
 8002b70:	e013      	b.n	8002b9a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b72:	f7fe fb77 	bl	8001264 <HAL_GetTick>
 8002b76:	0003      	movs	r3, r0
 8002b78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7a:	e009      	b.n	8002b90 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fb72 	bl	8001264 <HAL_GetTick>
 8002b80:	0002      	movs	r2, r0
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	4aa5      	ldr	r2, [pc, #660]	; (8002e1c <HAL_RCC_OscConfig+0x680>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e185      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b90:	4ba1      	ldr	r3, [pc, #644]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	2202      	movs	r2, #2
 8002b96:	4013      	ands	r3, r2
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b9a:	231f      	movs	r3, #31
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba4:	4b9c      	ldr	r3, [pc, #624]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	4b9b      	ldr	r3, [pc, #620]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002baa:	499d      	ldr	r1, [pc, #628]	; (8002e20 <HAL_RCC_OscConfig+0x684>)
 8002bac:	400a      	ands	r2, r1
 8002bae:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d063      	beq.n	8002c82 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d12a      	bne.n	8002c18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bc2:	4b95      	ldr	r3, [pc, #596]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bc6:	4b94      	ldr	r3, [pc, #592]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002bc8:	2104      	movs	r1, #4
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002bce:	4b92      	ldr	r3, [pc, #584]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd2:	4b91      	ldr	r3, [pc, #580]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7fe fb43 	bl	8001264 <HAL_GetTick>
 8002bde:	0003      	movs	r3, r0
 8002be0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002be4:	f7fe fb3e 	bl	8001264 <HAL_GetTick>
 8002be8:	0002      	movs	r2, r0
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e152      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bf6:	4b88      	ldr	r3, [pc, #544]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d0f1      	beq.n	8002be4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c00:	4b85      	ldr	r3, [pc, #532]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c04:	22f8      	movs	r2, #248	; 0xf8
 8002c06:	4393      	bics	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	00da      	lsls	r2, r3, #3
 8002c10:	4b81      	ldr	r3, [pc, #516]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c12:	430a      	orrs	r2, r1
 8002c14:	635a      	str	r2, [r3, #52]	; 0x34
 8002c16:	e034      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	3305      	adds	r3, #5
 8002c1e:	d111      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c20:	4b7d      	ldr	r3, [pc, #500]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c24:	4b7c      	ldr	r3, [pc, #496]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c26:	2104      	movs	r1, #4
 8002c28:	438a      	bics	r2, r1
 8002c2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c2c:	4b7a      	ldr	r3, [pc, #488]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c30:	22f8      	movs	r2, #248	; 0xf8
 8002c32:	4393      	bics	r3, r2
 8002c34:	0019      	movs	r1, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	00da      	lsls	r2, r3, #3
 8002c3c:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	635a      	str	r2, [r3, #52]	; 0x34
 8002c42:	e01e      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c44:	4b74      	ldr	r3, [pc, #464]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c48:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c50:	4b71      	ldr	r3, [pc, #452]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c54:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c56:	2101      	movs	r1, #1
 8002c58:	438a      	bics	r2, r1
 8002c5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5c:	f7fe fb02 	bl	8001264 <HAL_GetTick>
 8002c60:	0003      	movs	r3, r0
 8002c62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c66:	f7fe fafd 	bl	8001264 <HAL_GetTick>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e111      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c78:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d1f1      	bne.n	8002c66 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2220      	movs	r2, #32
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d05c      	beq.n	8002d46 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002c8c:	4b62      	ldr	r3, [pc, #392]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	220c      	movs	r2, #12
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	d00e      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c98:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	220c      	movs	r2, #12
 8002c9e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d114      	bne.n	8002cce <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002ca4:	4b5c      	ldr	r3, [pc, #368]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	23c0      	movs	r3, #192	; 0xc0
 8002caa:	025b      	lsls	r3, r3, #9
 8002cac:	401a      	ands	r2, r3
 8002cae:	23c0      	movs	r3, #192	; 0xc0
 8002cb0:	025b      	lsls	r3, r3, #9
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d10b      	bne.n	8002cce <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002cb6:	4b58      	ldr	r3, [pc, #352]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	025b      	lsls	r3, r3, #9
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d040      	beq.n	8002d44 <HAL_RCC_OscConfig+0x5a8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d03c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0e6      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01b      	beq.n	8002d0e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002cd6:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cda:	4b4f      	ldr	r3, [pc, #316]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002cdc:	2180      	movs	r1, #128	; 0x80
 8002cde:	0249      	lsls	r1, r1, #9
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fabe 	bl	8001264 <HAL_GetTick>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cee:	f7fe fab9 	bl	8001264 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0cd      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d00:	4b45      	ldr	r3, [pc, #276]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	025b      	lsls	r3, r3, #9
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x552>
 8002d0c:	e01b      	b.n	8002d46 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d0e:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d12:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002d14:	4943      	ldr	r1, [pc, #268]	; (8002e24 <HAL_RCC_OscConfig+0x688>)
 8002d16:	400a      	ands	r2, r1
 8002d18:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7fe faa3 	bl	8001264 <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d24:	f7fe fa9e 	bl	8001264 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e0b2      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d36:	4b38      	ldr	r3, [pc, #224]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	025b      	lsls	r3, r3, #9
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x588>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d44:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d100      	bne.n	8002d50 <HAL_RCC_OscConfig+0x5b4>
 8002d4e:	e0a4      	b.n	8002e9a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d50:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	220c      	movs	r2, #12
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d100      	bne.n	8002d5e <HAL_RCC_OscConfig+0x5c2>
 8002d5c:	e078      	b.n	8002e50 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d14c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d66:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002d6c:	492e      	ldr	r1, [pc, #184]	; (8002e28 <HAL_RCC_OscConfig+0x68c>)
 8002d6e:	400a      	ands	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7fe fa77 	bl	8001264 <HAL_GetTick>
 8002d76:	0003      	movs	r3, r0
 8002d78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe fa72 	bl	8001264 <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e086      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d8e:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	049b      	lsls	r3, r3, #18
 8002d96:	4013      	ands	r3, r2
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9a:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	220f      	movs	r2, #15
 8002da0:	4393      	bics	r3, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002daa:	430a      	orrs	r2, r1
 8002dac:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dae:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a1e      	ldr	r2, [pc, #120]	; (8002e2c <HAL_RCC_OscConfig+0x690>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	0019      	movs	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	0449      	lsls	r1, r1, #17
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fa45 	bl	8001264 <HAL_GetTick>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe fa40 	bl	8001264 <HAL_GetTick>
 8002de4:	0002      	movs	r2, r0
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e054      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	049b      	lsls	r3, r3, #18
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x644>
 8002dfe:	e04c      	b.n	8002e9a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <HAL_RCC_OscConfig+0x67c>)
 8002e06:	4908      	ldr	r1, [pc, #32]	; (8002e28 <HAL_RCC_OscConfig+0x68c>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fe fa2a 	bl	8001264 <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e14:	e015      	b.n	8002e42 <HAL_RCC_OscConfig+0x6a6>
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	00001388 	.word	0x00001388
 8002e20:	efffffff 	.word	0xefffffff
 8002e24:	fffeffff 	.word	0xfffeffff
 8002e28:	feffffff 	.word	0xfeffffff
 8002e2c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe fa18 	bl	8001264 <HAL_GetTick>
 8002e34:	0002      	movs	r2, r0
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e02c      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <HAL_RCC_OscConfig+0x708>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	049b      	lsls	r3, r3, #18
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x694>
 8002e4e:	e024      	b.n	8002e9a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e01f      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_RCC_OscConfig+0x708>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <HAL_RCC_OscConfig+0x708>)
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	23c0      	movs	r3, #192	; 0xc0
 8002e6c:	025b      	lsls	r3, r3, #9
 8002e6e:	401a      	ands	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d10e      	bne.n	8002e96 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	23f0      	movs	r3, #240	; 0xf0
 8002e8a:	039b      	lsls	r3, r3, #14
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b008      	add	sp, #32
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000

08002ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0bf      	b.n	800303c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b61      	ldr	r3, [pc, #388]	; (8003044 <HAL_RCC_ClockConfig+0x19c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d911      	bls.n	8002eee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b5e      	ldr	r3, [pc, #376]	; (8003044 <HAL_RCC_ClockConfig+0x19c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <HAL_RCC_ClockConfig+0x19c>)
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002edc:	4b59      	ldr	r3, [pc, #356]	; (8003044 <HAL_RCC_ClockConfig+0x19c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0a6      	b.n	800303c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d015      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2204      	movs	r2, #4
 8002efe:	4013      	ands	r3, r2
 8002f00:	d006      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f02:	4b51      	ldr	r3, [pc, #324]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	4b50      	ldr	r3, [pc, #320]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8002f08:	21e0      	movs	r1, #224	; 0xe0
 8002f0a:	00c9      	lsls	r1, r1, #3
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f10:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	22f0      	movs	r2, #240	; 0xf0
 8002f16:	4393      	bics	r3, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8002f20:	430a      	orrs	r2, r1
 8002f22:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d04c      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b44      	ldr	r3, [pc, #272]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	029b      	lsls	r3, r3, #10
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d120      	bne.n	8002f84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e07a      	b.n	800303c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	4b3e      	ldr	r3, [pc, #248]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	049b      	lsls	r3, r3, #18
 8002f56:	4013      	ands	r3, r2
 8002f58:	d114      	bne.n	8002f84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e06e      	b.n	800303c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f66:	4b38      	ldr	r3, [pc, #224]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8002f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	025b      	lsls	r3, r3, #9
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d108      	bne.n	8002f84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e062      	b.n	800303c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f76:	4b34      	ldr	r3, [pc, #208]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e05b      	b.n	800303c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f84:	4b30      	ldr	r3, [pc, #192]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2203      	movs	r2, #3
 8002f8a:	4393      	bics	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f98:	f7fe f964 	bl	8001264 <HAL_GetTick>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa0:	e009      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa2:	f7fe f95f 	bl	8001264 <HAL_GetTick>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	4a27      	ldr	r2, [pc, #156]	; (800304c <HAL_RCC_ClockConfig+0x1a4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e042      	b.n	800303c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	220c      	movs	r2, #12
 8002fbc:	401a      	ands	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d1ec      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <HAL_RCC_ClockConfig+0x19c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d211      	bcs.n	8002ffa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCC_ClockConfig+0x19c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4393      	bics	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	4b18      	ldr	r3, [pc, #96]	; (8003044 <HAL_RCC_ClockConfig+0x19c>)
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe8:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_RCC_ClockConfig+0x19c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2201      	movs	r2, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e020      	b.n	800303c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2204      	movs	r2, #4
 8003000:	4013      	ands	r3, r2
 8003002:	d009      	beq.n	8003018 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003004:	4b10      	ldr	r3, [pc, #64]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4a11      	ldr	r2, [pc, #68]	; (8003050 <HAL_RCC_ClockConfig+0x1a8>)
 800300a:	4013      	ands	r3, r2
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003018:	f000 f820 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800301c:	0001      	movs	r1, r0
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_RCC_ClockConfig+0x1a0>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	220f      	movs	r2, #15
 8003026:	4013      	ands	r3, r2
 8003028:	4a0a      	ldr	r2, [pc, #40]	; (8003054 <HAL_RCC_ClockConfig+0x1ac>)
 800302a:	5cd3      	ldrb	r3, [r2, r3]
 800302c:	000a      	movs	r2, r1
 800302e:	40da      	lsrs	r2, r3
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_RCC_ClockConfig+0x1b0>)
 8003032:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003034:	2003      	movs	r0, #3
 8003036:	f7fe f8cf 	bl	80011d8 <HAL_InitTick>
  
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40022000 	.word	0x40022000
 8003048:	40021000 	.word	0x40021000
 800304c:	00001388 	.word	0x00001388
 8003050:	fffff8ff 	.word	0xfffff8ff
 8003054:	080039f0 	.word	0x080039f0
 8003058:	20000000 	.word	0x20000000

0800305c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800305c:	b590      	push	{r4, r7, lr}
 800305e:	b08f      	sub	sp, #60	; 0x3c
 8003060:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003062:	2314      	movs	r3, #20
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	4a38      	ldr	r2, [pc, #224]	; (8003148 <HAL_RCC_GetSysClockFreq+0xec>)
 8003068:	ca13      	ldmia	r2!, {r0, r1, r4}
 800306a:	c313      	stmia	r3!, {r0, r1, r4}
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	4a36      	ldr	r2, [pc, #216]	; (800314c <HAL_RCC_GetSysClockFreq+0xf0>)
 8003074:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003076:	c313      	stmia	r3!, {r0, r1, r4}
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003080:	2300      	movs	r3, #0
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
 8003084:	2300      	movs	r3, #0
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003090:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	220c      	movs	r2, #12
 800309a:	4013      	ands	r3, r2
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d047      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0xd4>
 80030a0:	d849      	bhi.n	8003136 <HAL_RCC_GetSysClockFreq+0xda>
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x50>
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x56>
 80030aa:	e044      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ac:	4b29      	ldr	r3, [pc, #164]	; (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030b0:	e044      	b.n	800313c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	0c9b      	lsrs	r3, r3, #18
 80030b6:	220f      	movs	r2, #15
 80030b8:	4013      	ands	r3, r2
 80030ba:	2214      	movs	r2, #20
 80030bc:	18ba      	adds	r2, r7, r2
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <HAL_RCC_GetSysClockFreq+0xf4>)
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	220f      	movs	r2, #15
 80030c8:	4013      	ands	r3, r2
 80030ca:	1d3a      	adds	r2, r7, #4
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d2:	23c0      	movs	r3, #192	; 0xc0
 80030d4:	025b      	lsls	r3, r3, #9
 80030d6:	401a      	ands	r2, r3
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	429a      	cmp	r2, r3
 80030de:	d109      	bne.n	80030f4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e2:	481c      	ldr	r0, [pc, #112]	; (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030e4:	f7fd f80e 	bl	8000104 <__udivsi3>
 80030e8:	0003      	movs	r3, r0
 80030ea:	001a      	movs	r2, r3
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	4353      	muls	r3, r2
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
 80030f2:	e01a      	b.n	800312a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80030f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f6:	23c0      	movs	r3, #192	; 0xc0
 80030f8:	025b      	lsls	r3, r3, #9
 80030fa:	401a      	ands	r2, r3
 80030fc:	23c0      	movs	r3, #192	; 0xc0
 80030fe:	025b      	lsls	r3, r3, #9
 8003100:	429a      	cmp	r2, r3
 8003102:	d109      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003106:	4814      	ldr	r0, [pc, #80]	; (8003158 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003108:	f7fc fffc 	bl	8000104 <__udivsi3>
 800310c:	0003      	movs	r3, r0
 800310e:	001a      	movs	r2, r3
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	4353      	muls	r3, r2
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
 8003116:	e008      	b.n	800312a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800311a:	4810      	ldr	r0, [pc, #64]	; (800315c <HAL_RCC_GetSysClockFreq+0x100>)
 800311c:	f7fc fff2 	bl	8000104 <__udivsi3>
 8003120:	0003      	movs	r3, r0
 8003122:	001a      	movs	r2, r3
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	4353      	muls	r3, r2
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800312e:	e005      	b.n	800313c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003134:	e002      	b.n	800313c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCC_GetSysClockFreq+0x100>)
 8003138:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800313a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800313e:	0018      	movs	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	b00f      	add	sp, #60	; 0x3c
 8003144:	bd90      	pop	{r4, r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	080039d0 	.word	0x080039d0
 800314c:	080039e0 	.word	0x080039e0
 8003150:	40021000 	.word	0x40021000
 8003154:	00b71b00 	.word	0x00b71b00
 8003158:	02dc6c00 	.word	0x02dc6c00
 800315c:	007a1200 	.word	0x007a1200

08003160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0a8      	b.n	80032c4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	2382      	movs	r3, #130	; 0x82
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	429a      	cmp	r2, r3
 8003184:	d009      	beq.n	800319a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	61da      	str	r2, [r3, #28]
 800318c:	e005      	b.n	800319a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	225d      	movs	r2, #93	; 0x5d
 80031a4:	5c9b      	ldrb	r3, [r3, r2]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	225c      	movs	r2, #92	; 0x5c
 80031b0:	2100      	movs	r1, #0
 80031b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7fd ff14 	bl	8000fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	225d      	movs	r2, #93	; 0x5d
 80031c0:	2102      	movs	r1, #2
 80031c2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2140      	movs	r1, #64	; 0x40
 80031d0:	438a      	bics	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	23e0      	movs	r3, #224	; 0xe0
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	429a      	cmp	r2, r3
 80031de:	d902      	bls.n	80031e6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	e002      	b.n	80031ec <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	015b      	lsls	r3, r3, #5
 80031ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	23f0      	movs	r3, #240	; 0xf0
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d008      	beq.n	800320a <HAL_SPI_Init+0xaa>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	23e0      	movs	r3, #224	; 0xe0
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	429a      	cmp	r2, r3
 8003202:	d002      	beq.n	800320a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	2382      	movs	r3, #130	; 0x82
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	401a      	ands	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6899      	ldr	r1, [r3, #8]
 8003218:	2384      	movs	r3, #132	; 0x84
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	400b      	ands	r3, r1
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2102      	movs	r1, #2
 8003226:	400b      	ands	r3, r1
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2101      	movs	r1, #1
 8003230:	400b      	ands	r3, r1
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6999      	ldr	r1, [r3, #24]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	400b      	ands	r3, r1
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2138      	movs	r1, #56	; 0x38
 8003246:	400b      	ands	r3, r1
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	400b      	ands	r3, r1
 8003252:	431a      	orrs	r2, r3
 8003254:	0011      	movs	r1, r2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	019b      	lsls	r3, r3, #6
 800325e:	401a      	ands	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	2204      	movs	r2, #4
 8003270:	401a      	ands	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	2110      	movs	r1, #16
 8003278:	400b      	ands	r3, r1
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	2108      	movs	r1, #8
 8003282:	400b      	ands	r3, r1
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68d9      	ldr	r1, [r3, #12]
 800328a:	23f0      	movs	r3, #240	; 0xf0
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	400b      	ands	r3, r1
 8003290:	431a      	orrs	r2, r3
 8003292:	0011      	movs	r1, r2
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	015b      	lsls	r3, r3, #5
 800329a:	401a      	ands	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4907      	ldr	r1, [pc, #28]	; (80032cc <HAL_SPI_Init+0x16c>)
 80032b0:	400a      	ands	r2, r1
 80032b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	225d      	movs	r2, #93	; 0x5d
 80032be:	2101      	movs	r1, #1
 80032c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b004      	add	sp, #16
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	fffff7ff 	.word	0xfffff7ff

080032d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	001a      	movs	r2, r3
 80032de:	1cbb      	adds	r3, r7, #2
 80032e0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032e2:	2301      	movs	r3, #1
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032e6:	2323      	movs	r3, #35	; 0x23
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	225c      	movs	r2, #92	; 0x5c
 80032f2:	5c9b      	ldrb	r3, [r3, r2]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x2c>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e1b5      	b.n	8003668 <HAL_SPI_TransmitReceive+0x398>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	225c      	movs	r2, #92	; 0x5c
 8003300:	2101      	movs	r1, #1
 8003302:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003304:	f7fd ffae 	bl	8001264 <HAL_GetTick>
 8003308:	0003      	movs	r3, r0
 800330a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800330c:	201b      	movs	r0, #27
 800330e:	183b      	adds	r3, r7, r0
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	215d      	movs	r1, #93	; 0x5d
 8003314:	5c52      	ldrb	r2, [r2, r1]
 8003316:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800331e:	2312      	movs	r3, #18
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	1cba      	adds	r2, r7, #2
 8003324:	8812      	ldrh	r2, [r2, #0]
 8003326:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003328:	183b      	adds	r3, r7, r0
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d011      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x84>
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	2382      	movs	r3, #130	; 0x82
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	429a      	cmp	r2, r3
 8003338:	d107      	bne.n	800334a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <HAL_SPI_TransmitReceive+0x7a>
 8003342:	183b      	adds	r3, r7, r0
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b04      	cmp	r3, #4
 8003348:	d004      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800334a:	2323      	movs	r3, #35	; 0x23
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	2202      	movs	r2, #2
 8003350:	701a      	strb	r2, [r3, #0]
    goto error;
 8003352:	e17e      	b.n	8003652 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d006      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x98>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x98>
 8003360:	1cbb      	adds	r3, r7, #2
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d104      	bne.n	8003372 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003368:	2323      	movs	r3, #35	; 0x23
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003370:	e16f      	b.n	8003652 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	225d      	movs	r2, #93	; 0x5d
 8003376:	5c9b      	ldrb	r3, [r3, r2]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b04      	cmp	r3, #4
 800337c:	d003      	beq.n	8003386 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	225d      	movs	r2, #93	; 0x5d
 8003382:	2105      	movs	r1, #5
 8003384:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1cba      	adds	r2, r7, #2
 8003396:	2146      	movs	r1, #70	; 0x46
 8003398:	8812      	ldrh	r2, [r2, #0]
 800339a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1cba      	adds	r2, r7, #2
 80033a0:	2144      	movs	r1, #68	; 0x44
 80033a2:	8812      	ldrh	r2, [r2, #0]
 80033a4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1cba      	adds	r2, r7, #2
 80033b0:	8812      	ldrh	r2, [r2, #0]
 80033b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1cba      	adds	r2, r7, #2
 80033b8:	8812      	ldrh	r2, [r2, #0]
 80033ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	23e0      	movs	r3, #224	; 0xe0
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d908      	bls.n	80033e6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	49a4      	ldr	r1, [pc, #656]	; (8003670 <HAL_SPI_TransmitReceive+0x3a0>)
 80033e0:	400a      	ands	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	e008      	b.n	80033f8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	0149      	lsls	r1, r1, #5
 80033f4:	430a      	orrs	r2, r1
 80033f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2240      	movs	r2, #64	; 0x40
 8003400:	4013      	ands	r3, r2
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	d007      	beq.n	8003416 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	23e0      	movs	r3, #224	; 0xe0
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	429a      	cmp	r2, r3
 8003420:	d800      	bhi.n	8003424 <HAL_SPI_TransmitReceive+0x154>
 8003422:	e07f      	b.n	8003524 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x168>
 800342c:	2312      	movs	r3, #18
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d000      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x168>
 8003436:	e069      	b.n	800350c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	881a      	ldrh	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	1c9a      	adds	r2, r3, #2
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800345c:	e056      	b.n	800350c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2202      	movs	r2, #2
 8003466:	4013      	ands	r3, r2
 8003468:	2b02      	cmp	r3, #2
 800346a:	d11b      	bne.n	80034a4 <HAL_SPI_TransmitReceive+0x1d4>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d016      	beq.n	80034a4 <HAL_SPI_TransmitReceive+0x1d4>
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	2b01      	cmp	r3, #1
 800347a:	d113      	bne.n	80034a4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	881a      	ldrh	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	1c9a      	adds	r2, r3, #2
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2201      	movs	r2, #1
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d11c      	bne.n	80034ec <HAL_SPI_TransmitReceive+0x21c>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2246      	movs	r2, #70	; 0x46
 80034b6:	5a9b      	ldrh	r3, [r3, r2]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d016      	beq.n	80034ec <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	b292      	uxth	r2, r2
 80034ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	1c9a      	adds	r2, r3, #2
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2246      	movs	r2, #70	; 0x46
 80034da:	5a9b      	ldrh	r3, [r3, r2]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b299      	uxth	r1, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2246      	movs	r2, #70	; 0x46
 80034e6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034e8:	2301      	movs	r3, #1
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034ec:	f7fd feba 	bl	8001264 <HAL_GetTick>
 80034f0:	0002      	movs	r2, r0
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d807      	bhi.n	800350c <HAL_SPI_TransmitReceive+0x23c>
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	3301      	adds	r3, #1
 8003500:	d004      	beq.n	800350c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003502:	2323      	movs	r3, #35	; 0x23
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2203      	movs	r2, #3
 8003508:	701a      	strb	r2, [r3, #0]
        goto error;
 800350a:	e0a2      	b.n	8003652 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1a3      	bne.n	800345e <HAL_SPI_TransmitReceive+0x18e>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2246      	movs	r2, #70	; 0x46
 800351a:	5a9b      	ldrh	r3, [r3, r2]
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d19d      	bne.n	800345e <HAL_SPI_TransmitReceive+0x18e>
 8003522:	e085      	b.n	8003630 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_SPI_TransmitReceive+0x268>
 800352c:	2312      	movs	r3, #18
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d000      	beq.n	8003538 <HAL_SPI_TransmitReceive+0x268>
 8003536:	e070      	b.n	800361a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	7812      	ldrb	r2, [r2, #0]
 8003544:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800355e:	e05c      	b.n	800361a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2202      	movs	r2, #2
 8003568:	4013      	ands	r3, r2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d11c      	bne.n	80035a8 <HAL_SPI_TransmitReceive+0x2d8>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d017      	beq.n	80035a8 <HAL_SPI_TransmitReceive+0x2d8>
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	2b01      	cmp	r3, #1
 800357c:	d114      	bne.n	80035a8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	7812      	ldrb	r2, [r2, #0]
 800358a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2201      	movs	r2, #1
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d11e      	bne.n	80035f4 <HAL_SPI_TransmitReceive+0x324>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2246      	movs	r2, #70	; 0x46
 80035ba:	5a9b      	ldrh	r3, [r3, r2]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d018      	beq.n	80035f4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	330c      	adds	r3, #12
 80035c8:	001a      	movs	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2246      	movs	r2, #70	; 0x46
 80035e2:	5a9b      	ldrh	r3, [r3, r2]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b299      	uxth	r1, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2246      	movs	r2, #70	; 0x46
 80035ee:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035f0:	2301      	movs	r3, #1
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035f4:	f7fd fe36 	bl	8001264 <HAL_GetTick>
 80035f8:	0002      	movs	r2, r0
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003600:	429a      	cmp	r2, r3
 8003602:	d802      	bhi.n	800360a <HAL_SPI_TransmitReceive+0x33a>
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	3301      	adds	r3, #1
 8003608:	d102      	bne.n	8003610 <HAL_SPI_TransmitReceive+0x340>
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003610:	2323      	movs	r3, #35	; 0x23
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	2203      	movs	r2, #3
 8003616:	701a      	strb	r2, [r3, #0]
        goto error;
 8003618:	e01b      	b.n	8003652 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d19d      	bne.n	8003560 <HAL_SPI_TransmitReceive+0x290>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2246      	movs	r2, #70	; 0x46
 8003628:	5a9b      	ldrh	r3, [r3, r2]
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d197      	bne.n	8003560 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	0018      	movs	r0, r3
 8003638:	f000 f94c 	bl	80038d4 <SPI_EndRxTxTransaction>
 800363c:	1e03      	subs	r3, r0, #0
 800363e:	d007      	beq.n	8003650 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003640:	2323      	movs	r3, #35	; 0x23
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	661a      	str	r2, [r3, #96]	; 0x60
 800364e:	e000      	b.n	8003652 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003650:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	225d      	movs	r2, #93	; 0x5d
 8003656:	2101      	movs	r1, #1
 8003658:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	225c      	movs	r2, #92	; 0x5c
 800365e:	2100      	movs	r1, #0
 8003660:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003662:	2323      	movs	r3, #35	; 0x23
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	781b      	ldrb	r3, [r3, #0]
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b00a      	add	sp, #40	; 0x28
 800366e:	bd80      	pop	{r7, pc}
 8003670:	ffffefff 	.word	0xffffefff

08003674 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003684:	f7fd fdee 	bl	8001264 <HAL_GetTick>
 8003688:	0002      	movs	r2, r0
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	18d3      	adds	r3, r2, r3
 8003692:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003694:	f7fd fde6 	bl	8001264 <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800369c:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	015b      	lsls	r3, r3, #5
 80036a2:	0d1b      	lsrs	r3, r3, #20
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	4353      	muls	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036aa:	e058      	b.n	800375e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	3301      	adds	r3, #1
 80036b0:	d055      	beq.n	800375e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036b2:	f7fd fdd7 	bl	8001264 <HAL_GetTick>
 80036b6:	0002      	movs	r2, r0
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d902      	bls.n	80036c8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d142      	bne.n	800374e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	21e0      	movs	r1, #224	; 0xe0
 80036d4:	438a      	bics	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	2382      	movs	r3, #130	; 0x82
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d113      	bne.n	800370c <SPI_WaitFlagStateUntilTimeout+0x98>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d005      	beq.n	80036fc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d107      	bne.n	800370c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2140      	movs	r1, #64	; 0x40
 8003708:	438a      	bics	r2, r1
 800370a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	019b      	lsls	r3, r3, #6
 8003714:	429a      	cmp	r2, r3
 8003716:	d110      	bne.n	800373a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	491a      	ldr	r1, [pc, #104]	; (800378c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003724:	400a      	ands	r2, r1
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	0189      	lsls	r1, r1, #6
 8003736:	430a      	orrs	r2, r1
 8003738:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	225d      	movs	r2, #93	; 0x5d
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	225c      	movs	r2, #92	; 0x5c
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e017      	b.n	800377e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3b01      	subs	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	425a      	negs	r2, r3
 800376e:	4153      	adcs	r3, r2
 8003770:	b2db      	uxtb	r3, r3
 8003772:	001a      	movs	r2, r3
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d197      	bne.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b008      	add	sp, #32
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	20000000 	.word	0x20000000
 800378c:	ffffdfff 	.word	0xffffdfff

08003790 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800379e:	2317      	movs	r3, #23
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037a6:	f7fd fd5d 	bl	8001264 <HAL_GetTick>
 80037aa:	0002      	movs	r2, r0
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	18d3      	adds	r3, r2, r3
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80037b6:	f7fd fd55 	bl	8001264 <HAL_GetTick>
 80037ba:	0003      	movs	r3, r0
 80037bc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	330c      	adds	r3, #12
 80037c4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037c6:	4b41      	ldr	r3, [pc, #260]	; (80038cc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	0013      	movs	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	189b      	adds	r3, r3, r2
 80037d0:	00da      	lsls	r2, r3, #3
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	0d1b      	lsrs	r3, r3, #20
 80037d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d8:	4353      	muls	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80037dc:	e068      	b.n	80038b0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	23c0      	movs	r3, #192	; 0xc0
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d10a      	bne.n	80037fe <SPI_WaitFifoStateUntilTimeout+0x6e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d107      	bne.n	80037fe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	2117      	movs	r1, #23
 80037f6:	187b      	adds	r3, r7, r1
 80037f8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	3301      	adds	r3, #1
 8003802:	d055      	beq.n	80038b0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003804:	f7fd fd2e 	bl	8001264 <HAL_GetTick>
 8003808:	0002      	movs	r2, r0
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	429a      	cmp	r2, r3
 8003812:	d902      	bls.n	800381a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d142      	bne.n	80038a0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	21e0      	movs	r1, #224	; 0xe0
 8003826:	438a      	bics	r2, r1
 8003828:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	2382      	movs	r3, #130	; 0x82
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	429a      	cmp	r2, r3
 8003834:	d113      	bne.n	800385e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	429a      	cmp	r2, r3
 8003840:	d005      	beq.n	800384e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	429a      	cmp	r2, r3
 800384c:	d107      	bne.n	800385e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2140      	movs	r1, #64	; 0x40
 800385a:	438a      	bics	r2, r1
 800385c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	429a      	cmp	r2, r3
 8003868:	d110      	bne.n	800388c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4916      	ldr	r1, [pc, #88]	; (80038d0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003876:	400a      	ands	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2180      	movs	r1, #128	; 0x80
 8003886:	0189      	lsls	r1, r1, #6
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	225d      	movs	r2, #93	; 0x5d
 8003890:	2101      	movs	r1, #1
 8003892:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	225c      	movs	r2, #92	; 0x5c
 8003898:	2100      	movs	r1, #0
 800389a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e010      	b.n	80038c2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	4013      	ands	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d18e      	bne.n	80037de <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b00a      	add	sp, #40	; 0x28
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	20000000 	.word	0x20000000
 80038d0:	ffffdfff 	.word	0xffffdfff

080038d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	23c0      	movs	r3, #192	; 0xc0
 80038e4:	0159      	lsls	r1, r3, #5
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	0013      	movs	r3, r2
 80038ee:	2200      	movs	r2, #0
 80038f0:	f7ff ff4e 	bl	8003790 <SPI_WaitFifoStateUntilTimeout>
 80038f4:	1e03      	subs	r3, r0, #0
 80038f6:	d007      	beq.n	8003908 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fc:	2220      	movs	r2, #32
 80038fe:	431a      	orrs	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e027      	b.n	8003958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	0013      	movs	r3, r2
 8003912:	2200      	movs	r2, #0
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	f7ff fead 	bl	8003674 <SPI_WaitFlagStateUntilTimeout>
 800391a:	1e03      	subs	r3, r0, #0
 800391c:	d007      	beq.n	800392e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003922:	2220      	movs	r2, #32
 8003924:	431a      	orrs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e014      	b.n	8003958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	23c0      	movs	r3, #192	; 0xc0
 8003932:	00d9      	lsls	r1, r3, #3
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	0013      	movs	r3, r2
 800393c:	2200      	movs	r2, #0
 800393e:	f7ff ff27 	bl	8003790 <SPI_WaitFifoStateUntilTimeout>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d007      	beq.n	8003956 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394a:	2220      	movs	r2, #32
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e000      	b.n	8003958 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}

08003960 <__libc_init_array>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	2600      	movs	r6, #0
 8003964:	4d0c      	ldr	r5, [pc, #48]	; (8003998 <__libc_init_array+0x38>)
 8003966:	4c0d      	ldr	r4, [pc, #52]	; (800399c <__libc_init_array+0x3c>)
 8003968:	1b64      	subs	r4, r4, r5
 800396a:	10a4      	asrs	r4, r4, #2
 800396c:	42a6      	cmp	r6, r4
 800396e:	d109      	bne.n	8003984 <__libc_init_array+0x24>
 8003970:	2600      	movs	r6, #0
 8003972:	f000 f821 	bl	80039b8 <_init>
 8003976:	4d0a      	ldr	r5, [pc, #40]	; (80039a0 <__libc_init_array+0x40>)
 8003978:	4c0a      	ldr	r4, [pc, #40]	; (80039a4 <__libc_init_array+0x44>)
 800397a:	1b64      	subs	r4, r4, r5
 800397c:	10a4      	asrs	r4, r4, #2
 800397e:	42a6      	cmp	r6, r4
 8003980:	d105      	bne.n	800398e <__libc_init_array+0x2e>
 8003982:	bd70      	pop	{r4, r5, r6, pc}
 8003984:	00b3      	lsls	r3, r6, #2
 8003986:	58eb      	ldr	r3, [r5, r3]
 8003988:	4798      	blx	r3
 800398a:	3601      	adds	r6, #1
 800398c:	e7ee      	b.n	800396c <__libc_init_array+0xc>
 800398e:	00b3      	lsls	r3, r6, #2
 8003990:	58eb      	ldr	r3, [r5, r3]
 8003992:	4798      	blx	r3
 8003994:	3601      	adds	r6, #1
 8003996:	e7f2      	b.n	800397e <__libc_init_array+0x1e>
 8003998:	08003a00 	.word	0x08003a00
 800399c:	08003a00 	.word	0x08003a00
 80039a0:	08003a00 	.word	0x08003a00
 80039a4:	08003a04 	.word	0x08003a04

080039a8 <memset>:
 80039a8:	0003      	movs	r3, r0
 80039aa:	1882      	adds	r2, r0, r2
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d100      	bne.n	80039b2 <memset+0xa>
 80039b0:	4770      	bx	lr
 80039b2:	7019      	strb	r1, [r3, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	e7f9      	b.n	80039ac <memset+0x4>

080039b8 <_init>:
 80039b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039be:	bc08      	pop	{r3}
 80039c0:	469e      	mov	lr, r3
 80039c2:	4770      	bx	lr

080039c4 <_fini>:
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ca:	bc08      	pop	{r3}
 80039cc:	469e      	mov	lr, r3
 80039ce:	4770      	bx	lr
